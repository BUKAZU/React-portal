'use strict';

var React = require('react');
var reactDom = require('react-dom');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function ownKeys$d(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$d(Object(source), true).forEach(function (key) {
        _defineProperty$e(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$d(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _classCallCheck$4(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties$7(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$7(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$7(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$7(Constructor, staticProps);
  return Constructor;
}

function _defineProperty$e(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends$f() {
  _extends$f = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$f.apply(this, arguments);
}

function _inherits$4(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf$4(subClass, superClass);
}

function _getPrototypeOf$4(o) {
  _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$4(o);
}

function _setPrototypeOf$4(o, p) {
  _setPrototypeOf$4 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf$4(o, p);
}

function _isNativeReflectConstruct$4() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _objectWithoutPropertiesLoose$b(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties$a(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose$b(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized$4(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn$4(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized$4(self);
}

function _createSuper$4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$4();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf$4(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$4(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn$4(this, result);
  };
}

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

function _toConsumableArray$5(arr) {
  return _arrayWithoutHoles$5(arr) || _iterableToArray$5(arr) || _unsupportedIterableToArray$6(arr) || _nonIterableSpread$5();
}

function _arrayWithoutHoles$5(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray$6(arr);
}

function _iterableToArray$5(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray$6(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$6(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$6(o, minLen);
}

function _arrayLikeToArray$6(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread$5() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray$6(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
	if (n.__esModule) return n;
	var a = Object.defineProperty({}, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var propTypes$1 = {exports: {}};

var reactIs$1 = {exports: {}};

var reactIs_production_min = {};

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;

var reactIs_development = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (process.env.NODE_ENV !== "production") {
  (function() {

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

reactIs_development.AsyncMode = AsyncMode;
reactIs_development.ConcurrentMode = ConcurrentMode;
reactIs_development.ContextConsumer = ContextConsumer;
reactIs_development.ContextProvider = ContextProvider;
reactIs_development.Element = Element;
reactIs_development.ForwardRef = ForwardRef;
reactIs_development.Fragment = Fragment;
reactIs_development.Lazy = Lazy;
reactIs_development.Memo = Memo;
reactIs_development.Portal = Portal;
reactIs_development.Profiler = Profiler;
reactIs_development.StrictMode = StrictMode;
reactIs_development.Suspense = Suspense;
reactIs_development.isAsyncMode = isAsyncMode;
reactIs_development.isConcurrentMode = isConcurrentMode;
reactIs_development.isContextConsumer = isContextConsumer;
reactIs_development.isContextProvider = isContextProvider;
reactIs_development.isElement = isElement;
reactIs_development.isForwardRef = isForwardRef;
reactIs_development.isFragment = isFragment;
reactIs_development.isLazy = isLazy;
reactIs_development.isMemo = isMemo;
reactIs_development.isPortal = isPortal;
reactIs_development.isProfiler = isProfiler;
reactIs_development.isStrictMode = isStrictMode;
reactIs_development.isSuspense = isSuspense;
reactIs_development.isValidElementType = isValidElementType;
reactIs_development.typeOf = typeOf;
  })();
}

if (process.env.NODE_ENV === 'production') {
  reactIs$1.exports = reactIs_production_min;
} else {
  reactIs$1.exports = reactIs_development;
}

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty$h = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty$h.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret$3 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret$3;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var printWarning$1 = function() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret$2 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
  var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning$1 = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has$2(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$2);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning$1(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning$1(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes$1.resetWarningCache = function() {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};

var checkPropTypes_1 = checkPropTypes$1;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactIs$1 = reactIs$1.exports;
var assign$1 = objectAssign;

var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
var checkPropTypes = checkPropTypes_1;

var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret$1) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret$1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs$1.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has$1(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret$1) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign$1({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = ReactPropTypesSecret_1;

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

var factoryWithThrowingShims = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  }  shim.isRequired = shim;
  function getShim() {
    return shim;
  }  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = reactIs$1.exports;

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  propTypes$1.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  propTypes$1.exports = factoryWithThrowingShims();
}

var PropTypes = propTypes$1.exports;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var genericMessage = "Invariant Violation";
var _a$3 = Object.setPrototypeOf, setPrototypeOf = _a$3 === void 0 ? function (obj, proto) {
    obj.__proto__ = proto;
    return obj;
} : _a$3;
var InvariantError = /** @class */ (function (_super) {
    __extends(InvariantError, _super);
    function InvariantError(message) {
        if (message === void 0) { message = genericMessage; }
        var _this = _super.call(this, typeof message === "number"
            ? genericMessage + ": " + message + " (see https://github.com/apollographql/invariant-packages)"
            : message) || this;
        _this.framesToPop = 1;
        _this.name = genericMessage;
        setPrototypeOf(_this, InvariantError.prototype);
        return _this;
    }
    return InvariantError;
}(Error));
function invariant$2(condition, message) {
    if (!condition) {
        throw new InvariantError(message);
    }
}
var verbosityLevels = ["debug", "log", "warn", "error", "silent"];
var verbosityLevel = verbosityLevels.indexOf("log");
function wrapConsoleMethod(name) {
    return function () {
        if (verbosityLevels.indexOf(name) >= verbosityLevel) {
            // Default to console.log if this host environment happens not to provide
            // all the console.* methods we need.
            var method = console[name] || console.log;
            return method.apply(console, arguments);
        }
    };
}
(function (invariant) {
    invariant.debug = wrapConsoleMethod("debug");
    invariant.log = wrapConsoleMethod("log");
    invariant.warn = wrapConsoleMethod("warn");
    invariant.error = wrapConsoleMethod("error");
})(invariant$2 || (invariant$2 = {}));

function maybe$1(thunk) {
    try {
        return thunk();
    }
    catch (_a) { }
}

var global$1 = (maybe$1(function () { return globalThis; }) ||
    maybe$1(function () { return window; }) ||
    maybe$1(function () { return self; }) ||
    maybe$1(function () { return global; }) ||
    maybe$1(function () { return Function("return this")(); }));

var __ = "__";
var GLOBAL_KEY = [__, __].join("DEV");
function getDEV() {
    try {
        return Boolean(__DEV__);
    }
    catch (_a) {
        Object.defineProperty(global$1, GLOBAL_KEY, {
            value: maybe$1(function () { return process.env.NODE_ENV; }) !== "production",
            enumerable: false,
            configurable: true,
            writable: true,
        });
        return global$1[GLOBAL_KEY];
    }
}
var DEV = getDEV();

function maybe(thunk) {
  try { return thunk() } catch (_) {}
}

var safeGlobal = (
  maybe(function() { return globalThis }) ||
  maybe(function() { return window }) ||
  maybe(function() { return self }) ||
  maybe(function() { return global }) ||
  maybe(function() { return Function("return this")() })
);

var needToRemove = false;

function install() {
  if (safeGlobal &&
      !maybe(function() { return process.env.NODE_ENV }) &&
      !maybe(function() { return process })) {
    Object.defineProperty(safeGlobal, "process", {
      value: {
        env: {
          // This default needs to be "production" instead of "development", to
          // avoid the problem https://github.com/graphql/graphql-js/pull/2894
          // will eventually solve, once merged and released.
          NODE_ENV: "production",
        },
      },
      // Let anyone else change global.process as they see fit, but hide it from
      // Object.keys(global) enumeration.
      configurable: true,
      enumerable: false,
      writable: true,
    });
    needToRemove = true;
  }
}

// Call install() at least once, when this module is imported.
install();

function remove() {
  if (needToRemove) {
    delete safeGlobal.process;
    needToRemove = false;
  }
}

function _typeof$9(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$9 = function _typeof(obj) { return typeof obj; }; } else { _typeof$9 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$9(obj); }

/**
 * Return true if `value` is object-like. A value is object-like if it's not
 * `null` and has a `typeof` result of "object".
 */
function isObjectLike$2(value) {
  return _typeof$9(value) == 'object' && value !== null;
}

// In ES2015 (or a polyfilled) environment, this will be Symbol.iterator

var SYMBOL_TO_STRING_TAG = typeof Symbol === 'function' && Symbol.toStringTag != null ? Symbol.toStringTag : '@@toStringTag';

/**
 * Represents a location in a Source.
 */

/**
 * Takes a Source and a UTF-8 character offset, and returns the corresponding
 * line and column as a SourceLocation.
 */
function getLocation(source, position) {
  var lineRegexp = /\r\n|[\n\r]/g;
  var line = 1;
  var column = position + 1;
  var match;

  while ((match = lineRegexp.exec(source.body)) && match.index < position) {
    line += 1;
    column = position + 1 - (match.index + match[0].length);
  }

  return {
    line: line,
    column: column
  };
}

/**
 * Render a helpful description of the location in the GraphQL Source document.
 */

function printLocation(location) {
  return printSourceLocation(location.source, getLocation(location.source, location.start));
}
/**
 * Render a helpful description of the location in the GraphQL Source document.
 */

function printSourceLocation(source, sourceLocation) {
  var firstLineColumnOffset = source.locationOffset.column - 1;
  var body = whitespace(firstLineColumnOffset) + source.body;
  var lineIndex = sourceLocation.line - 1;
  var lineOffset = source.locationOffset.line - 1;
  var lineNum = sourceLocation.line + lineOffset;
  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
  var columnNum = sourceLocation.column + columnOffset;
  var locationStr = "".concat(source.name, ":").concat(lineNum, ":").concat(columnNum, "\n");
  var lines = body.split(/\r\n|[\n\r]/g);
  var locationLine = lines[lineIndex]; // Special case for minified documents

  if (locationLine.length > 120) {
    var subLineIndex = Math.floor(columnNum / 80);
    var subLineColumnNum = columnNum % 80;
    var subLines = [];

    for (var i = 0; i < locationLine.length; i += 80) {
      subLines.push(locationLine.slice(i, i + 80));
    }

    return locationStr + printPrefixedLines([["".concat(lineNum), subLines[0]]].concat(subLines.slice(1, subLineIndex + 1).map(function (subLine) {
      return ['', subLine];
    }), [[' ', whitespace(subLineColumnNum - 1) + '^'], ['', subLines[subLineIndex + 1]]]));
  }

  return locationStr + printPrefixedLines([// Lines specified like this: ["prefix", "string"],
  ["".concat(lineNum - 1), lines[lineIndex - 1]], ["".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], ["".concat(lineNum + 1), lines[lineIndex + 1]]]);
}

function printPrefixedLines(lines) {
  var existingLines = lines.filter(function (_ref) {
    _ref[0];
        var line = _ref[1];
    return line !== undefined;
  });
  var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {
    var prefix = _ref2[0];
    return prefix.length;
  }));
  return existingLines.map(function (_ref3) {
    var prefix = _ref3[0],
        line = _ref3[1];
    return leftPad(padLen, prefix) + (line ? ' | ' + line : ' |');
  }).join('\n');
}

function whitespace(len) {
  return Array(len + 1).join(' ');
}

function leftPad(len, str) {
  return whitespace(len - str.length) + str;
}

function _typeof$8(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$8 = function _typeof(obj) { return typeof obj; }; } else { _typeof$8 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$8(obj); }

function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties$6(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass$6(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$6(Constructor.prototype, protoProps); if (staticProps) _defineProperties$6(Constructor, staticProps); return Constructor; }

function _inherits$3(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$3(subClass, superClass); }

function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf$3(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$3(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$3(this, result); }; }

function _possibleConstructorReturn$3(self, call) { if (call && (_typeof$8(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$3(self); }

function _assertThisInitialized$3(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf$3(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf$3(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct$3()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf$3(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf$3(o, p) { _setPrototypeOf$3 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$3(o, p); }

function _getPrototypeOf$3(o) { _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$3(o); }
/**
 * A GraphQLError describes an Error found during the parse, validate, or
 * execute phases of performing a GraphQL operation. In addition to a message
 * and stack trace, it also includes information about the locations in a
 * GraphQL document and/or execution result that correspond to the Error.
 */

var GraphQLError = /*#__PURE__*/function (_Error) {
  _inherits$3(GraphQLError, _Error);

  var _super = _createSuper$3(GraphQLError);

  /**
   * A message describing the Error for debugging purposes.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   *
   * Note: should be treated as readonly, despite invariant usage.
   */

  /**
   * An array of { line, column } locations within the source GraphQL document
   * which correspond to this error.
   *
   * Errors during validation often contain multiple locations, for example to
   * point out two things with the same name. Errors during execution include a
   * single location, the field which produced the error.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */

  /**
   * An array describing the JSON-path into the execution response which
   * corresponds to this error. Only included for errors during execution.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */

  /**
   * An array of GraphQL AST Nodes corresponding to this error.
   */

  /**
   * The source GraphQL document for the first location of this error.
   *
   * Note that if this Error represents more than one node, the source may not
   * represent nodes after the first node.
   */

  /**
   * An array of character offsets within the source GraphQL document
   * which correspond to this error.
   */

  /**
   * The original error thrown from a field resolver during execution.
   */

  /**
   * Extension fields to add to the formatted error.
   */
  function GraphQLError(message, nodes, source, positions, path, originalError, extensions) {
    var _locations2, _source2, _positions2, _extensions2;

    var _this;

    _classCallCheck$3(this, GraphQLError);

    _this = _super.call(this, message); // Compute list of blame nodes.

    var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.


    var _source = source;

    if (!_source && _nodes) {
      var _nodes$0$loc;

      _source = (_nodes$0$loc = _nodes[0].loc) === null || _nodes$0$loc === void 0 ? void 0 : _nodes$0$loc.source;
    }

    var _positions = positions;

    if (!_positions && _nodes) {
      _positions = _nodes.reduce(function (list, node) {
        if (node.loc) {
          list.push(node.loc.start);
        }

        return list;
      }, []);
    }

    if (_positions && _positions.length === 0) {
      _positions = undefined;
    }

    var _locations;

    if (positions && source) {
      _locations = positions.map(function (pos) {
        return getLocation(source, pos);
      });
    } else if (_nodes) {
      _locations = _nodes.reduce(function (list, node) {
        if (node.loc) {
          list.push(getLocation(node.loc.source, node.loc.start));
        }

        return list;
      }, []);
    }

    var _extensions = extensions;

    if (_extensions == null && originalError != null) {
      var originalExtensions = originalError.extensions;

      if (isObjectLike$2(originalExtensions)) {
        _extensions = originalExtensions;
      }
    }

    Object.defineProperties(_assertThisInitialized$3(_this), {
      name: {
        value: 'GraphQLError'
      },
      message: {
        value: message,
        // By being enumerable, JSON.stringify will include `message` in the
        // resulting output. This ensures that the simplest possible GraphQL
        // service adheres to the spec.
        enumerable: true,
        writable: true
      },
      locations: {
        // Coercing falsy values to undefined ensures they will not be included
        // in JSON.stringify() when not provided.
        value: (_locations2 = _locations) !== null && _locations2 !== void 0 ? _locations2 : undefined,
        // By being enumerable, JSON.stringify will include `locations` in the
        // resulting output. This ensures that the simplest possible GraphQL
        // service adheres to the spec.
        enumerable: _locations != null
      },
      path: {
        // Coercing falsy values to undefined ensures they will not be included
        // in JSON.stringify() when not provided.
        value: path !== null && path !== void 0 ? path : undefined,
        // By being enumerable, JSON.stringify will include `path` in the
        // resulting output. This ensures that the simplest possible GraphQL
        // service adheres to the spec.
        enumerable: path != null
      },
      nodes: {
        value: _nodes !== null && _nodes !== void 0 ? _nodes : undefined
      },
      source: {
        value: (_source2 = _source) !== null && _source2 !== void 0 ? _source2 : undefined
      },
      positions: {
        value: (_positions2 = _positions) !== null && _positions2 !== void 0 ? _positions2 : undefined
      },
      originalError: {
        value: originalError
      },
      extensions: {
        // Coercing falsy values to undefined ensures they will not be included
        // in JSON.stringify() when not provided.
        value: (_extensions2 = _extensions) !== null && _extensions2 !== void 0 ? _extensions2 : undefined,
        // By being enumerable, JSON.stringify will include `path` in the
        // resulting output. This ensures that the simplest possible GraphQL
        // service adheres to the spec.
        enumerable: _extensions != null
      }
    }); // Include (non-enumerable) stack trace.

    if (originalError !== null && originalError !== void 0 && originalError.stack) {
      Object.defineProperty(_assertThisInitialized$3(_this), 'stack', {
        value: originalError.stack,
        writable: true,
        configurable: true
      });
      return _possibleConstructorReturn$3(_this);
    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')


    if (Error.captureStackTrace) {
      Error.captureStackTrace(_assertThisInitialized$3(_this), GraphQLError);
    } else {
      Object.defineProperty(_assertThisInitialized$3(_this), 'stack', {
        value: Error().stack,
        writable: true,
        configurable: true
      });
    }

    return _this;
  }

  _createClass$6(GraphQLError, [{
    key: "toString",
    value: function toString() {
      return printError(this);
    } // FIXME: workaround to not break chai comparisons, should be remove in v16
    // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet

  }, {
    key: SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'Object';
    }
  }]);

  return GraphQLError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Prints a GraphQLError to a string, representing useful location information
 * about the error's position in the source.
 */

function printError(error) {
  var output = error.message;

  if (error.nodes) {
    for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {
      var node = _error$nodes2[_i2];

      if (node.loc) {
        output += '\n\n' + printLocation(node.loc);
      }
    }
  } else if (error.source && error.locations) {
    for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {
      var location = _error$locations2[_i4];
      output += '\n\n' + printSourceLocation(error.source, location);
    }
  }

  return output;
}

/**
 * Produces a GraphQLError representing a syntax error, containing useful
 * descriptive information about the syntax error's position in the source.
 */

function syntaxError(source, position, description) {
  return new GraphQLError("Syntax Error: ".concat(description), undefined, source, [position]);
}

/**
 * The set of allowed kind values for AST nodes.
 */
var Kind = Object.freeze({
  // Name
  NAME: 'Name',
  // Document
  DOCUMENT: 'Document',
  OPERATION_DEFINITION: 'OperationDefinition',
  VARIABLE_DEFINITION: 'VariableDefinition',
  SELECTION_SET: 'SelectionSet',
  FIELD: 'Field',
  ARGUMENT: 'Argument',
  // Fragments
  FRAGMENT_SPREAD: 'FragmentSpread',
  INLINE_FRAGMENT: 'InlineFragment',
  FRAGMENT_DEFINITION: 'FragmentDefinition',
  // Values
  VARIABLE: 'Variable',
  INT: 'IntValue',
  FLOAT: 'FloatValue',
  STRING: 'StringValue',
  BOOLEAN: 'BooleanValue',
  NULL: 'NullValue',
  ENUM: 'EnumValue',
  LIST: 'ListValue',
  OBJECT: 'ObjectValue',
  OBJECT_FIELD: 'ObjectField',
  // Directives
  DIRECTIVE: 'Directive',
  // Types
  NAMED_TYPE: 'NamedType',
  LIST_TYPE: 'ListType',
  NON_NULL_TYPE: 'NonNullType',
  // Type System Definitions
  SCHEMA_DEFINITION: 'SchemaDefinition',
  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',
  // Type Definitions
  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',
  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',
  FIELD_DEFINITION: 'FieldDefinition',
  INPUT_VALUE_DEFINITION: 'InputValueDefinition',
  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',
  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',
  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',
  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',
  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',
  // Directive Definitions
  DIRECTIVE_DEFINITION: 'DirectiveDefinition',
  // Type System Extensions
  SCHEMA_EXTENSION: 'SchemaExtension',
  // Type Extensions
  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',
  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',
  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',
  UNION_TYPE_EXTENSION: 'UnionTypeExtension',
  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',
  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'
});
/**
 * The enum type representing the possible kind values of AST nodes.
 */

function invariant$1(condition, message) {
  var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

  if (!booleanCondition) {
    throw new Error(message != null ? message : 'Unexpected invariant triggered.');
  }
}

// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;
var nodejsCustomInspectSymbol$1 = nodejsCustomInspectSymbol;

/**
 * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`
 */

function defineInspect(classObject) {
  var fn = classObject.prototype.toJSON;
  typeof fn === 'function' || invariant$1(0);
  classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')

  if (nodejsCustomInspectSymbol$1) {
    classObject.prototype[nodejsCustomInspectSymbol$1] = fn;
  }
}

/**
 * Contains a range of UTF-8 character offsets and token references that
 * identify the region of the source from which the AST derived.
 */
var Location = /*#__PURE__*/function () {
  /**
   * The character offset at which this Node begins.
   */

  /**
   * The character offset at which this Node ends.
   */

  /**
   * The Token at which this Node begins.
   */

  /**
   * The Token at which this Node ends.
   */

  /**
   * The Source document the AST represents.
   */
  function Location(startToken, endToken, source) {
    this.start = startToken.start;
    this.end = endToken.end;
    this.startToken = startToken;
    this.endToken = endToken;
    this.source = source;
  }

  var _proto = Location.prototype;

  _proto.toJSON = function toJSON() {
    return {
      start: this.start,
      end: this.end
    };
  };

  return Location;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

defineInspect(Location);
/**
 * Represents a range of characters represented by a lexical token
 * within a Source.
 */

var Token = /*#__PURE__*/function () {
  /**
   * The kind of Token.
   */

  /**
   * The character offset at which this Node begins.
   */

  /**
   * The character offset at which this Node ends.
   */

  /**
   * The 1-indexed line number on which this Token appears.
   */

  /**
   * The 1-indexed column number at which this Token begins.
   */

  /**
   * For non-punctuation tokens, represents the interpreted value of the token.
   */

  /**
   * Tokens exist as nodes in a double-linked-list amongst all tokens
   * including ignored tokens. <SOF> is always the first node and <EOF>
   * the last.
   */
  function Token(kind, start, end, line, column, prev, value) {
    this.kind = kind;
    this.start = start;
    this.end = end;
    this.line = line;
    this.column = column;
    this.value = value;
    this.prev = prev;
    this.next = null;
  }

  var _proto2 = Token.prototype;

  _proto2.toJSON = function toJSON() {
    return {
      kind: this.kind,
      value: this.value,
      line: this.line,
      column: this.column
    };
  };

  return Token;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

defineInspect(Token);
/**
 * @internal
 */

function isNode(maybeNode) {
  return maybeNode != null && typeof maybeNode.kind === 'string';
}
/**
 * The list of all possible AST node types.
 */

/**
 * An exported enum describing the different kinds of tokens that the
 * lexer emits.
 */
var TokenKind = Object.freeze({
  SOF: '<SOF>',
  EOF: '<EOF>',
  BANG: '!',
  DOLLAR: '$',
  AMP: '&',
  PAREN_L: '(',
  PAREN_R: ')',
  SPREAD: '...',
  COLON: ':',
  EQUALS: '=',
  AT: '@',
  BRACKET_L: '[',
  BRACKET_R: ']',
  BRACE_L: '{',
  PIPE: '|',
  BRACE_R: '}',
  NAME: 'Name',
  INT: 'Int',
  FLOAT: 'Float',
  STRING: 'String',
  BLOCK_STRING: 'BlockString',
  COMMENT: 'Comment'
});
/**
 * The enum type representing the token kinds values.
 */

function _typeof$7(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$7 = function _typeof(obj) { return typeof obj; }; } else { _typeof$7 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$7(obj); }
var MAX_ARRAY_LENGTH = 10;
var MAX_RECURSIVE_DEPTH = 2;
/**
 * Used to print values in error messages.
 */

function inspect(value) {
  return formatValue(value, []);
}

function formatValue(value, seenValues) {
  switch (_typeof$7(value)) {
    case 'string':
      return JSON.stringify(value);

    case 'function':
      return value.name ? "[function ".concat(value.name, "]") : '[function]';

    case 'object':
      if (value === null) {
        return 'null';
      }

      return formatObjectValue(value, seenValues);

    default:
      return String(value);
  }
}

function formatObjectValue(value, previouslySeenValues) {
  if (previouslySeenValues.indexOf(value) !== -1) {
    return '[Circular]';
  }

  var seenValues = [].concat(previouslySeenValues, [value]);
  var customInspectFn = getCustomFn(value);

  if (customInspectFn !== undefined) {
    var customValue = customInspectFn.call(value); // check for infinite recursion

    if (customValue !== value) {
      return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }

  return formatObject(value, seenValues);
}

function formatObject(object, seenValues) {
  var keys = Object.keys(object);

  if (keys.length === 0) {
    return '{}';
  }

  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return '[' + getObjectTag(object) + ']';
  }

  var properties = keys.map(function (key) {
    var value = formatValue(object[key], seenValues);
    return key + ': ' + value;
  });
  return '{ ' + properties.join(', ') + ' }';
}

function formatArray(array, seenValues) {
  if (array.length === 0) {
    return '[]';
  }

  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return '[Array]';
  }

  var len = Math.min(MAX_ARRAY_LENGTH, array.length);
  var remaining = array.length - len;
  var items = [];

  for (var i = 0; i < len; ++i) {
    items.push(formatValue(array[i], seenValues));
  }

  if (remaining === 1) {
    items.push('... 1 more item');
  } else if (remaining > 1) {
    items.push("... ".concat(remaining, " more items"));
  }

  return '[' + items.join(', ') + ']';
}

function getCustomFn(object) {
  var customInspectFn = object[String(nodejsCustomInspectSymbol$1)];

  if (typeof customInspectFn === 'function') {
    return customInspectFn;
  }

  if (typeof object.inspect === 'function') {
    return object.inspect;
  }
}

function getObjectTag(object) {
  var tag = Object.prototype.toString.call(object).replace(/^\[object /, '').replace(/]$/, '');

  if (tag === 'Object' && typeof object.constructor === 'function') {
    var name = object.constructor.name;

    if (typeof name === 'string' && name !== '') {
      return name;
    }
  }

  return tag;
}

function devAssert(condition, message) {
  var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

  if (!booleanCondition) {
    throw new Error(message);
  }
}

function _typeof$6(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$6 = function _typeof(obj) { return typeof obj; }; } else { _typeof$6 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$6(obj); }
/**
 * A replacement for instanceof which includes an error warning when multi-realm
 * constructors are detected.
 */

// See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
// See: https://webpack.js.org/guides/production/
var instanceOf = process.env.NODE_ENV === 'production' ? // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
// eslint-disable-next-line no-shadow
function instanceOf(value, constructor) {
  return value instanceof constructor;
} : // eslint-disable-next-line no-shadow
function instanceOf(value, constructor) {
  if (value instanceof constructor) {
    return true;
  }

  if (_typeof$6(value) === 'object' && value !== null) {
    var _value$constructor;

    var className = constructor.prototype[Symbol.toStringTag];
    var valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.
    Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name;

    if (className === valueClassName) {
      var stringifiedValue = inspect(value);
      throw new Error("Cannot use ".concat(className, " \"").concat(stringifiedValue, "\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results."));
    }
  }

  return false;
};

function _defineProperties$5(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass$5(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$5(Constructor.prototype, protoProps); if (staticProps) _defineProperties$5(Constructor, staticProps); return Constructor; }

/**
 * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are
 * optional, but they are useful for clients who store GraphQL documents in source files.
 * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might
 * be useful for `name` to be `"Foo.graphql"` and location to be `{ line: 40, column: 1 }`.
 * The `line` and `column` properties in `locationOffset` are 1-indexed.
 */
var Source = /*#__PURE__*/function () {
  function Source(body) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GraphQL request';
    var locationOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
      line: 1,
      column: 1
    };
    typeof body === 'string' || devAssert(0, "Body must be a string. Received: ".concat(inspect(body), "."));
    this.body = body;
    this.name = name;
    this.locationOffset = locationOffset;
    this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive.');
    this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive.');
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet


  _createClass$5(Source, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'Source';
    }
  }]);

  return Source;
}();
/**
 * Test if the given value is a Source object.
 *
 * @internal
 */

// eslint-disable-next-line no-redeclare
function isSource(source) {
  return instanceOf(source, Source);
}

/**
 * The set of allowed directive location values.
 */
var DirectiveLocation = Object.freeze({
  // Request Definitions
  QUERY: 'QUERY',
  MUTATION: 'MUTATION',
  SUBSCRIPTION: 'SUBSCRIPTION',
  FIELD: 'FIELD',
  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',
  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',
  INLINE_FRAGMENT: 'INLINE_FRAGMENT',
  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',
  // Type System Definitions
  SCHEMA: 'SCHEMA',
  SCALAR: 'SCALAR',
  OBJECT: 'OBJECT',
  FIELD_DEFINITION: 'FIELD_DEFINITION',
  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',
  INTERFACE: 'INTERFACE',
  UNION: 'UNION',
  ENUM: 'ENUM',
  ENUM_VALUE: 'ENUM_VALUE',
  INPUT_OBJECT: 'INPUT_OBJECT',
  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'
});
/**
 * The enum type representing the directive location values.
 */

/**
 * Produces the value of a block string from its parsed raw value, similar to
 * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
 *
 * This implements the GraphQL spec's BlockStringValue() static algorithm.
 *
 * @internal
 */
function dedentBlockStringValue(rawString) {
  // Expand a block string's raw value into independent lines.
  var lines = rawString.split(/\r\n|[\n\r]/g); // Remove common indentation from all lines but first.

  var commonIndent = getBlockStringIndentation(rawString);

  if (commonIndent !== 0) {
    for (var i = 1; i < lines.length; i++) {
      lines[i] = lines[i].slice(commonIndent);
    }
  } // Remove leading and trailing blank lines.


  var startLine = 0;

  while (startLine < lines.length && isBlank(lines[startLine])) {
    ++startLine;
  }

  var endLine = lines.length;

  while (endLine > startLine && isBlank(lines[endLine - 1])) {
    --endLine;
  } // Return a string of the lines joined with U+000A.


  return lines.slice(startLine, endLine).join('\n');
}

function isBlank(str) {
  for (var i = 0; i < str.length; ++i) {
    if (str[i] !== ' ' && str[i] !== '\t') {
      return false;
    }
  }

  return true;
}
/**
 * @internal
 */


function getBlockStringIndentation(value) {
  var _commonIndent;

  var isFirstLine = true;
  var isEmptyLine = true;
  var indent = 0;
  var commonIndent = null;

  for (var i = 0; i < value.length; ++i) {
    switch (value.charCodeAt(i)) {
      case 13:
        //  \r
        if (value.charCodeAt(i + 1) === 10) {
          ++i; // skip \r\n as one symbol
        }

      // falls through

      case 10:
        //  \n
        isFirstLine = false;
        isEmptyLine = true;
        indent = 0;
        break;

      case 9: //   \t

      case 32:
        //  <space>
        ++indent;
        break;

      default:
        if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {
          commonIndent = indent;
        }

        isEmptyLine = false;
    }
  }

  return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;
}
/**
 * Print a block string in the indented block form by adding a leading and
 * trailing blank line. However, if a block string starts with whitespace and is
 * a single-line, adding a leading blank line would strip that whitespace.
 *
 * @internal
 */

function printBlockString(value) {
  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var isSingleLine = value.indexOf('\n') === -1;
  var hasLeadingSpace = value[0] === ' ' || value[0] === '\t';
  var hasTrailingQuote = value[value.length - 1] === '"';
  var hasTrailingSlash = value[value.length - 1] === '\\';
  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
  var result = ''; // Format a multi-line block quote to account for leading space.

  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
    result += '\n' + indentation;
  }

  result += indentation ? value.replace(/\n/g, '\n' + indentation) : value;

  if (printAsMultipleLines) {
    result += '\n';
  }

  return '"""' + result.replace(/"""/g, '\\"""') + '"""';
}

/**
 * Given a Source object, creates a Lexer for that source.
 * A Lexer is a stateful stream generator in that every time
 * it is advanced, it returns the next token in the Source. Assuming the
 * source lexes, the final Token emitted by the lexer will be of kind
 * EOF, after which the lexer will repeatedly return the same EOF token
 * whenever called.
 */

var Lexer = /*#__PURE__*/function () {
  /**
   * The previously focused non-ignored token.
   */

  /**
   * The currently focused non-ignored token.
   */

  /**
   * The (1-indexed) line containing the current token.
   */

  /**
   * The character offset at which the current line begins.
   */
  function Lexer(source) {
    var startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);
    this.source = source;
    this.lastToken = startOfFileToken;
    this.token = startOfFileToken;
    this.line = 1;
    this.lineStart = 0;
  }
  /**
   * Advances the token stream to the next non-ignored token.
   */


  var _proto = Lexer.prototype;

  _proto.advance = function advance() {
    this.lastToken = this.token;
    var token = this.token = this.lookahead();
    return token;
  }
  /**
   * Looks ahead and returns the next non-ignored token, but does not change
   * the state of Lexer.
   */
  ;

  _proto.lookahead = function lookahead() {
    var token = this.token;

    if (token.kind !== TokenKind.EOF) {
      do {
        var _token$next;

        // Note: next is only mutable during parsing, so we cast to allow this.
        token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);
      } while (token.kind === TokenKind.COMMENT);
    }

    return token;
  };

  return Lexer;
}();
/**
 * @internal
 */

function isPunctuatorTokenKind(kind) {
  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;
}

function printCharCode(code) {
  return (// NaN/undefined represents access beyond the end of the file.
    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.
    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.
    "\"\\u".concat(('00' + code.toString(16).toUpperCase()).slice(-4), "\"")
  );
}
/**
 * Gets the next token from the source starting at the given position.
 *
 * This skips over whitespace until it finds the next lexable token, then lexes
 * punctuators immediately or calls the appropriate helper function for more
 * complicated tokens.
 */


function readToken(lexer, prev) {
  var source = lexer.source;
  var body = source.body;
  var bodyLength = body.length;
  var pos = prev.end;

  while (pos < bodyLength) {
    var code = body.charCodeAt(pos);
    var _line = lexer.line;

    var _col = 1 + pos - lexer.lineStart; // SourceCharacter


    switch (code) {
      case 0xfeff: // <BOM>

      case 9: //   \t

      case 32: //  <space>

      case 44:
        //  ,
        ++pos;
        continue;

      case 10:
        //  \n
        ++pos;
        ++lexer.line;
        lexer.lineStart = pos;
        continue;

      case 13:
        //  \r
        if (body.charCodeAt(pos + 1) === 10) {
          pos += 2;
        } else {
          ++pos;
        }

        ++lexer.line;
        lexer.lineStart = pos;
        continue;

      case 33:
        //  !
        return new Token(TokenKind.BANG, pos, pos + 1, _line, _col, prev);

      case 35:
        //  #
        return readComment(source, pos, _line, _col, prev);

      case 36:
        //  $
        return new Token(TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);

      case 38:
        //  &
        return new Token(TokenKind.AMP, pos, pos + 1, _line, _col, prev);

      case 40:
        //  (
        return new Token(TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);

      case 41:
        //  )
        return new Token(TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);

      case 46:
        //  .
        if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {
          return new Token(TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);
        }

        break;

      case 58:
        //  :
        return new Token(TokenKind.COLON, pos, pos + 1, _line, _col, prev);

      case 61:
        //  =
        return new Token(TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);

      case 64:
        //  @
        return new Token(TokenKind.AT, pos, pos + 1, _line, _col, prev);

      case 91:
        //  [
        return new Token(TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);

      case 93:
        //  ]
        return new Token(TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);

      case 123:
        // {
        return new Token(TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);

      case 124:
        // |
        return new Token(TokenKind.PIPE, pos, pos + 1, _line, _col, prev);

      case 125:
        // }
        return new Token(TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);

      case 34:
        //  "
        if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {
          return readBlockString(source, pos, _line, _col, prev, lexer);
        }

        return readString(source, pos, _line, _col, prev);

      case 45: //  -

      case 48: //  0

      case 49: //  1

      case 50: //  2

      case 51: //  3

      case 52: //  4

      case 53: //  5

      case 54: //  6

      case 55: //  7

      case 56: //  8

      case 57:
        //  9
        return readNumber(source, pos, code, _line, _col, prev);

      case 65: //  A

      case 66: //  B

      case 67: //  C

      case 68: //  D

      case 69: //  E

      case 70: //  F

      case 71: //  G

      case 72: //  H

      case 73: //  I

      case 74: //  J

      case 75: //  K

      case 76: //  L

      case 77: //  M

      case 78: //  N

      case 79: //  O

      case 80: //  P

      case 81: //  Q

      case 82: //  R

      case 83: //  S

      case 84: //  T

      case 85: //  U

      case 86: //  V

      case 87: //  W

      case 88: //  X

      case 89: //  Y

      case 90: //  Z

      case 95: //  _

      case 97: //  a

      case 98: //  b

      case 99: //  c

      case 100: // d

      case 101: // e

      case 102: // f

      case 103: // g

      case 104: // h

      case 105: // i

      case 106: // j

      case 107: // k

      case 108: // l

      case 109: // m

      case 110: // n

      case 111: // o

      case 112: // p

      case 113: // q

      case 114: // r

      case 115: // s

      case 116: // t

      case 117: // u

      case 118: // v

      case 119: // w

      case 120: // x

      case 121: // y

      case 122:
        // z
        return readName(source, pos, _line, _col, prev);
    }

    throw syntaxError(source, pos, unexpectedCharacterMessage(code));
  }

  var line = lexer.line;
  var col = 1 + pos - lexer.lineStart;
  return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
}
/**
 * Report a message that an unexpected character was encountered.
 */


function unexpectedCharacterMessage(code) {
  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
    return "Cannot contain the invalid character ".concat(printCharCode(code), ".");
  }

  if (code === 39) {
    // '
    return 'Unexpected single quote character (\'), did you mean to use a double quote (")?';
  }

  return "Cannot parse the unexpected character ".concat(printCharCode(code), ".");
}
/**
 * Reads a comment token from the source file.
 *
 * #[\u0009\u0020-\uFFFF]*
 */


function readComment(source, start, line, col, prev) {
  var body = source.body;
  var code;
  var position = start;

  do {
    code = body.charCodeAt(++position);
  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator
  code > 0x001f || code === 0x0009));

  return new Token(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));
}
/**
 * Reads a number token from the source file, either a float
 * or an int depending on whether a decimal point appears.
 *
 * Int:   -?(0|[1-9][0-9]*)
 * Float: -?(0|[1-9][0-9]*)(\.[0-9]+)?((E|e)(+|-)?[0-9]+)?
 */


function readNumber(source, start, firstCode, line, col, prev) {
  var body = source.body;
  var code = firstCode;
  var position = start;
  var isFloat = false;

  if (code === 45) {
    // -
    code = body.charCodeAt(++position);
  }

  if (code === 48) {
    // 0
    code = body.charCodeAt(++position);

    if (code >= 48 && code <= 57) {
      throw syntaxError(source, position, "Invalid number, unexpected digit after 0: ".concat(printCharCode(code), "."));
    }
  } else {
    position = readDigits(source, position, code);
    code = body.charCodeAt(position);
  }

  if (code === 46) {
    // .
    isFloat = true;
    code = body.charCodeAt(++position);
    position = readDigits(source, position, code);
    code = body.charCodeAt(position);
  }

  if (code === 69 || code === 101) {
    // E e
    isFloat = true;
    code = body.charCodeAt(++position);

    if (code === 43 || code === 45) {
      // + -
      code = body.charCodeAt(++position);
    }

    position = readDigits(source, position, code);
    code = body.charCodeAt(position);
  } // Numbers cannot be followed by . or NameStart


  if (code === 46 || isNameStart(code)) {
    throw syntaxError(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
  }

  return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));
}
/**
 * Returns the new position in the source after reading digits.
 */


function readDigits(source, start, firstCode) {
  var body = source.body;
  var position = start;
  var code = firstCode;

  if (code >= 48 && code <= 57) {
    // 0 - 9
    do {
      code = body.charCodeAt(++position);
    } while (code >= 48 && code <= 57); // 0 - 9


    return position;
  }

  throw syntaxError(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
}
/**
 * Reads a string token from the source file.
 *
 * "([^"\\\u000A\u000D]|(\\(u[0-9a-fA-F]{4}|["\\/bfnrt])))*"
 */


function readString(source, start, line, col, prev) {
  var body = source.body;
  var position = start + 1;
  var chunkStart = position;
  var code = 0;
  var value = '';

  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator
  code !== 0x000a && code !== 0x000d) {
    // Closing Quote (")
    if (code === 34) {
      value += body.slice(chunkStart, position);
      return new Token(TokenKind.STRING, start, position + 1, line, col, prev, value);
    } // SourceCharacter


    if (code < 0x0020 && code !== 0x0009) {
      throw syntaxError(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
    }

    ++position;

    if (code === 92) {
      // \
      value += body.slice(chunkStart, position - 1);
      code = body.charCodeAt(position);

      switch (code) {
        case 34:
          value += '"';
          break;

        case 47:
          value += '/';
          break;

        case 92:
          value += '\\';
          break;

        case 98:
          value += '\b';
          break;

        case 102:
          value += '\f';
          break;

        case 110:
          value += '\n';
          break;

        case 114:
          value += '\r';
          break;

        case 116:
          value += '\t';
          break;

        case 117:
          {
            // uXXXX
            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));

            if (charCode < 0) {
              var invalidSequence = body.slice(position + 1, position + 5);
              throw syntaxError(source, position, "Invalid character escape sequence: \\u".concat(invalidSequence, "."));
            }

            value += String.fromCharCode(charCode);
            position += 4;
            break;
          }

        default:
          throw syntaxError(source, position, "Invalid character escape sequence: \\".concat(String.fromCharCode(code), "."));
      }

      ++position;
      chunkStart = position;
    }
  }

  throw syntaxError(source, position, 'Unterminated string.');
}
/**
 * Reads a block string token from the source file.
 *
 * """("?"?(\\"""|\\(?!=""")|[^"\\]))*"""
 */


function readBlockString(source, start, line, col, prev, lexer) {
  var body = source.body;
  var position = start + 3;
  var chunkStart = position;
  var code = 0;
  var rawValue = '';

  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {
    // Closing Triple-Quote (""")
    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
      rawValue += body.slice(chunkStart, position);
      return new Token(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));
    } // SourceCharacter


    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
      throw syntaxError(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
    }

    if (code === 10) {
      // new line
      ++position;
      ++lexer.line;
      lexer.lineStart = position;
    } else if (code === 13) {
      // carriage return
      if (body.charCodeAt(position + 1) === 10) {
        position += 2;
      } else {
        ++position;
      }

      ++lexer.line;
      lexer.lineStart = position;
    } else if ( // Escape Triple-Quote (\""")
    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
      rawValue += body.slice(chunkStart, position) + '"""';
      position += 4;
      chunkStart = position;
    } else {
      ++position;
    }
  }

  throw syntaxError(source, position, 'Unterminated string.');
}
/**
 * Converts four hexadecimal chars to the integer that the
 * string represents. For example, uniCharCode('0','0','0','f')
 * will return 15, and uniCharCode('0','0','f','f') returns 255.
 *
 * Returns a negative number on error, if a char was invalid.
 *
 * This is implemented by noting that char2hex() returns -1 on error,
 * which means the result of ORing the char2hex() will also be negative.
 */


function uniCharCode(a, b, c, d) {
  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);
}
/**
 * Converts a hex character to its integer value.
 * '0' becomes 0, '9' becomes 9
 * 'A' becomes 10, 'F' becomes 15
 * 'a' becomes 10, 'f' becomes 15
 *
 * Returns -1 on error.
 */


function char2hex(a) {
  return a >= 48 && a <= 57 ? a - 48 // 0-9
  : a >= 65 && a <= 70 ? a - 55 // A-F
  : a >= 97 && a <= 102 ? a - 87 // a-f
  : -1;
}
/**
 * Reads an alphanumeric + underscore name from the source.
 *
 * [_A-Za-z][_0-9A-Za-z]*
 */


function readName(source, start, line, col, prev) {
  var body = source.body;
  var bodyLength = body.length;
  var position = start + 1;
  var code = 0;

  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _
  code >= 48 && code <= 57 || // 0-9
  code >= 65 && code <= 90 || // A-Z
  code >= 97 && code <= 122) // a-z
  ) {
    ++position;
  }

  return new Token(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));
} // _ A-Z a-z


function isNameStart(code) {
  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;
}

/**
 * Configuration options to control parser behavior
 */

/**
 * Given a GraphQL source, parses it into a Document.
 * Throws GraphQLError if a syntax error is encountered.
 */
function parse$1r(source, options) {
  var parser = new Parser(source, options);
  return parser.parseDocument();
}
/**
 * This class is exported only to assist people in implementing their own parsers
 * without duplicating too much code and should be used only as last resort for cases
 * such as experimental syntax or if certain features could not be contributed upstream.
 *
 * It is still part of the internal API and is versioned, so any changes to it are never
 * considered breaking changes. If you still need to support multiple versions of the
 * library, please use the `versionInfo` variable for version detection.
 *
 * @internal
 */

var Parser = /*#__PURE__*/function () {
  function Parser(source, options) {
    var sourceObj = isSource(source) ? source : new Source(source);
    this._lexer = new Lexer(sourceObj);
    this._options = options;
  }
  /**
   * Converts a name lex token into a name parse node.
   */


  var _proto = Parser.prototype;

  _proto.parseName = function parseName() {
    var token = this.expectToken(TokenKind.NAME);
    return {
      kind: Kind.NAME,
      value: token.value,
      loc: this.loc(token)
    };
  } // Implements the parsing rules in the Document section.

  /**
   * Document : Definition+
   */
  ;

  _proto.parseDocument = function parseDocument() {
    var start = this._lexer.token;
    return {
      kind: Kind.DOCUMENT,
      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),
      loc: this.loc(start)
    };
  }
  /**
   * Definition :
   *   - ExecutableDefinition
   *   - TypeSystemDefinition
   *   - TypeSystemExtension
   *
   * ExecutableDefinition :
   *   - OperationDefinition
   *   - FragmentDefinition
   */
  ;

  _proto.parseDefinition = function parseDefinition() {
    if (this.peek(TokenKind.NAME)) {
      switch (this._lexer.token.value) {
        case 'query':
        case 'mutation':
        case 'subscription':
          return this.parseOperationDefinition();

        case 'fragment':
          return this.parseFragmentDefinition();

        case 'schema':
        case 'scalar':
        case 'type':
        case 'interface':
        case 'union':
        case 'enum':
        case 'input':
        case 'directive':
          return this.parseTypeSystemDefinition();

        case 'extend':
          return this.parseTypeSystemExtension();
      }
    } else if (this.peek(TokenKind.BRACE_L)) {
      return this.parseOperationDefinition();
    } else if (this.peekDescription()) {
      return this.parseTypeSystemDefinition();
    }

    throw this.unexpected();
  } // Implements the parsing rules in the Operations section.

  /**
   * OperationDefinition :
   *  - SelectionSet
   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
   */
  ;

  _proto.parseOperationDefinition = function parseOperationDefinition() {
    var start = this._lexer.token;

    if (this.peek(TokenKind.BRACE_L)) {
      return {
        kind: Kind.OPERATION_DEFINITION,
        operation: 'query',
        name: undefined,
        variableDefinitions: [],
        directives: [],
        selectionSet: this.parseSelectionSet(),
        loc: this.loc(start)
      };
    }

    var operation = this.parseOperationType();
    var name;

    if (this.peek(TokenKind.NAME)) {
      name = this.parseName();
    }

    return {
      kind: Kind.OPERATION_DEFINITION,
      operation: operation,
      name: name,
      variableDefinitions: this.parseVariableDefinitions(),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
      loc: this.loc(start)
    };
  }
  /**
   * OperationType : one of query mutation subscription
   */
  ;

  _proto.parseOperationType = function parseOperationType() {
    var operationToken = this.expectToken(TokenKind.NAME);

    switch (operationToken.value) {
      case 'query':
        return 'query';

      case 'mutation':
        return 'mutation';

      case 'subscription':
        return 'subscription';
    }

    throw this.unexpected(operationToken);
  }
  /**
   * VariableDefinitions : ( VariableDefinition+ )
   */
  ;

  _proto.parseVariableDefinitions = function parseVariableDefinitions() {
    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);
  }
  /**
   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
   */
  ;

  _proto.parseVariableDefinition = function parseVariableDefinition() {
    var start = this._lexer.token;
    return {
      kind: Kind.VARIABLE_DEFINITION,
      variable: this.parseVariable(),
      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),
      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,
      directives: this.parseDirectives(true),
      loc: this.loc(start)
    };
  }
  /**
   * Variable : $ Name
   */
  ;

  _proto.parseVariable = function parseVariable() {
    var start = this._lexer.token;
    this.expectToken(TokenKind.DOLLAR);
    return {
      kind: Kind.VARIABLE,
      name: this.parseName(),
      loc: this.loc(start)
    };
  }
  /**
   * SelectionSet : { Selection+ }
   */
  ;

  _proto.parseSelectionSet = function parseSelectionSet() {
    var start = this._lexer.token;
    return {
      kind: Kind.SELECTION_SET,
      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),
      loc: this.loc(start)
    };
  }
  /**
   * Selection :
   *   - Field
   *   - FragmentSpread
   *   - InlineFragment
   */
  ;

  _proto.parseSelection = function parseSelection() {
    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
  }
  /**
   * Field : Alias? Name Arguments? Directives? SelectionSet?
   *
   * Alias : Name :
   */
  ;

  _proto.parseField = function parseField() {
    var start = this._lexer.token;
    var nameOrAlias = this.parseName();
    var alias;
    var name;

    if (this.expectOptionalToken(TokenKind.COLON)) {
      alias = nameOrAlias;
      name = this.parseName();
    } else {
      name = nameOrAlias;
    }

    return {
      kind: Kind.FIELD,
      alias: alias,
      name: name,
      arguments: this.parseArguments(false),
      directives: this.parseDirectives(false),
      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,
      loc: this.loc(start)
    };
  }
  /**
   * Arguments[Const] : ( Argument[?Const]+ )
   */
  ;

  _proto.parseArguments = function parseArguments(isConst) {
    var item = isConst ? this.parseConstArgument : this.parseArgument;
    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);
  }
  /**
   * Argument[Const] : Name : Value[?Const]
   */
  ;

  _proto.parseArgument = function parseArgument() {
    var start = this._lexer.token;
    var name = this.parseName();
    this.expectToken(TokenKind.COLON);
    return {
      kind: Kind.ARGUMENT,
      name: name,
      value: this.parseValueLiteral(false),
      loc: this.loc(start)
    };
  };

  _proto.parseConstArgument = function parseConstArgument() {
    var start = this._lexer.token;
    return {
      kind: Kind.ARGUMENT,
      name: this.parseName(),
      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),
      loc: this.loc(start)
    };
  } // Implements the parsing rules in the Fragments section.

  /**
   * Corresponds to both FragmentSpread and InlineFragment in the spec.
   *
   * FragmentSpread : ... FragmentName Directives?
   *
   * InlineFragment : ... TypeCondition? Directives? SelectionSet
   */
  ;

  _proto.parseFragment = function parseFragment() {
    var start = this._lexer.token;
    this.expectToken(TokenKind.SPREAD);
    var hasTypeCondition = this.expectOptionalKeyword('on');

    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {
      return {
        kind: Kind.FRAGMENT_SPREAD,
        name: this.parseFragmentName(),
        directives: this.parseDirectives(false),
        loc: this.loc(start)
      };
    }

    return {
      kind: Kind.INLINE_FRAGMENT,
      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
      loc: this.loc(start)
    };
  }
  /**
   * FragmentDefinition :
   *   - fragment FragmentName on TypeCondition Directives? SelectionSet
   *
   * TypeCondition : NamedType
   */
  ;

  _proto.parseFragmentDefinition = function parseFragmentDefinition() {
    var _this$_options;

    var start = this._lexer.token;
    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes
    // the grammar of FragmentDefinition:
    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet

    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {
      return {
        kind: Kind.FRAGMENT_DEFINITION,
        name: this.parseFragmentName(),
        variableDefinitions: this.parseVariableDefinitions(),
        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet(),
        loc: this.loc(start)
      };
    }

    return {
      kind: Kind.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
      loc: this.loc(start)
    };
  }
  /**
   * FragmentName : Name but not `on`
   */
  ;

  _proto.parseFragmentName = function parseFragmentName() {
    if (this._lexer.token.value === 'on') {
      throw this.unexpected();
    }

    return this.parseName();
  } // Implements the parsing rules in the Values section.

  /**
   * Value[Const] :
   *   - [~Const] Variable
   *   - IntValue
   *   - FloatValue
   *   - StringValue
   *   - BooleanValue
   *   - NullValue
   *   - EnumValue
   *   - ListValue[?Const]
   *   - ObjectValue[?Const]
   *
   * BooleanValue : one of `true` `false`
   *
   * NullValue : `null`
   *
   * EnumValue : Name but not `true`, `false` or `null`
   */
  ;

  _proto.parseValueLiteral = function parseValueLiteral(isConst) {
    var token = this._lexer.token;

    switch (token.kind) {
      case TokenKind.BRACKET_L:
        return this.parseList(isConst);

      case TokenKind.BRACE_L:
        return this.parseObject(isConst);

      case TokenKind.INT:
        this._lexer.advance();

        return {
          kind: Kind.INT,
          value: token.value,
          loc: this.loc(token)
        };

      case TokenKind.FLOAT:
        this._lexer.advance();

        return {
          kind: Kind.FLOAT,
          value: token.value,
          loc: this.loc(token)
        };

      case TokenKind.STRING:
      case TokenKind.BLOCK_STRING:
        return this.parseStringLiteral();

      case TokenKind.NAME:
        this._lexer.advance();

        switch (token.value) {
          case 'true':
            return {
              kind: Kind.BOOLEAN,
              value: true,
              loc: this.loc(token)
            };

          case 'false':
            return {
              kind: Kind.BOOLEAN,
              value: false,
              loc: this.loc(token)
            };

          case 'null':
            return {
              kind: Kind.NULL,
              loc: this.loc(token)
            };

          default:
            return {
              kind: Kind.ENUM,
              value: token.value,
              loc: this.loc(token)
            };
        }

      case TokenKind.DOLLAR:
        if (!isConst) {
          return this.parseVariable();
        }

        break;
    }

    throw this.unexpected();
  };

  _proto.parseStringLiteral = function parseStringLiteral() {
    var token = this._lexer.token;

    this._lexer.advance();

    return {
      kind: Kind.STRING,
      value: token.value,
      block: token.kind === TokenKind.BLOCK_STRING,
      loc: this.loc(token)
    };
  }
  /**
   * ListValue[Const] :
   *   - [ ]
   *   - [ Value[?Const]+ ]
   */
  ;

  _proto.parseList = function parseList(isConst) {
    var _this = this;

    var start = this._lexer.token;

    var item = function item() {
      return _this.parseValueLiteral(isConst);
    };

    return {
      kind: Kind.LIST,
      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),
      loc: this.loc(start)
    };
  }
  /**
   * ObjectValue[Const] :
   *   - { }
   *   - { ObjectField[?Const]+ }
   */
  ;

  _proto.parseObject = function parseObject(isConst) {
    var _this2 = this;

    var start = this._lexer.token;

    var item = function item() {
      return _this2.parseObjectField(isConst);
    };

    return {
      kind: Kind.OBJECT,
      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),
      loc: this.loc(start)
    };
  }
  /**
   * ObjectField[Const] : Name : Value[?Const]
   */
  ;

  _proto.parseObjectField = function parseObjectField(isConst) {
    var start = this._lexer.token;
    var name = this.parseName();
    this.expectToken(TokenKind.COLON);
    return {
      kind: Kind.OBJECT_FIELD,
      name: name,
      value: this.parseValueLiteral(isConst),
      loc: this.loc(start)
    };
  } // Implements the parsing rules in the Directives section.

  /**
   * Directives[Const] : Directive[?Const]+
   */
  ;

  _proto.parseDirectives = function parseDirectives(isConst) {
    var directives = [];

    while (this.peek(TokenKind.AT)) {
      directives.push(this.parseDirective(isConst));
    }

    return directives;
  }
  /**
   * Directive[Const] : @ Name Arguments[?Const]?
   */
  ;

  _proto.parseDirective = function parseDirective(isConst) {
    var start = this._lexer.token;
    this.expectToken(TokenKind.AT);
    return {
      kind: Kind.DIRECTIVE,
      name: this.parseName(),
      arguments: this.parseArguments(isConst),
      loc: this.loc(start)
    };
  } // Implements the parsing rules in the Types section.

  /**
   * Type :
   *   - NamedType
   *   - ListType
   *   - NonNullType
   */
  ;

  _proto.parseTypeReference = function parseTypeReference() {
    var start = this._lexer.token;
    var type;

    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {
      type = this.parseTypeReference();
      this.expectToken(TokenKind.BRACKET_R);
      type = {
        kind: Kind.LIST_TYPE,
        type: type,
        loc: this.loc(start)
      };
    } else {
      type = this.parseNamedType();
    }

    if (this.expectOptionalToken(TokenKind.BANG)) {
      return {
        kind: Kind.NON_NULL_TYPE,
        type: type,
        loc: this.loc(start)
      };
    }

    return type;
  }
  /**
   * NamedType : Name
   */
  ;

  _proto.parseNamedType = function parseNamedType() {
    var start = this._lexer.token;
    return {
      kind: Kind.NAMED_TYPE,
      name: this.parseName(),
      loc: this.loc(start)
    };
  } // Implements the parsing rules in the Type Definition section.

  /**
   * TypeSystemDefinition :
   *   - SchemaDefinition
   *   - TypeDefinition
   *   - DirectiveDefinition
   *
   * TypeDefinition :
   *   - ScalarTypeDefinition
   *   - ObjectTypeDefinition
   *   - InterfaceTypeDefinition
   *   - UnionTypeDefinition
   *   - EnumTypeDefinition
   *   - InputObjectTypeDefinition
   */
  ;

  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {
    // Many definitions begin with a description and require a lookahead.
    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;

    if (keywordToken.kind === TokenKind.NAME) {
      switch (keywordToken.value) {
        case 'schema':
          return this.parseSchemaDefinition();

        case 'scalar':
          return this.parseScalarTypeDefinition();

        case 'type':
          return this.parseObjectTypeDefinition();

        case 'interface':
          return this.parseInterfaceTypeDefinition();

        case 'union':
          return this.parseUnionTypeDefinition();

        case 'enum':
          return this.parseEnumTypeDefinition();

        case 'input':
          return this.parseInputObjectTypeDefinition();

        case 'directive':
          return this.parseDirectiveDefinition();
      }
    }

    throw this.unexpected(keywordToken);
  };

  _proto.peekDescription = function peekDescription() {
    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);
  }
  /**
   * Description : StringValue
   */
  ;

  _proto.parseDescription = function parseDescription() {
    if (this.peekDescription()) {
      return this.parseStringLiteral();
    }
  }
  /**
   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
   */
  ;

  _proto.parseSchemaDefinition = function parseSchemaDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('schema');
    var directives = this.parseDirectives(true);
    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);
    return {
      kind: Kind.SCHEMA_DEFINITION,
      description: description,
      directives: directives,
      operationTypes: operationTypes,
      loc: this.loc(start)
    };
  }
  /**
   * OperationTypeDefinition : OperationType : NamedType
   */
  ;

  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {
    var start = this._lexer.token;
    var operation = this.parseOperationType();
    this.expectToken(TokenKind.COLON);
    var type = this.parseNamedType();
    return {
      kind: Kind.OPERATION_TYPE_DEFINITION,
      operation: operation,
      type: type,
      loc: this.loc(start)
    };
  }
  /**
   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
   */
  ;

  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('scalar');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    return {
      kind: Kind.SCALAR_TYPE_DEFINITION,
      description: description,
      name: name,
      directives: directives,
      loc: this.loc(start)
    };
  }
  /**
   * ObjectTypeDefinition :
   *   Description?
   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
   */
  ;

  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('type');
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields = this.parseFieldsDefinition();
    return {
      kind: Kind.OBJECT_TYPE_DEFINITION,
      description: description,
      name: name,
      interfaces: interfaces,
      directives: directives,
      fields: fields,
      loc: this.loc(start)
    };
  }
  /**
   * ImplementsInterfaces :
   *   - implements `&`? NamedType
   *   - ImplementsInterfaces & NamedType
   */
  ;

  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {
    var _this$_options2;

    if (!this.expectOptionalKeyword('implements')) {
      return [];
    }

    if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {
      var types = []; // Optional leading ampersand

      this.expectOptionalToken(TokenKind.AMP);

      do {
        types.push(this.parseNamedType());
      } while (this.expectOptionalToken(TokenKind.AMP) || this.peek(TokenKind.NAME));

      return types;
    }

    return this.delimitedMany(TokenKind.AMP, this.parseNamedType);
  }
  /**
   * FieldsDefinition : { FieldDefinition+ }
   */
  ;

  _proto.parseFieldsDefinition = function parseFieldsDefinition() {
    var _this$_options3;

    // Legacy support for the SDL?
    if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {
      this._lexer.advance();

      this._lexer.advance();

      return [];
    }

    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);
  }
  /**
   * FieldDefinition :
   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
   */
  ;

  _proto.parseFieldDefinition = function parseFieldDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    var name = this.parseName();
    var args = this.parseArgumentDefs();
    this.expectToken(TokenKind.COLON);
    var type = this.parseTypeReference();
    var directives = this.parseDirectives(true);
    return {
      kind: Kind.FIELD_DEFINITION,
      description: description,
      name: name,
      arguments: args,
      type: type,
      directives: directives,
      loc: this.loc(start)
    };
  }
  /**
   * ArgumentsDefinition : ( InputValueDefinition+ )
   */
  ;

  _proto.parseArgumentDefs = function parseArgumentDefs() {
    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);
  }
  /**
   * InputValueDefinition :
   *   - Description? Name : Type DefaultValue? Directives[Const]?
   */
  ;

  _proto.parseInputValueDef = function parseInputValueDef() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    var name = this.parseName();
    this.expectToken(TokenKind.COLON);
    var type = this.parseTypeReference();
    var defaultValue;

    if (this.expectOptionalToken(TokenKind.EQUALS)) {
      defaultValue = this.parseValueLiteral(true);
    }

    var directives = this.parseDirectives(true);
    return {
      kind: Kind.INPUT_VALUE_DEFINITION,
      description: description,
      name: name,
      type: type,
      defaultValue: defaultValue,
      directives: directives,
      loc: this.loc(start)
    };
  }
  /**
   * InterfaceTypeDefinition :
   *   - Description? interface Name Directives[Const]? FieldsDefinition?
   */
  ;

  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('interface');
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields = this.parseFieldsDefinition();
    return {
      kind: Kind.INTERFACE_TYPE_DEFINITION,
      description: description,
      name: name,
      interfaces: interfaces,
      directives: directives,
      fields: fields,
      loc: this.loc(start)
    };
  }
  /**
   * UnionTypeDefinition :
   *   - Description? union Name Directives[Const]? UnionMemberTypes?
   */
  ;

  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('union');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var types = this.parseUnionMemberTypes();
    return {
      kind: Kind.UNION_TYPE_DEFINITION,
      description: description,
      name: name,
      directives: directives,
      types: types,
      loc: this.loc(start)
    };
  }
  /**
   * UnionMemberTypes :
   *   - = `|`? NamedType
   *   - UnionMemberTypes | NamedType
   */
  ;

  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {
    return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];
  }
  /**
   * EnumTypeDefinition :
   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
   */
  ;

  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('enum');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var values = this.parseEnumValuesDefinition();
    return {
      kind: Kind.ENUM_TYPE_DEFINITION,
      description: description,
      name: name,
      directives: directives,
      values: values,
      loc: this.loc(start)
    };
  }
  /**
   * EnumValuesDefinition : { EnumValueDefinition+ }
   */
  ;

  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {
    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);
  }
  /**
   * EnumValueDefinition : Description? EnumValue Directives[Const]?
   *
   * EnumValue : Name
   */
  ;

  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    return {
      kind: Kind.ENUM_VALUE_DEFINITION,
      description: description,
      name: name,
      directives: directives,
      loc: this.loc(start)
    };
  }
  /**
   * InputObjectTypeDefinition :
   *   - Description? input Name Directives[Const]? InputFieldsDefinition?
   */
  ;

  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('input');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var fields = this.parseInputFieldsDefinition();
    return {
      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
      description: description,
      name: name,
      directives: directives,
      fields: fields,
      loc: this.loc(start)
    };
  }
  /**
   * InputFieldsDefinition : { InputValueDefinition+ }
   */
  ;

  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {
    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);
  }
  /**
   * TypeSystemExtension :
   *   - SchemaExtension
   *   - TypeExtension
   *
   * TypeExtension :
   *   - ScalarTypeExtension
   *   - ObjectTypeExtension
   *   - InterfaceTypeExtension
   *   - UnionTypeExtension
   *   - EnumTypeExtension
   *   - InputObjectTypeDefinition
   */
  ;

  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {
    var keywordToken = this._lexer.lookahead();

    if (keywordToken.kind === TokenKind.NAME) {
      switch (keywordToken.value) {
        case 'schema':
          return this.parseSchemaExtension();

        case 'scalar':
          return this.parseScalarTypeExtension();

        case 'type':
          return this.parseObjectTypeExtension();

        case 'interface':
          return this.parseInterfaceTypeExtension();

        case 'union':
          return this.parseUnionTypeExtension();

        case 'enum':
          return this.parseEnumTypeExtension();

        case 'input':
          return this.parseInputObjectTypeExtension();
      }
    }

    throw this.unexpected(keywordToken);
  }
  /**
   * SchemaExtension :
   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
   *  - extend schema Directives[Const]
   */
  ;

  _proto.parseSchemaExtension = function parseSchemaExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('schema');
    var directives = this.parseDirectives(true);
    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);

    if (directives.length === 0 && operationTypes.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: Kind.SCHEMA_EXTENSION,
      directives: directives,
      operationTypes: operationTypes,
      loc: this.loc(start)
    };
  }
  /**
   * ScalarTypeExtension :
   *   - extend scalar Name Directives[Const]
   */
  ;

  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('scalar');
    var name = this.parseName();
    var directives = this.parseDirectives(true);

    if (directives.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: Kind.SCALAR_TYPE_EXTENSION,
      name: name,
      directives: directives,
      loc: this.loc(start)
    };
  }
  /**
   * ObjectTypeExtension :
   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend type Name ImplementsInterfaces? Directives[Const]
   *  - extend type Name ImplementsInterfaces
   */
  ;

  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('type');
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields = this.parseFieldsDefinition();

    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: Kind.OBJECT_TYPE_EXTENSION,
      name: name,
      interfaces: interfaces,
      directives: directives,
      fields: fields,
      loc: this.loc(start)
    };
  }
  /**
   * InterfaceTypeExtension :
   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend interface Name ImplementsInterfaces? Directives[Const]
   *  - extend interface Name ImplementsInterfaces
   */
  ;

  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('interface');
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields = this.parseFieldsDefinition();

    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: Kind.INTERFACE_TYPE_EXTENSION,
      name: name,
      interfaces: interfaces,
      directives: directives,
      fields: fields,
      loc: this.loc(start)
    };
  }
  /**
   * UnionTypeExtension :
   *   - extend union Name Directives[Const]? UnionMemberTypes
   *   - extend union Name Directives[Const]
   */
  ;

  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('union');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var types = this.parseUnionMemberTypes();

    if (directives.length === 0 && types.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: Kind.UNION_TYPE_EXTENSION,
      name: name,
      directives: directives,
      types: types,
      loc: this.loc(start)
    };
  }
  /**
   * EnumTypeExtension :
   *   - extend enum Name Directives[Const]? EnumValuesDefinition
   *   - extend enum Name Directives[Const]
   */
  ;

  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('enum');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var values = this.parseEnumValuesDefinition();

    if (directives.length === 0 && values.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: Kind.ENUM_TYPE_EXTENSION,
      name: name,
      directives: directives,
      values: values,
      loc: this.loc(start)
    };
  }
  /**
   * InputObjectTypeExtension :
   *   - extend input Name Directives[Const]? InputFieldsDefinition
   *   - extend input Name Directives[Const]
   */
  ;

  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('input');
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var fields = this.parseInputFieldsDefinition();

    if (directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }

    return {
      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
      name: name,
      directives: directives,
      fields: fields,
      loc: this.loc(start)
    };
  }
  /**
   * DirectiveDefinition :
   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
   */
  ;

  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword('directive');
    this.expectToken(TokenKind.AT);
    var name = this.parseName();
    var args = this.parseArgumentDefs();
    var repeatable = this.expectOptionalKeyword('repeatable');
    this.expectKeyword('on');
    var locations = this.parseDirectiveLocations();
    return {
      kind: Kind.DIRECTIVE_DEFINITION,
      description: description,
      name: name,
      arguments: args,
      repeatable: repeatable,
      locations: locations,
      loc: this.loc(start)
    };
  }
  /**
   * DirectiveLocations :
   *   - `|`? DirectiveLocation
   *   - DirectiveLocations | DirectiveLocation
   */
  ;

  _proto.parseDirectiveLocations = function parseDirectiveLocations() {
    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);
  }
  /*
   * DirectiveLocation :
   *   - ExecutableDirectiveLocation
   *   - TypeSystemDirectiveLocation
   *
   * ExecutableDirectiveLocation : one of
   *   `QUERY`
   *   `MUTATION`
   *   `SUBSCRIPTION`
   *   `FIELD`
   *   `FRAGMENT_DEFINITION`
   *   `FRAGMENT_SPREAD`
   *   `INLINE_FRAGMENT`
   *
   * TypeSystemDirectiveLocation : one of
   *   `SCHEMA`
   *   `SCALAR`
   *   `OBJECT`
   *   `FIELD_DEFINITION`
   *   `ARGUMENT_DEFINITION`
   *   `INTERFACE`
   *   `UNION`
   *   `ENUM`
   *   `ENUM_VALUE`
   *   `INPUT_OBJECT`
   *   `INPUT_FIELD_DEFINITION`
   */
  ;

  _proto.parseDirectiveLocation = function parseDirectiveLocation() {
    var start = this._lexer.token;
    var name = this.parseName();

    if (DirectiveLocation[name.value] !== undefined) {
      return name;
    }

    throw this.unexpected(start);
  } // Core parsing utility functions

  /**
   * Returns a location object, used to identify the place in the source that created a given parsed object.
   */
  ;

  _proto.loc = function loc(startToken) {
    var _this$_options4;

    if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {
      return new Location(startToken, this._lexer.lastToken, this._lexer.source);
    }
  }
  /**
   * Determines if the next token is of a given kind
   */
  ;

  _proto.peek = function peek(kind) {
    return this._lexer.token.kind === kind;
  }
  /**
   * If the next token is of the given kind, return that token after advancing the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  ;

  _proto.expectToken = function expectToken(kind) {
    var token = this._lexer.token;

    if (token.kind === kind) {
      this._lexer.advance();

      return token;
    }

    throw syntaxError(this._lexer.source, token.start, "Expected ".concat(getTokenKindDesc(kind), ", found ").concat(getTokenDesc(token), "."));
  }
  /**
   * If the next token is of the given kind, return that token after advancing the lexer.
   * Otherwise, do not change the parser state and return undefined.
   */
  ;

  _proto.expectOptionalToken = function expectOptionalToken(kind) {
    var token = this._lexer.token;

    if (token.kind === kind) {
      this._lexer.advance();

      return token;
    }

    return undefined;
  }
  /**
   * If the next token is a given keyword, advance the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */
  ;

  _proto.expectKeyword = function expectKeyword(value) {
    var token = this._lexer.token;

    if (token.kind === TokenKind.NAME && token.value === value) {
      this._lexer.advance();
    } else {
      throw syntaxError(this._lexer.source, token.start, "Expected \"".concat(value, "\", found ").concat(getTokenDesc(token), "."));
    }
  }
  /**
   * If the next token is a given keyword, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */
  ;

  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {
    var token = this._lexer.token;

    if (token.kind === TokenKind.NAME && token.value === value) {
      this._lexer.advance();

      return true;
    }

    return false;
  }
  /**
   * Helper function for creating an error when an unexpected lexed token is encountered.
   */
  ;

  _proto.unexpected = function unexpected(atToken) {
    var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
    return syntaxError(this._lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token), "."));
  }
  /**
   * Returns a possibly empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  ;

  _proto.any = function any(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    var nodes = [];

    while (!this.expectOptionalToken(closeKind)) {
      nodes.push(parseFn.call(this));
    }

    return nodes;
  }
  /**
   * Returns a list of parse nodes, determined by the parseFn.
   * It can be empty only if open token is missing otherwise it will always return non-empty list
   * that begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  ;

  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {
    if (this.expectOptionalToken(openKind)) {
      var nodes = [];

      do {
        nodes.push(parseFn.call(this));
      } while (!this.expectOptionalToken(closeKind));

      return nodes;
    }

    return [];
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */
  ;

  _proto.many = function many(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    var nodes = [];

    do {
      nodes.push(parseFn.call(this));
    } while (!this.expectOptionalToken(closeKind));

    return nodes;
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
   * Advances the parser to the next lex token after last item in the list.
   */
  ;

  _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {
    this.expectOptionalToken(delimiterKind);
    var nodes = [];

    do {
      nodes.push(parseFn.call(this));
    } while (this.expectOptionalToken(delimiterKind));

    return nodes;
  };

  return Parser;
}();
/**
 * A helper function to describe a token as a string for debugging.
 */

function getTokenDesc(token) {
  var value = token.value;
  return getTokenKindDesc(token.kind) + (value != null ? " \"".concat(value, "\"") : '');
}
/**
 * A helper function to describe a token kind as a string for debugging.
 */


function getTokenKindDesc(kind) {
  return isPunctuatorTokenKind(kind) ? "\"".concat(kind, "\"") : kind;
}

/**
 * A visitor is provided to visit, it contains the collection of
 * relevant functions to be called during the visitor's traversal.
 */

var QueryDocumentKeys = {
  Name: [],
  Document: ['definitions'],
  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],
  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
  Variable: ['name'],
  SelectionSet: ['selections'],
  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
  Argument: ['name', 'value'],
  FragmentSpread: ['name', 'directives'],
  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed
  // or removed in the future.
  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],
  IntValue: [],
  FloatValue: [],
  StringValue: [],
  BooleanValue: [],
  NullValue: [],
  EnumValue: [],
  ListValue: ['values'],
  ObjectValue: ['fields'],
  ObjectField: ['name', 'value'],
  Directive: ['name', 'arguments'],
  NamedType: ['name'],
  ListType: ['type'],
  NonNullType: ['type'],
  SchemaDefinition: ['description', 'directives', 'operationTypes'],
  OperationTypeDefinition: ['type'],
  ScalarTypeDefinition: ['description', 'name', 'directives'],
  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],
  InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
  EnumValueDefinition: ['description', 'name', 'directives'],
  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
  SchemaExtension: ['directives', 'operationTypes'],
  ScalarTypeExtension: ['name', 'directives'],
  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
  UnionTypeExtension: ['name', 'directives', 'types'],
  EnumTypeExtension: ['name', 'directives', 'values'],
  InputObjectTypeExtension: ['name', 'directives', 'fields']
};
var BREAK = Object.freeze({});
/**
 * visit() will walk through an AST using a depth-first traversal, calling
 * the visitor's enter function at each node in the traversal, and calling the
 * leave function after visiting that node and all of its child nodes.
 *
 * By returning different values from the enter and leave functions, the
 * behavior of the visitor can be altered, including skipping over a sub-tree of
 * the AST (by returning false), editing the AST by returning a value or null
 * to remove the value, or to stop the whole traversal by returning BREAK.
 *
 * When using visit() to edit an AST, the original AST will not be modified, and
 * a new version of the AST with the changes applied will be returned from the
 * visit function.
 *
 *     const editedAST = visit(ast, {
 *       enter(node, key, parent, path, ancestors) {
 *         // @return
 *         //   undefined: no action
 *         //   false: skip visiting this node
 *         //   visitor.BREAK: stop visiting altogether
 *         //   null: delete this node
 *         //   any value: replace this node with the returned value
 *       },
 *       leave(node, key, parent, path, ancestors) {
 *         // @return
 *         //   undefined: no action
 *         //   false: no action
 *         //   visitor.BREAK: stop visiting altogether
 *         //   null: delete this node
 *         //   any value: replace this node with the returned value
 *       }
 *     });
 *
 * Alternatively to providing enter() and leave() functions, a visitor can
 * instead provide functions named the same as the kinds of AST nodes, or
 * enter/leave visitors at a named key, leading to four permutations of the
 * visitor API:
 *
 * 1) Named visitors triggered when entering a node of a specific kind.
 *
 *     visit(ast, {
 *       Kind(node) {
 *         // enter the "Kind" node
 *       }
 *     })
 *
 * 2) Named visitors that trigger upon entering and leaving a node of
 *    a specific kind.
 *
 *     visit(ast, {
 *       Kind: {
 *         enter(node) {
 *           // enter the "Kind" node
 *         }
 *         leave(node) {
 *           // leave the "Kind" node
 *         }
 *       }
 *     })
 *
 * 3) Generic visitors that trigger upon entering and leaving any node.
 *
 *     visit(ast, {
 *       enter(node) {
 *         // enter any node
 *       },
 *       leave(node) {
 *         // leave any node
 *       }
 *     })
 *
 * 4) Parallel visitors for entering and leaving nodes of a specific kind.
 *
 *     visit(ast, {
 *       enter: {
 *         Kind(node) {
 *           // enter the "Kind" node
 *         }
 *       },
 *       leave: {
 *         Kind(node) {
 *           // leave the "Kind" node
 *         }
 *       }
 *     })
 */

function visit(root, visitor) {
  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;

  /* eslint-disable no-undef-init */
  var stack = undefined;
  var inArray = Array.isArray(root);
  var keys = [root];
  var index = -1;
  var edits = [];
  var node = undefined;
  var key = undefined;
  var parent = undefined;
  var path = [];
  var ancestors = [];
  var newRoot = root;
  /* eslint-enable no-undef-init */

  do {
    index++;
    var isLeaving = index === keys.length;
    var isEdited = isLeaving && edits.length !== 0;

    if (isLeaving) {
      key = ancestors.length === 0 ? undefined : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();

      if (isEdited) {
        if (inArray) {
          node = node.slice();
        } else {
          var clone = {};

          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
            var k = _Object$keys2[_i2];
            clone[k] = node[k];
          }

          node = clone;
        }

        var editOffset = 0;

        for (var ii = 0; ii < edits.length; ii++) {
          var editKey = edits[ii][0];
          var editValue = edits[ii][1];

          if (inArray) {
            editKey -= editOffset;
          }

          if (inArray && editValue === null) {
            node.splice(editKey, 1);
            editOffset++;
          } else {
            node[editKey] = editValue;
          }
        }
      }

      index = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else {
      key = parent ? inArray ? index : keys[index] : undefined;
      node = parent ? parent[key] : newRoot;

      if (node === null || node === undefined) {
        continue;
      }

      if (parent) {
        path.push(key);
      }
    }

    var result = void 0;

    if (!Array.isArray(node)) {
      if (!isNode(node)) {
        throw new Error("Invalid AST Node: ".concat(inspect(node), "."));
      }

      var visitFn = getVisitFn(visitor, node.kind, isLeaving);

      if (visitFn) {
        result = visitFn.call(visitor, node, key, parent, path, ancestors);

        if (result === BREAK) {
          break;
        }

        if (result === false) {
          if (!isLeaving) {
            path.pop();
            continue;
          }
        } else if (result !== undefined) {
          edits.push([key, result]);

          if (!isLeaving) {
            if (isNode(result)) {
              node = result;
            } else {
              path.pop();
              continue;
            }
          }
        }
      }
    }

    if (result === undefined && isEdited) {
      edits.push([key, node]);
    }

    if (isLeaving) {
      path.pop();
    } else {
      var _visitorKeys$node$kin;

      stack = {
        inArray: inArray,
        index: index,
        keys: keys,
        edits: edits,
        prev: stack
      };
      inArray = Array.isArray(node);
      keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
      index = -1;
      edits = [];

      if (parent) {
        ancestors.push(parent);
      }

      parent = node;
    }
  } while (stack !== undefined);

  if (edits.length !== 0) {
    newRoot = edits[edits.length - 1][1];
  }

  return newRoot;
}
/**
 * Given a visitor instance, if it is leaving or not, and a node kind, return
 * the function the visitor runtime should call.
 */

function getVisitFn(visitor, kind, isLeaving) {
  var kindVisitor = visitor[kind];

  if (kindVisitor) {
    if (!isLeaving && typeof kindVisitor === 'function') {
      // { Kind() {} }
      return kindVisitor;
    }

    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;

    if (typeof kindSpecificVisitor === 'function') {
      // { Kind: { enter() {}, leave() {} } }
      return kindSpecificVisitor;
    }
  } else {
    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;

    if (specificVisitor) {
      if (typeof specificVisitor === 'function') {
        // { enter() {}, leave() {} }
        return specificVisitor;
      }

      var specificKindVisitor = specificVisitor[kind];

      if (typeof specificKindVisitor === 'function') {
        // { enter: { Kind() {} }, leave: { Kind() {} } }
        return specificKindVisitor;
      }
    }
  }
}

/* eslint-disable no-redeclare */
// $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441
var objectEntries = Object.entries || function (obj) {
  return Object.keys(obj).map(function (key) {
    return [key, obj[key]];
  });
};

var objectEntries$1 = objectEntries;

/**
 * Creates a keyed JS object from an array, given a function to produce the keys
 * for each value in the array.
 *
 * This provides a convenient lookup for the array items if the key function
 * produces unique results.
 *
 *     const phoneBook = [
 *       { name: 'Jon', num: '555-1234' },
 *       { name: 'Jenny', num: '867-5309' }
 *     ]
 *
 *     // { Jon: { name: 'Jon', num: '555-1234' },
 *     //   Jenny: { name: 'Jenny', num: '867-5309' } }
 *     const entriesByName = keyMap(
 *       phoneBook,
 *       entry => entry.name
 *     )
 *
 *     // { name: 'Jenny', num: '857-6309' }
 *     const jennyEntry = entriesByName['Jenny']
 *
 */
function keyMap(list, keyFn) {
  return list.reduce(function (map, item) {
    map[keyFn(item)] = item;
    return map;
  }, Object.create(null));
}

/**
 * Creates an object map with the same keys as `map` and values generated by
 * running each value of `map` thru `fn`.
 */
function mapValue(map, fn) {
  var result = Object.create(null);

  for (var _i2 = 0, _objectEntries2 = objectEntries$1(map); _i2 < _objectEntries2.length; _i2++) {
    var _ref2 = _objectEntries2[_i2];
    var _key = _ref2[0];
    var _value = _ref2[1];
    result[_key] = fn(_value, _key);
  }

  return result;
}

function toObjMap(obj) {
  /* eslint-enable no-redeclare */
  if (Object.getPrototypeOf(obj) === null) {
    return obj;
  }

  var map = Object.create(null);

  for (var _i2 = 0, _objectEntries2 = objectEntries$1(obj); _i2 < _objectEntries2.length; _i2++) {
    var _ref2 = _objectEntries2[_i2];
    var key = _ref2[0];
    var value = _ref2[1];
    map[key] = value;
  }

  return map;
}

/**
 * Creates a keyed JS object from an array, given a function to produce the keys
 * and a function to produce the values from each item in the array.
 *
 *     const phoneBook = [
 *       { name: 'Jon', num: '555-1234' },
 *       { name: 'Jenny', num: '867-5309' }
 *     ]
 *
 *     // { Jon: '555-1234', Jenny: '867-5309' }
 *     const phonesByName = keyValMap(
 *       phoneBook,
 *       entry => entry.name,
 *       entry => entry.num
 *     )
 *
 */
function keyValMap(list, keyFn, valFn) {
  return list.reduce(function (map, item) {
    map[keyFn(item)] = valFn(item);
    return map;
  }, Object.create(null));
}

var MAX_SUGGESTIONS = 5;
/**
 * Given [ A, B, C ] return ' Did you mean A, B, or C?'.
 */

// eslint-disable-next-line no-redeclare
function didYouMean(firstArg, secondArg) {
  var _ref = typeof firstArg === 'string' ? [firstArg, secondArg] : [undefined, firstArg],
      subMessage = _ref[0],
      suggestionsArg = _ref[1];

  var message = ' Did you mean ';

  if (subMessage) {
    message += subMessage + ' ';
  }

  var suggestions = suggestionsArg.map(function (x) {
    return "\"".concat(x, "\"");
  });

  switch (suggestions.length) {
    case 0:
      return '';

    case 1:
      return message + suggestions[0] + '?';

    case 2:
      return message + suggestions[0] + ' or ' + suggestions[1] + '?';
  }

  var selected = suggestions.slice(0, MAX_SUGGESTIONS);
  var lastItem = selected.pop();
  return message + selected.join(', ') + ', or ' + lastItem + '?';
}

/**
 * Returns the first argument it receives.
 */
function identityFunc(x) {
  return x;
}

/**
 * Returns a number indicating whether a reference string comes before, or after,
 * or is the same as the given string in natural sort order.
 *
 * See: https://en.wikipedia.org/wiki/Natural_sort_order
 *
 */
function naturalCompare(aStr, bStr) {
  var aIdx = 0;
  var bIdx = 0;

  while (aIdx < aStr.length && bIdx < bStr.length) {
    var aChar = aStr.charCodeAt(aIdx);
    var bChar = bStr.charCodeAt(bIdx);

    if (isDigit(aChar) && isDigit(bChar)) {
      var aNum = 0;

      do {
        ++aIdx;
        aNum = aNum * 10 + aChar - DIGIT_0;
        aChar = aStr.charCodeAt(aIdx);
      } while (isDigit(aChar) && aNum > 0);

      var bNum = 0;

      do {
        ++bIdx;
        bNum = bNum * 10 + bChar - DIGIT_0;
        bChar = bStr.charCodeAt(bIdx);
      } while (isDigit(bChar) && bNum > 0);

      if (aNum < bNum) {
        return -1;
      }

      if (aNum > bNum) {
        return 1;
      }
    } else {
      if (aChar < bChar) {
        return -1;
      }

      if (aChar > bChar) {
        return 1;
      }

      ++aIdx;
      ++bIdx;
    }
  }

  return aStr.length - bStr.length;
}
var DIGIT_0 = 48;
var DIGIT_9 = 57;

function isDigit(code) {
  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
}

/**
 * Given an invalid input string and a list of valid options, returns a filtered
 * list of valid options sorted based on their similarity with the input.
 */

function suggestionList(input, options) {
  var optionsByDistance = Object.create(null);
  var lexicalDistance = new LexicalDistance(input);
  var threshold = Math.floor(input.length * 0.4) + 1;

  for (var _i2 = 0; _i2 < options.length; _i2++) {
    var option = options[_i2];
    var distance = lexicalDistance.measure(option, threshold);

    if (distance !== undefined) {
      optionsByDistance[option] = distance;
    }
  }

  return Object.keys(optionsByDistance).sort(function (a, b) {
    var distanceDiff = optionsByDistance[a] - optionsByDistance[b];
    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);
  });
}
/**
 * Computes the lexical distance between strings A and B.
 *
 * The "distance" between two strings is given by counting the minimum number
 * of edits needed to transform string A into string B. An edit can be an
 * insertion, deletion, or substitution of a single character, or a swap of two
 * adjacent characters.
 *
 * Includes a custom alteration from Damerau-Levenshtein to treat case changes
 * as a single edit which helps identify mis-cased values with an edit distance
 * of 1.
 *
 * This distance can be useful for detecting typos in input or sorting
 */

var LexicalDistance = /*#__PURE__*/function () {
  function LexicalDistance(input) {
    this._input = input;
    this._inputLowerCase = input.toLowerCase();
    this._inputArray = stringToArray(this._inputLowerCase);
    this._rows = [new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0)];
  }

  var _proto = LexicalDistance.prototype;

  _proto.measure = function measure(option, threshold) {
    if (this._input === option) {
      return 0;
    }

    var optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit

    if (this._inputLowerCase === optionLowerCase) {
      return 1;
    }

    var a = stringToArray(optionLowerCase);
    var b = this._inputArray;

    if (a.length < b.length) {
      var tmp = a;
      a = b;
      b = tmp;
    }

    var aLength = a.length;
    var bLength = b.length;

    if (aLength - bLength > threshold) {
      return undefined;
    }

    var rows = this._rows;

    for (var j = 0; j <= bLength; j++) {
      rows[0][j] = j;
    }

    for (var i = 1; i <= aLength; i++) {
      var upRow = rows[(i - 1) % 3];
      var currentRow = rows[i % 3];
      var smallestCell = currentRow[0] = i;

      for (var _j = 1; _j <= bLength; _j++) {
        var cost = a[i - 1] === b[_j - 1] ? 0 : 1;
        var currentCell = Math.min(upRow[_j] + 1, // delete
        currentRow[_j - 1] + 1, // insert
        upRow[_j - 1] + cost // substitute
        );

        if (i > 1 && _j > 1 && a[i - 1] === b[_j - 2] && a[i - 2] === b[_j - 1]) {
          // transposition
          var doubleDiagonalCell = rows[(i - 2) % 3][_j - 2];
          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
        }

        if (currentCell < smallestCell) {
          smallestCell = currentCell;
        }

        currentRow[_j] = currentCell;
      } // Early exit, since distance can't go smaller than smallest element of the previous row.


      if (smallestCell > threshold) {
        return undefined;
      }
    }

    var distance = rows[aLength % 3][bLength];
    return distance <= threshold ? distance : undefined;
  };

  return LexicalDistance;
}();

function stringToArray(str) {
  var strLength = str.length;
  var array = new Array(strLength);

  for (var i = 0; i < strLength; ++i) {
    array[i] = str.charCodeAt(i);
  }

  return array;
}

/**
 * Converts an AST into a string, using one set of reasonable
 * formatting rules.
 */

function print(ast) {
  return visit(ast, {
    leave: printDocASTReducer
  });
}
var MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future

var printDocASTReducer = {
  Name: function Name(node) {
    return node.value;
  },
  Variable: function Variable(node) {
    return '$' + node.name;
  },
  // Document
  Document: function Document(node) {
    return join(node.definitions, '\n\n') + '\n';
  },
  OperationDefinition: function OperationDefinition(node) {
    var op = node.operation;
    var name = node.name;
    var varDefs = wrap$1('(', join(node.variableDefinitions, ', '), ')');
    var directives = join(node.directives, ' ');
    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use
    // the query short form.

    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');
  },
  VariableDefinition: function VariableDefinition(_ref) {
    var variable = _ref.variable,
        type = _ref.type,
        defaultValue = _ref.defaultValue,
        directives = _ref.directives;
    return variable + ': ' + type + wrap$1(' = ', defaultValue) + wrap$1(' ', join(directives, ' '));
  },
  SelectionSet: function SelectionSet(_ref2) {
    var selections = _ref2.selections;
    return block(selections);
  },
  Field: function Field(_ref3) {
    var alias = _ref3.alias,
        name = _ref3.name,
        args = _ref3.arguments,
        directives = _ref3.directives,
        selectionSet = _ref3.selectionSet;
    var prefix = wrap$1('', alias, ': ') + name;
    var argsLine = prefix + wrap$1('(', join(args, ', '), ')');

    if (argsLine.length > MAX_LINE_LENGTH) {
      argsLine = prefix + wrap$1('(\n', indent(join(args, '\n')), '\n)');
    }

    return join([argsLine, join(directives, ' '), selectionSet], ' ');
  },
  Argument: function Argument(_ref4) {
    var name = _ref4.name,
        value = _ref4.value;
    return name + ': ' + value;
  },
  // Fragments
  FragmentSpread: function FragmentSpread(_ref5) {
    var name = _ref5.name,
        directives = _ref5.directives;
    return '...' + name + wrap$1(' ', join(directives, ' '));
  },
  InlineFragment: function InlineFragment(_ref6) {
    var typeCondition = _ref6.typeCondition,
        directives = _ref6.directives,
        selectionSet = _ref6.selectionSet;
    return join(['...', wrap$1('on ', typeCondition), join(directives, ' '), selectionSet], ' ');
  },
  FragmentDefinition: function FragmentDefinition(_ref7) {
    var name = _ref7.name,
        typeCondition = _ref7.typeCondition,
        variableDefinitions = _ref7.variableDefinitions,
        directives = _ref7.directives,
        selectionSet = _ref7.selectionSet;
    return (// Note: fragment variable definitions are experimental and may be changed
      // or removed in the future.
      "fragment ".concat(name).concat(wrap$1('(', join(variableDefinitions, ', '), ')'), " ") + "on ".concat(typeCondition, " ").concat(wrap$1('', join(directives, ' '), ' ')) + selectionSet
    );
  },
  // Value
  IntValue: function IntValue(_ref8) {
    var value = _ref8.value;
    return value;
  },
  FloatValue: function FloatValue(_ref9) {
    var value = _ref9.value;
    return value;
  },
  StringValue: function StringValue(_ref10, key) {
    var value = _ref10.value,
        isBlockString = _ref10.block;
    return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);
  },
  BooleanValue: function BooleanValue(_ref11) {
    var value = _ref11.value;
    return value ? 'true' : 'false';
  },
  NullValue: function NullValue() {
    return 'null';
  },
  EnumValue: function EnumValue(_ref12) {
    var value = _ref12.value;
    return value;
  },
  ListValue: function ListValue(_ref13) {
    var values = _ref13.values;
    return '[' + join(values, ', ') + ']';
  },
  ObjectValue: function ObjectValue(_ref14) {
    var fields = _ref14.fields;
    return '{' + join(fields, ', ') + '}';
  },
  ObjectField: function ObjectField(_ref15) {
    var name = _ref15.name,
        value = _ref15.value;
    return name + ': ' + value;
  },
  // Directive
  Directive: function Directive(_ref16) {
    var name = _ref16.name,
        args = _ref16.arguments;
    return '@' + name + wrap$1('(', join(args, ', '), ')');
  },
  // Type
  NamedType: function NamedType(_ref17) {
    var name = _ref17.name;
    return name;
  },
  ListType: function ListType(_ref18) {
    var type = _ref18.type;
    return '[' + type + ']';
  },
  NonNullType: function NonNullType(_ref19) {
    var type = _ref19.type;
    return type + '!';
  },
  // Type System Definitions
  SchemaDefinition: addDescription(function (_ref20) {
    var directives = _ref20.directives,
        operationTypes = _ref20.operationTypes;
    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');
  }),
  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
    var operation = _ref21.operation,
        type = _ref21.type;
    return operation + ': ' + type;
  },
  ScalarTypeDefinition: addDescription(function (_ref22) {
    var name = _ref22.name,
        directives = _ref22.directives;
    return join(['scalar', name, join(directives, ' ')], ' ');
  }),
  ObjectTypeDefinition: addDescription(function (_ref23) {
    var name = _ref23.name,
        interfaces = _ref23.interfaces,
        directives = _ref23.directives,
        fields = _ref23.fields;
    return join(['type', name, wrap$1('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  }),
  FieldDefinition: addDescription(function (_ref24) {
    var name = _ref24.name,
        args = _ref24.arguments,
        type = _ref24.type,
        directives = _ref24.directives;
    return name + (hasMultilineItems(args) ? wrap$1('(\n', indent(join(args, '\n')), '\n)') : wrap$1('(', join(args, ', '), ')')) + ': ' + type + wrap$1(' ', join(directives, ' '));
  }),
  InputValueDefinition: addDescription(function (_ref25) {
    var name = _ref25.name,
        type = _ref25.type,
        defaultValue = _ref25.defaultValue,
        directives = _ref25.directives;
    return join([name + ': ' + type, wrap$1('= ', defaultValue), join(directives, ' ')], ' ');
  }),
  InterfaceTypeDefinition: addDescription(function (_ref26) {
    var name = _ref26.name,
        interfaces = _ref26.interfaces,
        directives = _ref26.directives,
        fields = _ref26.fields;
    return join(['interface', name, wrap$1('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  }),
  UnionTypeDefinition: addDescription(function (_ref27) {
    var name = _ref27.name,
        directives = _ref27.directives,
        types = _ref27.types;
    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
  }),
  EnumTypeDefinition: addDescription(function (_ref28) {
    var name = _ref28.name,
        directives = _ref28.directives,
        values = _ref28.values;
    return join(['enum', name, join(directives, ' '), block(values)], ' ');
  }),
  EnumValueDefinition: addDescription(function (_ref29) {
    var name = _ref29.name,
        directives = _ref29.directives;
    return join([name, join(directives, ' ')], ' ');
  }),
  InputObjectTypeDefinition: addDescription(function (_ref30) {
    var name = _ref30.name,
        directives = _ref30.directives,
        fields = _ref30.fields;
    return join(['input', name, join(directives, ' '), block(fields)], ' ');
  }),
  DirectiveDefinition: addDescription(function (_ref31) {
    var name = _ref31.name,
        args = _ref31.arguments,
        repeatable = _ref31.repeatable,
        locations = _ref31.locations;
    return 'directive @' + name + (hasMultilineItems(args) ? wrap$1('(\n', indent(join(args, '\n')), '\n)') : wrap$1('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');
  }),
  SchemaExtension: function SchemaExtension(_ref32) {
    var directives = _ref32.directives,
        operationTypes = _ref32.operationTypes;
    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');
  },
  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
    var name = _ref33.name,
        directives = _ref33.directives;
    return join(['extend scalar', name, join(directives, ' ')], ' ');
  },
  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
    var name = _ref34.name,
        interfaces = _ref34.interfaces,
        directives = _ref34.directives,
        fields = _ref34.fields;
    return join(['extend type', name, wrap$1('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  },
  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
    var name = _ref35.name,
        interfaces = _ref35.interfaces,
        directives = _ref35.directives,
        fields = _ref35.fields;
    return join(['extend interface', name, wrap$1('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  },
  UnionTypeExtension: function UnionTypeExtension(_ref36) {
    var name = _ref36.name,
        directives = _ref36.directives,
        types = _ref36.types;
    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
  },
  EnumTypeExtension: function EnumTypeExtension(_ref37) {
    var name = _ref37.name,
        directives = _ref37.directives,
        values = _ref37.values;
    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');
  },
  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
    var name = _ref38.name,
        directives = _ref38.directives,
        fields = _ref38.fields;
    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');
  }
};

function addDescription(cb) {
  return function (node) {
    return join([node.description, cb(node)], '\n');
  };
}
/**
 * Given maybeArray, print an empty string if it is null or empty, otherwise
 * print all items together separated by separator if provided
 */


function join(maybeArray) {
  var _maybeArray$filter$jo;

  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {
    return x;
  }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';
}
/**
 * Given array, print each item on its own line, wrapped in an
 * indented "{ }" block.
 */


function block(array) {
  return wrap$1('{\n', indent(join(array, '\n')), '\n}');
}
/**
 * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
 */


function wrap$1(start, maybeString) {
  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  return maybeString != null && maybeString !== '' ? start + maybeString + end : '';
}

function indent(str) {
  return wrap$1('  ', str.replace(/\n/g, '\n  '));
}

function isMultiline(str) {
  return str.indexOf('\n') !== -1;
}

function hasMultilineItems(maybeArray) {
  return maybeArray != null && maybeArray.some(isMultiline);
}

/**
 * Produces a JavaScript value given a GraphQL Value AST.
 *
 * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value
 * will reflect the provided GraphQL value AST.
 *
 * | GraphQL Value        | JavaScript Value |
 * | -------------------- | ---------------- |
 * | Input Object         | Object           |
 * | List                 | Array            |
 * | Boolean              | Boolean          |
 * | String / Enum        | String           |
 * | Int / Float          | Number           |
 * | Null                 | null             |
 *
 */
function valueFromASTUntyped(valueNode, variables) {
  switch (valueNode.kind) {
    case Kind.NULL:
      return null;

    case Kind.INT:
      return parseInt(valueNode.value, 10);

    case Kind.FLOAT:
      return parseFloat(valueNode.value);

    case Kind.STRING:
    case Kind.ENUM:
    case Kind.BOOLEAN:
      return valueNode.value;

    case Kind.LIST:
      return valueNode.values.map(function (node) {
        return valueFromASTUntyped(node, variables);
      });

    case Kind.OBJECT:
      return keyValMap(valueNode.fields, function (field) {
        return field.name.value;
      }, function (field) {
        return valueFromASTUntyped(field.value, variables);
      });

    case Kind.VARIABLE:
      return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
  } // istanbul ignore next (Not reachable. All possible value nodes have been considered)


  invariant$1(0, 'Unexpected value node: ' + inspect(valueNode));
}

function _defineProperties$4(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass$4(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$4(Constructor.prototype, protoProps); if (staticProps) _defineProperties$4(Constructor, staticProps); return Constructor; }
function isType(type) {
  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);
}
function assertType(type) {
  if (!isType(type)) {
    throw new Error("Expected ".concat(inspect(type), " to be a GraphQL type."));
  }

  return type;
}
/**
 * There are predicates for each kind of GraphQL type.
 */

// eslint-disable-next-line no-redeclare
function isScalarType(type) {
  return instanceOf(type, GraphQLScalarType);
}
// eslint-disable-next-line no-redeclare
function isObjectType(type) {
  return instanceOf(type, GraphQLObjectType);
}
// eslint-disable-next-line no-redeclare
function isInterfaceType(type) {
  return instanceOf(type, GraphQLInterfaceType);
}
// eslint-disable-next-line no-redeclare
function isUnionType(type) {
  return instanceOf(type, GraphQLUnionType);
}
// eslint-disable-next-line no-redeclare
function isEnumType(type) {
  return instanceOf(type, GraphQLEnumType);
}
// eslint-disable-next-line no-redeclare
function isInputObjectType(type) {
  return instanceOf(type, GraphQLInputObjectType);
}
// eslint-disable-next-line no-redeclare
function isListType(type) {
  return instanceOf(type, GraphQLList);
}
// eslint-disable-next-line no-redeclare
function isNonNullType(type) {
  return instanceOf(type, GraphQLNonNull);
}
/**
 * List Type Wrapper
 *
 * A list is a wrapping type which points to another type.
 * Lists are often created within the context of defining the fields of
 * an object type.
 *
 * Example:
 *
 *     const PersonType = new GraphQLObjectType({
 *       name: 'Person',
 *       fields: () => ({
 *         parents: { type: new GraphQLList(PersonType) },
 *         children: { type: new GraphQLList(PersonType) },
 *       })
 *     })
 *
 */
// FIXME: workaround to fix issue with Babel parser

/* ::
declare class GraphQLList<+T: GraphQLType> {
  +ofType: T;
  static <T>(ofType: T): GraphQLList<T>;
  // Note: constructors cannot be used for covariant types. Drop the "new".
  constructor(ofType: GraphQLType): void;
}
*/

function GraphQLList(ofType) {
  // istanbul ignore else (to be removed in v16.0.0)
  if (this instanceof GraphQLList) {
    this.ofType = assertType(ofType);
  } else {
    return new GraphQLList(ofType);
  }
} // Need to cast through any to alter the prototype.

GraphQLList.prototype.toString = function toString() {
  return '[' + String(this.ofType) + ']';
};

GraphQLList.prototype.toJSON = function toJSON() {
  return this.toString();
};

Object.defineProperty(GraphQLList.prototype, SYMBOL_TO_STRING_TAG, {
  get: function get() {
    return 'GraphQLList';
  }
}); // Print a simplified form when appearing in `inspect` and `util.inspect`.

defineInspect(GraphQLList);
/**
 * Non-Null Type Wrapper
 *
 * A non-null is a wrapping type which points to another type.
 * Non-null types enforce that their values are never null and can ensure
 * an error is raised if this ever occurs during a request. It is useful for
 * fields which you can make a strong guarantee on non-nullability, for example
 * usually the id field of a database row will never be null.
 *
 * Example:
 *
 *     const RowType = new GraphQLObjectType({
 *       name: 'Row',
 *       fields: () => ({
 *         id: { type: new GraphQLNonNull(GraphQLString) },
 *       })
 *     })
 *
 * Note: the enforcement of non-nullability occurs within the executor.
 */
// FIXME: workaround to fix issue with Babel parser

/* ::
declare class GraphQLNonNull<+T: GraphQLNullableType> {
  +ofType: T;
  static <T>(ofType: T): GraphQLNonNull<T>;
  // Note: constructors cannot be used for covariant types. Drop the "new".
  constructor(ofType: GraphQLType): void;
}
*/

function GraphQLNonNull(ofType) {
  // istanbul ignore else (to be removed in v16.0.0)
  if (this instanceof GraphQLNonNull) {
    this.ofType = assertNullableType(ofType);
  } else {
    return new GraphQLNonNull(ofType);
  }
} // Need to cast through any to alter the prototype.

GraphQLNonNull.prototype.toString = function toString() {
  return String(this.ofType) + '!';
};

GraphQLNonNull.prototype.toJSON = function toJSON() {
  return this.toString();
};

Object.defineProperty(GraphQLNonNull.prototype, SYMBOL_TO_STRING_TAG, {
  get: function get() {
    return 'GraphQLNonNull';
  }
}); // Print a simplified form when appearing in `inspect` and `util.inspect`.

defineInspect(GraphQLNonNull);
/**
 * These types can all accept null as a value.
 */

function isNullableType(type) {
  return isType(type) && !isNonNullType(type);
}
function assertNullableType(type) {
  if (!isNullableType(type)) {
    throw new Error("Expected ".concat(inspect(type), " to be a GraphQL nullable type."));
  }

  return type;
}
/**
 * Used while defining GraphQL types to allow for circular references in
 * otherwise immutable type definitions.
 */

function resolveThunk(thunk) {
  // $FlowFixMe[incompatible-use]
  return typeof thunk === 'function' ? thunk() : thunk;
}

function undefineIfEmpty(arr) {
  return arr && arr.length > 0 ? arr : undefined;
}
/**
 * Scalar Type Definition
 *
 * The leaf values of any request and input values to arguments are
 * Scalars (or Enums) and are defined with a name and a series of functions
 * used to parse input from ast or variables and to ensure validity.
 *
 * If a type's serialize function does not return a value (i.e. it returns
 * `undefined`) then an error will be raised and a `null` value will be returned
 * in the response. If the serialize function returns `null`, then no error will
 * be included in the response.
 *
 * Example:
 *
 *     const OddType = new GraphQLScalarType({
 *       name: 'Odd',
 *       serialize(value) {
 *         if (value % 2 === 1) {
 *           return value;
 *         }
 *       }
 *     });
 *
 */


var GraphQLScalarType = /*#__PURE__*/function () {
  function GraphQLScalarType(config) {
    var _config$parseValue, _config$serialize, _config$parseLiteral;

    var parseValue = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : identityFunc;
    this.name = config.name;
    this.description = config.description;
    this.specifiedByUrl = config.specifiedByUrl;
    this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : identityFunc;
    this.parseValue = parseValue;
    this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : function (node, variables) {
      return parseValue(valueFromASTUntyped(node, variables));
    };
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    typeof config.name === 'string' || devAssert(0, 'Must provide name.');
    config.specifiedByUrl == null || typeof config.specifiedByUrl === 'string' || devAssert(0, "".concat(this.name, " must provide \"specifiedByUrl\" as a string, ") + "but got: ".concat(inspect(config.specifiedByUrl), "."));
    config.serialize == null || typeof config.serialize === 'function' || devAssert(0, "".concat(this.name, " must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided."));

    if (config.parseLiteral) {
      typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function' || devAssert(0, "".concat(this.name, " must provide both \"parseValue\" and \"parseLiteral\" functions."));
    }
  }

  var _proto = GraphQLScalarType.prototype;

  _proto.toConfig = function toConfig() {
    var _this$extensionASTNod;

    return {
      name: this.name,
      description: this.description,
      specifiedByUrl: this.specifiedByUrl,
      serialize: this.serialize,
      parseValue: this.parseValue,
      parseLiteral: this.parseLiteral,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : []
    };
  };

  _proto.toString = function toString() {
    return this.name;
  };

  _proto.toJSON = function toJSON() {
    return this.toString();
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass$4(GraphQLScalarType, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLScalarType';
    }
  }]);

  return GraphQLScalarType;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

defineInspect(GraphQLScalarType);

/**
 * Object Type Definition
 *
 * Almost all of the GraphQL types you define will be object types. Object types
 * have a name, but most importantly describe their fields.
 *
 * Example:
 *
 *     const AddressType = new GraphQLObjectType({
 *       name: 'Address',
 *       fields: {
 *         street: { type: GraphQLString },
 *         number: { type: GraphQLInt },
 *         formatted: {
 *           type: GraphQLString,
 *           resolve(obj) {
 *             return obj.number + ' ' + obj.street
 *           }
 *         }
 *       }
 *     });
 *
 * When two types need to refer to each other, or a type needs to refer to
 * itself in a field, you can use a function expression (aka a closure or a
 * thunk) to supply the fields lazily.
 *
 * Example:
 *
 *     const PersonType = new GraphQLObjectType({
 *       name: 'Person',
 *       fields: () => ({
 *         name: { type: GraphQLString },
 *         bestFriend: { type: PersonType },
 *       })
 *     });
 *
 */
var GraphQLObjectType = /*#__PURE__*/function () {
  function GraphQLObjectType(config) {
    this.name = config.name;
    this.description = config.description;
    this.isTypeOf = config.isTypeOf;
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._fields = defineFieldMap.bind(undefined, config);
    this._interfaces = defineInterfaces.bind(undefined, config);
    typeof config.name === 'string' || devAssert(0, 'Must provide name.');
    config.isTypeOf == null || typeof config.isTypeOf === 'function' || devAssert(0, "".concat(this.name, " must provide \"isTypeOf\" as a function, ") + "but got: ".concat(inspect(config.isTypeOf), "."));
  }

  var _proto2 = GraphQLObjectType.prototype;

  _proto2.getFields = function getFields() {
    if (typeof this._fields === 'function') {
      this._fields = this._fields();
    }

    return this._fields;
  };

  _proto2.getInterfaces = function getInterfaces() {
    if (typeof this._interfaces === 'function') {
      this._interfaces = this._interfaces();
    }

    return this._interfaces;
  };

  _proto2.toConfig = function toConfig() {
    return {
      name: this.name,
      description: this.description,
      interfaces: this.getInterfaces(),
      fields: fieldsToFieldsConfig(this.getFields()),
      isTypeOf: this.isTypeOf,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes || []
    };
  };

  _proto2.toString = function toString() {
    return this.name;
  };

  _proto2.toJSON = function toJSON() {
    return this.toString();
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass$4(GraphQLObjectType, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLObjectType';
    }
  }]);

  return GraphQLObjectType;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

defineInspect(GraphQLObjectType);

function defineInterfaces(config) {
  var _resolveThunk;

  var interfaces = (_resolveThunk = resolveThunk(config.interfaces)) !== null && _resolveThunk !== void 0 ? _resolveThunk : [];
  Array.isArray(interfaces) || devAssert(0, "".concat(config.name, " interfaces must be an Array or a function which returns an Array."));
  return interfaces;
}

function defineFieldMap(config) {
  var fieldMap = resolveThunk(config.fields);
  isPlainObj(fieldMap) || devAssert(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
  return mapValue(fieldMap, function (fieldConfig, fieldName) {
    var _fieldConfig$args;

    isPlainObj(fieldConfig) || devAssert(0, "".concat(config.name, ".").concat(fieldName, " field config must be an object."));
    !('isDeprecated' in fieldConfig) || devAssert(0, "".concat(config.name, ".").concat(fieldName, " should provide \"deprecationReason\" instead of \"isDeprecated\"."));
    fieldConfig.resolve == null || typeof fieldConfig.resolve === 'function' || devAssert(0, "".concat(config.name, ".").concat(fieldName, " field resolver must be a function if ") + "provided, but got: ".concat(inspect(fieldConfig.resolve), "."));
    var argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};
    isPlainObj(argsConfig) || devAssert(0, "".concat(config.name, ".").concat(fieldName, " args must be an object with argument names as keys."));
    var args = objectEntries$1(argsConfig).map(function (_ref) {
      var argName = _ref[0],
          argConfig = _ref[1];
      return {
        name: argName,
        description: argConfig.description,
        type: argConfig.type,
        defaultValue: argConfig.defaultValue,
        deprecationReason: argConfig.deprecationReason,
        extensions: argConfig.extensions && toObjMap(argConfig.extensions),
        astNode: argConfig.astNode
      };
    });
    return {
      name: fieldName,
      description: fieldConfig.description,
      type: fieldConfig.type,
      args: args,
      resolve: fieldConfig.resolve,
      subscribe: fieldConfig.subscribe,
      isDeprecated: fieldConfig.deprecationReason != null,
      deprecationReason: fieldConfig.deprecationReason,
      extensions: fieldConfig.extensions && toObjMap(fieldConfig.extensions),
      astNode: fieldConfig.astNode
    };
  });
}

function isPlainObj(obj) {
  return isObjectLike$2(obj) && !Array.isArray(obj);
}

function fieldsToFieldsConfig(fields) {
  return mapValue(fields, function (field) {
    return {
      description: field.description,
      type: field.type,
      args: argsToArgsConfig(field.args),
      resolve: field.resolve,
      subscribe: field.subscribe,
      deprecationReason: field.deprecationReason,
      extensions: field.extensions,
      astNode: field.astNode
    };
  });
}
/**
 * @internal
 */


function argsToArgsConfig(args) {
  return keyValMap(args, function (arg) {
    return arg.name;
  }, function (arg) {
    return {
      description: arg.description,
      type: arg.type,
      defaultValue: arg.defaultValue,
      deprecationReason: arg.deprecationReason,
      extensions: arg.extensions,
      astNode: arg.astNode
    };
  });
}

/**
 * Interface Type Definition
 *
 * When a field can return one of a heterogeneous set of types, a Interface type
 * is used to describe what types are possible, what fields are in common across
 * all types, as well as a function to determine which type is actually used
 * when the field is resolved.
 *
 * Example:
 *
 *     const EntityType = new GraphQLInterfaceType({
 *       name: 'Entity',
 *       fields: {
 *         name: { type: GraphQLString }
 *       }
 *     });
 *
 */
var GraphQLInterfaceType = /*#__PURE__*/function () {
  function GraphQLInterfaceType(config) {
    this.name = config.name;
    this.description = config.description;
    this.resolveType = config.resolveType;
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._fields = defineFieldMap.bind(undefined, config);
    this._interfaces = defineInterfaces.bind(undefined, config);
    typeof config.name === 'string' || devAssert(0, 'Must provide name.');
    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(0, "".concat(this.name, " must provide \"resolveType\" as a function, ") + "but got: ".concat(inspect(config.resolveType), "."));
  }

  var _proto3 = GraphQLInterfaceType.prototype;

  _proto3.getFields = function getFields() {
    if (typeof this._fields === 'function') {
      this._fields = this._fields();
    }

    return this._fields;
  };

  _proto3.getInterfaces = function getInterfaces() {
    if (typeof this._interfaces === 'function') {
      this._interfaces = this._interfaces();
    }

    return this._interfaces;
  };

  _proto3.toConfig = function toConfig() {
    var _this$extensionASTNod2;

    return {
      name: this.name,
      description: this.description,
      interfaces: this.getInterfaces(),
      fields: fieldsToFieldsConfig(this.getFields()),
      resolveType: this.resolveType,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod2 = this.extensionASTNodes) !== null && _this$extensionASTNod2 !== void 0 ? _this$extensionASTNod2 : []
    };
  };

  _proto3.toString = function toString() {
    return this.name;
  };

  _proto3.toJSON = function toJSON() {
    return this.toString();
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass$4(GraphQLInterfaceType, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLInterfaceType';
    }
  }]);

  return GraphQLInterfaceType;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

defineInspect(GraphQLInterfaceType);

/**
 * Union Type Definition
 *
 * When a field can return one of a heterogeneous set of types, a Union type
 * is used to describe what types are possible as well as providing a function
 * to determine which type is actually used when the field is resolved.
 *
 * Example:
 *
 *     const PetType = new GraphQLUnionType({
 *       name: 'Pet',
 *       types: [ DogType, CatType ],
 *       resolveType(value) {
 *         if (value instanceof Dog) {
 *           return DogType;
 *         }
 *         if (value instanceof Cat) {
 *           return CatType;
 *         }
 *       }
 *     });
 *
 */
var GraphQLUnionType = /*#__PURE__*/function () {
  function GraphQLUnionType(config) {
    this.name = config.name;
    this.description = config.description;
    this.resolveType = config.resolveType;
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._types = defineTypes.bind(undefined, config);
    typeof config.name === 'string' || devAssert(0, 'Must provide name.');
    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(0, "".concat(this.name, " must provide \"resolveType\" as a function, ") + "but got: ".concat(inspect(config.resolveType), "."));
  }

  var _proto4 = GraphQLUnionType.prototype;

  _proto4.getTypes = function getTypes() {
    if (typeof this._types === 'function') {
      this._types = this._types();
    }

    return this._types;
  };

  _proto4.toConfig = function toConfig() {
    var _this$extensionASTNod3;

    return {
      name: this.name,
      description: this.description,
      types: this.getTypes(),
      resolveType: this.resolveType,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod3 = this.extensionASTNodes) !== null && _this$extensionASTNod3 !== void 0 ? _this$extensionASTNod3 : []
    };
  };

  _proto4.toString = function toString() {
    return this.name;
  };

  _proto4.toJSON = function toJSON() {
    return this.toString();
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass$4(GraphQLUnionType, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLUnionType';
    }
  }]);

  return GraphQLUnionType;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

defineInspect(GraphQLUnionType);

function defineTypes(config) {
  var types = resolveThunk(config.types);
  Array.isArray(types) || devAssert(0, "Must provide Array of types or a function which returns such an array for Union ".concat(config.name, "."));
  return types;
}

/**
 * Enum Type Definition
 *
 * Some leaf values of requests and input values are Enums. GraphQL serializes
 * Enum values as strings, however internally Enums can be represented by any
 * kind of type, often integers.
 *
 * Example:
 *
 *     const RGBType = new GraphQLEnumType({
 *       name: 'RGB',
 *       values: {
 *         RED: { value: 0 },
 *         GREEN: { value: 1 },
 *         BLUE: { value: 2 }
 *       }
 *     });
 *
 * Note: If a value is not provided in a definition, the name of the enum value
 * will be used as its internal value.
 */
var GraphQLEnumType
/* <T> */
= /*#__PURE__*/function () {
  function GraphQLEnumType(config) {
    this.name = config.name;
    this.description = config.description;
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._values = defineEnumValues(this.name, config.values);
    this._valueLookup = new Map(this._values.map(function (enumValue) {
      return [enumValue.value, enumValue];
    }));
    this._nameLookup = keyMap(this._values, function (value) {
      return value.name;
    });
    typeof config.name === 'string' || devAssert(0, 'Must provide name.');
  }

  var _proto5 = GraphQLEnumType.prototype;

  _proto5.getValues = function getValues() {
    return this._values;
  };

  _proto5.getValue = function getValue(name) {
    return this._nameLookup[name];
  };

  _proto5.serialize = function serialize(outputValue) {
    var enumValue = this._valueLookup.get(outputValue);

    if (enumValue === undefined) {
      throw new GraphQLError("Enum \"".concat(this.name, "\" cannot represent value: ").concat(inspect(outputValue)));
    }

    return enumValue.name;
  };

  _proto5.parseValue = function parseValue(inputValue)
  /* T */
  {
    if (typeof inputValue !== 'string') {
      var valueStr = inspect(inputValue);
      throw new GraphQLError("Enum \"".concat(this.name, "\" cannot represent non-string value: ").concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr));
    }

    var enumValue = this.getValue(inputValue);

    if (enumValue == null) {
      throw new GraphQLError("Value \"".concat(inputValue, "\" does not exist in \"").concat(this.name, "\" enum.") + didYouMeanEnumValue(this, inputValue));
    }

    return enumValue.value;
  };

  _proto5.parseLiteral = function parseLiteral(valueNode, _variables)
  /* T */
  {
    // Note: variables will be resolved to a value before calling this function.
    if (valueNode.kind !== Kind.ENUM) {
      var valueStr = print(valueNode);
      throw new GraphQLError("Enum \"".concat(this.name, "\" cannot represent non-enum value: ").concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr), valueNode);
    }

    var enumValue = this.getValue(valueNode.value);

    if (enumValue == null) {
      var _valueStr = print(valueNode);

      throw new GraphQLError("Value \"".concat(_valueStr, "\" does not exist in \"").concat(this.name, "\" enum.") + didYouMeanEnumValue(this, _valueStr), valueNode);
    }

    return enumValue.value;
  };

  _proto5.toConfig = function toConfig() {
    var _this$extensionASTNod4;

    var values = keyValMap(this.getValues(), function (value) {
      return value.name;
    }, function (value) {
      return {
        description: value.description,
        value: value.value,
        deprecationReason: value.deprecationReason,
        extensions: value.extensions,
        astNode: value.astNode
      };
    });
    return {
      name: this.name,
      description: this.description,
      values: values,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod4 = this.extensionASTNodes) !== null && _this$extensionASTNod4 !== void 0 ? _this$extensionASTNod4 : []
    };
  };

  _proto5.toString = function toString() {
    return this.name;
  };

  _proto5.toJSON = function toJSON() {
    return this.toString();
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass$4(GraphQLEnumType, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLEnumType';
    }
  }]);

  return GraphQLEnumType;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

defineInspect(GraphQLEnumType);

function didYouMeanEnumValue(enumType, unknownValueStr) {
  var allNames = enumType.getValues().map(function (value) {
    return value.name;
  });
  var suggestedValues = suggestionList(unknownValueStr, allNames);
  return didYouMean('the enum value', suggestedValues);
}

function defineEnumValues(typeName, valueMap) {
  isPlainObj(valueMap) || devAssert(0, "".concat(typeName, " values must be an object with value names as keys."));
  return objectEntries$1(valueMap).map(function (_ref2) {
    var valueName = _ref2[0],
        valueConfig = _ref2[1];
    isPlainObj(valueConfig) || devAssert(0, "".concat(typeName, ".").concat(valueName, " must refer to an object with a \"value\" key ") + "representing an internal value but got: ".concat(inspect(valueConfig), "."));
    !('isDeprecated' in valueConfig) || devAssert(0, "".concat(typeName, ".").concat(valueName, " should provide \"deprecationReason\" instead of \"isDeprecated\"."));
    return {
      name: valueName,
      description: valueConfig.description,
      value: valueConfig.value !== undefined ? valueConfig.value : valueName,
      isDeprecated: valueConfig.deprecationReason != null,
      deprecationReason: valueConfig.deprecationReason,
      extensions: valueConfig.extensions && toObjMap(valueConfig.extensions),
      astNode: valueConfig.astNode
    };
  });
}

/**
 * Input Object Type Definition
 *
 * An input object defines a structured collection of fields which may be
 * supplied to a field argument.
 *
 * Using `NonNull` will ensure that a value must be provided by the query
 *
 * Example:
 *
 *     const GeoPoint = new GraphQLInputObjectType({
 *       name: 'GeoPoint',
 *       fields: {
 *         lat: { type: new GraphQLNonNull(GraphQLFloat) },
 *         lon: { type: new GraphQLNonNull(GraphQLFloat) },
 *         alt: { type: GraphQLFloat, defaultValue: 0 },
 *       }
 *     });
 *
 */
var GraphQLInputObjectType = /*#__PURE__*/function () {
  function GraphQLInputObjectType(config) {
    this.name = config.name;
    this.description = config.description;
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._fields = defineInputFieldMap.bind(undefined, config);
    typeof config.name === 'string' || devAssert(0, 'Must provide name.');
  }

  var _proto6 = GraphQLInputObjectType.prototype;

  _proto6.getFields = function getFields() {
    if (typeof this._fields === 'function') {
      this._fields = this._fields();
    }

    return this._fields;
  };

  _proto6.toConfig = function toConfig() {
    var _this$extensionASTNod5;

    var fields = mapValue(this.getFields(), function (field) {
      return {
        description: field.description,
        type: field.type,
        defaultValue: field.defaultValue,
        deprecationReason: field.deprecationReason,
        extensions: field.extensions,
        astNode: field.astNode
      };
    });
    return {
      name: this.name,
      description: this.description,
      fields: fields,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod5 = this.extensionASTNodes) !== null && _this$extensionASTNod5 !== void 0 ? _this$extensionASTNod5 : []
    };
  };

  _proto6.toString = function toString() {
    return this.name;
  };

  _proto6.toJSON = function toJSON() {
    return this.toString();
  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  ;

  _createClass$4(GraphQLInputObjectType, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get() {
      return 'GraphQLInputObjectType';
    }
  }]);

  return GraphQLInputObjectType;
}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

defineInspect(GraphQLInputObjectType);

function defineInputFieldMap(config) {
  var fieldMap = resolveThunk(config.fields);
  isPlainObj(fieldMap) || devAssert(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
  return mapValue(fieldMap, function (fieldConfig, fieldName) {
    !('resolve' in fieldConfig) || devAssert(0, "".concat(config.name, ".").concat(fieldName, " field has a resolve property, but Input Types cannot define resolvers."));
    return {
      name: fieldName,
      description: fieldConfig.description,
      type: fieldConfig.type,
      defaultValue: fieldConfig.defaultValue,
      deprecationReason: fieldConfig.deprecationReason,
      extensions: fieldConfig.extensions && toObjMap(fieldConfig.extensions),
      astNode: fieldConfig.astNode
    };
  });
}

function removeTemporaryGlobals() {
    isType(null);
    return remove();
}

function checkDEV() {
    __DEV__ ? invariant$2("boolean" === typeof DEV, DEV) : invariant$2("boolean" === typeof DEV, 38);
}
removeTemporaryGlobals();
checkDEV();

function shouldInclude(_a, variables) {
    var directives = _a.directives;
    if (!directives || !directives.length) {
        return true;
    }
    return getInclusionDirectives(directives).every(function (_a) {
        var directive = _a.directive, ifArgument = _a.ifArgument;
        var evaledValue = false;
        if (ifArgument.value.kind === 'Variable') {
            evaledValue = variables && variables[ifArgument.value.name.value];
            __DEV__ ? invariant$2(evaledValue !== void 0, "Invalid variable referenced in @" + directive.name.value + " directive.") : invariant$2(evaledValue !== void 0, 39);
        }
        else {
            evaledValue = ifArgument.value.value;
        }
        return directive.name.value === 'skip' ? !evaledValue : evaledValue;
    });
}
function getDirectiveNames(root) {
    var names = [];
    visit(root, {
        Directive: function (node) {
            names.push(node.name.value);
        },
    });
    return names;
}
function hasDirectives(names, root) {
    return getDirectiveNames(root).some(function (name) { return names.indexOf(name) > -1; });
}
function hasClientExports(document) {
    return (document &&
        hasDirectives(['client'], document) &&
        hasDirectives(['export'], document));
}
function isInclusionDirective(_a) {
    var value = _a.name.value;
    return value === 'skip' || value === 'include';
}
function getInclusionDirectives(directives) {
    var result = [];
    if (directives && directives.length) {
        directives.forEach(function (directive) {
            if (!isInclusionDirective(directive))
                return;
            var directiveArguments = directive.arguments;
            var directiveName = directive.name.value;
            __DEV__ ? invariant$2(directiveArguments && directiveArguments.length === 1, "Incorrect number of arguments for the @" + directiveName + " directive.") : invariant$2(directiveArguments && directiveArguments.length === 1, 40);
            var ifArgument = directiveArguments[0];
            __DEV__ ? invariant$2(ifArgument.name && ifArgument.name.value === 'if', "Invalid argument for the @" + directiveName + " directive.") : invariant$2(ifArgument.name && ifArgument.name.value === 'if', 41);
            var ifValue = ifArgument.value;
            __DEV__ ? invariant$2(ifValue &&
                (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), "Argument for the @" + directiveName + " directive must be a variable or a boolean value.") : invariant$2(ifValue &&
                (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 42);
            result.push({ directive: directive, ifArgument: ifArgument });
        });
    }
    return result;
}

function getFragmentQueryDocument(document, fragmentName) {
    var actualFragmentName = fragmentName;
    var fragments = [];
    document.definitions.forEach(function (definition) {
        if (definition.kind === 'OperationDefinition') {
            throw __DEV__ ? new InvariantError("Found a " + definition.operation + " operation" + (definition.name ? " named '" + definition.name.value + "'" : '') + ". " +
                'No operations are allowed when using a fragment as a query. Only fragments are allowed.') : new InvariantError(43);
        }
        if (definition.kind === 'FragmentDefinition') {
            fragments.push(definition);
        }
    });
    if (typeof actualFragmentName === 'undefined') {
        __DEV__ ? invariant$2(fragments.length === 1, "Found " + fragments.length + " fragments. `fragmentName` must be provided when there is not exactly 1 fragment.") : invariant$2(fragments.length === 1, 44);
        actualFragmentName = fragments[0].name.value;
    }
    var query = __assign(__assign({}, document), { definitions: __spreadArray([
            {
                kind: 'OperationDefinition',
                operation: 'query',
                selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                        {
                            kind: 'FragmentSpread',
                            name: {
                                kind: 'Name',
                                value: actualFragmentName,
                            },
                        },
                    ],
                },
            }
        ], document.definitions, true) });
    return query;
}
function createFragmentMap(fragments) {
    if (fragments === void 0) { fragments = []; }
    var symTable = {};
    fragments.forEach(function (fragment) {
        symTable[fragment.name.value] = fragment;
    });
    return symTable;
}
function getFragmentFromSelection(selection, fragmentMap) {
    switch (selection.kind) {
        case 'InlineFragment':
            return selection;
        case 'FragmentSpread': {
            var fragment = fragmentMap && fragmentMap[selection.name.value];
            __DEV__ ? invariant$2(fragment, "No fragment named " + selection.name.value + ".") : invariant$2(fragment, 45);
            return fragment;
        }
        default:
            return null;
    }
}

function isNonNullObject$1(obj) {
    return obj !== null && typeof obj === 'object';
}

function makeReference(id) {
    return { __ref: String(id) };
}
function isReference(obj) {
    return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');
}
function isDocumentNode(value) {
    return (isNonNullObject$1(value) &&
        value.kind === "Document" &&
        Array.isArray(value.definitions));
}
function isStringValue(value) {
    return value.kind === 'StringValue';
}
function isBooleanValue(value) {
    return value.kind === 'BooleanValue';
}
function isIntValue(value) {
    return value.kind === 'IntValue';
}
function isFloatValue(value) {
    return value.kind === 'FloatValue';
}
function isVariable(value) {
    return value.kind === 'Variable';
}
function isObjectValue(value) {
    return value.kind === 'ObjectValue';
}
function isListValue(value) {
    return value.kind === 'ListValue';
}
function isEnumValue(value) {
    return value.kind === 'EnumValue';
}
function isNullValue(value) {
    return value.kind === 'NullValue';
}
function valueToObjectRepresentation(argObj, name, value, variables) {
    if (isIntValue(value) || isFloatValue(value)) {
        argObj[name.value] = Number(value.value);
    }
    else if (isBooleanValue(value) || isStringValue(value)) {
        argObj[name.value] = value.value;
    }
    else if (isObjectValue(value)) {
        var nestedArgObj_1 = {};
        value.fields.map(function (obj) {
            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);
        });
        argObj[name.value] = nestedArgObj_1;
    }
    else if (isVariable(value)) {
        var variableValue = (variables || {})[value.name.value];
        argObj[name.value] = variableValue;
    }
    else if (isListValue(value)) {
        argObj[name.value] = value.values.map(function (listValue) {
            var nestedArgArrayObj = {};
            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);
            return nestedArgArrayObj[name.value];
        });
    }
    else if (isEnumValue(value)) {
        argObj[name.value] = value.value;
    }
    else if (isNullValue(value)) {
        argObj[name.value] = null;
    }
    else {
        throw __DEV__ ? new InvariantError("The inline argument \"" + name.value + "\" of kind \"" + value.kind + "\"" +
            'is not supported. Use variables instead of inline arguments to ' +
            'overcome this limitation.') : new InvariantError(54);
    }
}
function storeKeyNameFromField(field, variables) {
    var directivesObj = null;
    if (field.directives) {
        directivesObj = {};
        field.directives.forEach(function (directive) {
            directivesObj[directive.name.value] = {};
            if (directive.arguments) {
                directive.arguments.forEach(function (_a) {
                    var name = _a.name, value = _a.value;
                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);
                });
            }
        });
    }
    var argObj = null;
    if (field.arguments && field.arguments.length) {
        argObj = {};
        field.arguments.forEach(function (_a) {
            var name = _a.name, value = _a.value;
            return valueToObjectRepresentation(argObj, name, value, variables);
        });
    }
    return getStoreKeyName(field.name.value, argObj, directivesObj);
}
var KNOWN_DIRECTIVES = [
    'connection',
    'include',
    'skip',
    'client',
    'rest',
    'export',
];
var getStoreKeyName = Object.assign(function (fieldName, args, directives) {
    if (args &&
        directives &&
        directives['connection'] &&
        directives['connection']['key']) {
        if (directives['connection']['filter'] &&
            directives['connection']['filter'].length > 0) {
            var filterKeys = directives['connection']['filter']
                ? directives['connection']['filter']
                : [];
            filterKeys.sort();
            var filteredArgs_1 = {};
            filterKeys.forEach(function (key) {
                filteredArgs_1[key] = args[key];
            });
            return directives['connection']['key'] + "(" + stringify(filteredArgs_1) + ")";
        }
        else {
            return directives['connection']['key'];
        }
    }
    var completeFieldName = fieldName;
    if (args) {
        var stringifiedArgs = stringify(args);
        completeFieldName += "(" + stringifiedArgs + ")";
    }
    if (directives) {
        Object.keys(directives).forEach(function (key) {
            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)
                return;
            if (directives[key] && Object.keys(directives[key]).length) {
                completeFieldName += "@" + key + "(" + stringify(directives[key]) + ")";
            }
            else {
                completeFieldName += "@" + key;
            }
        });
    }
    return completeFieldName;
}, {
    setStringify: function (s) {
        var previous = stringify;
        stringify = s;
        return previous;
    },
});
var stringify = function defaultStringify(value) {
    return JSON.stringify(value, stringifyReplacer);
};
function stringifyReplacer(_key, value) {
    if (isNonNullObject$1(value) && !Array.isArray(value)) {
        value = Object.keys(value).sort().reduce(function (copy, key) {
            copy[key] = value[key];
            return copy;
        }, {});
    }
    return value;
}
function argumentsObjectFromField(field, variables) {
    if (field.arguments && field.arguments.length) {
        var argObj_1 = {};
        field.arguments.forEach(function (_a) {
            var name = _a.name, value = _a.value;
            return valueToObjectRepresentation(argObj_1, name, value, variables);
        });
        return argObj_1;
    }
    return null;
}
function resultKeyNameFromField(field) {
    return field.alias ? field.alias.value : field.name.value;
}
function getTypenameFromResult(result, selectionSet, fragmentMap) {
    if (typeof result.__typename === 'string') {
        return result.__typename;
    }
    for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {
        var selection = _a[_i];
        if (isField(selection)) {
            if (selection.name.value === '__typename') {
                return result[resultKeyNameFromField(selection)];
            }
        }
        else {
            var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);
            if (typeof typename === 'string') {
                return typename;
            }
        }
    }
}
function isField(selection) {
    return selection.kind === 'Field';
}
function isInlineFragment(selection) {
    return selection.kind === 'InlineFragment';
}

function checkDocument(doc) {
    __DEV__ ? invariant$2(doc && doc.kind === 'Document', "Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql") : invariant$2(doc && doc.kind === 'Document', 46);
    var operations = doc.definitions
        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })
        .map(function (definition) {
        if (definition.kind !== 'OperationDefinition') {
            throw __DEV__ ? new InvariantError("Schema type definitions not allowed in queries. Found: \"" + definition.kind + "\"") : new InvariantError(47);
        }
        return definition;
    });
    __DEV__ ? invariant$2(operations.length <= 1, "Ambiguous GraphQL document: contains " + operations.length + " operations") : invariant$2(operations.length <= 1, 48);
    return doc;
}
function getOperationDefinition(doc) {
    checkDocument(doc);
    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];
}
function getOperationName(doc) {
    return (doc.definitions
        .filter(function (definition) {
        return definition.kind === 'OperationDefinition' && definition.name;
    })
        .map(function (x) { return x.name.value; })[0] || null);
}
function getFragmentDefinitions(doc) {
    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });
}
function getQueryDefinition(doc) {
    var queryDef = getOperationDefinition(doc);
    __DEV__ ? invariant$2(queryDef && queryDef.operation === 'query', 'Must contain a query definition.') : invariant$2(queryDef && queryDef.operation === 'query', 49);
    return queryDef;
}
function getFragmentDefinition(doc) {
    __DEV__ ? invariant$2(doc.kind === 'Document', "Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql") : invariant$2(doc.kind === 'Document', 50);
    __DEV__ ? invariant$2(doc.definitions.length <= 1, 'Fragment must have exactly one definition.') : invariant$2(doc.definitions.length <= 1, 51);
    var fragmentDef = doc.definitions[0];
    __DEV__ ? invariant$2(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.') : invariant$2(fragmentDef.kind === 'FragmentDefinition', 52);
    return fragmentDef;
}
function getMainDefinition(queryDoc) {
    checkDocument(queryDoc);
    var fragmentDefinition;
    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {
        var definition = _a[_i];
        if (definition.kind === 'OperationDefinition') {
            var operation = definition.operation;
            if (operation === 'query' ||
                operation === 'mutation' ||
                operation === 'subscription') {
                return definition;
            }
        }
        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {
            fragmentDefinition = definition;
        }
    }
    if (fragmentDefinition) {
        return fragmentDefinition;
    }
    throw __DEV__ ? new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.') : new InvariantError(53);
}
function getDefaultValues(definition) {
    var defaultValues = Object.create(null);
    var defs = definition && definition.variableDefinitions;
    if (defs && defs.length) {
        defs.forEach(function (def) {
            if (def.defaultValue) {
                valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);
            }
        });
    }
    return defaultValues;
}

function filterInPlace(array, test, context) {
    var target = 0;
    array.forEach(function (elem, i) {
        if (test.call(this, elem, i, array)) {
            array[target++] = elem;
        }
    }, context);
    array.length = target;
    return array;
}

var TYPENAME_FIELD = {
    kind: 'Field',
    name: {
        kind: 'Name',
        value: '__typename',
    },
};
function isEmpty(op, fragments) {
    return op.selectionSet.selections.every(function (selection) {
        return selection.kind === 'FragmentSpread' &&
            isEmpty(fragments[selection.name.value], fragments);
    });
}
function nullIfDocIsEmpty(doc) {
    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))
        ? null
        : doc;
}
function getDirectiveMatcher(directives) {
    return function directiveMatcher(directive) {
        return directives.some(function (dir) {
            return (dir.name && dir.name === directive.name.value) ||
                (dir.test && dir.test(directive));
        });
    };
}
function removeDirectivesFromDocument(directives, doc) {
    var variablesInUse = Object.create(null);
    var variablesToRemove = [];
    var fragmentSpreadsInUse = Object.create(null);
    var fragmentSpreadsToRemove = [];
    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {
        Variable: {
            enter: function (node, _key, parent) {
                if (parent.kind !== 'VariableDefinition') {
                    variablesInUse[node.name.value] = true;
                }
            },
        },
        Field: {
            enter: function (node) {
                if (directives && node.directives) {
                    var shouldRemoveField = directives.some(function (directive) { return directive.remove; });
                    if (shouldRemoveField &&
                        node.directives &&
                        node.directives.some(getDirectiveMatcher(directives))) {
                        if (node.arguments) {
                            node.arguments.forEach(function (arg) {
                                if (arg.value.kind === 'Variable') {
                                    variablesToRemove.push({
                                        name: arg.value.name.value,
                                    });
                                }
                            });
                        }
                        if (node.selectionSet) {
                            getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {
                                fragmentSpreadsToRemove.push({
                                    name: frag.name.value,
                                });
                            });
                        }
                        return null;
                    }
                }
            },
        },
        FragmentSpread: {
            enter: function (node) {
                fragmentSpreadsInUse[node.name.value] = true;
            },
        },
        Directive: {
            enter: function (node) {
                if (getDirectiveMatcher(directives)(node)) {
                    return null;
                }
            },
        },
    }));
    if (modifiedDoc &&
        filterInPlace(variablesToRemove, function (v) { return !!v.name && !variablesInUse[v.name]; }).length) {
        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);
    }
    if (modifiedDoc &&
        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !!fs.name && !fragmentSpreadsInUse[fs.name]; })
            .length) {
        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);
    }
    return modifiedDoc;
}
var addTypenameToDocument = Object.assign(function (doc) {
    return visit(checkDocument(doc), {
        SelectionSet: {
            enter: function (node, _key, parent) {
                if (parent &&
                    parent.kind === 'OperationDefinition') {
                    return;
                }
                var selections = node.selections;
                if (!selections) {
                    return;
                }
                var skip = selections.some(function (selection) {
                    return (isField(selection) &&
                        (selection.name.value === '__typename' ||
                            selection.name.value.lastIndexOf('__', 0) === 0));
                });
                if (skip) {
                    return;
                }
                var field = parent;
                if (isField(field) &&
                    field.directives &&
                    field.directives.some(function (d) { return d.name.value === 'export'; })) {
                    return;
                }
                return __assign(__assign({}, node), { selections: __spreadArray(__spreadArray([], selections, true), [TYPENAME_FIELD], false) });
            },
        },
    });
}, {
    added: function (field) {
        return field === TYPENAME_FIELD;
    },
});
var connectionRemoveConfig = {
    test: function (directive) {
        var willRemove = directive.name.value === 'connection';
        if (willRemove) {
            if (!directive.arguments ||
                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {
                __DEV__ && invariant$2.warn('Removing an @connection directive even though it does not have a key. ' +
                    'You may want to use the key parameter to specify a store key.');
            }
        }
        return willRemove;
    },
};
function removeConnectionDirectiveFromDocument(doc) {
    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));
}
function getArgumentMatcher(config) {
    return function argumentMatcher(argument) {
        return config.some(function (aConfig) {
            return argument.value &&
                argument.value.kind === 'Variable' &&
                argument.value.name &&
                (aConfig.name === argument.value.name.value ||
                    (aConfig.test && aConfig.test(argument)));
        });
    };
}
function removeArgumentsFromDocument(config, doc) {
    var argMatcher = getArgumentMatcher(config);
    return nullIfDocIsEmpty(visit(doc, {
        OperationDefinition: {
            enter: function (node) {
                return __assign(__assign({}, node), { variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {
                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });
                    }) : [] });
            },
        },
        Field: {
            enter: function (node) {
                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });
                if (shouldRemoveField) {
                    var argMatchCount_1 = 0;
                    if (node.arguments) {
                        node.arguments.forEach(function (arg) {
                            if (argMatcher(arg)) {
                                argMatchCount_1 += 1;
                            }
                        });
                    }
                    if (argMatchCount_1 === 1) {
                        return null;
                    }
                }
            },
        },
        Argument: {
            enter: function (node) {
                if (argMatcher(node)) {
                    return null;
                }
            },
        },
    }));
}
function removeFragmentSpreadFromDocument(config, doc) {
    function enter(node) {
        if (config.some(function (def) { return def.name === node.name.value; })) {
            return null;
        }
    }
    return nullIfDocIsEmpty(visit(doc, {
        FragmentSpread: { enter: enter },
        FragmentDefinition: { enter: enter },
    }));
}
function getAllFragmentSpreadsFromSelectionSet(selectionSet) {
    var allFragments = [];
    selectionSet.selections.forEach(function (selection) {
        if ((isField(selection) || isInlineFragment(selection)) &&
            selection.selectionSet) {
            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });
        }
        else if (selection.kind === 'FragmentSpread') {
            allFragments.push(selection);
        }
    });
    return allFragments;
}
function buildQueryFromSelectionSet(document) {
    var definition = getMainDefinition(document);
    var definitionOperation = definition.operation;
    if (definitionOperation === 'query') {
        return document;
    }
    var modifiedDoc = visit(document, {
        OperationDefinition: {
            enter: function (node) {
                return __assign(__assign({}, node), { operation: 'query' });
            },
        },
    });
    return modifiedDoc;
}
function removeClientSetsFromDocument(document) {
    checkDocument(document);
    var modifiedDoc = removeDirectivesFromDocument([
        {
            test: function (directive) { return directive.name.value === 'client'; },
            remove: true,
        },
    ], document);
    if (modifiedDoc) {
        modifiedDoc = visit(modifiedDoc, {
            FragmentDefinition: {
                enter: function (node) {
                    if (node.selectionSet) {
                        var isTypenameOnly = node.selectionSet.selections.every(function (selection) {
                            return isField(selection) && selection.name.value === '__typename';
                        });
                        if (isTypenameOnly) {
                            return null;
                        }
                    }
                },
            },
        });
    }
    return modifiedDoc;
}

var hasOwnProperty$g = Object.prototype.hasOwnProperty;
function mergeDeep() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    return mergeDeepArray(sources);
}
function mergeDeepArray(sources) {
    var target = sources[0] || {};
    var count = sources.length;
    if (count > 1) {
        var merger = new DeepMerger();
        for (var i = 1; i < count; ++i) {
            target = merger.merge(target, sources[i]);
        }
    }
    return target;
}
var defaultReconciler = function (target, source, property) {
    return this.merge(target[property], source[property]);
};
var DeepMerger = (function () {
    function DeepMerger(reconciler) {
        if (reconciler === void 0) { reconciler = defaultReconciler; }
        this.reconciler = reconciler;
        this.isObject = isNonNullObject$1;
        this.pastCopies = new Set();
    }
    DeepMerger.prototype.merge = function (target, source) {
        var _this = this;
        var context = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            context[_i - 2] = arguments[_i];
        }
        if (isNonNullObject$1(source) && isNonNullObject$1(target)) {
            Object.keys(source).forEach(function (sourceKey) {
                if (hasOwnProperty$g.call(target, sourceKey)) {
                    var targetValue = target[sourceKey];
                    if (source[sourceKey] !== targetValue) {
                        var result = _this.reconciler.apply(_this, __spreadArray([target, source, sourceKey], context, false));
                        if (result !== targetValue) {
                            target = _this.shallowCopyForMerge(target);
                            target[sourceKey] = result;
                        }
                    }
                }
                else {
                    target = _this.shallowCopyForMerge(target);
                    target[sourceKey] = source[sourceKey];
                }
            });
            return target;
        }
        return source;
    };
    DeepMerger.prototype.shallowCopyForMerge = function (value) {
        if (isNonNullObject$1(value) && !this.pastCopies.has(value)) {
            if (Array.isArray(value)) {
                value = value.slice(0);
            }
            else {
                value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);
            }
            this.pastCopies.add(value);
        }
        return value;
    };
    return DeepMerger;
}());

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray$5(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$5(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen); }

function _arrayLikeToArray$5(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties$3(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass$3(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$3(Constructor.prototype, protoProps); if (staticProps) _defineProperties$3(Constructor, staticProps); return Constructor; }

// === Symbol Support ===
var hasSymbols$6 = function () {
  return typeof Symbol === 'function';
};

var hasSymbol = function (name) {
  return hasSymbols$6() && Boolean(Symbol[name]);
};

var getSymbol = function (name) {
  return hasSymbol(name) ? Symbol[name] : '@@' + name;
};

if (hasSymbols$6() && !hasSymbol('observable')) {
  Symbol.observable = Symbol('observable');
}

var SymbolIterator = getSymbol('iterator');
var SymbolObservable = getSymbol('observable');
var SymbolSpecies = getSymbol('species'); // === Abstract Operations ===

function getMethod(obj, key) {
  var value = obj[key];
  if (value == null) return undefined;
  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');
  return value;
}

function getSpecies(obj) {
  var ctor = obj.constructor;

  if (ctor !== undefined) {
    ctor = ctor[SymbolSpecies];

    if (ctor === null) {
      ctor = undefined;
    }
  }

  return ctor !== undefined ? ctor : Observable;
}

function isObservable(x) {
  return x instanceof Observable; // SPEC: Brand check
}

function hostReportError(e) {
  if (hostReportError.log) {
    hostReportError.log(e);
  } else {
    setTimeout(function () {
      throw e;
    });
  }
}

function enqueue(fn) {
  Promise.resolve().then(function () {
    try {
      fn();
    } catch (e) {
      hostReportError(e);
    }
  });
}

function cleanupSubscription(subscription) {
  var cleanup = subscription._cleanup;
  if (cleanup === undefined) return;
  subscription._cleanup = undefined;

  if (!cleanup) {
    return;
  }

  try {
    if (typeof cleanup === 'function') {
      cleanup();
    } else {
      var unsubscribe = getMethod(cleanup, 'unsubscribe');

      if (unsubscribe) {
        unsubscribe.call(cleanup);
      }
    }
  } catch (e) {
    hostReportError(e);
  }
}

function closeSubscription(subscription) {
  subscription._observer = undefined;
  subscription._queue = undefined;
  subscription._state = 'closed';
}

function flushSubscription(subscription) {
  var queue = subscription._queue;

  if (!queue) {
    return;
  }

  subscription._queue = undefined;
  subscription._state = 'ready';

  for (var i = 0; i < queue.length; ++i) {
    notifySubscription(subscription, queue[i].type, queue[i].value);
    if (subscription._state === 'closed') break;
  }
}

function notifySubscription(subscription, type, value) {
  subscription._state = 'running';
  var observer = subscription._observer;

  try {
    var m = getMethod(observer, type);

    switch (type) {
      case 'next':
        if (m) m.call(observer, value);
        break;

      case 'error':
        closeSubscription(subscription);
        if (m) m.call(observer, value);else throw value;
        break;

      case 'complete':
        closeSubscription(subscription);
        if (m) m.call(observer);
        break;
    }
  } catch (e) {
    hostReportError(e);
  }

  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';
}

function onNotify(subscription, type, value) {
  if (subscription._state === 'closed') return;

  if (subscription._state === 'buffering') {
    subscription._queue.push({
      type: type,
      value: value
    });

    return;
  }

  if (subscription._state !== 'ready') {
    subscription._state = 'buffering';
    subscription._queue = [{
      type: type,
      value: value
    }];
    enqueue(function () {
      return flushSubscription(subscription);
    });
    return;
  }

  notifySubscription(subscription, type, value);
}

var Subscription = /*#__PURE__*/function () {
  function Subscription(observer, subscriber) {
    // ASSERT: observer is an object
    // ASSERT: subscriber is callable
    this._cleanup = undefined;
    this._observer = observer;
    this._queue = undefined;
    this._state = 'initializing';
    var subscriptionObserver = new SubscriptionObserver(this);

    try {
      this._cleanup = subscriber.call(undefined, subscriptionObserver);
    } catch (e) {
      subscriptionObserver.error(e);
    }

    if (this._state === 'initializing') this._state = 'ready';
  }

  var _proto = Subscription.prototype;

  _proto.unsubscribe = function unsubscribe() {
    if (this._state !== 'closed') {
      closeSubscription(this);
      cleanupSubscription(this);
    }
  };

  _createClass$3(Subscription, [{
    key: "closed",
    get: function () {
      return this._state === 'closed';
    }
  }]);

  return Subscription;
}();

var SubscriptionObserver = /*#__PURE__*/function () {
  function SubscriptionObserver(subscription) {
    this._subscription = subscription;
  }

  var _proto2 = SubscriptionObserver.prototype;

  _proto2.next = function next(value) {
    onNotify(this._subscription, 'next', value);
  };

  _proto2.error = function error(value) {
    onNotify(this._subscription, 'error', value);
  };

  _proto2.complete = function complete() {
    onNotify(this._subscription, 'complete');
  };

  _createClass$3(SubscriptionObserver, [{
    key: "closed",
    get: function () {
      return this._subscription._state === 'closed';
    }
  }]);

  return SubscriptionObserver;
}();

var Observable = /*#__PURE__*/function () {
  function Observable(subscriber) {
    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');
    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');
    this._subscriber = subscriber;
  }

  var _proto3 = Observable.prototype;

  _proto3.subscribe = function subscribe(observer) {
    if (typeof observer !== 'object' || observer === null) {
      observer = {
        next: observer,
        error: arguments[1],
        complete: arguments[2]
      };
    }

    return new Subscription(observer, this._subscriber);
  };

  _proto3.forEach = function forEach(fn) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      if (typeof fn !== 'function') {
        reject(new TypeError(fn + ' is not a function'));
        return;
      }

      function done() {
        subscription.unsubscribe();
        resolve();
      }

      var subscription = _this.subscribe({
        next: function (value) {
          try {
            fn(value, done);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  };

  _proto3.map = function map(fn) {
    var _this2 = this;

    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    return new C(function (observer) {
      return _this2.subscribe({
        next: function (value) {
          try {
            value = fn(value);
          } catch (e) {
            return observer.error(e);
          }

          observer.next(value);
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          observer.complete();
        }
      });
    });
  };

  _proto3.filter = function filter(fn) {
    var _this3 = this;

    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    return new C(function (observer) {
      return _this3.subscribe({
        next: function (value) {
          try {
            if (!fn(value)) return;
          } catch (e) {
            return observer.error(e);
          }

          observer.next(value);
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          observer.complete();
        }
      });
    });
  };

  _proto3.reduce = function reduce(fn) {
    var _this4 = this;

    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    var hasSeed = arguments.length > 1;
    var hasValue = false;
    var seed = arguments[1];
    var acc = seed;
    return new C(function (observer) {
      return _this4.subscribe({
        next: function (value) {
          var first = !hasValue;
          hasValue = true;

          if (!first || hasSeed) {
            try {
              acc = fn(acc, value);
            } catch (e) {
              return observer.error(e);
            }
          } else {
            acc = value;
          }
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));
          observer.next(acc);
          observer.complete();
        }
      });
    });
  };

  _proto3.concat = function concat() {
    var _this5 = this;

    for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
      sources[_key] = arguments[_key];
    }

    var C = getSpecies(this);
    return new C(function (observer) {
      var subscription;
      var index = 0;

      function startNext(next) {
        subscription = next.subscribe({
          next: function (v) {
            observer.next(v);
          },
          error: function (e) {
            observer.error(e);
          },
          complete: function () {
            if (index === sources.length) {
              subscription = undefined;
              observer.complete();
            } else {
              startNext(C.from(sources[index++]));
            }
          }
        });
      }

      startNext(_this5);
      return function () {
        if (subscription) {
          subscription.unsubscribe();
          subscription = undefined;
        }
      };
    });
  };

  _proto3.flatMap = function flatMap(fn) {
    var _this6 = this;

    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    return new C(function (observer) {
      var subscriptions = [];

      var outer = _this6.subscribe({
        next: function (value) {
          if (fn) {
            try {
              value = fn(value);
            } catch (e) {
              return observer.error(e);
            }
          }

          var inner = C.from(value).subscribe({
            next: function (value) {
              observer.next(value);
            },
            error: function (e) {
              observer.error(e);
            },
            complete: function () {
              var i = subscriptions.indexOf(inner);
              if (i >= 0) subscriptions.splice(i, 1);
              completeIfDone();
            }
          });
          subscriptions.push(inner);
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          completeIfDone();
        }
      });

      function completeIfDone() {
        if (outer.closed && subscriptions.length === 0) observer.complete();
      }

      return function () {
        subscriptions.forEach(function (s) {
          return s.unsubscribe();
        });
        outer.unsubscribe();
      };
    });
  };

  _proto3[SymbolObservable] = function () {
    return this;
  };

  Observable.from = function from(x) {
    var C = typeof this === 'function' ? this : Observable;
    if (x == null) throw new TypeError(x + ' is not an object');
    var method = getMethod(x, SymbolObservable);

    if (method) {
      var observable = method.call(x);
      if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');
      if (isObservable(observable) && observable.constructor === C) return observable;
      return new C(function (observer) {
        return observable.subscribe(observer);
      });
    }

    if (hasSymbol('iterator')) {
      method = getMethod(x, SymbolIterator);

      if (method) {
        return new C(function (observer) {
          enqueue(function () {
            if (observer.closed) return;

            for (var _iterator = _createForOfIteratorHelperLoose(method.call(x)), _step; !(_step = _iterator()).done;) {
              var item = _step.value;
              observer.next(item);
              if (observer.closed) return;
            }

            observer.complete();
          });
        });
      }
    }

    if (Array.isArray(x)) {
      return new C(function (observer) {
        enqueue(function () {
          if (observer.closed) return;

          for (var i = 0; i < x.length; ++i) {
            observer.next(x[i]);
            if (observer.closed) return;
          }

          observer.complete();
        });
      });
    }

    throw new TypeError(x + ' is not observable');
  };

  Observable.of = function of() {
    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }

    var C = typeof this === 'function' ? this : Observable;
    return new C(function (observer) {
      enqueue(function () {
        if (observer.closed) return;

        for (var i = 0; i < items.length; ++i) {
          observer.next(items[i]);
          if (observer.closed) return;
        }

        observer.complete();
      });
    });
  };

  _createClass$3(Observable, null, [{
    key: SymbolSpecies,
    get: function () {
      return this;
    }
  }]);

  return Observable;
}();

if (hasSymbols$6()) {
  Object.defineProperty(Observable, Symbol('extensions'), {
    value: {
      symbol: SymbolObservable,
      hostReportError: hostReportError
    },
    configurable: true
  });
}

function symbolObservablePonyfill(root) {
	var result;
	var Symbol = root.Symbol;

	if (typeof Symbol === 'function') {
		if (Symbol.observable) {
			result = Symbol.observable;
		} else {

			if (typeof Symbol.for === 'function') {
				// This just needs to be something that won't trample other user's Symbol.for use
				// It also will guide people to the source of their issues, if this is problematic.
				// META: It's a resource locator!
				result = Symbol.for('https://github.com/benlesh/symbol-observable');
			} else {
				// Symbol.for didn't exist! The best we can do at this point is a totally 
				// unique symbol. Note that the string argument here is a descriptor, not
				// an identifier. This symbol is unique.
				result = Symbol('https://github.com/benlesh/symbol-observable');
			}
			try {
				Symbol.observable = result;
			} catch (err) {
				// Do nothing. In some environments, users have frozen `Symbol` for security reasons,
				// if it is frozen assigning to it will throw. In this case, we don't care, because
				// they will need to use the returned value from the ponyfill.
			}
		}
	} else {
		result = '@@observable';
	}

	return result;
}

/* global window */

var root$2;

if (typeof self !== 'undefined') {
  root$2 = self;
} else if (typeof window !== 'undefined') {
  root$2 = window;
} else if (typeof global !== 'undefined') {
  root$2 = global;
} else if (typeof module !== 'undefined') {
  root$2 = module;
} else {
  root$2 = Function('return this')();
}

symbolObservablePonyfill(root$2);

var prototype = Observable.prototype;
var fakeObsSymbol = '@@observable';
if (!prototype[fakeObsSymbol]) {
    prototype[fakeObsSymbol] = function () { return this; };
}

var toString$4 = Object.prototype.toString;
function cloneDeep(value) {
    return cloneDeepHelper(value);
}
function cloneDeepHelper(val, seen) {
    switch (toString$4.call(val)) {
        case "[object Array]": {
            seen = seen || new Map;
            if (seen.has(val))
                return seen.get(val);
            var copy_1 = val.slice(0);
            seen.set(val, copy_1);
            copy_1.forEach(function (child, i) {
                copy_1[i] = cloneDeepHelper(child, seen);
            });
            return copy_1;
        }
        case "[object Object]": {
            seen = seen || new Map;
            if (seen.has(val))
                return seen.get(val);
            var copy_2 = Object.create(Object.getPrototypeOf(val));
            seen.set(val, copy_2);
            Object.keys(val).forEach(function (key) {
                copy_2[key] = cloneDeepHelper(val[key], seen);
            });
            return copy_2;
        }
        default:
            return val;
    }
}

function deepFreeze(value) {
    var workSet = new Set([value]);
    workSet.forEach(function (obj) {
        if (isNonNullObject$1(obj) && shallowFreeze(obj) === obj) {
            Object.getOwnPropertyNames(obj).forEach(function (name) {
                if (isNonNullObject$1(obj[name]))
                    workSet.add(obj[name]);
            });
        }
    });
    return value;
}
function shallowFreeze(obj) {
    if (__DEV__ && !Object.isFrozen(obj)) {
        try {
            Object.freeze(obj);
        }
        catch (e) {
            if (e instanceof TypeError)
                return null;
            throw e;
        }
    }
    return obj;
}
function maybeDeepFreeze(obj) {
    if (__DEV__) {
        deepFreeze(obj);
    }
    return obj;
}

function iterateObserversSafely(observers, method, argument) {
    var observersWithMethod = [];
    observers.forEach(function (obs) { return obs[method] && observersWithMethod.push(obs); });
    observersWithMethod.forEach(function (obs) { return obs[method](argument); });
}

function asyncMap(observable, mapFn, catchFn) {
    return new Observable(function (observer) {
        var next = observer.next, error = observer.error, complete = observer.complete;
        var activeCallbackCount = 0;
        var completed = false;
        var promiseQueue = {
            then: function (callback) {
                return new Promise(function (resolve) { return resolve(callback()); });
            },
        };
        function makeCallback(examiner, delegate) {
            if (examiner) {
                return function (arg) {
                    ++activeCallbackCount;
                    var both = function () { return examiner(arg); };
                    promiseQueue = promiseQueue.then(both, both).then(function (result) {
                        --activeCallbackCount;
                        next && next.call(observer, result);
                        if (completed) {
                            handler.complete();
                        }
                    }, function (error) {
                        --activeCallbackCount;
                        throw error;
                    }).catch(function (caught) {
                        error && error.call(observer, caught);
                    });
                };
            }
            else {
                return function (arg) { return delegate && delegate.call(observer, arg); };
            }
        }
        var handler = {
            next: makeCallback(mapFn, next),
            error: makeCallback(catchFn, error),
            complete: function () {
                completed = true;
                if (!activeCallbackCount) {
                    complete && complete.call(observer);
                }
            },
        };
        var sub = observable.subscribe(handler);
        return function () { return sub.unsubscribe(); };
    });
}

var canUseWeakMap = typeof WeakMap === 'function' && !(typeof navigator === 'object' &&
    navigator.product === 'ReactNative');
var canUseWeakSet = typeof WeakSet === 'function';
var canUseSymbol$1 = typeof Symbol === 'function' &&
    typeof Symbol.for === 'function';

function fixObservableSubclass(subclass) {
    function set(key) {
        Object.defineProperty(subclass, key, { value: Observable });
    }
    if (canUseSymbol$1 && Symbol.species) {
        set(Symbol.species);
    }
    set("@@species");
    return subclass;
}

function isPromiseLike(value) {
    return value && typeof value.then === "function";
}
var Concast = (function (_super) {
    __extends(Concast, _super);
    function Concast(sources) {
        var _this = _super.call(this, function (observer) {
            _this.addObserver(observer);
            return function () { return _this.removeObserver(observer); };
        }) || this;
        _this.observers = new Set();
        _this.addCount = 0;
        _this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
        _this.handlers = {
            next: function (result) {
                if (_this.sub !== null) {
                    _this.latest = ["next", result];
                    iterateObserversSafely(_this.observers, "next", result);
                }
            },
            error: function (error) {
                var sub = _this.sub;
                if (sub !== null) {
                    if (sub)
                        setTimeout(function () { return sub.unsubscribe(); });
                    _this.sub = null;
                    _this.latest = ["error", error];
                    _this.reject(error);
                    iterateObserversSafely(_this.observers, "error", error);
                }
            },
            complete: function () {
                if (_this.sub !== null) {
                    var value = _this.sources.shift();
                    if (!value) {
                        _this.sub = null;
                        if (_this.latest &&
                            _this.latest[0] === "next") {
                            _this.resolve(_this.latest[1]);
                        }
                        else {
                            _this.resolve();
                        }
                        iterateObserversSafely(_this.observers, "complete");
                    }
                    else if (isPromiseLike(value)) {
                        value.then(function (obs) { return _this.sub = obs.subscribe(_this.handlers); });
                    }
                    else {
                        _this.sub = value.subscribe(_this.handlers);
                    }
                }
            },
        };
        _this.cancel = function (reason) {
            _this.reject(reason);
            _this.sources = [];
            _this.handlers.complete();
        };
        _this.promise.catch(function (_) { });
        if (typeof sources === "function") {
            sources = [new Observable(sources)];
        }
        if (isPromiseLike(sources)) {
            sources.then(function (iterable) { return _this.start(iterable); }, _this.handlers.error);
        }
        else {
            _this.start(sources);
        }
        return _this;
    }
    Concast.prototype.start = function (sources) {
        if (this.sub !== void 0)
            return;
        this.sources = Array.from(sources);
        this.handlers.complete();
    };
    Concast.prototype.deliverLastMessage = function (observer) {
        if (this.latest) {
            var nextOrError = this.latest[0];
            var method = observer[nextOrError];
            if (method) {
                method.call(observer, this.latest[1]);
            }
            if (this.sub === null &&
                nextOrError === "next" &&
                observer.complete) {
                observer.complete();
            }
        }
    };
    Concast.prototype.addObserver = function (observer) {
        if (!this.observers.has(observer)) {
            this.deliverLastMessage(observer);
            this.observers.add(observer);
            ++this.addCount;
        }
    };
    Concast.prototype.removeObserver = function (observer, quietly) {
        if (this.observers.delete(observer) &&
            --this.addCount < 1 &&
            !quietly) {
            this.handlers.error(new Error("Observable cancelled prematurely"));
        }
    };
    Concast.prototype.cleanup = function (callback) {
        var _this = this;
        var called = false;
        var once = function () {
            if (!called) {
                called = true;
                _this.observers.delete(observer);
                callback();
            }
        };
        var observer = {
            next: once,
            error: once,
            complete: once,
        };
        var count = this.addCount;
        this.addObserver(observer);
        this.addCount = count;
    };
    return Concast;
}(Observable));
fixObservableSubclass(Concast);

function isNonEmptyArray(value) {
    return Array.isArray(value) && value.length > 0;
}

function graphQLResultHasError(result) {
    return (result.errors && result.errors.length > 0) || false;
}

function compact() {
    var objects = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
    }
    var result = Object.create(null);
    objects.forEach(function (obj) {
        if (!obj)
            return;
        Object.keys(obj).forEach(function (key) {
            var value = obj[key];
            if (value !== void 0) {
                result[key] = value;
            }
        });
    });
    return result;
}

var prefixCounts = new Map();
function makeUniqueId(prefix) {
    var count = prefixCounts.get(prefix) || 1;
    prefixCounts.set(prefix, count + 1);
    return prefix + ":" + count + ":" + Math.random().toString(36).slice(2);
}

function stringifyForDisplay(value) {
    var undefId = makeUniqueId("stringifyForDisplay");
    return JSON.stringify(value, function (key, value) {
        return value === void 0 ? undefId : value;
    }).split(JSON.stringify(undefId)).join("<undefined>");
}

var contextKey = canUseSymbol$1
    ? Symbol.for('__APOLLO_CONTEXT__')
    : '__APOLLO_CONTEXT__';
function getApolloContext() {
    var context = React__namespace.createContext[contextKey];
    if (!context) {
        Object.defineProperty(React__namespace.createContext, contextKey, {
            value: context = React__namespace.createContext({}),
            enumerable: false,
            writable: false,
            configurable: true,
        });
        context.displayName = 'ApolloContext';
    }
    return context;
}

var ApolloProvider = function (_a) {
    var client = _a.client, children = _a.children;
    var ApolloContext = getApolloContext();
    return React__namespace.createElement(ApolloContext.Consumer, null, function (context) {
        if (context === void 0) { context = {}; }
        if (client && context.client !== client) {
            context = Object.assign({}, context, { client: client });
        }
        __DEV__ ? invariant$2(context.client, 'ApolloProvider was not passed a client instance. Make ' +
            'sure you pass in your client via the "client" prop.') : invariant$2(context.client, 28);
        return (React__namespace.createElement(ApolloContext.Provider, { value: context }, children));
    });
};

var _a$2 = Object.prototype, toString$3 = _a$2.toString, hasOwnProperty$f = _a$2.hasOwnProperty;
var fnToStr$1 = Function.prototype.toString;
var previousComparisons = new Map();
/**
 * Performs a deep equality check on two JavaScript values, tolerating cycles.
 */
function equal$1(a, b) {
    try {
        return check(a, b);
    }
    finally {
        previousComparisons.clear();
    }
}
function check(a, b) {
    // If the two values are strictly equal, our job is easy.
    if (a === b) {
        return true;
    }
    // Object.prototype.toString returns a representation of the runtime type of
    // the given value that is considerably more precise than typeof.
    var aTag = toString$3.call(a);
    var bTag = toString$3.call(b);
    // If the runtime types of a and b are different, they could maybe be equal
    // under some interpretation of equality, but for simplicity and performance
    // we just return false instead.
    if (aTag !== bTag) {
        return false;
    }
    switch (aTag) {
        case '[object Array]':
            // Arrays are a lot like other objects, but we can cheaply compare their
            // lengths as a short-cut before comparing their elements.
            if (a.length !== b.length)
                return false;
        // Fall through to object case...
        case '[object Object]': {
            if (previouslyCompared(a, b))
                return true;
            var aKeys = definedKeys(a);
            var bKeys = definedKeys(b);
            // If `a` and `b` have a different number of enumerable keys, they
            // must be different.
            var keyCount = aKeys.length;
            if (keyCount !== bKeys.length)
                return false;
            // Now make sure they have the same keys.
            for (var k = 0; k < keyCount; ++k) {
                if (!hasOwnProperty$f.call(b, aKeys[k])) {
                    return false;
                }
            }
            // Finally, check deep equality of all child properties.
            for (var k = 0; k < keyCount; ++k) {
                var key = aKeys[k];
                if (!check(a[key], b[key])) {
                    return false;
                }
            }
            return true;
        }
        case '[object Error]':
            return a.name === b.name && a.message === b.message;
        case '[object Number]':
            // Handle NaN, which is !== itself.
            if (a !== a)
                return b !== b;
        // Fall through to shared +a === +b case...
        case '[object Boolean]':
        case '[object Date]':
            return +a === +b;
        case '[object RegExp]':
        case '[object String]':
            return a == "" + b;
        case '[object Map]':
        case '[object Set]': {
            if (a.size !== b.size)
                return false;
            if (previouslyCompared(a, b))
                return true;
            var aIterator = a.entries();
            var isMap = aTag === '[object Map]';
            while (true) {
                var info = aIterator.next();
                if (info.done)
                    break;
                // If a instanceof Set, aValue === aKey.
                var _a = info.value, aKey = _a[0], aValue = _a[1];
                // So this works the same way for both Set and Map.
                if (!b.has(aKey)) {
                    return false;
                }
                // However, we care about deep equality of values only when dealing
                // with Map structures.
                if (isMap && !check(aValue, b.get(aKey))) {
                    return false;
                }
            }
            return true;
        }
        case '[object Uint16Array]':
        case '[object Uint8Array]': // Buffer, in Node.js.
        case '[object Uint32Array]':
        case '[object Int32Array]':
        case '[object Int8Array]':
        case '[object Int16Array]':
        case '[object ArrayBuffer]':
            // DataView doesn't need these conversions, but the equality check is
            // otherwise the same.
            a = new Uint8Array(a);
            b = new Uint8Array(b);
        // Fall through...
        case '[object DataView]': {
            var len = a.byteLength;
            if (len === b.byteLength) {
                while (len-- && a[len] === b[len]) {
                    // Keep looping as long as the bytes are equal.
                }
            }
            return len === -1;
        }
        case '[object AsyncFunction]':
        case '[object GeneratorFunction]':
        case '[object AsyncGeneratorFunction]':
        case '[object Function]': {
            var aCode = fnToStr$1.call(a);
            if (aCode !== fnToStr$1.call(b)) {
                return false;
            }
            // We consider non-native functions equal if they have the same code
            // (native functions require === because their code is censored).
            // Note that this behavior is not entirely sound, since !== function
            // objects with the same code can behave differently depending on
            // their closure scope. However, any function can behave differently
            // depending on the values of its input arguments (including this)
            // and its calling context (including its closure scope), even
            // though the function object is === to itself; and it is entirely
            // possible for functions that are not === to behave exactly the
            // same under all conceivable circumstances. Because none of these
            // factors are statically decidable in JavaScript, JS function
            // equality is not well-defined. This ambiguity allows us to
            // consider the best possible heuristic among various imperfect
            // options, and equating non-native functions that have the same
            // code has enormous practical benefits, such as when comparing
            // functions that are repeatedly passed as fresh function
            // expressions within objects that are otherwise deeply equal. Since
            // any function created from the same syntactic expression (in the
            // same code location) will always stringify to the same code
            // according to fnToStr.call, we can reasonably expect these
            // repeatedly passed function expressions to have the same code, and
            // thus behave "the same" (with all the caveats mentioned above),
            // even though the runtime function objects are !== to one another.
            return !endsWith(aCode, nativeCodeSuffix);
        }
    }
    // Otherwise the values are not equal.
    return false;
}
function definedKeys(obj) {
    // Remember that the second argument to Array.prototype.filter will be
    // used as `this` within the callback function.
    return Object.keys(obj).filter(isDefinedKey, obj);
}
function isDefinedKey(key) {
    return this[key] !== void 0;
}
var nativeCodeSuffix = "{ [native code] }";
function endsWith(full, suffix) {
    var fromIndex = full.length - suffix.length;
    return fromIndex >= 0 &&
        full.indexOf(suffix, fromIndex) === fromIndex;
}
function previouslyCompared(a, b) {
    // Though cyclic references can make an object graph appear infinite from the
    // perspective of a depth-first traversal, the graph still contains a finite
    // number of distinct object references. We use the previousComparisons cache
    // to avoid comparing the same pair of object references more than once, which
    // guarantees termination (even if we end up comparing every object in one
    // graph to every object in the other graph, which is extremely unlikely),
    // while still allowing weird isomorphic structures (like rings with different
    // lengths) a chance to pass the equality test.
    var bSet = previousComparisons.get(a);
    if (bSet) {
        // Return true here because we can be sure false will be returned somewhere
        // else if the objects are not equivalent.
        if (bSet.has(b))
            return true;
    }
    else {
        previousComparisons.set(a, bSet = new Set);
    }
    bSet.add(b);
    return false;
}

var DocumentType;
(function (DocumentType) {
    DocumentType[DocumentType["Query"] = 0] = "Query";
    DocumentType[DocumentType["Mutation"] = 1] = "Mutation";
    DocumentType[DocumentType["Subscription"] = 2] = "Subscription";
})(DocumentType || (DocumentType = {}));
var cache = new Map();
function operationName(type) {
    var name;
    switch (type) {
        case DocumentType.Query:
            name = 'Query';
            break;
        case DocumentType.Mutation:
            name = 'Mutation';
            break;
        case DocumentType.Subscription:
            name = 'Subscription';
            break;
    }
    return name;
}
function parser$1(document) {
    var cached = cache.get(document);
    if (cached)
        return cached;
    var variables, type, name;
    __DEV__ ? invariant$2(!!document && !!document.kind, "Argument of " + document + " passed to parser was not a valid GraphQL " +
        "DocumentNode. You may need to use 'graphql-tag' or another method " +
        "to convert your operation into a document") : invariant$2(!!document && !!document.kind, 34);
    var fragments = document.definitions.filter(function (x) { return x.kind === 'FragmentDefinition'; });
    var queries = document.definitions.filter(function (x) {
        return x.kind === 'OperationDefinition' && x.operation === 'query';
    });
    var mutations = document.definitions.filter(function (x) {
        return x.kind === 'OperationDefinition' && x.operation === 'mutation';
    });
    var subscriptions = document.definitions.filter(function (x) {
        return x.kind === 'OperationDefinition' && x.operation === 'subscription';
    });
    __DEV__ ? invariant$2(!fragments.length ||
        (queries.length || mutations.length || subscriptions.length), "Passing only a fragment to 'graphql' is not yet supported. " +
        "You must include a query, subscription or mutation as well") : invariant$2(!fragments.length ||
        (queries.length || mutations.length || subscriptions.length), 35);
    __DEV__ ? invariant$2(queries.length + mutations.length + subscriptions.length <= 1, "react-apollo only supports a query, subscription, or a mutation per HOC. " +
        (document + " had " + queries.length + " queries, " + subscriptions.length + " ") +
        ("subscriptions and " + mutations.length + " mutations. ") +
        "You can use 'compose' to join multiple operation types to a component") : invariant$2(queries.length + mutations.length + subscriptions.length <= 1, 36);
    type = queries.length ? DocumentType.Query : DocumentType.Mutation;
    if (!queries.length && !mutations.length)
        type = DocumentType.Subscription;
    var definitions = queries.length
        ? queries
        : mutations.length
            ? mutations
            : subscriptions;
    __DEV__ ? invariant$2(definitions.length === 1, "react-apollo only supports one definition per HOC. " + document + " had " +
        (definitions.length + " definitions. ") +
        "You can use 'compose' to join multiple operation types to a component") : invariant$2(definitions.length === 1, 37);
    var definition = definitions[0];
    variables = definition.variableDefinitions || [];
    if (definition.name && definition.name.kind === 'Name') {
        name = definition.name.value;
    }
    else {
        name = 'data';
    }
    var payload = { name: name, type: type, variables: variables };
    cache.set(document, payload);
    return payload;
}

var OperationData = (function () {
    function OperationData(options, context) {
        this.isMounted = false;
        this.previousOptions = {};
        this.context = {};
        this.options = {};
        this.options = options || {};
        this.context = context || {};
    }
    OperationData.prototype.getOptions = function () {
        return this.options;
    };
    OperationData.prototype.setOptions = function (newOptions, storePrevious) {
        if (storePrevious === void 0) { storePrevious = false; }
        if (storePrevious && !equal$1(this.options, newOptions)) {
            this.previousOptions = this.options;
        }
        this.options = newOptions;
    };
    OperationData.prototype.unmount = function () {
        this.isMounted = false;
    };
    OperationData.prototype.refreshClient = function () {
        var client = (this.options && this.options.client) ||
            (this.context && this.context.client);
        __DEV__ ? invariant$2(!!client, 'Could not find "client" in the context or passed in as an option. ' +
            'Wrap the root component in an <ApolloProvider>, or pass an ' +
            'ApolloClient instance in via options.') : invariant$2(!!client, 29);
        var isNew = false;
        if (client !== this.client) {
            isNew = true;
            this.client = client;
            this.cleanup();
        }
        return {
            client: this.client,
            isNew: isNew
        };
    };
    OperationData.prototype.verifyDocumentType = function (document, type) {
        var operation = parser$1(document);
        var requiredOperationName = operationName(type);
        var usedOperationName = operationName(operation.type);
        __DEV__ ? invariant$2(operation.type === type, "Running a " + requiredOperationName + " requires a graphql " +
            (requiredOperationName + ", but a " + usedOperationName + " was used instead.")) : invariant$2(operation.type === type, 30);
    };
    return OperationData;
}());

function isApolloError(err) {
    return err.hasOwnProperty('graphQLErrors');
}
var generateErrorMessage = function (err) {
    var message = '';
    if (isNonEmptyArray(err.graphQLErrors) || isNonEmptyArray(err.clientErrors)) {
        var errors = (err.graphQLErrors || [])
            .concat(err.clientErrors || []);
        errors.forEach(function (error) {
            var errorMessage = error
                ? error.message
                : 'Error message not found.';
            message += errorMessage + "\n";
        });
    }
    if (err.networkError) {
        message += err.networkError.message + "\n";
    }
    message = message.replace(/\n$/, '');
    return message;
};
var ApolloError = (function (_super) {
    __extends(ApolloError, _super);
    function ApolloError(_a) {
        var graphQLErrors = _a.graphQLErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;
        var _this = _super.call(this, errorMessage) || this;
        _this.graphQLErrors = graphQLErrors || [];
        _this.clientErrors = clientErrors || [];
        _this.networkError = networkError || null;
        _this.message = errorMessage || generateErrorMessage(_this);
        _this.extraInfo = extraInfo;
        _this.__proto__ = ApolloError.prototype;
        return _this;
    }
    return ApolloError;
}(Error));

function fromError(errorValue) {
    return new Observable(function (observer) {
        observer.error(errorValue);
    });
}

var throwServerError = function (response, result, message) {
    var error = new Error(message);
    error.name = 'ServerError';
    error.response = response;
    error.statusCode = response.status;
    error.result = result;
    throw error;
};

function validateOperation(operation) {
    var OPERATION_FIELDS = [
        'query',
        'operationName',
        'variables',
        'extensions',
        'context',
    ];
    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {
        var key = _a[_i];
        if (OPERATION_FIELDS.indexOf(key) < 0) {
            throw __DEV__ ? new InvariantError("illegal argument: " + key) : new InvariantError(26);
        }
    }
    return operation;
}

function createOperation(starting, operation) {
    var context = __assign({}, starting);
    var setContext = function (next) {
        if (typeof next === 'function') {
            context = __assign(__assign({}, context), next(context));
        }
        else {
            context = __assign(__assign({}, context), next);
        }
    };
    var getContext = function () { return (__assign({}, context)); };
    Object.defineProperty(operation, 'setContext', {
        enumerable: false,
        value: setContext,
    });
    Object.defineProperty(operation, 'getContext', {
        enumerable: false,
        value: getContext,
    });
    return operation;
}

function transformOperation(operation) {
    var transformedOperation = {
        variables: operation.variables || {},
        extensions: operation.extensions || {},
        operationName: operation.operationName,
        query: operation.query,
    };
    if (!transformedOperation.operationName) {
        transformedOperation.operationName =
            typeof transformedOperation.query !== 'string'
                ? getOperationName(transformedOperation.query) || undefined
                : '';
    }
    return transformedOperation;
}

function passthrough(op, forward) {
    return (forward ? forward(op) : Observable.of());
}
function toLink(handler) {
    return typeof handler === 'function' ? new ApolloLink(handler) : handler;
}
function isTerminating(link) {
    return link.request.length <= 1;
}
var LinkError = (function (_super) {
    __extends(LinkError, _super);
    function LinkError(message, link) {
        var _this = _super.call(this, message) || this;
        _this.link = link;
        return _this;
    }
    return LinkError;
}(Error));
var ApolloLink = (function () {
    function ApolloLink(request) {
        if (request)
            this.request = request;
    }
    ApolloLink.empty = function () {
        return new ApolloLink(function () { return Observable.of(); });
    };
    ApolloLink.from = function (links) {
        if (links.length === 0)
            return ApolloLink.empty();
        return links.map(toLink).reduce(function (x, y) { return x.concat(y); });
    };
    ApolloLink.split = function (test, left, right) {
        var leftLink = toLink(left);
        var rightLink = toLink(right || new ApolloLink(passthrough));
        if (isTerminating(leftLink) && isTerminating(rightLink)) {
            return new ApolloLink(function (operation) {
                return test(operation)
                    ? leftLink.request(operation) || Observable.of()
                    : rightLink.request(operation) || Observable.of();
            });
        }
        else {
            return new ApolloLink(function (operation, forward) {
                return test(operation)
                    ? leftLink.request(operation, forward) || Observable.of()
                    : rightLink.request(operation, forward) || Observable.of();
            });
        }
    };
    ApolloLink.execute = function (link, operation) {
        return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());
    };
    ApolloLink.concat = function (first, second) {
        var firstLink = toLink(first);
        if (isTerminating(firstLink)) {
            __DEV__ && invariant$2.warn(new LinkError("You are calling concat on a terminating link, which will have no effect", firstLink));
            return firstLink;
        }
        var nextLink = toLink(second);
        if (isTerminating(nextLink)) {
            return new ApolloLink(function (operation) {
                return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();
            });
        }
        else {
            return new ApolloLink(function (operation, forward) {
                return (firstLink.request(operation, function (op) {
                    return nextLink.request(op, forward) || Observable.of();
                }) || Observable.of());
            });
        }
    };
    ApolloLink.prototype.split = function (test, left, right) {
        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));
    };
    ApolloLink.prototype.concat = function (next) {
        return ApolloLink.concat(this, next);
    };
    ApolloLink.prototype.request = function (operation, forward) {
        throw __DEV__ ? new InvariantError('request is not implemented') : new InvariantError(21);
    };
    ApolloLink.prototype.onError = function (error, observer) {
        if (observer && observer.error) {
            observer.error(error);
            return false;
        }
        throw error;
    };
    ApolloLink.prototype.setOnError = function (fn) {
        this.onError = fn;
        return this;
    };
    return ApolloLink;
}());

var execute = ApolloLink.execute;

var version = '3.4.15';

var hasOwnProperty$e = Object.prototype.hasOwnProperty;
function parseAndCheckHttpResponse(operations) {
    return function (response) { return response
        .text()
        .then(function (bodyText) {
        try {
            return JSON.parse(bodyText);
        }
        catch (err) {
            var parseError = err;
            parseError.name = 'ServerParseError';
            parseError.response = response;
            parseError.statusCode = response.status;
            parseError.bodyText = bodyText;
            throw parseError;
        }
    })
        .then(function (result) {
        if (response.status >= 300) {
            throwServerError(response, result, "Response not successful: Received status code " + response.status);
        }
        if (!Array.isArray(result) &&
            !hasOwnProperty$e.call(result, 'data') &&
            !hasOwnProperty$e.call(result, 'errors')) {
            throwServerError(response, result, "Server response was missing for query '" + (Array.isArray(operations)
                ? operations.map(function (op) { return op.operationName; })
                : operations.operationName) + "'.");
        }
        return result;
    }); };
}

var serializeFetchParameter = function (p, label) {
    var serialized;
    try {
        serialized = JSON.stringify(p);
    }
    catch (e) {
        var parseError = __DEV__ ? new InvariantError("Network request failed. " + label + " is not serializable: " + e.message) : new InvariantError(23);
        parseError.parseError = e;
        throw parseError;
    }
    return serialized;
};

var defaultHttpOptions = {
    includeQuery: true,
    includeExtensions: false,
};
var defaultHeaders = {
    accept: '*/*',
    'content-type': 'application/json',
};
var defaultOptions = {
    method: 'POST',
};
var fallbackHttpConfig = {
    http: defaultHttpOptions,
    headers: defaultHeaders,
    options: defaultOptions,
};
var selectHttpOptionsAndBody = function (operation, fallbackConfig) {
    var configs = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        configs[_i - 2] = arguments[_i];
    }
    var options = __assign(__assign({}, fallbackConfig.options), { headers: fallbackConfig.headers, credentials: fallbackConfig.credentials });
    var http = fallbackConfig.http || {};
    configs.forEach(function (config) {
        options = __assign(__assign(__assign({}, options), config.options), { headers: __assign(__assign({}, options.headers), headersToLowerCase(config.headers)) });
        if (config.credentials)
            options.credentials = config.credentials;
        http = __assign(__assign({}, http), config.http);
    });
    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;
    var body = { operationName: operationName, variables: variables };
    if (http.includeExtensions)
        body.extensions = extensions;
    if (http.includeQuery)
        body.query = print(query);
    return {
        options: options,
        body: body,
    };
};
function headersToLowerCase(headers) {
    if (headers) {
        var normalized_1 = Object.create(null);
        Object.keys(Object(headers)).forEach(function (name) {
            normalized_1[name.toLowerCase()] = headers[name];
        });
        return normalized_1;
    }
    return headers;
}

var checkFetcher = function (fetcher) {
    if (!fetcher && typeof fetch === 'undefined') {
        throw __DEV__ ? new InvariantError("\n\"fetch\" has not been found globally and no fetcher has been configured. To fix this, install a fetch package (like https://www.npmjs.com/package/cross-fetch), instantiate the fetcher, and pass it into your HttpLink constructor. For example:\n\nimport fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink } from '@apollo/client';\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: '/graphql', fetch })\n});\n    ") : new InvariantError(22);
    }
};

var createSignalIfSupported = function () {
    if (typeof AbortController === 'undefined')
        return { controller: false, signal: false };
    var controller = new AbortController();
    var signal = controller.signal;
    return { controller: controller, signal: signal };
};

var selectURI = function (operation, fallbackURI) {
    var context = operation.getContext();
    var contextURI = context.uri;
    if (contextURI) {
        return contextURI;
    }
    else if (typeof fallbackURI === 'function') {
        return fallbackURI(operation);
    }
    else {
        return fallbackURI || '/graphql';
    }
};

function rewriteURIForGET(chosenURI, body) {
    var queryParams = [];
    var addQueryParam = function (key, value) {
        queryParams.push(key + "=" + encodeURIComponent(value));
    };
    if ('query' in body) {
        addQueryParam('query', body.query);
    }
    if (body.operationName) {
        addQueryParam('operationName', body.operationName);
    }
    if (body.variables) {
        var serializedVariables = void 0;
        try {
            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');
        }
        catch (parseError) {
            return { parseError: parseError };
        }
        addQueryParam('variables', serializedVariables);
    }
    if (body.extensions) {
        var serializedExtensions = void 0;
        try {
            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');
        }
        catch (parseError) {
            return { parseError: parseError };
        }
        addQueryParam('extensions', serializedExtensions);
    }
    var fragment = '', preFragment = chosenURI;
    var fragmentStart = chosenURI.indexOf('#');
    if (fragmentStart !== -1) {
        fragment = chosenURI.substr(fragmentStart);
        preFragment = chosenURI.substr(0, fragmentStart);
    }
    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';
    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;
    return { newURI: newURI };
}

var backupFetch = maybe$1(function () { return fetch; });
var createHttpLink = function (linkOptions) {
    if (linkOptions === void 0) { linkOptions = {}; }
    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, preferredFetch = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, _b = linkOptions.includeUnusedVariables, includeUnusedVariables = _b === void 0 ? false : _b, requestOptions = __rest(linkOptions, ["uri", "fetch", "includeExtensions", "useGETForQueries", "includeUnusedVariables"]);
    if (__DEV__) {
        checkFetcher(preferredFetch || backupFetch);
    }
    var linkConfig = {
        http: { includeExtensions: includeExtensions },
        options: requestOptions.fetchOptions,
        credentials: requestOptions.credentials,
        headers: requestOptions.headers,
    };
    return new ApolloLink(function (operation) {
        var chosenURI = selectURI(operation, uri);
        var context = operation.getContext();
        var clientAwarenessHeaders = {};
        if (context.clientAwareness) {
            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;
            if (name_1) {
                clientAwarenessHeaders['apollographql-client-name'] = name_1;
            }
            if (version) {
                clientAwarenessHeaders['apollographql-client-version'] = version;
            }
        }
        var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);
        var contextConfig = {
            http: context.http,
            options: context.fetchOptions,
            credentials: context.credentials,
            headers: contextHeaders,
        };
        var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;
        if (body.variables && !includeUnusedVariables) {
            var unusedNames_1 = new Set(Object.keys(body.variables));
            visit(operation.query, {
                Variable: function (node, _key, parent) {
                    if (parent && parent.kind !== 'VariableDefinition') {
                        unusedNames_1.delete(node.name.value);
                    }
                },
            });
            if (unusedNames_1.size) {
                body.variables = __assign({}, body.variables);
                unusedNames_1.forEach(function (name) {
                    delete body.variables[name];
                });
            }
        }
        var controller;
        if (!options.signal) {
            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;
            controller = _controller;
            if (controller)
                options.signal = signal;
        }
        var definitionIsMutation = function (d) {
            return d.kind === 'OperationDefinition' && d.operation === 'mutation';
        };
        if (useGETForQueries &&
            !operation.query.definitions.some(definitionIsMutation)) {
            options.method = 'GET';
        }
        if (options.method === 'GET') {
            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;
            if (parseError) {
                return fromError(parseError);
            }
            chosenURI = newURI;
        }
        else {
            try {
                options.body = serializeFetchParameter(body, 'Payload');
            }
            catch (parseError) {
                return fromError(parseError);
            }
        }
        return new Observable(function (observer) {
            var currentFetch = preferredFetch || maybe$1(function () { return fetch; }) || backupFetch;
            currentFetch(chosenURI, options)
                .then(function (response) {
                operation.setContext({ response: response });
                return response;
            })
                .then(parseAndCheckHttpResponse(operation))
                .then(function (result) {
                observer.next(result);
                observer.complete();
                return result;
            })
                .catch(function (err) {
                if (err.name === 'AbortError')
                    return;
                if (err.result && err.result.errors && err.result.data) {
                    observer.next(err.result);
                }
                observer.error(err);
            });
            return function () {
                if (controller)
                    controller.abort();
            };
        });
    });
};

var HttpLink = (function (_super) {
    __extends(HttpLink, _super);
    function HttpLink(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, createHttpLink(options).request) || this;
        _this.options = options;
        return _this;
    }
    return HttpLink;
}(ApolloLink));

// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds
// object keys weakly, yet can also hold non-object keys, unlike the
// native `WeakMap`.
// If no makeData function is supplied, the looked-up data will be an empty,
// null-prototype Object.
var defaultMakeData = function () { return Object.create(null); };
// Useful for processing arguments objects as well as arrays.
var _a$1 = Array.prototype, forEach = _a$1.forEach, slice$2 = _a$1.slice;
var Trie = /** @class */ (function () {
    function Trie(weakness, makeData) {
        if (weakness === void 0) { weakness = true; }
        if (makeData === void 0) { makeData = defaultMakeData; }
        this.weakness = weakness;
        this.makeData = makeData;
    }
    Trie.prototype.lookup = function () {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i] = arguments[_i];
        }
        return this.lookupArray(array);
    };
    Trie.prototype.lookupArray = function (array) {
        var node = this;
        forEach.call(array, function (key) { return node = node.getChildTrie(key); });
        return node.data || (node.data = this.makeData(slice$2.call(array)));
    };
    Trie.prototype.getChildTrie = function (key) {
        var map = this.weakness && isObjRef(key)
            ? this.weak || (this.weak = new WeakMap())
            : this.strong || (this.strong = new Map());
        var child = map.get(key);
        if (!child)
            map.set(key, child = new Trie(this.weakness, this.makeData));
        return child;
    };
    return Trie;
}());
function isObjRef(value) {
    switch (typeof value) {
        case "object":
            if (value === null)
                break;
        // Fall through to return true...
        case "function":
            return true;
    }
    return false;
}

// This currentContext variable will only be used if the makeSlotClass
// function is called, which happens only if this is the first copy of the
// @wry/context package to be imported.
var currentContext = null;
// This unique internal object is used to denote the absence of a value
// for a given Slot, and is never exposed to outside code.
var MISSING_VALUE = {};
var idCounter = 1;
// Although we can't do anything about the cost of duplicated code from
// accidentally bundling multiple copies of the @wry/context package, we can
// avoid creating the Slot class more than once using makeSlotClass.
var makeSlotClass = function () { return /** @class */ (function () {
    function Slot() {
        // If you have a Slot object, you can find out its slot.id, but you cannot
        // guess the slot.id of a Slot you don't have access to, thanks to the
        // randomized suffix.
        this.id = [
            "slot",
            idCounter++,
            Date.now(),
            Math.random().toString(36).slice(2),
        ].join(":");
    }
    Slot.prototype.hasValue = function () {
        for (var context_1 = currentContext; context_1; context_1 = context_1.parent) {
            // We use the Slot object iself as a key to its value, which means the
            // value cannot be obtained without a reference to the Slot object.
            if (this.id in context_1.slots) {
                var value = context_1.slots[this.id];
                if (value === MISSING_VALUE)
                    break;
                if (context_1 !== currentContext) {
                    // Cache the value in currentContext.slots so the next lookup will
                    // be faster. This caching is safe because the tree of contexts and
                    // the values of the slots are logically immutable.
                    currentContext.slots[this.id] = value;
                }
                return true;
            }
        }
        if (currentContext) {
            // If a value was not found for this Slot, it's never going to be found
            // no matter how many times we look it up, so we might as well cache
            // the absence of the value, too.
            currentContext.slots[this.id] = MISSING_VALUE;
        }
        return false;
    };
    Slot.prototype.getValue = function () {
        if (this.hasValue()) {
            return currentContext.slots[this.id];
        }
    };
    Slot.prototype.withValue = function (value, callback, 
    // Given the prevalence of arrow functions, specifying arguments is likely
    // to be much more common than specifying `this`, hence this ordering:
    args, thisArg) {
        var _a;
        var slots = (_a = {
                __proto__: null
            },
            _a[this.id] = value,
            _a);
        var parent = currentContext;
        currentContext = { parent: parent, slots: slots };
        try {
            // Function.prototype.apply allows the arguments array argument to be
            // omitted or undefined, so args! is fine here.
            return callback.apply(thisArg, args);
        }
        finally {
            currentContext = parent;
        }
    };
    // Capture the current context and wrap a callback function so that it
    // reestablishes the captured context when called.
    Slot.bind = function (callback) {
        var context = currentContext;
        return function () {
            var saved = currentContext;
            try {
                currentContext = context;
                return callback.apply(this, arguments);
            }
            finally {
                currentContext = saved;
            }
        };
    };
    // Immediately run a callback function without any captured context.
    Slot.noContext = function (callback, 
    // Given the prevalence of arrow functions, specifying arguments is likely
    // to be much more common than specifying `this`, hence this ordering:
    args, thisArg) {
        if (currentContext) {
            var saved = currentContext;
            try {
                currentContext = null;
                // Function.prototype.apply allows the arguments array argument to be
                // omitted or undefined, so args! is fine here.
                return callback.apply(thisArg, args);
            }
            finally {
                currentContext = saved;
            }
        }
        else {
            return callback.apply(thisArg, args);
        }
    };
    return Slot;
}()); };
// We store a single global implementation of the Slot class as a permanent
// non-enumerable symbol property of the Array constructor. This obfuscation
// does nothing to prevent access to the Slot class, but at least it ensures
// the implementation (i.e. currentContext) cannot be tampered with, and all
// copies of the @wry/context package (hopefully just one) will share the
// same Slot implementation. Since the first copy of the @wry/context package
// to be imported wins, this technique imposes a very high cost for any
// future breaking changes to the Slot class.
var globalKey = "@wry/context:Slot";
var host = Array;
var Slot = host[globalKey] || function () {
    var Slot = makeSlotClass();
    try {
        Object.defineProperty(host, globalKey, {
            value: host[globalKey] = Slot,
            enumerable: false,
            writable: false,
            configurable: false,
        });
    }
    finally {
        return Slot;
    }
}();

Slot.bind; Slot.noContext;

function defaultDispose() { }
var Cache = /** @class */ (function () {
    function Cache(max, dispose) {
        if (max === void 0) { max = Infinity; }
        if (dispose === void 0) { dispose = defaultDispose; }
        this.max = max;
        this.dispose = dispose;
        this.map = new Map();
        this.newest = null;
        this.oldest = null;
    }
    Cache.prototype.has = function (key) {
        return this.map.has(key);
    };
    Cache.prototype.get = function (key) {
        var node = this.getNode(key);
        return node && node.value;
    };
    Cache.prototype.getNode = function (key) {
        var node = this.map.get(key);
        if (node && node !== this.newest) {
            var older = node.older, newer = node.newer;
            if (newer) {
                newer.older = older;
            }
            if (older) {
                older.newer = newer;
            }
            node.older = this.newest;
            node.older.newer = node;
            node.newer = null;
            this.newest = node;
            if (node === this.oldest) {
                this.oldest = newer;
            }
        }
        return node;
    };
    Cache.prototype.set = function (key, value) {
        var node = this.getNode(key);
        if (node) {
            return node.value = value;
        }
        node = {
            key: key,
            value: value,
            newer: null,
            older: this.newest
        };
        if (this.newest) {
            this.newest.newer = node;
        }
        this.newest = node;
        this.oldest = this.oldest || node;
        this.map.set(key, node);
        return node.value;
    };
    Cache.prototype.clean = function () {
        while (this.oldest && this.map.size > this.max) {
            this.delete(this.oldest.key);
        }
    };
    Cache.prototype.delete = function (key) {
        var node = this.map.get(key);
        if (node) {
            if (node === this.newest) {
                this.newest = node.older;
            }
            if (node === this.oldest) {
                this.oldest = node.newer;
            }
            if (node.newer) {
                node.newer.older = node.older;
            }
            if (node.older) {
                node.older.newer = node.newer;
            }
            this.map.delete(key);
            this.dispose(node.value, key);
            return true;
        }
        return false;
    };
    return Cache;
}());

var parentEntrySlot = new Slot();

var _a;
var hasOwnProperty$d = Object.prototype.hasOwnProperty;
var 
// This Array.from polyfill is restricted to working with Set<any> for now,
// but we can improve the polyfill and add other input types, as needed. Note
// that this fallback implementation will only be used if the host environment
// does not support a native Array.from function. In most modern JS runtimes,
// the toArray function exported here will be === Array.from.
toArray = (_a = Array.from, _a === void 0 ? function (collection) {
    var array = [];
    collection.forEach(function (item) { return array.push(item); });
    return array;
} : _a);
function maybeUnsubscribe(entryOrDep) {
    var unsubscribe = entryOrDep.unsubscribe;
    if (typeof unsubscribe === "function") {
        entryOrDep.unsubscribe = void 0;
        unsubscribe();
    }
}

var emptySetPool = [];
var POOL_TARGET_SIZE = 100;
// Since this package might be used browsers, we should avoid using the
// Node built-in assert module.
function assert(condition, optionalMessage) {
    if (!condition) {
        throw new Error(optionalMessage || "assertion failure");
    }
}
function valueIs(a, b) {
    var len = a.length;
    return (
    // Unknown values are not equal to each other.
    len > 0 &&
        // Both values must be ordinary (or both exceptional) to be equal.
        len === b.length &&
        // The underlying value or exception must be the same.
        a[len - 1] === b[len - 1]);
}
function valueGet(value) {
    switch (value.length) {
        case 0: throw new Error("unknown value");
        case 1: return value[0];
        case 2: throw value[1];
    }
}
function valueCopy(value) {
    return value.slice(0);
}
var Entry = /** @class */ (function () {
    function Entry(fn) {
        this.fn = fn;
        this.parents = new Set();
        this.childValues = new Map();
        // When this Entry has children that are dirty, this property becomes
        // a Set containing other Entry objects, borrowed from emptySetPool.
        // When the set becomes empty, it gets recycled back to emptySetPool.
        this.dirtyChildren = null;
        this.dirty = true;
        this.recomputing = false;
        this.value = [];
        this.deps = null;
        ++Entry.count;
    }
    Entry.prototype.peek = function () {
        if (this.value.length === 1 && !mightBeDirty(this)) {
            rememberParent(this);
            return this.value[0];
        }
    };
    // This is the most important method of the Entry API, because it
    // determines whether the cached this.value can be returned immediately,
    // or must be recomputed. The overall performance of the caching system
    // depends on the truth of the following observations: (1) this.dirty is
    // usually false, (2) this.dirtyChildren is usually null/empty, and thus
    // (3) valueGet(this.value) is usually returned without recomputation.
    Entry.prototype.recompute = function (args) {
        assert(!this.recomputing, "already recomputing");
        rememberParent(this);
        return mightBeDirty(this)
            ? reallyRecompute(this, args)
            : valueGet(this.value);
    };
    Entry.prototype.setDirty = function () {
        if (this.dirty)
            return;
        this.dirty = true;
        this.value.length = 0;
        reportDirty(this);
        // We can go ahead and unsubscribe here, since any further dirty
        // notifications we receive will be redundant, and unsubscribing may
        // free up some resources, e.g. file watchers.
        maybeUnsubscribe(this);
    };
    Entry.prototype.dispose = function () {
        var _this = this;
        this.setDirty();
        // Sever any dependency relationships with our own children, so those
        // children don't retain this parent Entry in their child.parents sets,
        // thereby preventing it from being fully garbage collected.
        forgetChildren(this);
        // Because this entry has been kicked out of the cache (in index.js),
        // we've lost the ability to find out if/when this entry becomes dirty,
        // whether that happens through a subscription, because of a direct call
        // to entry.setDirty(), or because one of its children becomes dirty.
        // Because of this loss of future information, we have to assume the
        // worst (that this entry might have become dirty very soon), so we must
        // immediately mark this entry's parents as dirty. Normally we could
        // just call entry.setDirty() rather than calling parent.setDirty() for
        // each parent, but that would leave this entry in parent.childValues
        // and parent.dirtyChildren, which would prevent the child from being
        // truly forgotten.
        eachParent(this, function (parent, child) {
            parent.setDirty();
            forgetChild(parent, _this);
        });
    };
    Entry.prototype.forget = function () {
        // The code that creates Entry objects in index.ts will replace this method
        // with one that actually removes the Entry from the cache, which will also
        // trigger the entry.dispose method.
        this.dispose();
    };
    Entry.prototype.dependOn = function (dep) {
        dep.add(this);
        if (!this.deps) {
            this.deps = emptySetPool.pop() || new Set();
        }
        this.deps.add(dep);
    };
    Entry.prototype.forgetDeps = function () {
        var _this = this;
        if (this.deps) {
            toArray(this.deps).forEach(function (dep) { return dep.delete(_this); });
            this.deps.clear();
            emptySetPool.push(this.deps);
            this.deps = null;
        }
    };
    Entry.count = 0;
    return Entry;
}());
function rememberParent(child) {
    var parent = parentEntrySlot.getValue();
    if (parent) {
        child.parents.add(parent);
        if (!parent.childValues.has(child)) {
            parent.childValues.set(child, []);
        }
        if (mightBeDirty(child)) {
            reportDirtyChild(parent, child);
        }
        else {
            reportCleanChild(parent, child);
        }
        return parent;
    }
}
function reallyRecompute(entry, args) {
    forgetChildren(entry);
    // Set entry as the parent entry while calling recomputeNewValue(entry).
    parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);
    if (maybeSubscribe(entry, args)) {
        // If we successfully recomputed entry.value and did not fail to
        // (re)subscribe, then this Entry is no longer explicitly dirty.
        setClean(entry);
    }
    return valueGet(entry.value);
}
function recomputeNewValue(entry, args) {
    entry.recomputing = true;
    // Set entry.value as unknown.
    entry.value.length = 0;
    try {
        // If entry.fn succeeds, entry.value will become a normal Value.
        entry.value[0] = entry.fn.apply(null, args);
    }
    catch (e) {
        // If entry.fn throws, entry.value will become exceptional.
        entry.value[1] = e;
    }
    // Either way, this line is always reached.
    entry.recomputing = false;
}
function mightBeDirty(entry) {
    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);
}
function setClean(entry) {
    entry.dirty = false;
    if (mightBeDirty(entry)) {
        // This Entry may still have dirty children, in which case we can't
        // let our parents know we're clean just yet.
        return;
    }
    reportClean(entry);
}
function reportDirty(child) {
    eachParent(child, reportDirtyChild);
}
function reportClean(child) {
    eachParent(child, reportCleanChild);
}
function eachParent(child, callback) {
    var parentCount = child.parents.size;
    if (parentCount) {
        var parents = toArray(child.parents);
        for (var i = 0; i < parentCount; ++i) {
            callback(parents[i], child);
        }
    }
}
// Let a parent Entry know that one of its children may be dirty.
function reportDirtyChild(parent, child) {
    // Must have called rememberParent(child) before calling
    // reportDirtyChild(parent, child).
    assert(parent.childValues.has(child));
    assert(mightBeDirty(child));
    var parentWasClean = !mightBeDirty(parent);
    if (!parent.dirtyChildren) {
        parent.dirtyChildren = emptySetPool.pop() || new Set;
    }
    else if (parent.dirtyChildren.has(child)) {
        // If we already know this child is dirty, then we must have already
        // informed our own parents that we are dirty, so we can terminate
        // the recursion early.
        return;
    }
    parent.dirtyChildren.add(child);
    // If parent was clean before, it just became (possibly) dirty (according to
    // mightBeDirty), since we just added child to parent.dirtyChildren.
    if (parentWasClean) {
        reportDirty(parent);
    }
}
// Let a parent Entry know that one of its children is no longer dirty.
function reportCleanChild(parent, child) {
    // Must have called rememberChild(child) before calling
    // reportCleanChild(parent, child).
    assert(parent.childValues.has(child));
    assert(!mightBeDirty(child));
    var childValue = parent.childValues.get(child);
    if (childValue.length === 0) {
        parent.childValues.set(child, valueCopy(child.value));
    }
    else if (!valueIs(childValue, child.value)) {
        parent.setDirty();
    }
    removeDirtyChild(parent, child);
    if (mightBeDirty(parent)) {
        return;
    }
    reportClean(parent);
}
function removeDirtyChild(parent, child) {
    var dc = parent.dirtyChildren;
    if (dc) {
        dc.delete(child);
        if (dc.size === 0) {
            if (emptySetPool.length < POOL_TARGET_SIZE) {
                emptySetPool.push(dc);
            }
            parent.dirtyChildren = null;
        }
    }
}
// Removes all children from this entry and returns an array of the
// removed children.
function forgetChildren(parent) {
    if (parent.childValues.size > 0) {
        parent.childValues.forEach(function (_value, child) {
            forgetChild(parent, child);
        });
    }
    // Remove this parent Entry from any sets to which it was added by the
    // addToSet method.
    parent.forgetDeps();
    // After we forget all our children, this.dirtyChildren must be empty
    // and therefore must have been reset to null.
    assert(parent.dirtyChildren === null);
}
function forgetChild(parent, child) {
    child.parents.delete(parent);
    parent.childValues.delete(child);
    removeDirtyChild(parent, child);
}
function maybeSubscribe(entry, args) {
    if (typeof entry.subscribe === "function") {
        try {
            maybeUnsubscribe(entry); // Prevent double subscriptions.
            entry.unsubscribe = entry.subscribe.apply(null, args);
        }
        catch (e) {
            // If this Entry has a subscribe function and it threw an exception
            // (or an unsubscribe function it previously returned now throws),
            // return false to indicate that we were not able to subscribe (or
            // unsubscribe), and this Entry should remain dirty.
            entry.setDirty();
            return false;
        }
    }
    // Returning true indicates either that there was no entry.subscribe
    // function or that it succeeded.
    return true;
}

var EntryMethods = {
    setDirty: true,
    dispose: true,
    forget: true,
};
function dep(options) {
    var depsByKey = new Map();
    var subscribe = options && options.subscribe;
    function depend(key) {
        var parent = parentEntrySlot.getValue();
        if (parent) {
            var dep_1 = depsByKey.get(key);
            if (!dep_1) {
                depsByKey.set(key, dep_1 = new Set);
            }
            parent.dependOn(dep_1);
            if (typeof subscribe === "function") {
                maybeUnsubscribe(dep_1);
                dep_1.unsubscribe = subscribe(key);
            }
        }
    }
    depend.dirty = function dirty(key, entryMethodName) {
        var dep = depsByKey.get(key);
        if (dep) {
            var m_1 = (entryMethodName &&
                hasOwnProperty$d.call(EntryMethods, entryMethodName)) ? entryMethodName : "setDirty";
            // We have to use toArray(dep).forEach instead of dep.forEach, because
            // modifying a Set while iterating over it can cause elements in the Set
            // to be removed from the Set before they've been iterated over.
            toArray(dep).forEach(function (entry) { return entry[m_1](); });
            depsByKey.delete(key);
            maybeUnsubscribe(dep);
        }
    };
    return depend;
}

function makeDefaultMakeCacheKeyFunction() {
    var keyTrie = new Trie(typeof WeakMap === "function");
    return function () {
        return keyTrie.lookupArray(arguments);
    };
}
// The defaultMakeCacheKey function is remarkably powerful, because it gives
// a unique object for any shallow-identical list of arguments. If you need
// to implement a custom makeCacheKey function, you may find it helpful to
// delegate the final work to defaultMakeCacheKey, which is why we export it
// here. However, you may want to avoid defaultMakeCacheKey if your runtime
// does not support WeakMap, or you have the ability to return a string key.
// In those cases, just write your own custom makeCacheKey functions.
makeDefaultMakeCacheKeyFunction();
var caches = new Set();
function wrap(originalFunction, options) {
    if (options === void 0) { options = Object.create(null); }
    var cache = new Cache(options.max || Math.pow(2, 16), function (entry) { return entry.dispose(); });
    var keyArgs = options.keyArgs;
    var makeCacheKey = options.makeCacheKey ||
        makeDefaultMakeCacheKeyFunction();
    var optimistic = function () {
        var key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);
        if (key === void 0) {
            return originalFunction.apply(null, arguments);
        }
        var entry = cache.get(key);
        if (!entry) {
            cache.set(key, entry = new Entry(originalFunction));
            entry.subscribe = options.subscribe;
            // Give the Entry the ability to trigger cache.delete(key), even though
            // the Entry itself does not know about key or cache.
            entry.forget = function () { return cache.delete(key); };
        }
        var value = entry.recompute(Array.prototype.slice.call(arguments));
        // Move this entry to the front of the least-recently used queue,
        // since we just finished computing its value.
        cache.set(key, entry);
        caches.add(cache);
        // Clean up any excess entries in the cache, but only if there is no
        // active parent entry, meaning we're not in the middle of a larger
        // computation that might be flummoxed by the cleaning.
        if (!parentEntrySlot.hasValue()) {
            caches.forEach(function (cache) { return cache.clean(); });
            caches.clear();
        }
        return value;
    };
    Object.defineProperty(optimistic, "size", {
        get: function () {
            return cache["map"].size;
        },
        configurable: false,
        enumerable: false,
    });
    function dirtyKey(key) {
        var entry = cache.get(key);
        if (entry) {
            entry.setDirty();
        }
    }
    optimistic.dirtyKey = dirtyKey;
    optimistic.dirty = function dirty() {
        dirtyKey(makeCacheKey.apply(null, arguments));
    };
    function peekKey(key) {
        var entry = cache.get(key);
        if (entry) {
            return entry.peek();
        }
    }
    optimistic.peekKey = peekKey;
    optimistic.peek = function peek() {
        return peekKey(makeCacheKey.apply(null, arguments));
    };
    function forgetKey(key) {
        return cache.delete(key);
    }
    optimistic.forgetKey = forgetKey;
    optimistic.forget = function forget() {
        return forgetKey(makeCacheKey.apply(null, arguments));
    };
    optimistic.makeCacheKey = makeCacheKey;
    optimistic.getKey = keyArgs ? function getKey() {
        return makeCacheKey.apply(null, keyArgs.apply(null, arguments));
    } : makeCacheKey;
    return Object.freeze(optimistic);
}

var ApolloCache = (function () {
    function ApolloCache() {
        this.getFragmentDoc = wrap(getFragmentQueryDocument);
    }
    ApolloCache.prototype.batch = function (options) {
        var optimisticId = typeof options.optimistic === "string" ? options.optimistic :
            options.optimistic === false ? null : void 0;
        this.performTransaction(options.update, optimisticId);
    };
    ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {
        this.performTransaction(transaction, optimisticId);
    };
    ApolloCache.prototype.transformDocument = function (document) {
        return document;
    };
    ApolloCache.prototype.identify = function (object) {
        return;
    };
    ApolloCache.prototype.gc = function () {
        return [];
    };
    ApolloCache.prototype.modify = function (options) {
        return false;
    };
    ApolloCache.prototype.transformForLink = function (document) {
        return document;
    };
    ApolloCache.prototype.readQuery = function (options, optimistic) {
        if (optimistic === void 0) { optimistic = !!options.optimistic; }
        return this.read(__assign(__assign({}, options), { rootId: options.id || 'ROOT_QUERY', optimistic: optimistic }));
    };
    ApolloCache.prototype.readFragment = function (options, optimistic) {
        if (optimistic === void 0) { optimistic = !!options.optimistic; }
        return this.read(__assign(__assign({}, options), { query: this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic: optimistic }));
    };
    ApolloCache.prototype.writeQuery = function (_a) {
        var id = _a.id, data = _a.data, options = __rest(_a, ["id", "data"]);
        return this.write(Object.assign(options, {
            dataId: id || 'ROOT_QUERY',
            result: data,
        }));
    };
    ApolloCache.prototype.writeFragment = function (_a) {
        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = __rest(_a, ["id", "data", "fragment", "fragmentName"]);
        return this.write(Object.assign(options, {
            query: this.getFragmentDoc(fragment, fragmentName),
            dataId: id,
            result: data,
        }));
    };
    return ApolloCache;
}());

var MissingFieldError = (function (_super) {
    __extends(MissingFieldError, _super);
    function MissingFieldError(message, path, query, variables) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.path = path;
        _this.query = query;
        _this.variables = variables;
        _this.__proto__ = MissingFieldError.prototype;
        return _this;
    }
    return MissingFieldError;
}(Error));

var hasOwn$1 = Object.prototype.hasOwnProperty;
function defaultDataIdFromObject(_a, context) {
    var __typename = _a.__typename, id = _a.id, _id = _a._id;
    if (typeof __typename === "string") {
        if (context) {
            context.keyObject =
                id !== void 0 ? { id: id } :
                    _id !== void 0 ? { _id: _id } :
                        void 0;
        }
        if (id === void 0)
            id = _id;
        if (id !== void 0) {
            return __typename + ":" + ((typeof id === "number" ||
                typeof id === "string") ? id : JSON.stringify(id));
        }
    }
}
var defaultConfig = {
    dataIdFromObject: defaultDataIdFromObject,
    addTypename: true,
    resultCaching: true,
    canonizeResults: false,
};
function normalizeConfig(config) {
    return compact(defaultConfig, config);
}
function shouldCanonizeResults(config) {
    var value = config.canonizeResults;
    return value === void 0 ? defaultConfig.canonizeResults : value;
}
function getTypenameFromStoreObject(store, objectOrReference) {
    return isReference(objectOrReference)
        ? store.get(objectOrReference.__ref, "__typename")
        : objectOrReference && objectOrReference.__typename;
}
var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;
function fieldNameFromStoreName(storeFieldName) {
    var match = storeFieldName.match(TypeOrFieldNameRegExp);
    return match ? match[0] : storeFieldName;
}
function selectionSetMatchesResult(selectionSet, result, variables) {
    if (isNonNullObject$1(result)) {
        return Array.isArray(result)
            ? result.every(function (item) { return selectionSetMatchesResult(selectionSet, item, variables); })
            : selectionSet.selections.every(function (field) {
                if (isField(field) && shouldInclude(field, variables)) {
                    var key = resultKeyNameFromField(field);
                    return hasOwn$1.call(result, key) &&
                        (!field.selectionSet ||
                            selectionSetMatchesResult(field.selectionSet, result[key], variables));
                }
                return true;
            });
    }
    return false;
}
function storeValueIsStoreObject(value) {
    return isNonNullObject$1(value) &&
        !isReference(value) &&
        !Array.isArray(value);
}
function makeProcessedFieldsMerger() {
    return new DeepMerger;
}

var DELETE = Object.create(null);
var delModifier = function () { return DELETE; };
var INVALIDATE = Object.create(null);
var EntityStore = (function () {
    function EntityStore(policies, group) {
        var _this = this;
        this.policies = policies;
        this.group = group;
        this.data = Object.create(null);
        this.rootIds = Object.create(null);
        this.refs = Object.create(null);
        this.getFieldValue = function (objectOrReference, storeFieldName) { return maybeDeepFreeze(isReference(objectOrReference)
            ? _this.get(objectOrReference.__ref, storeFieldName)
            : objectOrReference && objectOrReference[storeFieldName]); };
        this.canRead = function (objOrRef) {
            return isReference(objOrRef)
                ? _this.has(objOrRef.__ref)
                : typeof objOrRef === "object";
        };
        this.toReference = function (objOrIdOrRef, mergeIntoStore) {
            if (typeof objOrIdOrRef === "string") {
                return makeReference(objOrIdOrRef);
            }
            if (isReference(objOrIdOrRef)) {
                return objOrIdOrRef;
            }
            var id = _this.policies.identify(objOrIdOrRef)[0];
            if (id) {
                var ref = makeReference(id);
                if (mergeIntoStore) {
                    _this.merge(id, objOrIdOrRef);
                }
                return ref;
            }
        };
    }
    EntityStore.prototype.toObject = function () {
        return __assign({}, this.data);
    };
    EntityStore.prototype.has = function (dataId) {
        return this.lookup(dataId, true) !== void 0;
    };
    EntityStore.prototype.get = function (dataId, fieldName) {
        this.group.depend(dataId, fieldName);
        if (hasOwn$1.call(this.data, dataId)) {
            var storeObject = this.data[dataId];
            if (storeObject && hasOwn$1.call(storeObject, fieldName)) {
                return storeObject[fieldName];
            }
        }
        if (fieldName === "__typename" &&
            hasOwn$1.call(this.policies.rootTypenamesById, dataId)) {
            return this.policies.rootTypenamesById[dataId];
        }
        if (this instanceof Layer) {
            return this.parent.get(dataId, fieldName);
        }
    };
    EntityStore.prototype.lookup = function (dataId, dependOnExistence) {
        if (dependOnExistence)
            this.group.depend(dataId, "__exists");
        if (hasOwn$1.call(this.data, dataId)) {
            return this.data[dataId];
        }
        if (this instanceof Layer) {
            return this.parent.lookup(dataId, dependOnExistence);
        }
        if (this.policies.rootTypenamesById[dataId]) {
            return Object.create(null);
        }
    };
    EntityStore.prototype.merge = function (older, newer) {
        var _this = this;
        var dataId;
        if (isReference(older))
            older = older.__ref;
        if (isReference(newer))
            newer = newer.__ref;
        var existing = typeof older === "string"
            ? this.lookup(dataId = older)
            : older;
        var incoming = typeof newer === "string"
            ? this.lookup(dataId = newer)
            : newer;
        if (!incoming)
            return;
        __DEV__ ? invariant$2(typeof dataId === "string", "store.merge expects a string ID") : invariant$2(typeof dataId === "string", 1);
        var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);
        this.data[dataId] = merged;
        if (merged !== existing) {
            delete this.refs[dataId];
            if (this.group.caching) {
                var fieldsToDirty_1 = Object.create(null);
                if (!existing)
                    fieldsToDirty_1.__exists = 1;
                Object.keys(incoming).forEach(function (storeFieldName) {
                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {
                        fieldsToDirty_1[storeFieldName] = 1;
                        var fieldName = fieldNameFromStoreName(storeFieldName);
                        if (fieldName !== storeFieldName &&
                            !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {
                            fieldsToDirty_1[fieldName] = 1;
                        }
                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {
                            delete merged[storeFieldName];
                        }
                    }
                });
                if (fieldsToDirty_1.__typename &&
                    !(existing && existing.__typename) &&
                    this.policies.rootTypenamesById[dataId] === merged.__typename) {
                    delete fieldsToDirty_1.__typename;
                }
                Object.keys(fieldsToDirty_1).forEach(function (fieldName) { return _this.group.dirty(dataId, fieldName); });
            }
        }
    };
    EntityStore.prototype.modify = function (dataId, fields) {
        var _this = this;
        var storeObject = this.lookup(dataId);
        if (storeObject) {
            var changedFields_1 = Object.create(null);
            var needToMerge_1 = false;
            var allDeleted_1 = true;
            var sharedDetails_1 = {
                DELETE: DELETE,
                INVALIDATE: INVALIDATE,
                isReference: isReference,
                toReference: this.toReference,
                canRead: this.canRead,
                readField: function (fieldNameOrOptions, from) { return _this.policies.readField(typeof fieldNameOrOptions === "string" ? {
                    fieldName: fieldNameOrOptions,
                    from: from || makeReference(dataId),
                } : fieldNameOrOptions, { store: _this }); },
            };
            Object.keys(storeObject).forEach(function (storeFieldName) {
                var fieldName = fieldNameFromStoreName(storeFieldName);
                var fieldValue = storeObject[storeFieldName];
                if (fieldValue === void 0)
                    return;
                var modify = typeof fields === "function"
                    ? fields
                    : fields[storeFieldName] || fields[fieldName];
                if (modify) {
                    var newValue = modify === delModifier ? DELETE :
                        modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), { fieldName: fieldName, storeFieldName: storeFieldName, storage: _this.getStorage(dataId, storeFieldName) }));
                    if (newValue === INVALIDATE) {
                        _this.group.dirty(dataId, storeFieldName);
                    }
                    else {
                        if (newValue === DELETE)
                            newValue = void 0;
                        if (newValue !== fieldValue) {
                            changedFields_1[storeFieldName] = newValue;
                            needToMerge_1 = true;
                            fieldValue = newValue;
                        }
                    }
                }
                if (fieldValue !== void 0) {
                    allDeleted_1 = false;
                }
            });
            if (needToMerge_1) {
                this.merge(dataId, changedFields_1);
                if (allDeleted_1) {
                    if (this instanceof Layer) {
                        this.data[dataId] = void 0;
                    }
                    else {
                        delete this.data[dataId];
                    }
                    this.group.dirty(dataId, "__exists");
                }
                return true;
            }
        }
        return false;
    };
    EntityStore.prototype.delete = function (dataId, fieldName, args) {
        var _a;
        var storeObject = this.lookup(dataId);
        if (storeObject) {
            var typename = this.getFieldValue(storeObject, "__typename");
            var storeFieldName = fieldName && args
                ? this.policies.getStoreFieldName({ typename: typename, fieldName: fieldName, args: args })
                : fieldName;
            return this.modify(dataId, storeFieldName ? (_a = {},
                _a[storeFieldName] = delModifier,
                _a) : delModifier);
        }
        return false;
    };
    EntityStore.prototype.evict = function (options, limit) {
        var evicted = false;
        if (options.id) {
            if (hasOwn$1.call(this.data, options.id)) {
                evicted = this.delete(options.id, options.fieldName, options.args);
            }
            if (this instanceof Layer && this !== limit) {
                evicted = this.parent.evict(options, limit) || evicted;
            }
            if (options.fieldName || evicted) {
                this.group.dirty(options.id, options.fieldName || "__exists");
            }
        }
        return evicted;
    };
    EntityStore.prototype.clear = function () {
        this.replace(null);
    };
    EntityStore.prototype.extract = function () {
        var _this = this;
        var obj = this.toObject();
        var extraRootIds = [];
        this.getRootIdSet().forEach(function (id) {
            if (!hasOwn$1.call(_this.policies.rootTypenamesById, id)) {
                extraRootIds.push(id);
            }
        });
        if (extraRootIds.length) {
            obj.__META = { extraRootIds: extraRootIds.sort() };
        }
        return obj;
    };
    EntityStore.prototype.replace = function (newData) {
        var _this = this;
        Object.keys(this.data).forEach(function (dataId) {
            if (!(newData && hasOwn$1.call(newData, dataId))) {
                _this.delete(dataId);
            }
        });
        if (newData) {
            var __META = newData.__META, rest_1 = __rest(newData, ["__META"]);
            Object.keys(rest_1).forEach(function (dataId) {
                _this.merge(dataId, rest_1[dataId]);
            });
            if (__META) {
                __META.extraRootIds.forEach(this.retain, this);
            }
        }
    };
    EntityStore.prototype.retain = function (rootId) {
        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;
    };
    EntityStore.prototype.release = function (rootId) {
        if (this.rootIds[rootId] > 0) {
            var count = --this.rootIds[rootId];
            if (!count)
                delete this.rootIds[rootId];
            return count;
        }
        return 0;
    };
    EntityStore.prototype.getRootIdSet = function (ids) {
        if (ids === void 0) { ids = new Set(); }
        Object.keys(this.rootIds).forEach(ids.add, ids);
        if (this instanceof Layer) {
            this.parent.getRootIdSet(ids);
        }
        else {
            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);
        }
        return ids;
    };
    EntityStore.prototype.gc = function () {
        var _this = this;
        var ids = this.getRootIdSet();
        var snapshot = this.toObject();
        ids.forEach(function (id) {
            if (hasOwn$1.call(snapshot, id)) {
                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);
                delete snapshot[id];
            }
        });
        var idsToRemove = Object.keys(snapshot);
        if (idsToRemove.length) {
            var root_1 = this;
            while (root_1 instanceof Layer)
                root_1 = root_1.parent;
            idsToRemove.forEach(function (id) { return root_1.delete(id); });
        }
        return idsToRemove;
    };
    EntityStore.prototype.findChildRefIds = function (dataId) {
        if (!hasOwn$1.call(this.refs, dataId)) {
            var found_1 = this.refs[dataId] = Object.create(null);
            var root = this.data[dataId];
            if (!root)
                return found_1;
            var workSet_1 = new Set([root]);
            workSet_1.forEach(function (obj) {
                if (isReference(obj)) {
                    found_1[obj.__ref] = true;
                }
                if (isNonNullObject$1(obj)) {
                    Object.keys(obj).forEach(function (key) {
                        var child = obj[key];
                        if (isNonNullObject$1(child)) {
                            workSet_1.add(child);
                        }
                    });
                }
            });
        }
        return this.refs[dataId];
    };
    EntityStore.prototype.makeCacheKey = function () {
        return this.group.keyMaker.lookupArray(arguments);
    };
    return EntityStore;
}());
var CacheGroup = (function () {
    function CacheGroup(caching, parent) {
        if (parent === void 0) { parent = null; }
        this.caching = caching;
        this.parent = parent;
        this.d = null;
        this.resetCaching();
    }
    CacheGroup.prototype.resetCaching = function () {
        this.d = this.caching ? dep() : null;
        this.keyMaker = new Trie(canUseWeakMap);
    };
    CacheGroup.prototype.depend = function (dataId, storeFieldName) {
        if (this.d) {
            this.d(makeDepKey(dataId, storeFieldName));
            var fieldName = fieldNameFromStoreName(storeFieldName);
            if (fieldName !== storeFieldName) {
                this.d(makeDepKey(dataId, fieldName));
            }
            if (this.parent) {
                this.parent.depend(dataId, storeFieldName);
            }
        }
    };
    CacheGroup.prototype.dirty = function (dataId, storeFieldName) {
        if (this.d) {
            this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === "__exists" ? "forget" : "setDirty");
        }
    };
    return CacheGroup;
}());
function makeDepKey(dataId, storeFieldName) {
    return storeFieldName + '#' + dataId;
}
function maybeDependOnExistenceOfEntity(store, entityId) {
    if (supportsResultCaching(store)) {
        store.group.depend(entityId, "__exists");
    }
}
(function (EntityStore) {
    var Root = (function (_super) {
        __extends(Root, _super);
        function Root(_a) {
            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;
            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;
            _this.stump = new Stump(_this);
            _this.storageTrie = new Trie(canUseWeakMap);
            if (seed)
                _this.replace(seed);
            return _this;
        }
        Root.prototype.addLayer = function (layerId, replay) {
            return this.stump.addLayer(layerId, replay);
        };
        Root.prototype.removeLayer = function () {
            return this;
        };
        Root.prototype.getStorage = function () {
            return this.storageTrie.lookupArray(arguments);
        };
        return Root;
    }(EntityStore));
    EntityStore.Root = Root;
})(EntityStore || (EntityStore = {}));
var Layer = (function (_super) {
    __extends(Layer, _super);
    function Layer(id, parent, replay, group) {
        var _this = _super.call(this, parent.policies, group) || this;
        _this.id = id;
        _this.parent = parent;
        _this.replay = replay;
        _this.group = group;
        replay(_this);
        return _this;
    }
    Layer.prototype.addLayer = function (layerId, replay) {
        return new Layer(layerId, this, replay, this.group);
    };
    Layer.prototype.removeLayer = function (layerId) {
        var _this = this;
        var parent = this.parent.removeLayer(layerId);
        if (layerId === this.id) {
            if (this.group.caching) {
                Object.keys(this.data).forEach(function (dataId) {
                    var ownStoreObject = _this.data[dataId];
                    var parentStoreObject = parent["lookup"](dataId);
                    if (!parentStoreObject) {
                        _this.delete(dataId);
                    }
                    else if (!ownStoreObject) {
                        _this.group.dirty(dataId, "__exists");
                        Object.keys(parentStoreObject).forEach(function (storeFieldName) {
                            _this.group.dirty(dataId, storeFieldName);
                        });
                    }
                    else if (ownStoreObject !== parentStoreObject) {
                        Object.keys(ownStoreObject).forEach(function (storeFieldName) {
                            if (!equal$1(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {
                                _this.group.dirty(dataId, storeFieldName);
                            }
                        });
                    }
                });
            }
            return parent;
        }
        if (parent === this.parent)
            return this;
        return parent.addLayer(this.id, this.replay);
    };
    Layer.prototype.toObject = function () {
        return __assign(__assign({}, this.parent.toObject()), this.data);
    };
    Layer.prototype.findChildRefIds = function (dataId) {
        var fromParent = this.parent.findChildRefIds(dataId);
        return hasOwn$1.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;
    };
    Layer.prototype.getStorage = function () {
        var p = this.parent;
        while (p.parent)
            p = p.parent;
        return p.getStorage.apply(p, arguments);
    };
    return Layer;
}(EntityStore));
var Stump = (function (_super) {
    __extends(Stump, _super);
    function Stump(root) {
        return _super.call(this, "EntityStore.Stump", root, function () { }, new CacheGroup(root.group.caching, root.group)) || this;
    }
    Stump.prototype.removeLayer = function () {
        return this;
    };
    Stump.prototype.merge = function () {
        return this.parent.merge.apply(this.parent, arguments);
    };
    return Stump;
}(Layer));
function storeObjectReconciler(existingObject, incomingObject, property) {
    var existingValue = existingObject[property];
    var incomingValue = incomingObject[property];
    return equal$1(existingValue, incomingValue) ? existingValue : incomingValue;
}
function supportsResultCaching(store) {
    return !!(store instanceof EntityStore && store.group.caching);
}

function shallowCopy(value) {
    if (isNonNullObject$1(value)) {
        return Array.isArray(value)
            ? value.slice(0)
            : __assign({ __proto__: Object.getPrototypeOf(value) }, value);
    }
    return value;
}
var ObjectCanon = (function () {
    function ObjectCanon() {
        this.known = new (canUseWeakSet ? WeakSet : Set)();
        this.pool = new Trie(canUseWeakMap);
        this.passes = new WeakMap();
        this.keysByJSON = new Map();
        this.empty = this.admit({});
    }
    ObjectCanon.prototype.isKnown = function (value) {
        return isNonNullObject$1(value) && this.known.has(value);
    };
    ObjectCanon.prototype.pass = function (value) {
        if (isNonNullObject$1(value)) {
            var copy = shallowCopy(value);
            this.passes.set(copy, value);
            return copy;
        }
        return value;
    };
    ObjectCanon.prototype.admit = function (value) {
        var _this = this;
        if (isNonNullObject$1(value)) {
            var original = this.passes.get(value);
            if (original)
                return original;
            var proto = Object.getPrototypeOf(value);
            switch (proto) {
                case Array.prototype: {
                    if (this.known.has(value))
                        return value;
                    var array = value.map(this.admit, this);
                    var node = this.pool.lookupArray(array);
                    if (!node.array) {
                        this.known.add(node.array = array);
                        if (__DEV__) {
                            Object.freeze(array);
                        }
                    }
                    return node.array;
                }
                case null:
                case Object.prototype: {
                    if (this.known.has(value))
                        return value;
                    var proto_1 = Object.getPrototypeOf(value);
                    var array_1 = [proto_1];
                    var keys = this.sortedKeys(value);
                    array_1.push(keys.json);
                    var firstValueIndex_1 = array_1.length;
                    keys.sorted.forEach(function (key) {
                        array_1.push(_this.admit(value[key]));
                    });
                    var node = this.pool.lookupArray(array_1);
                    if (!node.object) {
                        var obj_1 = node.object = Object.create(proto_1);
                        this.known.add(obj_1);
                        keys.sorted.forEach(function (key, i) {
                            obj_1[key] = array_1[firstValueIndex_1 + i];
                        });
                        if (__DEV__) {
                            Object.freeze(obj_1);
                        }
                    }
                    return node.object;
                }
            }
        }
        return value;
    };
    ObjectCanon.prototype.sortedKeys = function (obj) {
        var keys = Object.keys(obj);
        var node = this.pool.lookupArray(keys);
        if (!node.keys) {
            keys.sort();
            var json = JSON.stringify(keys);
            if (!(node.keys = this.keysByJSON.get(json))) {
                this.keysByJSON.set(json, node.keys = { sorted: keys, json: json });
            }
        }
        return node.keys;
    };
    return ObjectCanon;
}());
var canonicalStringify = Object.assign(function (value) {
    if (isNonNullObject$1(value)) {
        if (stringifyCanon === void 0) {
            resetCanonicalStringify();
        }
        var canonical = stringifyCanon.admit(value);
        var json = stringifyCache.get(canonical);
        if (json === void 0) {
            stringifyCache.set(canonical, json = JSON.stringify(canonical));
        }
        return json;
    }
    return JSON.stringify(value);
}, {
    reset: resetCanonicalStringify,
});
var stringifyCanon;
var stringifyCache;
function resetCanonicalStringify() {
    stringifyCanon = new ObjectCanon;
    stringifyCache = new (canUseWeakMap ? WeakMap : Map)();
}

function missingFromInvariant(err, context) {
    return new MissingFieldError(err.message, context.path.slice(), context.query, context.variables);
}
function execSelectionSetKeyArgs(options) {
    return [
        options.selectionSet,
        options.objectOrReference,
        options.context,
        options.context.canonizeResults,
    ];
}
var StoreReader = (function () {
    function StoreReader(config) {
        var _this = this;
        this.knownResults = new (canUseWeakMap ? WeakMap : Map)();
        this.config = compact(config, {
            addTypename: config.addTypename !== false,
            canonizeResults: shouldCanonizeResults(config),
        });
        this.canon = config.canon || new ObjectCanon;
        this.executeSelectionSet = wrap(function (options) {
            var _a;
            var canonizeResults = options.context.canonizeResults;
            var peekArgs = execSelectionSetKeyArgs(options);
            peekArgs[3] = !canonizeResults;
            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);
            if (other) {
                if (canonizeResults) {
                    return __assign(__assign({}, other), { result: _this.canon.admit(other.result) });
                }
                return other;
            }
            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);
            return _this.execSelectionSetImpl(options);
        }, {
            max: this.config.resultCacheMaxSize,
            keyArgs: execSelectionSetKeyArgs,
            makeCacheKey: function (selectionSet, parent, context, canonizeResults) {
                if (supportsResultCaching(context.store)) {
                    return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString, canonizeResults);
                }
            }
        });
        this.executeSubSelectedArray = wrap(function (options) {
            maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);
            return _this.execSubSelectedArrayImpl(options);
        }, {
            max: this.config.resultCacheMaxSize,
            makeCacheKey: function (_a) {
                var field = _a.field, array = _a.array, context = _a.context;
                if (supportsResultCaching(context.store)) {
                    return context.store.makeCacheKey(field, array, context.varString);
                }
            }
        });
    }
    StoreReader.prototype.resetCanon = function () {
        this.canon = new ObjectCanon;
    };
    StoreReader.prototype.diffQueryAgainstStore = function (_a) {
        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? 'ROOT_QUERY' : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;
        var policies = this.config.cache.policies;
        variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);
        var rootRef = makeReference(rootId);
        var execResult = this.executeSelectionSet({
            selectionSet: getMainDefinition(query).selectionSet,
            objectOrReference: rootRef,
            enclosingRef: rootRef,
            context: {
                store: store,
                query: query,
                policies: policies,
                variables: variables,
                varString: canonicalStringify(variables),
                canonizeResults: canonizeResults,
                fragmentMap: createFragmentMap(getFragmentDefinitions(query)),
                path: [],
            },
        });
        var hasMissingFields = execResult.missing && execResult.missing.length > 0;
        if (hasMissingFields && !returnPartialData) {
            throw execResult.missing[0];
        }
        return {
            result: execResult.result,
            missing: execResult.missing,
            complete: !hasMissingFields,
        };
    };
    StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {
        if (supportsResultCaching(context.store) &&
            this.knownResults.get(result) === selectionSet) {
            var latest = this.executeSelectionSet.peek(selectionSet, parent, context, this.canon.isKnown(result));
            if (latest && result === latest.result) {
                return true;
            }
        }
        return false;
    };
    StoreReader.prototype.execSelectionSetImpl = function (_a) {
        var _this = this;
        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;
        if (isReference(objectOrReference) &&
            !context.policies.rootTypenamesById[objectOrReference.__ref] &&
            !context.store.has(objectOrReference.__ref)) {
            return {
                result: this.canon.empty,
                missing: [missingFromInvariant(__DEV__ ? new InvariantError("Dangling reference to missing " + objectOrReference.__ref + " object") : new InvariantError(5), context)],
            };
        }
        var variables = context.variables, policies = context.policies, store = context.store;
        var objectsToMerge = [];
        var finalResult = { result: null };
        var typename = store.getFieldValue(objectOrReference, "__typename");
        if (this.config.addTypename &&
            typeof typename === "string" &&
            !policies.rootIdsByTypename[typename]) {
            objectsToMerge.push({ __typename: typename });
        }
        function getMissing() {
            return finalResult.missing || (finalResult.missing = []);
        }
        function handleMissing(result) {
            var _a;
            if (result.missing)
                (_a = getMissing()).push.apply(_a, result.missing);
            return result.result;
        }
        var workSet = new Set(selectionSet.selections);
        workSet.forEach(function (selection) {
            var _a;
            if (!shouldInclude(selection, variables))
                return;
            if (isField(selection)) {
                var fieldValue = policies.readField({
                    fieldName: selection.name.value,
                    field: selection,
                    variables: context.variables,
                    from: objectOrReference,
                }, context);
                var resultName = resultKeyNameFromField(selection);
                context.path.push(resultName);
                if (fieldValue === void 0) {
                    if (!addTypenameToDocument.added(selection)) {
                        getMissing().push(missingFromInvariant(__DEV__ ? new InvariantError("Can't find field '" + selection.name.value + "' on " + (isReference(objectOrReference)
                            ? objectOrReference.__ref + " object"
                            : "object " + JSON.stringify(objectOrReference, null, 2))) : new InvariantError(6), context));
                    }
                }
                else if (Array.isArray(fieldValue)) {
                    fieldValue = handleMissing(_this.executeSubSelectedArray({
                        field: selection,
                        array: fieldValue,
                        enclosingRef: enclosingRef,
                        context: context,
                    }));
                }
                else if (!selection.selectionSet) {
                    if (context.canonizeResults) {
                        fieldValue = _this.canon.pass(fieldValue);
                    }
                }
                else if (fieldValue != null) {
                    fieldValue = handleMissing(_this.executeSelectionSet({
                        selectionSet: selection.selectionSet,
                        objectOrReference: fieldValue,
                        enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,
                        context: context,
                    }));
                }
                if (fieldValue !== void 0) {
                    objectsToMerge.push((_a = {}, _a[resultName] = fieldValue, _a));
                }
                invariant$2(context.path.pop() === resultName);
            }
            else {
                var fragment = getFragmentFromSelection(selection, context.fragmentMap);
                if (fragment && policies.fragmentMatches(fragment, typename)) {
                    fragment.selectionSet.selections.forEach(workSet.add, workSet);
                }
            }
        });
        var merged = mergeDeepArray(objectsToMerge);
        finalResult.result = context.canonizeResults
            ? this.canon.admit(merged)
            : maybeDeepFreeze(merged);
        this.knownResults.set(finalResult.result, selectionSet);
        return finalResult;
    };
    StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {
        var _this = this;
        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;
        var missing;
        function handleMissing(childResult, i) {
            if (childResult.missing) {
                missing = missing || [];
                missing.push.apply(missing, childResult.missing);
            }
            invariant$2(context.path.pop() === i);
            return childResult.result;
        }
        if (field.selectionSet) {
            array = array.filter(context.store.canRead);
        }
        array = array.map(function (item, i) {
            if (item === null) {
                return null;
            }
            context.path.push(i);
            if (Array.isArray(item)) {
                return handleMissing(_this.executeSubSelectedArray({
                    field: field,
                    array: item,
                    enclosingRef: enclosingRef,
                    context: context,
                }), i);
            }
            if (field.selectionSet) {
                return handleMissing(_this.executeSelectionSet({
                    selectionSet: field.selectionSet,
                    objectOrReference: item,
                    enclosingRef: isReference(item) ? item : enclosingRef,
                    context: context,
                }), i);
            }
            if (__DEV__) {
                assertSelectionSetForIdValue(context.store, field, item);
            }
            invariant$2(context.path.pop() === i);
            return item;
        });
        return {
            result: context.canonizeResults ? this.canon.admit(array) : array,
            missing: missing,
        };
    };
    return StoreReader;
}());
function assertSelectionSetForIdValue(store, field, fieldValue) {
    if (!field.selectionSet) {
        var workSet_1 = new Set([fieldValue]);
        workSet_1.forEach(function (value) {
            if (isNonNullObject$1(value)) {
                __DEV__ ? invariant$2(!isReference(value), "Missing selection set for object of type " + getTypenameFromStoreObject(store, value) + " returned for query field " + field.name.value) : invariant$2(!isReference(value), 7);
                Object.values(value).forEach(workSet_1.add, workSet_1);
            }
        });
    }
}

var StoreWriter = (function () {
    function StoreWriter(cache, reader) {
        this.cache = cache;
        this.reader = reader;
    }
    StoreWriter.prototype.writeToStore = function (store, _a) {
        var _this = this;
        var query = _a.query, result = _a.result, dataId = _a.dataId, variables = _a.variables, overwrite = _a.overwrite;
        var operationDefinition = getOperationDefinition(query);
        var merger = makeProcessedFieldsMerger();
        variables = __assign(__assign({}, getDefaultValues(operationDefinition)), variables);
        var context = {
            store: store,
            written: Object.create(null),
            merge: function (existing, incoming) {
                return merger.merge(existing, incoming);
            },
            variables: variables,
            varString: canonicalStringify(variables),
            fragmentMap: createFragmentMap(getFragmentDefinitions(query)),
            overwrite: !!overwrite,
            incomingById: new Map,
            clientOnly: false,
        };
        var ref = this.processSelectionSet({
            result: result || Object.create(null),
            dataId: dataId,
            selectionSet: operationDefinition.selectionSet,
            mergeTree: { map: new Map },
            context: context,
        });
        if (!isReference(ref)) {
            throw __DEV__ ? new InvariantError("Could not identify object " + JSON.stringify(result)) : new InvariantError(8);
        }
        context.incomingById.forEach(function (_a, dataId) {
            var fields = _a.fields, mergeTree = _a.mergeTree, selections = _a.selections;
            var entityRef = makeReference(dataId);
            if (mergeTree && mergeTree.map.size) {
                var applied = _this.applyMerges(mergeTree, entityRef, fields, context);
                if (isReference(applied)) {
                    return;
                }
                fields = applied;
            }
            if (__DEV__ && !context.overwrite) {
                var hasSelectionSet_1 = function (storeFieldName) {
                    return fieldsWithSelectionSets_1.has(fieldNameFromStoreName(storeFieldName));
                };
                var fieldsWithSelectionSets_1 = new Set();
                selections.forEach(function (selection) {
                    if (isField(selection) && selection.selectionSet) {
                        fieldsWithSelectionSets_1.add(selection.name.value);
                    }
                });
                var hasMergeFunction_1 = function (storeFieldName) {
                    var childTree = mergeTree && mergeTree.map.get(storeFieldName);
                    return Boolean(childTree && childTree.info && childTree.info.merge);
                };
                Object.keys(fields).forEach(function (storeFieldName) {
                    if (hasSelectionSet_1(storeFieldName) &&
                        !hasMergeFunction_1(storeFieldName)) {
                        warnAboutDataLoss(entityRef, fields, storeFieldName, context.store);
                    }
                });
            }
            store.merge(dataId, fields);
        });
        store.retain(ref.__ref);
        return ref;
    };
    StoreWriter.prototype.processSelectionSet = function (_a) {
        var _this = this;
        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, mergeTree = _a.mergeTree;
        var policies = this.cache.policies;
        var _b = policies.identify(result, selectionSet, context.fragmentMap), id = _b[0], keyObject = _b[1];
        dataId = dataId || id;
        if ("string" === typeof dataId) {
            var sets = context.written[dataId] || (context.written[dataId] = []);
            var ref = makeReference(dataId);
            if (sets.indexOf(selectionSet) >= 0)
                return ref;
            sets.push(selectionSet);
            if (this.reader && this.reader.isFresh(result, ref, selectionSet, context)) {
                return ref;
            }
        }
        var incomingFields = Object.create(null);
        if (keyObject) {
            incomingFields = context.merge(incomingFields, keyObject);
        }
        var typename = (dataId && policies.rootTypenamesById[dataId]) ||
            getTypenameFromResult(result, selectionSet, context.fragmentMap) ||
            (dataId && context.store.get(dataId, "__typename"));
        if ("string" === typeof typename) {
            incomingFields.__typename = typename;
        }
        var selections = new Set(selectionSet.selections);
        selections.forEach(function (selection) {
            var _a;
            if (!shouldInclude(selection, context.variables))
                return;
            if (isField(selection)) {
                var resultFieldKey = resultKeyNameFromField(selection);
                var value = result[resultFieldKey];
                var wasClientOnly = context.clientOnly;
                context.clientOnly = wasClientOnly || !!(selection.directives &&
                    selection.directives.some(function (d) { return d.name.value === "client"; }));
                if (value !== void 0) {
                    var storeFieldName = policies.getStoreFieldName({
                        typename: typename,
                        fieldName: selection.name.value,
                        field: selection,
                        variables: context.variables,
                    });
                    var childTree = getChildMergeTree(mergeTree, storeFieldName);
                    var incomingValue = _this.processFieldValue(value, selection, context, childTree);
                    var childTypename = void 0;
                    if (selection.selectionSet) {
                        childTypename = context.store.getFieldValue(incomingValue, "__typename");
                        if (!childTypename && isReference(incomingValue)) {
                            var info = context.incomingById.get(incomingValue.__ref);
                            childTypename = info && info.fields.__typename;
                        }
                    }
                    var merge = policies.getMergeFunction(typename, selection.name.value, childTypename);
                    if (merge) {
                        childTree.info = {
                            field: selection,
                            typename: typename,
                            merge: merge,
                        };
                    }
                    else {
                        maybeRecycleChildMergeTree(mergeTree, storeFieldName);
                    }
                    incomingFields = context.merge(incomingFields, (_a = {},
                        _a[storeFieldName] = incomingValue,
                        _a));
                }
                else if (!context.clientOnly &&
                    !addTypenameToDocument.added(selection)) {
                    __DEV__ && invariant$2.error(("Missing field '" + resultKeyNameFromField(selection) + "' while writing result " + JSON.stringify(result, null, 2)).substring(0, 1000));
                }
                context.clientOnly = wasClientOnly;
            }
            else {
                var fragment = getFragmentFromSelection(selection, context.fragmentMap);
                if (fragment &&
                    policies.fragmentMatches(fragment, typename, result, context.variables)) {
                    fragment.selectionSet.selections.forEach(selections.add, selections);
                }
            }
        });
        if ("string" === typeof dataId) {
            var previous = context.incomingById.get(dataId);
            if (previous) {
                previous.fields = context.merge(previous.fields, incomingFields);
                previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);
                previous.selections.forEach(selections.add, selections);
                previous.selections = selections;
            }
            else {
                context.incomingById.set(dataId, {
                    fields: incomingFields,
                    mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,
                    selections: selections,
                });
            }
            return makeReference(dataId);
        }
        return incomingFields;
    };
    StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {
        var _this = this;
        if (!field.selectionSet || value === null) {
            return __DEV__ ? cloneDeep(value) : value;
        }
        if (Array.isArray(value)) {
            return value.map(function (item, i) {
                var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));
                maybeRecycleChildMergeTree(mergeTree, i);
                return value;
            });
        }
        return this.processSelectionSet({
            result: value,
            selectionSet: field.selectionSet,
            context: context,
            mergeTree: mergeTree,
        });
    };
    StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {
        var _a;
        var _this = this;
        if (mergeTree.map.size && !isReference(incoming)) {
            var e_1 = (!Array.isArray(incoming) &&
                (isReference(existing) || storeValueIsStoreObject(existing))) ? existing : void 0;
            var i_1 = incoming;
            if (e_1 && !getStorageArgs) {
                getStorageArgs = [isReference(e_1) ? e_1.__ref : e_1];
            }
            var changedFields_1;
            var getValue_1 = function (from, name) {
                return Array.isArray(from)
                    ? (typeof name === "number" ? from[name] : void 0)
                    : context.store.getFieldValue(from, String(name));
            };
            mergeTree.map.forEach(function (childTree, storeFieldName) {
                var eVal = getValue_1(e_1, storeFieldName);
                var iVal = getValue_1(i_1, storeFieldName);
                if (void 0 === iVal)
                    return;
                if (getStorageArgs) {
                    getStorageArgs.push(storeFieldName);
                }
                var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);
                if (aVal !== iVal) {
                    changedFields_1 = changedFields_1 || new Map;
                    changedFields_1.set(storeFieldName, aVal);
                }
                if (getStorageArgs) {
                    invariant$2(getStorageArgs.pop() === storeFieldName);
                }
            });
            if (changedFields_1) {
                incoming = (Array.isArray(i_1) ? i_1.slice(0) : __assign({}, i_1));
                changedFields_1.forEach(function (value, name) {
                    incoming[name] = value;
                });
            }
        }
        if (mergeTree.info) {
            return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));
        }
        return incoming;
    };
    return StoreWriter;
}());
var emptyMergeTreePool = [];
function getChildMergeTree(_a, name) {
    var map = _a.map;
    if (!map.has(name)) {
        map.set(name, emptyMergeTreePool.pop() || { map: new Map });
    }
    return map.get(name);
}
function mergeMergeTrees(left, right) {
    if (left === right || !right || mergeTreeIsEmpty(right))
        return left;
    if (!left || mergeTreeIsEmpty(left))
        return right;
    var info = left.info && right.info ? __assign(__assign({}, left.info), right.info) : left.info || right.info;
    var needToMergeMaps = left.map.size && right.map.size;
    var map = needToMergeMaps ? new Map :
        left.map.size ? left.map : right.map;
    var merged = { info: info, map: map };
    if (needToMergeMaps) {
        var remainingRightKeys_1 = new Set(right.map.keys());
        left.map.forEach(function (leftTree, key) {
            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));
            remainingRightKeys_1.delete(key);
        });
        remainingRightKeys_1.forEach(function (key) {
            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));
        });
    }
    return merged;
}
function mergeTreeIsEmpty(tree) {
    return !tree || !(tree.info || tree.map.size);
}
function maybeRecycleChildMergeTree(_a, name) {
    var map = _a.map;
    var childTree = map.get(name);
    if (childTree && mergeTreeIsEmpty(childTree)) {
        emptyMergeTreePool.push(childTree);
        map.delete(name);
    }
}
var warnings = new Set();
function warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {
    var getChild = function (objOrRef) {
        var child = store.getFieldValue(objOrRef, storeFieldName);
        return typeof child === "object" && child;
    };
    var existing = getChild(existingRef);
    if (!existing)
        return;
    var incoming = getChild(incomingObj);
    if (!incoming)
        return;
    if (isReference(existing))
        return;
    if (equal$1(existing, incoming))
        return;
    if (Object.keys(existing).every(function (key) { return store.getFieldValue(incoming, key) !== void 0; })) {
        return;
    }
    var parentType = store.getFieldValue(existingRef, "__typename") ||
        store.getFieldValue(incomingObj, "__typename");
    var fieldName = fieldNameFromStoreName(storeFieldName);
    var typeDotName = parentType + "." + fieldName;
    if (warnings.has(typeDotName))
        return;
    warnings.add(typeDotName);
    var childTypenames = [];
    if (!Array.isArray(existing) &&
        !Array.isArray(incoming)) {
        [existing, incoming].forEach(function (child) {
            var typename = store.getFieldValue(child, "__typename");
            if (typeof typename === "string" &&
                !childTypenames.includes(typename)) {
                childTypenames.push(typename);
            }
        });
    }
    __DEV__ && invariant$2.warn("Cache data may be lost when replacing the " + fieldName + " field of a " + parentType + " object.\n\nTo address this problem (which is not a bug in Apollo Client), " + (childTypenames.length
        ? "either ensure all objects of type " +
            childTypenames.join(" and ") + " have an ID or a custom merge function, or "
        : "") + "define a custom merge function for the " + typeDotName + " field, so InMemoryCache can safely merge these objects:\n\n  existing: " + JSON.stringify(existing).slice(0, 1000) + "\n  incoming: " + JSON.stringify(incoming).slice(0, 1000) + "\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n");
}

var cacheSlot = new Slot();
var cacheInfoMap = new WeakMap();
function getCacheInfo(cache) {
    var info = cacheInfoMap.get(cache);
    if (!info) {
        cacheInfoMap.set(cache, info = {
            vars: new Set,
            dep: dep(),
        });
    }
    return info;
}
function forgetCache(cache) {
    getCacheInfo(cache).vars.forEach(function (rv) { return rv.forgetCache(cache); });
}
function recallCache(cache) {
    getCacheInfo(cache).vars.forEach(function (rv) { return rv.attachCache(cache); });
}
function makeVar(value) {
    var caches = new Set();
    var listeners = new Set();
    var rv = function (newValue) {
        if (arguments.length > 0) {
            if (value !== newValue) {
                value = newValue;
                caches.forEach(function (cache) {
                    getCacheInfo(cache).dep.dirty(rv);
                    broadcast(cache);
                });
                var oldListeners = Array.from(listeners);
                listeners.clear();
                oldListeners.forEach(function (listener) { return listener(value); });
            }
        }
        else {
            var cache = cacheSlot.getValue();
            if (cache) {
                attach(cache);
                getCacheInfo(cache).dep(rv);
            }
        }
        return value;
    };
    rv.onNextChange = function (listener) {
        listeners.add(listener);
        return function () {
            listeners.delete(listener);
        };
    };
    var attach = rv.attachCache = function (cache) {
        caches.add(cache);
        getCacheInfo(cache).vars.add(rv);
        return rv;
    };
    rv.forgetCache = function (cache) { return caches.delete(cache); };
    return rv;
}
function broadcast(cache) {
    if (cache.broadcastWatches) {
        cache.broadcastWatches();
    }
}

getStoreKeyName.setStringify(canonicalStringify);
function argsFromFieldSpecifier(spec) {
    return spec.args !== void 0 ? spec.args :
        spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;
}
var nullKeyFieldsFn = function () { return void 0; };
var simpleKeyArgsFn = function (_args, context) { return context.fieldName; };
var mergeTrueFn = function (existing, incoming, _a) {
    var mergeObjects = _a.mergeObjects;
    return mergeObjects(existing, incoming);
};
var mergeFalseFn = function (_, incoming) { return incoming; };
var Policies = (function () {
    function Policies(config) {
        this.config = config;
        this.typePolicies = Object.create(null);
        this.toBeAdded = Object.create(null);
        this.supertypeMap = new Map();
        this.fuzzySubtypes = new Map();
        this.rootIdsByTypename = Object.create(null);
        this.rootTypenamesById = Object.create(null);
        this.usingPossibleTypes = false;
        this.config = __assign({ dataIdFromObject: defaultDataIdFromObject }, config);
        this.cache = this.config.cache;
        this.setRootTypename("Query");
        this.setRootTypename("Mutation");
        this.setRootTypename("Subscription");
        if (config.possibleTypes) {
            this.addPossibleTypes(config.possibleTypes);
        }
        if (config.typePolicies) {
            this.addTypePolicies(config.typePolicies);
        }
    }
    Policies.prototype.identify = function (object, selectionSet, fragmentMap) {
        var typename = selectionSet && fragmentMap
            ? getTypenameFromResult(object, selectionSet, fragmentMap)
            : object.__typename;
        if (typename === this.rootTypenamesById.ROOT_QUERY) {
            return ["ROOT_QUERY"];
        }
        var context = {
            typename: typename,
            selectionSet: selectionSet,
            fragmentMap: fragmentMap,
        };
        var id;
        var policy = typename && this.getTypePolicy(typename);
        var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;
        while (keyFn) {
            var specifierOrId = keyFn(object, context);
            if (Array.isArray(specifierOrId)) {
                keyFn = keyFieldsFnFromSpecifier(specifierOrId);
            }
            else {
                id = specifierOrId;
                break;
            }
        }
        id = id ? String(id) : void 0;
        return context.keyObject ? [id, context.keyObject] : [id];
    };
    Policies.prototype.addTypePolicies = function (typePolicies) {
        var _this = this;
        Object.keys(typePolicies).forEach(function (typename) {
            var _a = typePolicies[typename], queryType = _a.queryType, mutationType = _a.mutationType, subscriptionType = _a.subscriptionType, incoming = __rest(_a, ["queryType", "mutationType", "subscriptionType"]);
            if (queryType)
                _this.setRootTypename("Query", typename);
            if (mutationType)
                _this.setRootTypename("Mutation", typename);
            if (subscriptionType)
                _this.setRootTypename("Subscription", typename);
            if (hasOwn$1.call(_this.toBeAdded, typename)) {
                _this.toBeAdded[typename].push(incoming);
            }
            else {
                _this.toBeAdded[typename] = [incoming];
            }
        });
    };
    Policies.prototype.updateTypePolicy = function (typename, incoming) {
        var _this = this;
        var existing = this.getTypePolicy(typename);
        var keyFields = incoming.keyFields, fields = incoming.fields;
        function setMerge(existing, merge) {
            existing.merge =
                typeof merge === "function" ? merge :
                    merge === true ? mergeTrueFn :
                        merge === false ? mergeFalseFn :
                            existing.merge;
        }
        setMerge(existing, incoming.merge);
        existing.keyFn =
            keyFields === false ? nullKeyFieldsFn :
                Array.isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) :
                    typeof keyFields === "function" ? keyFields :
                        existing.keyFn;
        if (fields) {
            Object.keys(fields).forEach(function (fieldName) {
                var existing = _this.getFieldPolicy(typename, fieldName, true);
                var incoming = fields[fieldName];
                if (typeof incoming === "function") {
                    existing.read = incoming;
                }
                else {
                    var keyArgs = incoming.keyArgs, read = incoming.read, merge = incoming.merge;
                    existing.keyFn =
                        keyArgs === false ? simpleKeyArgsFn :
                            Array.isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) :
                                typeof keyArgs === "function" ? keyArgs :
                                    existing.keyFn;
                    if (typeof read === "function") {
                        existing.read = read;
                    }
                    setMerge(existing, merge);
                }
                if (existing.read && existing.merge) {
                    existing.keyFn = existing.keyFn || simpleKeyArgsFn;
                }
            });
        }
    };
    Policies.prototype.setRootTypename = function (which, typename) {
        if (typename === void 0) { typename = which; }
        var rootId = "ROOT_" + which.toUpperCase();
        var old = this.rootTypenamesById[rootId];
        if (typename !== old) {
            __DEV__ ? invariant$2(!old || old === which, "Cannot change root " + which + " __typename more than once") : invariant$2(!old || old === which, 2);
            if (old)
                delete this.rootIdsByTypename[old];
            this.rootIdsByTypename[typename] = rootId;
            this.rootTypenamesById[rootId] = typename;
        }
    };
    Policies.prototype.addPossibleTypes = function (possibleTypes) {
        var _this = this;
        this.usingPossibleTypes = true;
        Object.keys(possibleTypes).forEach(function (supertype) {
            _this.getSupertypeSet(supertype, true);
            possibleTypes[supertype].forEach(function (subtype) {
                _this.getSupertypeSet(subtype, true).add(supertype);
                var match = subtype.match(TypeOrFieldNameRegExp);
                if (!match || match[0] !== subtype) {
                    _this.fuzzySubtypes.set(subtype, new RegExp(subtype));
                }
            });
        });
    };
    Policies.prototype.getTypePolicy = function (typename) {
        var _this = this;
        if (!hasOwn$1.call(this.typePolicies, typename)) {
            var policy_1 = this.typePolicies[typename] = Object.create(null);
            policy_1.fields = Object.create(null);
            var supertypes = this.supertypeMap.get(typename);
            if (supertypes && supertypes.size) {
                supertypes.forEach(function (supertype) {
                    var _a = _this.getTypePolicy(supertype), fields = _a.fields, rest = __rest(_a, ["fields"]);
                    Object.assign(policy_1, rest);
                    Object.assign(policy_1.fields, fields);
                });
            }
        }
        var inbox = this.toBeAdded[typename];
        if (inbox && inbox.length) {
            inbox.splice(0).forEach(function (policy) {
                _this.updateTypePolicy(typename, policy);
            });
        }
        return this.typePolicies[typename];
    };
    Policies.prototype.getFieldPolicy = function (typename, fieldName, createIfMissing) {
        if (typename) {
            var fieldPolicies = this.getTypePolicy(typename).fields;
            return fieldPolicies[fieldName] || (createIfMissing && (fieldPolicies[fieldName] = Object.create(null)));
        }
    };
    Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {
        var supertypeSet = this.supertypeMap.get(subtype);
        if (!supertypeSet && createIfMissing) {
            this.supertypeMap.set(subtype, supertypeSet = new Set());
        }
        return supertypeSet;
    };
    Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {
        var _this = this;
        if (!fragment.typeCondition)
            return true;
        if (!typename)
            return false;
        var supertype = fragment.typeCondition.name.value;
        if (typename === supertype)
            return true;
        if (this.usingPossibleTypes &&
            this.supertypeMap.has(supertype)) {
            var typenameSupertypeSet = this.getSupertypeSet(typename, true);
            var workQueue_1 = [typenameSupertypeSet];
            var maybeEnqueue_1 = function (subtype) {
                var supertypeSet = _this.getSupertypeSet(subtype, false);
                if (supertypeSet &&
                    supertypeSet.size &&
                    workQueue_1.indexOf(supertypeSet) < 0) {
                    workQueue_1.push(supertypeSet);
                }
            };
            var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);
            var checkingFuzzySubtypes = false;
            for (var i = 0; i < workQueue_1.length; ++i) {
                var supertypeSet = workQueue_1[i];
                if (supertypeSet.has(supertype)) {
                    if (!typenameSupertypeSet.has(supertype)) {
                        if (checkingFuzzySubtypes) {
                            __DEV__ && invariant$2.warn("Inferring subtype " + typename + " of supertype " + supertype);
                        }
                        typenameSupertypeSet.add(supertype);
                    }
                    return true;
                }
                supertypeSet.forEach(maybeEnqueue_1);
                if (needToCheckFuzzySubtypes &&
                    i === workQueue_1.length - 1 &&
                    selectionSetMatchesResult(fragment.selectionSet, result, variables)) {
                    needToCheckFuzzySubtypes = false;
                    checkingFuzzySubtypes = true;
                    this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {
                        var match = typename.match(regExp);
                        if (match && match[0] === typename) {
                            maybeEnqueue_1(fuzzyString);
                        }
                    });
                }
            }
        }
        return false;
    };
    Policies.prototype.hasKeyArgs = function (typename, fieldName) {
        var policy = this.getFieldPolicy(typename, fieldName, false);
        return !!(policy && policy.keyFn);
    };
    Policies.prototype.getStoreFieldName = function (fieldSpec) {
        var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;
        var policy = this.getFieldPolicy(typename, fieldName, false);
        var storeFieldName;
        var keyFn = policy && policy.keyFn;
        if (keyFn && typename) {
            var context = {
                typename: typename,
                fieldName: fieldName,
                field: fieldSpec.field || null,
                variables: fieldSpec.variables,
            };
            var args = argsFromFieldSpecifier(fieldSpec);
            while (keyFn) {
                var specifierOrString = keyFn(args, context);
                if (Array.isArray(specifierOrString)) {
                    keyFn = keyArgsFnFromSpecifier(specifierOrString);
                }
                else {
                    storeFieldName = specifierOrString || fieldName;
                    break;
                }
            }
        }
        if (storeFieldName === void 0) {
            storeFieldName = fieldSpec.field
                ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)
                : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));
        }
        if (storeFieldName === false) {
            return fieldName;
        }
        return fieldName === fieldNameFromStoreName(storeFieldName)
            ? storeFieldName
            : fieldName + ":" + storeFieldName;
    };
    Policies.prototype.readField = function (options, context) {
        var objectOrReference = options.from;
        if (!objectOrReference)
            return;
        var nameOrField = options.field || options.fieldName;
        if (!nameOrField)
            return;
        if (options.typename === void 0) {
            var typename = context.store.getFieldValue(objectOrReference, "__typename");
            if (typename)
                options.typename = typename;
        }
        var storeFieldName = this.getStoreFieldName(options);
        var fieldName = fieldNameFromStoreName(storeFieldName);
        var existing = context.store.getFieldValue(objectOrReference, storeFieldName);
        var policy = this.getFieldPolicy(options.typename, fieldName, false);
        var read = policy && policy.read;
        if (read) {
            var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage(isReference(objectOrReference)
                ? objectOrReference.__ref
                : objectOrReference, storeFieldName));
            return cacheSlot.withValue(this.cache, read, [existing, readOptions]);
        }
        return existing;
    };
    Policies.prototype.getMergeFunction = function (parentTypename, fieldName, childTypename) {
        var policy = this.getFieldPolicy(parentTypename, fieldName, false);
        var merge = policy && policy.merge;
        if (!merge && childTypename) {
            policy = this.getTypePolicy(childTypename);
            merge = policy && policy.merge;
        }
        return merge;
    };
    Policies.prototype.runMergeFunction = function (existing, incoming, _a, context, storage) {
        var field = _a.field, typename = _a.typename, merge = _a.merge;
        if (merge === mergeTrueFn) {
            return makeMergeObjectsFunction(context.store)(existing, incoming);
        }
        if (merge === mergeFalseFn) {
            return incoming;
        }
        if (context.overwrite) {
            existing = void 0;
        }
        return merge(existing, incoming, makeFieldFunctionOptions(this, void 0, { typename: typename, fieldName: field.name.value, field: field, variables: context.variables }, context, storage || Object.create(null)));
    };
    return Policies;
}());
function makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {
    var storeFieldName = policies.getStoreFieldName(fieldSpec);
    var fieldName = fieldNameFromStoreName(storeFieldName);
    var variables = fieldSpec.variables || context.variables;
    var _a = context.store, toReference = _a.toReference, canRead = _a.canRead;
    return {
        args: argsFromFieldSpecifier(fieldSpec),
        field: fieldSpec.field || null,
        fieldName: fieldName,
        storeFieldName: storeFieldName,
        variables: variables,
        isReference: isReference,
        toReference: toReference,
        storage: storage,
        cache: policies.cache,
        canRead: canRead,
        readField: function (fieldNameOrOptions, from) {
            var options;
            if (typeof fieldNameOrOptions === "string") {
                options = {
                    fieldName: fieldNameOrOptions,
                    from: arguments.length > 1 ? from : objectOrReference,
                };
            }
            else if (isNonNullObject$1(fieldNameOrOptions)) {
                options = __assign({}, fieldNameOrOptions);
                if (!hasOwn$1.call(fieldNameOrOptions, "from")) {
                    options.from = objectOrReference;
                }
            }
            else {
                __DEV__ && invariant$2.warn("Unexpected readField arguments: " + stringifyForDisplay(Array.from(arguments)));
                return;
            }
            if (__DEV__ && options.from === void 0) {
                __DEV__ && invariant$2.warn("Undefined 'from' passed to readField with arguments " + stringifyForDisplay(Array.from(arguments)));
            }
            if (void 0 === options.variables) {
                options.variables = variables;
            }
            return policies.readField(options, context);
        },
        mergeObjects: makeMergeObjectsFunction(context.store),
    };
}
function makeMergeObjectsFunction(store) {
    return function mergeObjects(existing, incoming) {
        if (Array.isArray(existing) || Array.isArray(incoming)) {
            throw __DEV__ ? new InvariantError("Cannot automatically merge arrays") : new InvariantError(3);
        }
        if (isNonNullObject$1(existing) &&
            isNonNullObject$1(incoming)) {
            var eType = store.getFieldValue(existing, "__typename");
            var iType = store.getFieldValue(incoming, "__typename");
            var typesDiffer = eType && iType && eType !== iType;
            if (typesDiffer) {
                return incoming;
            }
            if (isReference(existing) &&
                storeValueIsStoreObject(incoming)) {
                store.merge(existing.__ref, incoming);
                return existing;
            }
            if (storeValueIsStoreObject(existing) &&
                isReference(incoming)) {
                store.merge(existing, incoming.__ref);
                return incoming;
            }
            if (storeValueIsStoreObject(existing) &&
                storeValueIsStoreObject(incoming)) {
                return __assign(__assign({}, existing), incoming);
            }
        }
        return incoming;
    };
}
function keyArgsFnFromSpecifier(specifier) {
    return function (args, context) {
        return args ? context.fieldName + ":" + JSON.stringify(computeKeyObject(args, specifier, false)) : context.fieldName;
    };
}
function keyFieldsFnFromSpecifier(specifier) {
    var trie = new Trie(canUseWeakMap);
    return function (object, context) {
        var aliasMap;
        if (context.selectionSet && context.fragmentMap) {
            var info = trie.lookupArray([
                context.selectionSet,
                context.fragmentMap,
            ]);
            aliasMap = info.aliasMap || (info.aliasMap = makeAliasMap(context.selectionSet, context.fragmentMap));
        }
        var keyObject = context.keyObject =
            computeKeyObject(object, specifier, true, aliasMap);
        return context.typename + ":" + JSON.stringify(keyObject);
    };
}
function makeAliasMap(selectionSet, fragmentMap) {
    var map = Object.create(null);
    var workQueue = new Set([selectionSet]);
    workQueue.forEach(function (selectionSet) {
        selectionSet.selections.forEach(function (selection) {
            if (isField(selection)) {
                if (selection.alias) {
                    var responseKey = selection.alias.value;
                    var storeKey = selection.name.value;
                    if (storeKey !== responseKey) {
                        var aliases = map.aliases || (map.aliases = Object.create(null));
                        aliases[storeKey] = responseKey;
                    }
                }
                if (selection.selectionSet) {
                    var subsets = map.subsets || (map.subsets = Object.create(null));
                    subsets[selection.name.value] =
                        makeAliasMap(selection.selectionSet, fragmentMap);
                }
            }
            else {
                var fragment = getFragmentFromSelection(selection, fragmentMap);
                if (fragment) {
                    workQueue.add(fragment.selectionSet);
                }
            }
        });
    });
    return map;
}
function computeKeyObject(response, specifier, strict, aliasMap) {
    var keyObj = Object.create(null);
    var lastResponseKey;
    var lastActualKey;
    specifier.forEach(function (s) {
        if (Array.isArray(s)) {
            if (typeof lastActualKey === "string" &&
                typeof lastResponseKey === "string") {
                var subsets = aliasMap && aliasMap.subsets;
                var subset = subsets && subsets[lastActualKey];
                keyObj[lastActualKey] =
                    computeKeyObject(response[lastResponseKey], s, strict, subset);
            }
        }
        else {
            var aliases = aliasMap && aliasMap.aliases;
            var responseName = aliases && aliases[s] || s;
            if (hasOwn$1.call(response, responseName)) {
                keyObj[lastActualKey = s] = response[lastResponseKey = responseName];
            }
            else {
                __DEV__ ? invariant$2(!strict, "Missing field '" + responseName + "' while computing key fields") : invariant$2(!strict, 4);
                lastResponseKey = lastActualKey = void 0;
            }
        }
    });
    return keyObj;
}

var InMemoryCache = (function (_super) {
    __extends(InMemoryCache, _super);
    function InMemoryCache(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this) || this;
        _this.watches = new Set();
        _this.typenameDocumentCache = new Map();
        _this.makeVar = makeVar;
        _this.txCount = 0;
        _this.config = normalizeConfig(config);
        _this.addTypename = !!_this.config.addTypename;
        _this.policies = new Policies({
            cache: _this,
            dataIdFromObject: _this.config.dataIdFromObject,
            possibleTypes: _this.config.possibleTypes,
            typePolicies: _this.config.typePolicies,
        });
        _this.init();
        return _this;
    }
    InMemoryCache.prototype.init = function () {
        var rootStore = this.data = new EntityStore.Root({
            policies: this.policies,
            resultCaching: this.config.resultCaching,
        });
        this.optimisticData = rootStore.stump;
        this.resetResultCache();
    };
    InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {
        var _this = this;
        var previousReader = this.storeReader;
        this.storeWriter = new StoreWriter(this, this.storeReader = new StoreReader({
            cache: this,
            addTypename: this.addTypename,
            resultCacheMaxSize: this.config.resultCacheMaxSize,
            canonizeResults: shouldCanonizeResults(this.config),
            canon: resetResultIdentities
                ? void 0
                : previousReader && previousReader.canon,
        }));
        this.maybeBroadcastWatch = wrap(function (c, options) {
            return _this.broadcastWatch(c, options);
        }, {
            max: this.config.resultCacheMaxSize,
            makeCacheKey: function (c) {
                var store = c.optimistic ? _this.optimisticData : _this.data;
                if (supportsResultCaching(store)) {
                    var optimistic = c.optimistic, rootId = c.rootId, variables = c.variables;
                    return store.makeCacheKey(c.query, c.callback, canonicalStringify({ optimistic: optimistic, rootId: rootId, variables: variables }));
                }
            }
        });
        new Set([
            this.data.group,
            this.optimisticData.group,
        ]).forEach(function (group) { return group.resetCaching(); });
    };
    InMemoryCache.prototype.restore = function (data) {
        this.init();
        if (data)
            this.data.replace(data);
        return this;
    };
    InMemoryCache.prototype.extract = function (optimistic) {
        if (optimistic === void 0) { optimistic = false; }
        return (optimistic ? this.optimisticData : this.data).extract();
    };
    InMemoryCache.prototype.read = function (options) {
        var _a = options.returnPartialData, returnPartialData = _a === void 0 ? false : _a;
        try {
            return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), { store: options.optimistic ? this.optimisticData : this.data, config: this.config, returnPartialData: returnPartialData })).result || null;
        }
        catch (e) {
            if (e instanceof MissingFieldError) {
                return null;
            }
            throw e;
        }
    };
    InMemoryCache.prototype.write = function (options) {
        try {
            ++this.txCount;
            return this.storeWriter.writeToStore(this.data, options);
        }
        finally {
            if (!--this.txCount && options.broadcast !== false) {
                this.broadcastWatches();
            }
        }
    };
    InMemoryCache.prototype.modify = function (options) {
        if (hasOwn$1.call(options, "id") && !options.id) {
            return false;
        }
        var store = options.optimistic
            ? this.optimisticData
            : this.data;
        try {
            ++this.txCount;
            return store.modify(options.id || "ROOT_QUERY", options.fields);
        }
        finally {
            if (!--this.txCount && options.broadcast !== false) {
                this.broadcastWatches();
            }
        }
    };
    InMemoryCache.prototype.diff = function (options) {
        return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), { store: options.optimistic ? this.optimisticData : this.data, rootId: options.id || "ROOT_QUERY", config: this.config }));
    };
    InMemoryCache.prototype.watch = function (watch) {
        var _this = this;
        if (!this.watches.size) {
            recallCache(this);
        }
        this.watches.add(watch);
        if (watch.immediate) {
            this.maybeBroadcastWatch(watch);
        }
        return function () {
            if (_this.watches.delete(watch) && !_this.watches.size) {
                forgetCache(_this);
            }
            _this.maybeBroadcastWatch.forget(watch);
        };
    };
    InMemoryCache.prototype.gc = function (options) {
        canonicalStringify.reset();
        var ids = this.optimisticData.gc();
        if (options && !this.txCount) {
            if (options.resetResultCache) {
                this.resetResultCache(options.resetResultIdentities);
            }
            else if (options.resetResultIdentities) {
                this.storeReader.resetCanon();
            }
        }
        return ids;
    };
    InMemoryCache.prototype.retain = function (rootId, optimistic) {
        return (optimistic ? this.optimisticData : this.data).retain(rootId);
    };
    InMemoryCache.prototype.release = function (rootId, optimistic) {
        return (optimistic ? this.optimisticData : this.data).release(rootId);
    };
    InMemoryCache.prototype.identify = function (object) {
        return isReference(object) ? object.__ref :
            this.policies.identify(object)[0];
    };
    InMemoryCache.prototype.evict = function (options) {
        if (!options.id) {
            if (hasOwn$1.call(options, "id")) {
                return false;
            }
            options = __assign(__assign({}, options), { id: "ROOT_QUERY" });
        }
        try {
            ++this.txCount;
            return this.optimisticData.evict(options, this.data);
        }
        finally {
            if (!--this.txCount && options.broadcast !== false) {
                this.broadcastWatches();
            }
        }
    };
    InMemoryCache.prototype.reset = function (options) {
        var _this = this;
        this.init();
        canonicalStringify.reset();
        if (options && options.discardWatches) {
            this.watches.forEach(function (watch) { return _this.maybeBroadcastWatch.forget(watch); });
            this.watches.clear();
            forgetCache(this);
        }
        else {
            this.broadcastWatches();
        }
        return Promise.resolve();
    };
    InMemoryCache.prototype.removeOptimistic = function (idToRemove) {
        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);
        if (newOptimisticData !== this.optimisticData) {
            this.optimisticData = newOptimisticData;
            this.broadcastWatches();
        }
    };
    InMemoryCache.prototype.batch = function (options) {
        var _this = this;
        var update = options.update, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, removeOptimistic = options.removeOptimistic, onWatchUpdated = options.onWatchUpdated;
        var perform = function (layer) {
            var _a = _this, data = _a.data, optimisticData = _a.optimisticData;
            ++_this.txCount;
            if (layer) {
                _this.data = _this.optimisticData = layer;
            }
            try {
                update(_this);
            }
            finally {
                --_this.txCount;
                _this.data = data;
                _this.optimisticData = optimisticData;
            }
        };
        var alreadyDirty = new Set();
        if (onWatchUpdated && !this.txCount) {
            this.broadcastWatches(__assign(__assign({}, options), { onWatchUpdated: function (watch) {
                    alreadyDirty.add(watch);
                    return false;
                } }));
        }
        if (typeof optimistic === 'string') {
            this.optimisticData = this.optimisticData.addLayer(optimistic, perform);
        }
        else if (optimistic === false) {
            perform(this.data);
        }
        else {
            perform();
        }
        if (typeof removeOptimistic === "string") {
            this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);
        }
        if (onWatchUpdated && alreadyDirty.size) {
            this.broadcastWatches(__assign(__assign({}, options), { onWatchUpdated: function (watch, diff) {
                    var result = onWatchUpdated.call(this, watch, diff);
                    if (result !== false) {
                        alreadyDirty.delete(watch);
                    }
                    return result;
                } }));
            if (alreadyDirty.size) {
                alreadyDirty.forEach(function (watch) { return _this.maybeBroadcastWatch.dirty(watch); });
            }
        }
        else {
            this.broadcastWatches(options);
        }
    };
    InMemoryCache.prototype.performTransaction = function (update, optimisticId) {
        return this.batch({
            update: update,
            optimistic: optimisticId || (optimisticId !== null),
        });
    };
    InMemoryCache.prototype.transformDocument = function (document) {
        if (this.addTypename) {
            var result = this.typenameDocumentCache.get(document);
            if (!result) {
                result = addTypenameToDocument(document);
                this.typenameDocumentCache.set(document, result);
                this.typenameDocumentCache.set(result, result);
            }
            return result;
        }
        return document;
    };
    InMemoryCache.prototype.broadcastWatches = function (options) {
        var _this = this;
        if (!this.txCount) {
            this.watches.forEach(function (c) { return _this.maybeBroadcastWatch(c, options); });
        }
    };
    InMemoryCache.prototype.broadcastWatch = function (c, options) {
        var lastDiff = c.lastDiff;
        var diff = this.diff(c);
        if (options) {
            if (c.optimistic &&
                typeof options.optimistic === "string") {
                diff.fromOptimisticTransaction = true;
            }
            if (options.onWatchUpdated &&
                options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {
                return;
            }
        }
        if (!lastDiff || !equal$1(lastDiff.result, diff.result)) {
            c.callback(c.lastDiff = diff, lastDiff);
        }
    };
    return InMemoryCache;
}(ApolloCache));

var NetworkStatus;
(function (NetworkStatus) {
    NetworkStatus[NetworkStatus["loading"] = 1] = "loading";
    NetworkStatus[NetworkStatus["setVariables"] = 2] = "setVariables";
    NetworkStatus[NetworkStatus["fetchMore"] = 3] = "fetchMore";
    NetworkStatus[NetworkStatus["refetch"] = 4] = "refetch";
    NetworkStatus[NetworkStatus["poll"] = 6] = "poll";
    NetworkStatus[NetworkStatus["ready"] = 7] = "ready";
    NetworkStatus[NetworkStatus["error"] = 8] = "error";
})(NetworkStatus || (NetworkStatus = {}));
function isNetworkRequestInFlight(networkStatus) {
    return networkStatus ? networkStatus < 7 : false;
}

var assign = Object.assign, hasOwnProperty$c = Object.hasOwnProperty;
var warnedAboutUpdateQuery = false;
var ObservableQuery = (function (_super) {
    __extends(ObservableQuery, _super);
    function ObservableQuery(_a) {
        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;
        var _this = _super.call(this, function (observer) {
            try {
                var subObserver = observer._subscription._observer;
                if (subObserver && !subObserver.error) {
                    subObserver.error = defaultSubscriptionObserverErrorCallback;
                }
            }
            catch (_a) { }
            var first = !_this.observers.size;
            _this.observers.add(observer);
            var last = _this.last;
            if (last && last.error) {
                observer.error && observer.error(last.error);
            }
            else if (last && last.result) {
                observer.next && observer.next(last.result);
            }
            if (first) {
                _this.reobserve().catch(function () { });
            }
            return function () {
                if (_this.observers.delete(observer) && !_this.observers.size) {
                    _this.tearDownQuery();
                }
            };
        }) || this;
        _this.observers = new Set();
        _this.subscriptions = new Set();
        _this.isTornDown = false;
        _this.options = options;
        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();
        var opDef = getOperationDefinition(options.query);
        _this.queryName = opDef && opDef.name && opDef.name.value;
        _this.initialFetchPolicy = options.fetchPolicy || "cache-first";
        _this.queryManager = queryManager;
        _this.queryInfo = queryInfo;
        return _this;
    }
    Object.defineProperty(ObservableQuery.prototype, "variables", {
        get: function () {
            return this.options.variables;
        },
        enumerable: false,
        configurable: true
    });
    ObservableQuery.prototype.result = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var observer = {
                next: function (result) {
                    resolve(result);
                    _this.observers.delete(observer);
                    if (!_this.observers.size) {
                        _this.queryManager.removeQuery(_this.queryId);
                    }
                    setTimeout(function () {
                        subscription.unsubscribe();
                    }, 0);
                },
                error: reject,
            };
            var subscription = _this.subscribe(observer);
        });
    };
    ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {
        if (saveAsLastResult === void 0) { saveAsLastResult = true; }
        var lastResult = this.getLastResult(true);
        var networkStatus = this.queryInfo.networkStatus ||
            (lastResult && lastResult.networkStatus) ||
            NetworkStatus.ready;
        var result = __assign(__assign({}, lastResult), { loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus });
        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? "cache-first" : _a;
        var shouldReturnCachedData = lastResult || (fetchPolicy !== 'network-only' &&
            fetchPolicy !== 'no-cache' &&
            fetchPolicy !== 'standby');
        if (shouldReturnCachedData &&
            !this.queryManager.transform(this.options.query).hasForcedResolvers) {
            var diff = this.queryInfo.getDiff();
            if (diff.complete || this.options.returnPartialData) {
                result.data = diff.result;
            }
            if (equal$1(result.data, {})) {
                result.data = void 0;
            }
            if (diff.complete) {
                if (result.networkStatus === NetworkStatus.loading &&
                    (fetchPolicy === 'cache-first' ||
                        fetchPolicy === 'cache-only')) {
                    result.networkStatus = NetworkStatus.ready;
                    result.loading = false;
                }
                delete result.partial;
            }
            else if (fetchPolicy !== "no-cache") {
                result.partial = true;
            }
            if (__DEV__ &&
                !diff.complete &&
                !this.options.partialRefetch &&
                !result.loading &&
                !result.data &&
                !result.error) {
                logMissingFieldErrors(diff.missing);
            }
        }
        if (saveAsLastResult) {
            this.updateLastResult(result);
        }
        return result;
    };
    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {
        return !this.last || !equal$1(this.last.result, newResult);
    };
    ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {
        var last = this.last;
        if (last &&
            last[key] &&
            (!variablesMustMatch || equal$1(last.variables, this.variables))) {
            return last[key];
        }
    };
    ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {
        return this.getLast("result", variablesMustMatch);
    };
    ObservableQuery.prototype.getLastError = function (variablesMustMatch) {
        return this.getLast("error", variablesMustMatch);
    };
    ObservableQuery.prototype.resetLastResults = function () {
        delete this.last;
        this.isTornDown = false;
    };
    ObservableQuery.prototype.resetQueryStoreErrors = function () {
        this.queryManager.resetErrors(this.queryId);
    };
    ObservableQuery.prototype.refetch = function (variables) {
        var _a;
        var reobserveOptions = {
            pollInterval: 0,
        };
        var fetchPolicy = this.options.fetchPolicy;
        if (fetchPolicy === 'no-cache') {
            reobserveOptions.fetchPolicy = 'no-cache';
        }
        else if (fetchPolicy !== 'cache-and-network') {
            reobserveOptions.fetchPolicy = 'network-only';
        }
        if (__DEV__ && variables && hasOwnProperty$c.call(variables, "variables")) {
            var queryDef = getQueryDefinition(this.options.query);
            var vars = queryDef.variableDefinitions;
            if (!vars || !vars.some(function (v) { return v.variable.name.value === "variables"; })) {
                __DEV__ && invariant$2.warn("Called refetch(" + JSON.stringify(variables) + ") for query " + (((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || JSON.stringify(queryDef)) + ", which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?");
            }
        }
        if (variables && !equal$1(this.options.variables, variables)) {
            reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);
        }
        this.queryInfo.resetLastWrite();
        return this.reobserve(reobserveOptions, NetworkStatus.refetch);
    };
    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {
        var _this = this;
        var combinedOptions = __assign(__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), { variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables) }))), { fetchPolicy: "no-cache" });
        var qid = this.queryManager.generateQueryId();
        if (combinedOptions.notifyOnNetworkStatusChange) {
            this.queryInfo.networkStatus = NetworkStatus.fetchMore;
            this.observe();
        }
        return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {
            var data = fetchMoreResult.data;
            var updateQuery = fetchMoreOptions.updateQuery;
            if (updateQuery) {
                if (__DEV__ &&
                    !warnedAboutUpdateQuery) {
                    __DEV__ && invariant$2.warn("The updateQuery callback for fetchMore is deprecated, and will be removed\nin the next major version of Apollo Client.\n\nPlease convert updateQuery functions to field policies with appropriate\nread and merge functions, or use/adapt a helper function (such as\nconcatPagination, offsetLimitPagination, or relayStylePagination) from\n@apollo/client/utilities.\n\nThe field policy system handles pagination more effectively than a\nhand-written updateQuery function, and you only need to define the policy\nonce, rather than every time you call fetchMore.");
                    warnedAboutUpdateQuery = true;
                }
                _this.updateQuery(function (previous) { return updateQuery(previous, {
                    fetchMoreResult: data,
                    variables: combinedOptions.variables,
                }); });
            }
            else {
                _this.queryManager.cache.writeQuery({
                    query: combinedOptions.query,
                    variables: combinedOptions.variables,
                    data: data,
                });
            }
            return fetchMoreResult;
        }).finally(function () {
            _this.queryManager.stopQuery(qid);
            _this.reobserve();
        });
    };
    ObservableQuery.prototype.subscribeToMore = function (options) {
        var _this = this;
        var subscription = this.queryManager
            .startGraphQLSubscription({
            query: options.document,
            variables: options.variables,
            context: options.context,
        })
            .subscribe({
            next: function (subscriptionData) {
                var updateQuery = options.updateQuery;
                if (updateQuery) {
                    _this.updateQuery(function (previous, _a) {
                        var variables = _a.variables;
                        return updateQuery(previous, {
                            subscriptionData: subscriptionData,
                            variables: variables,
                        });
                    });
                }
            },
            error: function (err) {
                if (options.onError) {
                    options.onError(err);
                    return;
                }
                __DEV__ && invariant$2.error('Unhandled GraphQL subscription error', err);
            },
        });
        this.subscriptions.add(subscription);
        return function () {
            if (_this.subscriptions.delete(subscription)) {
                subscription.unsubscribe();
            }
        };
    };
    ObservableQuery.prototype.setOptions = function (newOptions) {
        return this.reobserve(newOptions);
    };
    ObservableQuery.prototype.setVariables = function (variables) {
        if (equal$1(this.variables, variables)) {
            return this.observers.size
                ? this.result()
                : Promise.resolve();
        }
        this.options.variables = variables;
        if (!this.observers.size) {
            return Promise.resolve();
        }
        return this.reobserve({
            fetchPolicy: this.initialFetchPolicy,
            variables: variables,
        }, NetworkStatus.setVariables);
    };
    ObservableQuery.prototype.updateQuery = function (mapFn) {
        var queryManager = this.queryManager;
        var result = queryManager.cache.diff({
            query: this.options.query,
            variables: this.variables,
            returnPartialData: true,
            optimistic: false,
        }).result;
        var newResult = mapFn(result, {
            variables: this.variables,
        });
        if (newResult) {
            queryManager.cache.writeQuery({
                query: this.options.query,
                data: newResult,
                variables: this.variables,
            });
            queryManager.broadcastQueries();
        }
    };
    ObservableQuery.prototype.startPolling = function (pollInterval) {
        this.options.pollInterval = pollInterval;
        this.updatePolling();
    };
    ObservableQuery.prototype.stopPolling = function () {
        this.options.pollInterval = 0;
        this.updatePolling();
    };
    ObservableQuery.prototype.fetch = function (options, newNetworkStatus) {
        this.queryManager.setObservableQuery(this);
        return this.queryManager.fetchQueryObservable(this.queryId, options, newNetworkStatus);
    };
    ObservableQuery.prototype.updatePolling = function () {
        var _this = this;
        if (this.queryManager.ssrMode) {
            return;
        }
        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;
        if (!pollInterval) {
            if (pollingInfo) {
                clearTimeout(pollingInfo.timeout);
                delete this.pollingInfo;
            }
            return;
        }
        if (pollingInfo &&
            pollingInfo.interval === pollInterval) {
            return;
        }
        __DEV__ ? invariant$2(pollInterval, 'Attempted to start a polling query without a polling interval.') : invariant$2(pollInterval, 12);
        var info = pollingInfo || (this.pollingInfo = {});
        info.interval = pollInterval;
        var maybeFetch = function () {
            if (_this.pollingInfo) {
                if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {
                    _this.reobserve({
                        fetchPolicy: "network-only",
                    }, NetworkStatus.poll).then(poll, poll);
                }
                else {
                    poll();
                }
            }
        };
        var poll = function () {
            var info = _this.pollingInfo;
            if (info) {
                clearTimeout(info.timeout);
                info.timeout = setTimeout(maybeFetch, info.interval);
            }
        };
        poll();
    };
    ObservableQuery.prototype.updateLastResult = function (newResult, variables) {
        if (variables === void 0) { variables = this.variables; }
        this.last = __assign(__assign({}, this.last), { result: this.queryManager.assumeImmutableResults
                ? newResult
                : cloneDeep(newResult), variables: variables });
        if (!isNonEmptyArray(newResult.errors)) {
            delete this.last.error;
        }
        return this.last;
    };
    ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {
        var _this = this;
        this.isTornDown = false;
        var useDisposableConcast = newNetworkStatus === NetworkStatus.refetch ||
            newNetworkStatus === NetworkStatus.fetchMore ||
            newNetworkStatus === NetworkStatus.poll;
        var oldVariables = this.options.variables;
        var options = useDisposableConcast
            ? compact(this.options, newOptions)
            : assign(this.options, compact(newOptions));
        if (!useDisposableConcast) {
            this.updatePolling();
            if (newOptions &&
                newOptions.variables &&
                !newOptions.fetchPolicy &&
                !equal$1(newOptions.variables, oldVariables)) {
                options.fetchPolicy = this.initialFetchPolicy;
                if (newNetworkStatus === void 0) {
                    newNetworkStatus = NetworkStatus.setVariables;
                }
            }
        }
        var variables = options.variables && __assign({}, options.variables);
        var concast = this.fetch(options, newNetworkStatus);
        var observer = {
            next: function (result) {
                _this.reportResult(result, variables);
            },
            error: function (error) {
                _this.reportError(error, variables);
            },
        };
        if (!useDisposableConcast) {
            if (this.concast && this.observer) {
                this.concast.removeObserver(this.observer, true);
            }
            this.concast = concast;
            this.observer = observer;
        }
        concast.addObserver(observer);
        return concast.promise;
    };
    ObservableQuery.prototype.observe = function () {
        this.reportResult(this.getCurrentResult(false), this.variables);
    };
    ObservableQuery.prototype.reportResult = function (result, variables) {
        if (this.getLastError() || this.isDifferentFromLastResult(result)) {
            this.updateLastResult(result, variables);
            iterateObserversSafely(this.observers, 'next', result);
        }
    };
    ObservableQuery.prototype.reportError = function (error, variables) {
        var errorResult = __assign(__assign({}, this.getLastResult()), { error: error, errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false });
        this.updateLastResult(errorResult, variables);
        iterateObserversSafely(this.observers, 'error', this.last.error = error);
    };
    ObservableQuery.prototype.hasObservers = function () {
        return this.observers.size > 0;
    };
    ObservableQuery.prototype.tearDownQuery = function () {
        if (this.isTornDown)
            return;
        if (this.concast && this.observer) {
            this.concast.removeObserver(this.observer);
            delete this.concast;
            delete this.observer;
        }
        this.stopPolling();
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
        this.subscriptions.clear();
        this.queryManager.stopQuery(this.queryId);
        this.observers.clear();
        this.isTornDown = true;
    };
    return ObservableQuery;
}(Observable));
fixObservableSubclass(ObservableQuery);
function defaultSubscriptionObserverErrorCallback(error) {
    __DEV__ && invariant$2.error('Unhandled error', error.message, error.stack);
}
function logMissingFieldErrors(missing) {
    if (__DEV__ && isNonEmptyArray(missing)) {
        __DEV__ && invariant$2.debug("Missing cache result fields: " + missing.map(function (m) { return m.path.join('.'); }).join(', '), missing);
    }
}
function applyNextFetchPolicy(options) {
    var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? "cache-first" : _a, nextFetchPolicy = options.nextFetchPolicy;
    if (nextFetchPolicy) {
        options.fetchPolicy = typeof nextFetchPolicy === "function"
            ? nextFetchPolicy.call(options, fetchPolicy)
            : nextFetchPolicy;
    }
}

var LocalState = (function () {
    function LocalState(_a) {
        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;
        this.cache = cache;
        if (client) {
            this.client = client;
        }
        if (resolvers) {
            this.addResolvers(resolvers);
        }
        if (fragmentMatcher) {
            this.setFragmentMatcher(fragmentMatcher);
        }
    }
    LocalState.prototype.addResolvers = function (resolvers) {
        var _this = this;
        this.resolvers = this.resolvers || {};
        if (Array.isArray(resolvers)) {
            resolvers.forEach(function (resolverGroup) {
                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);
            });
        }
        else {
            this.resolvers = mergeDeep(this.resolvers, resolvers);
        }
    };
    LocalState.prototype.setResolvers = function (resolvers) {
        this.resolvers = {};
        this.addResolvers(resolvers);
    };
    LocalState.prototype.getResolvers = function () {
        return this.resolvers || {};
    };
    LocalState.prototype.runResolvers = function (_a) {
        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_c) {
                if (document) {
                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign(__assign({}, remoteResult), { data: localResult.result })); })];
                }
                return [2, remoteResult];
            });
        });
    };
    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {
        this.fragmentMatcher = fragmentMatcher;
    };
    LocalState.prototype.getFragmentMatcher = function () {
        return this.fragmentMatcher;
    };
    LocalState.prototype.clientQuery = function (document) {
        if (hasDirectives(['client'], document)) {
            if (this.resolvers) {
                return document;
            }
        }
        return null;
    };
    LocalState.prototype.serverQuery = function (document) {
        return removeClientSetsFromDocument(document);
    };
    LocalState.prototype.prepareContext = function (context) {
        var cache = this.cache;
        return __assign(__assign({}, context), { cache: cache, getCacheKey: function (obj) {
                return cache.identify(obj);
            } });
    };
    LocalState.prototype.addExportedVariables = function (document, variables, context) {
        if (variables === void 0) { variables = {}; }
        if (context === void 0) { context = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (document) {
                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign(__assign({}, variables), data.exportedVariables)); })];
                }
                return [2, __assign({}, variables)];
            });
        });
    };
    LocalState.prototype.shouldForceResolvers = function (document) {
        var forceResolvers = false;
        visit(document, {
            Directive: {
                enter: function (node) {
                    if (node.name.value === 'client' && node.arguments) {
                        forceResolvers = node.arguments.some(function (arg) {
                            return arg.name.value === 'always' &&
                                arg.value.kind === 'BooleanValue' &&
                                arg.value.value === true;
                        });
                        if (forceResolvers) {
                            return BREAK;
                        }
                    }
                },
            },
        });
        return forceResolvers;
    };
    LocalState.prototype.buildRootValueFromCache = function (document, variables) {
        return this.cache.diff({
            query: buildQueryFromSelectionSet(document),
            variables: variables,
            returnPartialData: true,
            optimistic: false,
        }).result;
    };
    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {
        if (context === void 0) { context = {}; }
        if (variables === void 0) { variables = {}; }
        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }
        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }
        return __awaiter(this, void 0, void 0, function () {
            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;
            return __generator(this, function (_b) {
                mainDefinition = getMainDefinition(document);
                fragments = getFragmentDefinitions(document);
                fragmentMap = createFragmentMap(fragments);
                definitionOperation = mainDefinition
                    .operation;
                defaultOperationType = definitionOperation
                    ? definitionOperation.charAt(0).toUpperCase() +
                        definitionOperation.slice(1)
                    : 'Query';
                _a = this, cache = _a.cache, client = _a.client;
                execContext = {
                    fragmentMap: fragmentMap,
                    context: __assign(__assign({}, context), { cache: cache, client: client }),
                    variables: variables,
                    fragmentMatcher: fragmentMatcher,
                    defaultOperationType: defaultOperationType,
                    exportedVariables: {},
                    onlyRunForcedResolvers: onlyRunForcedResolvers,
                };
                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) { return ({
                        result: result,
                        exportedVariables: execContext.exportedVariables,
                    }); })];
            });
        });
    };
    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {
        return __awaiter(this, void 0, void 0, function () {
            var fragmentMap, context, variables, resultsToMerge, execute;
            var _this = this;
            return __generator(this, function (_a) {
                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;
                resultsToMerge = [rootValue];
                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {
                    var fragment, typeCondition;
                    return __generator(this, function (_a) {
                        if (!shouldInclude(selection, variables)) {
                            return [2];
                        }
                        if (isField(selection)) {
                            return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {
                                    var _a;
                                    if (typeof fieldResult !== 'undefined') {
                                        resultsToMerge.push((_a = {},
                                            _a[resultKeyNameFromField(selection)] = fieldResult,
                                            _a));
                                    }
                                })];
                        }
                        if (isInlineFragment(selection)) {
                            fragment = selection;
                        }
                        else {
                            fragment = fragmentMap[selection.name.value];
                            __DEV__ ? invariant$2(fragment, "No fragment named " + selection.name.value) : invariant$2(fragment, 11);
                        }
                        if (fragment && fragment.typeCondition) {
                            typeCondition = fragment.typeCondition.name.value;
                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {
                                return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {
                                        resultsToMerge.push(fragmentResult);
                                    })];
                            }
                        }
                        return [2];
                    });
                }); };
                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {
                        return mergeDeepArray(resultsToMerge);
                    })];
            });
        });
    };
    LocalState.prototype.resolveField = function (field, rootValue, execContext) {
        return __awaiter(this, void 0, void 0, function () {
            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;
            var _this = this;
            return __generator(this, function (_a) {
                variables = execContext.variables;
                fieldName = field.name.value;
                aliasedFieldName = resultKeyNameFromField(field);
                aliasUsed = fieldName !== aliasedFieldName;
                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];
                resultPromise = Promise.resolve(defaultResult);
                if (!execContext.onlyRunForcedResolvers ||
                    this.shouldForceResolvers(field)) {
                    resolverType = rootValue.__typename || execContext.defaultOperationType;
                    resolverMap = this.resolvers && this.resolvers[resolverType];
                    if (resolverMap) {
                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];
                        if (resolve) {
                            resultPromise = Promise.resolve(cacheSlot.withValue(this.cache, resolve, [
                                rootValue,
                                argumentsObjectFromField(field, variables),
                                execContext.context,
                                { field: field, fragmentMap: execContext.fragmentMap },
                            ]));
                        }
                    }
                }
                return [2, resultPromise.then(function (result) {
                        if (result === void 0) { result = defaultResult; }
                        if (field.directives) {
                            field.directives.forEach(function (directive) {
                                if (directive.name.value === 'export' && directive.arguments) {
                                    directive.arguments.forEach(function (arg) {
                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {
                                            execContext.exportedVariables[arg.value.value] = result;
                                        }
                                    });
                                }
                            });
                        }
                        if (!field.selectionSet) {
                            return result;
                        }
                        if (result == null) {
                            return result;
                        }
                        if (Array.isArray(result)) {
                            return _this.resolveSubSelectedArray(field, result, execContext);
                        }
                        if (field.selectionSet) {
                            return _this.resolveSelectionSet(field.selectionSet, result, execContext);
                        }
                    })];
            });
        });
    };
    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {
        var _this = this;
        return Promise.all(result.map(function (item) {
            if (item === null) {
                return null;
            }
            if (Array.isArray(item)) {
                return _this.resolveSubSelectedArray(field, item, execContext);
            }
            if (field.selectionSet) {
                return _this.resolveSelectionSet(field.selectionSet, item, execContext);
            }
        }));
    };
    return LocalState;
}());

var destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();
function wrapDestructiveCacheMethod(cache, methodName) {
    var original = cache[methodName];
    if (typeof original === "function") {
        cache[methodName] = function () {
            destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);
            return original.apply(this, arguments);
        };
    }
}
function cancelNotifyTimeout(info) {
    if (info["notifyTimeout"]) {
        clearTimeout(info["notifyTimeout"]);
        info["notifyTimeout"] = void 0;
    }
}
var QueryInfo = (function () {
    function QueryInfo(queryManager, queryId) {
        if (queryId === void 0) { queryId = queryManager.generateQueryId(); }
        this.queryId = queryId;
        this.listeners = new Set();
        this.document = null;
        this.lastRequestId = 1;
        this.subscriptions = new Set();
        this.stopped = false;
        this.dirty = false;
        this.observableQuery = null;
        var cache = this.cache = queryManager.cache;
        if (!destructiveMethodCounts.has(cache)) {
            destructiveMethodCounts.set(cache, 0);
            wrapDestructiveCacheMethod(cache, "evict");
            wrapDestructiveCacheMethod(cache, "modify");
            wrapDestructiveCacheMethod(cache, "reset");
        }
    }
    QueryInfo.prototype.init = function (query) {
        var networkStatus = query.networkStatus || NetworkStatus.loading;
        if (this.variables &&
            this.networkStatus !== NetworkStatus.loading &&
            !equal$1(this.variables, query.variables)) {
            networkStatus = NetworkStatus.setVariables;
        }
        if (!equal$1(query.variables, this.variables)) {
            this.lastDiff = void 0;
        }
        Object.assign(this, {
            document: query.document,
            variables: query.variables,
            networkError: null,
            graphQLErrors: this.graphQLErrors || [],
            networkStatus: networkStatus,
        });
        if (query.observableQuery) {
            this.setObservableQuery(query.observableQuery);
        }
        if (query.lastRequestId) {
            this.lastRequestId = query.lastRequestId;
        }
        return this;
    };
    QueryInfo.prototype.reset = function () {
        cancelNotifyTimeout(this);
        this.lastDiff = void 0;
        this.dirty = false;
    };
    QueryInfo.prototype.getDiff = function (variables) {
        if (variables === void 0) { variables = this.variables; }
        var options = this.getDiffOptions(variables);
        if (this.lastDiff && equal$1(options, this.lastDiff.options)) {
            return this.lastDiff.diff;
        }
        this.updateWatch(this.variables = variables);
        var oq = this.observableQuery;
        if (oq && oq.options.fetchPolicy === "no-cache") {
            return { complete: false };
        }
        var diff = this.cache.diff(options);
        this.updateLastDiff(diff, options);
        return diff;
    };
    QueryInfo.prototype.updateLastDiff = function (diff, options) {
        this.lastDiff = diff ? {
            diff: diff,
            options: options || this.getDiffOptions(),
        } : void 0;
    };
    QueryInfo.prototype.getDiffOptions = function (variables) {
        var _a;
        if (variables === void 0) { variables = this.variables; }
        return {
            query: this.document,
            variables: variables,
            returnPartialData: true,
            optimistic: true,
            canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults,
        };
    };
    QueryInfo.prototype.setDiff = function (diff) {
        var _this = this;
        var oldDiff = this.lastDiff && this.lastDiff.diff;
        this.updateLastDiff(diff);
        if (!this.dirty &&
            !equal$1(oldDiff && oldDiff.result, diff && diff.result)) {
            this.dirty = true;
            if (!this.notifyTimeout) {
                this.notifyTimeout = setTimeout(function () { return _this.notify(); }, 0);
            }
        }
    };
    QueryInfo.prototype.setObservableQuery = function (oq) {
        var _this = this;
        if (oq === this.observableQuery)
            return;
        if (this.oqListener) {
            this.listeners.delete(this.oqListener);
        }
        this.observableQuery = oq;
        if (oq) {
            oq["queryInfo"] = this;
            this.listeners.add(this.oqListener = function () {
                if (_this.getDiff().fromOptimisticTransaction) {
                    oq["observe"]();
                }
                else {
                    oq.reobserve();
                }
            });
        }
        else {
            delete this.oqListener;
        }
    };
    QueryInfo.prototype.notify = function () {
        var _this = this;
        cancelNotifyTimeout(this);
        if (this.shouldNotify()) {
            this.listeners.forEach(function (listener) { return listener(_this); });
        }
        this.dirty = false;
    };
    QueryInfo.prototype.shouldNotify = function () {
        if (!this.dirty || !this.listeners.size) {
            return false;
        }
        if (isNetworkRequestInFlight(this.networkStatus) &&
            this.observableQuery) {
            var fetchPolicy = this.observableQuery.options.fetchPolicy;
            if (fetchPolicy !== "cache-only" &&
                fetchPolicy !== "cache-and-network") {
                return false;
            }
        }
        return true;
    };
    QueryInfo.prototype.stop = function () {
        if (!this.stopped) {
            this.stopped = true;
            this.reset();
            this.cancel();
            this.cancel = QueryInfo.prototype.cancel;
            this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
            var oq = this.observableQuery;
            if (oq)
                oq.stopPolling();
        }
    };
    QueryInfo.prototype.cancel = function () { };
    QueryInfo.prototype.updateWatch = function (variables) {
        var _this = this;
        if (variables === void 0) { variables = this.variables; }
        var oq = this.observableQuery;
        if (oq && oq.options.fetchPolicy === "no-cache") {
            return;
        }
        var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), { watcher: this, callback: function (diff) { return _this.setDiff(diff); } });
        if (!this.lastWatch ||
            !equal$1(watchOptions, this.lastWatch)) {
            this.cancel();
            this.cancel = this.cache.watch(this.lastWatch = watchOptions);
        }
    };
    QueryInfo.prototype.resetLastWrite = function () {
        this.lastWrite = void 0;
    };
    QueryInfo.prototype.shouldWrite = function (result, variables) {
        var lastWrite = this.lastWrite;
        return !(lastWrite &&
            lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&
            equal$1(variables, lastWrite.variables) &&
            equal$1(result.data, lastWrite.result.data));
    };
    QueryInfo.prototype.markResult = function (result, options, cacheWriteBehavior) {
        var _this = this;
        this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];
        this.reset();
        if (options.fetchPolicy === 'no-cache') {
            this.updateLastDiff({ result: result.data, complete: true }, this.getDiffOptions(options.variables));
        }
        else if (cacheWriteBehavior !== 0) {
            if (shouldWriteResult(result, options.errorPolicy)) {
                this.cache.performTransaction(function (cache) {
                    if (_this.shouldWrite(result, options.variables)) {
                        cache.writeQuery({
                            query: _this.document,
                            data: result.data,
                            variables: options.variables,
                            overwrite: cacheWriteBehavior === 1,
                        });
                        _this.lastWrite = {
                            result: result,
                            variables: options.variables,
                            dmCount: destructiveMethodCounts.get(_this.cache),
                        };
                    }
                    else {
                        if (_this.lastDiff &&
                            _this.lastDiff.diff.complete) {
                            result.data = _this.lastDiff.diff.result;
                            return;
                        }
                    }
                    var diffOptions = _this.getDiffOptions(options.variables);
                    var diff = cache.diff(diffOptions);
                    if (!_this.stopped) {
                        _this.updateWatch(options.variables);
                    }
                    _this.updateLastDiff(diff, diffOptions);
                    if (diff.complete) {
                        result.data = diff.result;
                    }
                });
            }
            else {
                this.lastWrite = void 0;
            }
        }
    };
    QueryInfo.prototype.markReady = function () {
        this.networkError = null;
        return this.networkStatus = NetworkStatus.ready;
    };
    QueryInfo.prototype.markError = function (error) {
        this.networkStatus = NetworkStatus.error;
        this.lastWrite = void 0;
        this.reset();
        if (error.graphQLErrors) {
            this.graphQLErrors = error.graphQLErrors;
        }
        if (error.networkError) {
            this.networkError = error.networkError;
        }
        return error;
    };
    return QueryInfo;
}());
function shouldWriteResult(result, errorPolicy) {
    if (errorPolicy === void 0) { errorPolicy = "none"; }
    var ignoreErrors = errorPolicy === "ignore" ||
        errorPolicy === "all";
    var writeWithErrors = !graphQLResultHasError(result);
    if (!writeWithErrors && ignoreErrors && result.data) {
        writeWithErrors = true;
    }
    return writeWithErrors;
}

var hasOwnProperty$b = Object.prototype.hasOwnProperty;
var QueryManager = (function () {
    function QueryManager(_a) {
        var cache = _a.cache, link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;
        this.clientAwareness = {};
        this.queries = new Map();
        this.fetchCancelFns = new Map();
        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();
        this.queryIdCounter = 1;
        this.requestIdCounter = 1;
        this.mutationIdCounter = 1;
        this.inFlightLinkObservables = new Map();
        this.cache = cache;
        this.link = link;
        this.queryDeduplication = queryDeduplication;
        this.clientAwareness = clientAwareness;
        this.localState = localState || new LocalState({ cache: cache });
        this.ssrMode = ssrMode;
        this.assumeImmutableResults = !!assumeImmutableResults;
        if ((this.onBroadcast = onBroadcast)) {
            this.mutationStore = Object.create(null);
        }
    }
    QueryManager.prototype.stop = function () {
        var _this = this;
        this.queries.forEach(function (_info, queryId) {
            _this.stopQueryNoBroadcast(queryId);
        });
        this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(13));
    };
    QueryManager.prototype.cancelPendingFetches = function (error) {
        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });
        this.fetchCancelFns.clear();
    };
    QueryManager.prototype.mutate = function (_a) {
        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, onQueryUpdated = _a.onQueryUpdated, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, _e = _a.fetchPolicy, fetchPolicy = _e === void 0 ? 'network-only' : _e, keepRootFields = _a.keepRootFields, context = _a.context;
        return __awaiter(this, void 0, void 0, function () {
            var mutationId, mutationStoreValue, self;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        __DEV__ ? invariant$2(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant$2(mutation, 14);
                        __DEV__ ? invariant$2(fetchPolicy === 'network-only' ||
                            fetchPolicy === 'no-cache', "Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.") : invariant$2(fetchPolicy === 'network-only' ||
                            fetchPolicy === 'no-cache', 15);
                        mutationId = this.generateMutationId();
                        mutation = this.transform(mutation).document;
                        variables = this.getVariables(mutation, variables);
                        if (!this.transform(mutation).hasClientExports) return [3, 2];
                        return [4, this.localState.addExportedVariables(mutation, variables, context)];
                    case 1:
                        variables = (_f.sent());
                        _f.label = 2;
                    case 2:
                        mutationStoreValue = this.mutationStore &&
                            (this.mutationStore[mutationId] = {
                                mutation: mutation,
                                variables: variables,
                                loading: true,
                                error: null,
                            });
                        if (optimisticResponse) {
                            this.markMutationOptimistic(optimisticResponse, {
                                mutationId: mutationId,
                                document: mutation,
                                variables: variables,
                                fetchPolicy: fetchPolicy,
                                errorPolicy: errorPolicy,
                                context: context,
                                updateQueries: updateQueries,
                                update: updateWithProxyFn,
                                keepRootFields: keepRootFields,
                            });
                        }
                        this.broadcastQueries();
                        self = this;
                        return [2, new Promise(function (resolve, reject) {
                                return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false), function (result) {
                                    if (graphQLResultHasError(result) && errorPolicy === 'none') {
                                        throw new ApolloError({
                                            graphQLErrors: result.errors,
                                        });
                                    }
                                    if (mutationStoreValue) {
                                        mutationStoreValue.loading = false;
                                        mutationStoreValue.error = null;
                                    }
                                    var storeResult = __assign({}, result);
                                    if (typeof refetchQueries === "function") {
                                        refetchQueries = refetchQueries(storeResult);
                                    }
                                    if (errorPolicy === 'ignore' &&
                                        graphQLResultHasError(storeResult)) {
                                        delete storeResult.errors;
                                    }
                                    return self.markMutationResult({
                                        mutationId: mutationId,
                                        result: storeResult,
                                        document: mutation,
                                        variables: variables,
                                        fetchPolicy: fetchPolicy,
                                        errorPolicy: errorPolicy,
                                        context: context,
                                        update: updateWithProxyFn,
                                        updateQueries: updateQueries,
                                        awaitRefetchQueries: awaitRefetchQueries,
                                        refetchQueries: refetchQueries,
                                        removeOptimistic: optimisticResponse ? mutationId : void 0,
                                        onQueryUpdated: onQueryUpdated,
                                        keepRootFields: keepRootFields,
                                    });
                                }).subscribe({
                                    next: function (storeResult) {
                                        self.broadcastQueries();
                                        resolve(storeResult);
                                    },
                                    error: function (err) {
                                        if (mutationStoreValue) {
                                            mutationStoreValue.loading = false;
                                            mutationStoreValue.error = err;
                                        }
                                        if (optimisticResponse) {
                                            self.cache.removeOptimistic(mutationId);
                                        }
                                        self.broadcastQueries();
                                        reject(err instanceof ApolloError ? err : new ApolloError({
                                            networkError: err,
                                        }));
                                    },
                                });
                            })];
                }
            });
        });
    };
    QueryManager.prototype.markMutationResult = function (mutation, cache) {
        var _this = this;
        if (cache === void 0) { cache = this.cache; }
        var result = mutation.result;
        var cacheWrites = [];
        var skipCache = mutation.fetchPolicy === "no-cache";
        if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {
            cacheWrites.push({
                result: result.data,
                dataId: 'ROOT_MUTATION',
                query: mutation.document,
                variables: mutation.variables,
            });
            var updateQueries_1 = mutation.updateQueries;
            if (updateQueries_1) {
                this.queries.forEach(function (_a, queryId) {
                    var observableQuery = _a.observableQuery;
                    var queryName = observableQuery && observableQuery.queryName;
                    if (!queryName || !hasOwnProperty$b.call(updateQueries_1, queryName)) {
                        return;
                    }
                    var updater = updateQueries_1[queryName];
                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;
                    var _c = cache.diff({
                        query: document,
                        variables: variables,
                        returnPartialData: true,
                        optimistic: false,
                    }), currentQueryResult = _c.result, complete = _c.complete;
                    if (complete && currentQueryResult) {
                        var nextQueryResult = updater(currentQueryResult, {
                            mutationResult: result,
                            queryName: document && getOperationName(document) || void 0,
                            queryVariables: variables,
                        });
                        if (nextQueryResult) {
                            cacheWrites.push({
                                result: nextQueryResult,
                                dataId: 'ROOT_QUERY',
                                query: document,
                                variables: variables,
                            });
                        }
                    }
                });
            }
        }
        if (cacheWrites.length > 0 ||
            mutation.refetchQueries ||
            mutation.update ||
            mutation.onQueryUpdated ||
            mutation.removeOptimistic) {
            var results_1 = [];
            this.refetchQueries({
                updateCache: function (cache) {
                    if (!skipCache) {
                        cacheWrites.forEach(function (write) { return cache.write(write); });
                    }
                    var update = mutation.update;
                    if (update) {
                        if (!skipCache) {
                            var diff = cache.diff({
                                id: "ROOT_MUTATION",
                                query: _this.transform(mutation.document).asQuery,
                                variables: mutation.variables,
                                optimistic: false,
                                returnPartialData: true,
                            });
                            if (diff.complete) {
                                result = __assign(__assign({}, result), { data: diff.result });
                            }
                        }
                        update(cache, result, {
                            context: mutation.context,
                            variables: mutation.variables,
                        });
                    }
                    if (!skipCache && !mutation.keepRootFields) {
                        cache.modify({
                            id: 'ROOT_MUTATION',
                            fields: function (value, _a) {
                                var fieldName = _a.fieldName, DELETE = _a.DELETE;
                                return fieldName === "__typename" ? value : DELETE;
                            },
                        });
                    }
                },
                include: mutation.refetchQueries,
                optimistic: false,
                removeOptimistic: mutation.removeOptimistic,
                onQueryUpdated: mutation.onQueryUpdated || null,
            }).forEach(function (result) { return results_1.push(result); });
            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {
                return Promise.all(results_1).then(function () { return result; });
            }
        }
        return Promise.resolve(result);
    };
    QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {
        var _this = this;
        var data = typeof optimisticResponse === "function"
            ? optimisticResponse(mutation.variables)
            : optimisticResponse;
        return this.cache.recordOptimisticTransaction(function (cache) {
            try {
                _this.markMutationResult(__assign(__assign({}, mutation), { result: { data: data } }), cache);
            }
            catch (error) {
                __DEV__ && invariant$2.error(error);
            }
        }, mutation.mutationId);
    };
    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {
        return this.fetchQueryObservable(queryId, options, networkStatus).promise;
    };
    QueryManager.prototype.getQueryStore = function () {
        var store = Object.create(null);
        this.queries.forEach(function (info, queryId) {
            store[queryId] = {
                variables: info.variables,
                networkStatus: info.networkStatus,
                networkError: info.networkError,
                graphQLErrors: info.graphQLErrors,
            };
        });
        return store;
    };
    QueryManager.prototype.resetErrors = function (queryId) {
        var queryInfo = this.queries.get(queryId);
        if (queryInfo) {
            queryInfo.networkError = undefined;
            queryInfo.graphQLErrors = [];
        }
    };
    QueryManager.prototype.transform = function (document) {
        var transformCache = this.transformCache;
        if (!transformCache.has(document)) {
            var transformed = this.cache.transformDocument(document);
            var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));
            var clientQuery = this.localState.clientQuery(transformed);
            var serverQuery = forLink && this.localState.serverQuery(forLink);
            var cacheEntry_1 = {
                document: transformed,
                hasClientExports: hasClientExports(transformed),
                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),
                clientQuery: clientQuery,
                serverQuery: serverQuery,
                defaultVars: getDefaultValues(getOperationDefinition(transformed)),
                asQuery: __assign(__assign({}, transformed), { definitions: transformed.definitions.map(function (def) {
                        if (def.kind === "OperationDefinition" &&
                            def.operation !== "query") {
                            return __assign(__assign({}, def), { operation: "query" });
                        }
                        return def;
                    }) })
            };
            var add = function (doc) {
                if (doc && !transformCache.has(doc)) {
                    transformCache.set(doc, cacheEntry_1);
                }
            };
            add(document);
            add(transformed);
            add(clientQuery);
            add(serverQuery);
        }
        return transformCache.get(document);
    };
    QueryManager.prototype.getVariables = function (document, variables) {
        return __assign(__assign({}, this.transform(document).defaultVars), variables);
    };
    QueryManager.prototype.watchQuery = function (options) {
        options = __assign(__assign({}, options), { variables: this.getVariables(options.query, options.variables) });
        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {
            options.notifyOnNetworkStatusChange = false;
        }
        var queryInfo = new QueryInfo(this);
        var observable = new ObservableQuery({
            queryManager: this,
            queryInfo: queryInfo,
            options: options,
        });
        this.queries.set(observable.queryId, queryInfo);
        queryInfo.init({
            document: options.query,
            observableQuery: observable,
            variables: options.variables,
        });
        return observable;
    };
    QueryManager.prototype.query = function (options, queryId) {
        var _this = this;
        if (queryId === void 0) { queryId = this.generateQueryId(); }
        __DEV__ ? invariant$2(options.query, 'query option is required. You must specify your GraphQL document ' +
            'in the query option.') : invariant$2(options.query, 16);
        __DEV__ ? invariant$2(options.query.kind === 'Document', 'You must wrap the query string in a "gql" tag.') : invariant$2(options.query.kind === 'Document', 17);
        __DEV__ ? invariant$2(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant$2(!options.returnPartialData, 18);
        __DEV__ ? invariant$2(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant$2(!options.pollInterval, 19);
        return this.fetchQuery(queryId, options).finally(function () { return _this.stopQuery(queryId); });
    };
    QueryManager.prototype.generateQueryId = function () {
        return String(this.queryIdCounter++);
    };
    QueryManager.prototype.generateRequestId = function () {
        return this.requestIdCounter++;
    };
    QueryManager.prototype.generateMutationId = function () {
        return String(this.mutationIdCounter++);
    };
    QueryManager.prototype.stopQueryInStore = function (queryId) {
        this.stopQueryInStoreNoBroadcast(queryId);
        this.broadcastQueries();
    };
    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {
        var queryInfo = this.queries.get(queryId);
        if (queryInfo)
            queryInfo.stop();
    };
    QueryManager.prototype.clearStore = function () {
        this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(20));
        this.queries.forEach(function (queryInfo) {
            if (queryInfo.observableQuery) {
                queryInfo.networkStatus = NetworkStatus.loading;
            }
            else {
                queryInfo.stop();
            }
        });
        if (this.mutationStore) {
            this.mutationStore = Object.create(null);
        }
        return this.cache.reset();
    };
    QueryManager.prototype.resetStore = function () {
        var _this = this;
        return this.clearStore().then(function () {
            return _this.reFetchObservableQueries();
        });
    };
    QueryManager.prototype.getObservableQueries = function (include) {
        var _this = this;
        if (include === void 0) { include = "active"; }
        var queries = new Map();
        var queryNamesAndDocs = new Map();
        var legacyQueryOptions = new Set();
        if (Array.isArray(include)) {
            include.forEach(function (desc) {
                if (typeof desc === "string") {
                    queryNamesAndDocs.set(desc, false);
                }
                else if (isDocumentNode(desc)) {
                    queryNamesAndDocs.set(_this.transform(desc).document, false);
                }
                else if (isNonNullObject$1(desc) && desc.query) {
                    legacyQueryOptions.add(desc);
                }
            });
        }
        this.queries.forEach(function (_a, queryId) {
            var oq = _a.observableQuery, document = _a.document;
            if (oq) {
                if (include === "all") {
                    queries.set(queryId, oq);
                    return;
                }
                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;
                if (fetchPolicy === "standby" ||
                    (include === "active" && !oq.hasObservers())) {
                    return;
                }
                if (include === "active" ||
                    (queryName && queryNamesAndDocs.has(queryName)) ||
                    (document && queryNamesAndDocs.has(document))) {
                    queries.set(queryId, oq);
                    if (queryName)
                        queryNamesAndDocs.set(queryName, true);
                    if (document)
                        queryNamesAndDocs.set(document, true);
                }
            }
        });
        if (legacyQueryOptions.size) {
            legacyQueryOptions.forEach(function (options) {
                var queryId = makeUniqueId("legacyOneTimeQuery");
                var queryInfo = _this.getQuery(queryId).init({
                    document: options.query,
                    variables: options.variables,
                });
                var oq = new ObservableQuery({
                    queryManager: _this,
                    queryInfo: queryInfo,
                    options: __assign(__assign({}, options), { fetchPolicy: "network-only" }),
                });
                invariant$2(oq.queryId === queryId);
                queryInfo.setObservableQuery(oq);
                queries.set(queryId, oq);
            });
        }
        if (__DEV__ && queryNamesAndDocs.size) {
            queryNamesAndDocs.forEach(function (included, nameOrDoc) {
                if (!included) {
                    __DEV__ && invariant$2.warn("Unknown query " + (typeof nameOrDoc === "string" ? "named " : "") + JSON.stringify(nameOrDoc, null, 2) + " requested in refetchQueries options.include array");
                }
            });
        }
        return queries;
    };
    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {
        var _this = this;
        if (includeStandby === void 0) { includeStandby = false; }
        var observableQueryPromises = [];
        this.getObservableQueries(includeStandby ? "all" : "active").forEach(function (observableQuery, queryId) {
            var fetchPolicy = observableQuery.options.fetchPolicy;
            observableQuery.resetLastResults();
            if (includeStandby ||
                (fetchPolicy !== "standby" &&
                    fetchPolicy !== "cache-only")) {
                observableQueryPromises.push(observableQuery.refetch());
            }
            _this.getQuery(queryId).setDiff(null);
        });
        this.broadcastQueries();
        return Promise.all(observableQueryPromises);
    };
    QueryManager.prototype.setObservableQuery = function (observableQuery) {
        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);
    };
    QueryManager.prototype.startGraphQLSubscription = function (_a) {
        var _this = this;
        var query = _a.query, fetchPolicy = _a.fetchPolicy, errorPolicy = _a.errorPolicy, variables = _a.variables, _b = _a.context, context = _b === void 0 ? {} : _b;
        query = this.transform(query).document;
        variables = this.getVariables(query, variables);
        var makeObservable = function (variables) {
            return _this.getObservableFromLink(query, context, variables).map(function (result) {
                if (fetchPolicy !== 'no-cache') {
                    if (shouldWriteResult(result, errorPolicy)) {
                        _this.cache.write({
                            query: query,
                            result: result.data,
                            dataId: 'ROOT_SUBSCRIPTION',
                            variables: variables,
                        });
                    }
                    _this.broadcastQueries();
                }
                if (graphQLResultHasError(result)) {
                    throw new ApolloError({
                        graphQLErrors: result.errors,
                    });
                }
                return result;
            });
        };
        if (this.transform(query).hasClientExports) {
            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);
            return new Observable(function (observer) {
                var sub = null;
                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);
                return function () { return sub && sub.unsubscribe(); };
            });
        }
        return makeObservable(variables);
    };
    QueryManager.prototype.stopQuery = function (queryId) {
        this.stopQueryNoBroadcast(queryId);
        this.broadcastQueries();
    };
    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {
        this.stopQueryInStoreNoBroadcast(queryId);
        this.removeQuery(queryId);
    };
    QueryManager.prototype.removeQuery = function (queryId) {
        this.fetchCancelFns.delete(queryId);
        this.getQuery(queryId).stop();
        this.queries.delete(queryId);
    };
    QueryManager.prototype.broadcastQueries = function () {
        if (this.onBroadcast)
            this.onBroadcast();
        this.queries.forEach(function (info) { return info.notify(); });
    };
    QueryManager.prototype.getLocalState = function () {
        return this.localState;
    };
    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {
        var _this = this;
        var _a;
        if (deduplication === void 0) { deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication; }
        var observable;
        var serverQuery = this.transform(query).serverQuery;
        if (serverQuery) {
            var _b = this, inFlightLinkObservables_1 = _b.inFlightLinkObservables, link = _b.link;
            var operation = {
                query: serverQuery,
                variables: variables,
                operationName: getOperationName(serverQuery) || void 0,
                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),
            };
            context = operation.context;
            if (deduplication) {
                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();
                inFlightLinkObservables_1.set(serverQuery, byVariables_1);
                var varJson_1 = canonicalStringify(variables);
                observable = byVariables_1.get(varJson_1);
                if (!observable) {
                    var concast = new Concast([
                        execute(link, operation)
                    ]);
                    byVariables_1.set(varJson_1, observable = concast);
                    concast.cleanup(function () {
                        if (byVariables_1.delete(varJson_1) &&
                            byVariables_1.size < 1) {
                            inFlightLinkObservables_1.delete(serverQuery);
                        }
                    });
                }
            }
            else {
                observable = new Concast([
                    execute(link, operation)
                ]);
            }
        }
        else {
            observable = new Concast([
                Observable.of({ data: {} })
            ]);
            context = this.prepareContext(context);
        }
        var clientQuery = this.transform(query).clientQuery;
        if (clientQuery) {
            observable = asyncMap(observable, function (result) {
                return _this.localState.runResolvers({
                    document: clientQuery,
                    remoteResult: result,
                    context: context,
                    variables: variables,
                });
            });
        }
        return observable;
    };
    QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {
        var requestId = queryInfo.lastRequestId = this.generateRequestId();
        return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {
            var hasErrors = isNonEmptyArray(result.errors);
            if (requestId >= queryInfo.lastRequestId) {
                if (hasErrors && options.errorPolicy === "none") {
                    throw queryInfo.markError(new ApolloError({
                        graphQLErrors: result.errors,
                    }));
                }
                queryInfo.markResult(result, options, cacheWriteBehavior);
                queryInfo.markReady();
            }
            var aqr = {
                data: result.data,
                loading: false,
                networkStatus: queryInfo.networkStatus || NetworkStatus.ready,
            };
            if (hasErrors && options.errorPolicy !== "ignore") {
                aqr.errors = result.errors;
            }
            return aqr;
        }, function (networkError) {
            var error = isApolloError(networkError)
                ? networkError
                : new ApolloError({ networkError: networkError });
            if (requestId >= queryInfo.lastRequestId) {
                queryInfo.markError(error);
            }
            throw error;
        });
    };
    QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {
        var _this = this;
        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }
        var query = this.transform(options.query).document;
        var variables = this.getVariables(query, options.variables);
        var queryInfo = this.getQuery(queryId);
        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? "cache-first" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? "none" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;
        var normalized = Object.assign({}, options, {
            query: query,
            variables: variables,
            fetchPolicy: fetchPolicy,
            errorPolicy: errorPolicy,
            returnPartialData: returnPartialData,
            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
            context: context,
        });
        var fromVariables = function (variables) {
            normalized.variables = variables;
            return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);
        };
        this.fetchCancelFns.set(queryId, function (reason) {
            setTimeout(function () { return concast.cancel(reason); });
        });
        var concast = new Concast(this.transform(normalized.query).hasClientExports
            ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables)
            : fromVariables(normalized.variables));
        concast.cleanup(function () {
            _this.fetchCancelFns.delete(queryId);
            applyNextFetchPolicy(options);
        });
        return concast;
    };
    QueryManager.prototype.refetchQueries = function (_a) {
        var _this = this;
        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId("refetchQueries") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;
        var includedQueriesById = new Map();
        if (include) {
            this.getObservableQueries(include).forEach(function (oq, queryId) {
                includedQueriesById.set(queryId, {
                    oq: oq,
                    lastDiff: _this.getQuery(queryId).getDiff(),
                });
            });
        }
        var results = new Map;
        if (updateCache) {
            this.cache.batch({
                update: updateCache,
                optimistic: optimistic && removeOptimistic || false,
                removeOptimistic: removeOptimistic,
                onWatchUpdated: function (watch, diff, lastDiff) {
                    var oq = watch.watcher instanceof QueryInfo &&
                        watch.watcher.observableQuery;
                    if (oq) {
                        if (onQueryUpdated) {
                            includedQueriesById.delete(oq.queryId);
                            var result = onQueryUpdated(oq, diff, lastDiff);
                            if (result === true) {
                                result = oq.refetch();
                            }
                            if (result !== false) {
                                results.set(oq, result);
                            }
                            return false;
                        }
                        if (onQueryUpdated !== null) {
                            includedQueriesById.set(oq.queryId, { oq: oq, lastDiff: lastDiff, diff: diff });
                        }
                    }
                },
            });
        }
        if (includedQueriesById.size) {
            includedQueriesById.forEach(function (_a, queryId) {
                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;
                var result;
                if (onQueryUpdated) {
                    if (!diff) {
                        var info = oq["queryInfo"];
                        info.reset();
                        diff = info.getDiff();
                    }
                    result = onQueryUpdated(oq, diff, lastDiff);
                }
                if (!onQueryUpdated || result === true) {
                    result = oq.refetch();
                }
                if (result !== false) {
                    results.set(oq, result);
                }
                if (queryId.indexOf("legacyOneTimeQuery") >= 0) {
                    _this.stopQueryNoBroadcast(queryId);
                }
            });
        }
        if (removeOptimistic) {
            this.cache.removeOptimistic(removeOptimistic);
        }
        return results;
    };
    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {
        var _this = this;
        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;
        var oldNetworkStatus = queryInfo.networkStatus;
        queryInfo.init({
            document: query,
            variables: variables,
            networkStatus: networkStatus,
        });
        var readCache = function () { return queryInfo.getDiff(variables); };
        var resultsFromCache = function (diff, networkStatus) {
            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }
            var data = diff.result;
            if (__DEV__ &&
                !returnPartialData &&
                !equal$1(data, {})) {
                logMissingFieldErrors(diff.missing);
            }
            var fromData = function (data) { return Observable.of(__assign({ data: data, loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus }, (diff.complete ? null : { partial: true }))); };
            if (data && _this.transform(query).hasForcedResolvers) {
                return _this.localState.runResolvers({
                    document: query,
                    remoteResult: { data: data },
                    context: context,
                    variables: variables,
                    onlyRunForcedResolvers: true,
                }).then(function (resolved) { return fromData(resolved.data || void 0); });
            }
            return fromData(data);
        };
        var cacheWriteBehavior = fetchPolicy === "no-cache" ? 0 :
            (networkStatus === NetworkStatus.refetch &&
                refetchWritePolicy !== "merge") ? 1
                : 2;
        var resultsFromLink = function () {
            return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {
                variables: variables,
                context: context,
                fetchPolicy: fetchPolicy,
                errorPolicy: errorPolicy,
            });
        };
        var shouldNotify = notifyOnNetworkStatusChange &&
            typeof oldNetworkStatus === "number" &&
            oldNetworkStatus !== networkStatus &&
            isNetworkRequestInFlight(networkStatus);
        switch (fetchPolicy) {
            default:
            case "cache-first": {
                var diff = readCache();
                if (diff.complete) {
                    return [
                        resultsFromCache(diff, queryInfo.markReady()),
                    ];
                }
                if (returnPartialData || shouldNotify) {
                    return [
                        resultsFromCache(diff),
                        resultsFromLink(),
                    ];
                }
                return [
                    resultsFromLink(),
                ];
            }
            case "cache-and-network": {
                var diff = readCache();
                if (diff.complete || returnPartialData || shouldNotify) {
                    return [
                        resultsFromCache(diff),
                        resultsFromLink(),
                    ];
                }
                return [
                    resultsFromLink(),
                ];
            }
            case "cache-only":
                return [
                    resultsFromCache(readCache(), queryInfo.markReady()),
                ];
            case "network-only":
                if (shouldNotify) {
                    return [
                        resultsFromCache(readCache()),
                        resultsFromLink(),
                    ];
                }
                return [resultsFromLink()];
            case "no-cache":
                if (shouldNotify) {
                    return [
                        resultsFromCache(queryInfo.getDiff()),
                        resultsFromLink(),
                    ];
                }
                return [resultsFromLink()];
            case "standby":
                return [];
        }
    };
    QueryManager.prototype.getQuery = function (queryId) {
        if (queryId && !this.queries.has(queryId)) {
            this.queries.set(queryId, new QueryInfo(this, queryId));
        }
        return this.queries.get(queryId);
    };
    QueryManager.prototype.prepareContext = function (context) {
        if (context === void 0) { context = {}; }
        var newContext = this.localState.prepareContext(context);
        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });
    };
    return QueryManager;
}());

var hasSuggestedDevtools = false;
function mergeOptions(defaults, options) {
    return compact(defaults, options, options.variables && {
        variables: __assign(__assign({}, defaults.variables), options.variables),
    });
}
var ApolloClient = (function () {
    function ApolloClient(options) {
        var _this = this;
        this.defaultOptions = {};
        this.resetStoreCallbacks = [];
        this.clearStoreCallbacks = [];
        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, _c = options.connectToDevTools, connectToDevTools = _c === void 0 ? typeof window === 'object' &&
            !window.__APOLLO_CLIENT__ &&
            __DEV__ : _c, _d = options.queryDeduplication, queryDeduplication = _d === void 0 ? true : _d, defaultOptions = options.defaultOptions, _e = options.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? false : _e, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;
        var link = options.link;
        if (!link) {
            link = uri
                ? new HttpLink({ uri: uri, credentials: credentials, headers: headers })
                : ApolloLink.empty();
        }
        if (!cache) {
            throw __DEV__ ? new InvariantError("To initialize Apollo Client, you must specify a 'cache' property " +
                "in the options object. \n" +
                "For more information, please visit: https://go.apollo.dev/c/docs") : new InvariantError(9);
        }
        this.link = link;
        this.cache = cache;
        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;
        this.queryDeduplication = queryDeduplication;
        this.defaultOptions = defaultOptions || {};
        this.typeDefs = typeDefs;
        if (ssrForceFetchDelay) {
            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);
        }
        this.watchQuery = this.watchQuery.bind(this);
        this.query = this.query.bind(this);
        this.mutate = this.mutate.bind(this);
        this.resetStore = this.resetStore.bind(this);
        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);
        if (connectToDevTools && typeof window === 'object') {
            window.__APOLLO_CLIENT__ = this;
        }
        if (!hasSuggestedDevtools && __DEV__) {
            hasSuggestedDevtools = true;
            if (typeof window !== 'undefined' &&
                window.document &&
                window.top === window.self &&
                !window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {
                var nav = window.navigator;
                var ua = nav && nav.userAgent;
                var url = void 0;
                if (typeof ua === "string") {
                    if (ua.indexOf("Chrome/") > -1) {
                        url = "https://chrome.google.com/webstore/detail/" +
                            "apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm";
                    }
                    else if (ua.indexOf("Firefox/") > -1) {
                        url = "https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/";
                    }
                }
                if (url) {
                    __DEV__ && invariant$2.log("Download the Apollo DevTools for a better development " +
                        "experience: " + url);
                }
            }
        }
        this.version = version;
        this.localState = new LocalState({
            cache: cache,
            client: this,
            resolvers: resolvers,
            fragmentMatcher: fragmentMatcher,
        });
        this.queryManager = new QueryManager({
            cache: this.cache,
            link: this.link,
            queryDeduplication: queryDeduplication,
            ssrMode: ssrMode,
            clientAwareness: {
                name: clientAwarenessName,
                version: clientAwarenessVersion,
            },
            localState: this.localState,
            assumeImmutableResults: assumeImmutableResults,
            onBroadcast: connectToDevTools ? function () {
                if (_this.devToolsHookCb) {
                    _this.devToolsHookCb({
                        action: {},
                        state: {
                            queries: _this.queryManager.getQueryStore(),
                            mutations: _this.queryManager.mutationStore || {},
                        },
                        dataWithOptimisticResults: _this.cache.extract(true),
                    });
                }
            } : void 0,
        });
    }
    ApolloClient.prototype.stop = function () {
        this.queryManager.stop();
    };
    ApolloClient.prototype.watchQuery = function (options) {
        if (this.defaultOptions.watchQuery) {
            options = mergeOptions(this.defaultOptions.watchQuery, options);
        }
        if (this.disableNetworkFetches &&
            (options.fetchPolicy === 'network-only' ||
                options.fetchPolicy === 'cache-and-network')) {
            options = __assign(__assign({}, options), { fetchPolicy: 'cache-first' });
        }
        return this.queryManager.watchQuery(options);
    };
    ApolloClient.prototype.query = function (options) {
        if (this.defaultOptions.query) {
            options = mergeOptions(this.defaultOptions.query, options);
        }
        __DEV__ ? invariant$2(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' +
            'client.query can only return a single result. Please use client.watchQuery ' +
            'to receive multiple results from the cache and the network, or consider ' +
            'using a different fetchPolicy, such as cache-first or network-only.') : invariant$2(options.fetchPolicy !== 'cache-and-network', 10);
        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {
            options = __assign(__assign({}, options), { fetchPolicy: 'cache-first' });
        }
        return this.queryManager.query(options);
    };
    ApolloClient.prototype.mutate = function (options) {
        if (this.defaultOptions.mutate) {
            options = mergeOptions(this.defaultOptions.mutate, options);
        }
        return this.queryManager.mutate(options);
    };
    ApolloClient.prototype.subscribe = function (options) {
        return this.queryManager.startGraphQLSubscription(options);
    };
    ApolloClient.prototype.readQuery = function (options, optimistic) {
        if (optimistic === void 0) { optimistic = false; }
        return this.cache.readQuery(options, optimistic);
    };
    ApolloClient.prototype.readFragment = function (options, optimistic) {
        if (optimistic === void 0) { optimistic = false; }
        return this.cache.readFragment(options, optimistic);
    };
    ApolloClient.prototype.writeQuery = function (options) {
        this.cache.writeQuery(options);
        this.queryManager.broadcastQueries();
    };
    ApolloClient.prototype.writeFragment = function (options) {
        this.cache.writeFragment(options);
        this.queryManager.broadcastQueries();
    };
    ApolloClient.prototype.__actionHookForDevTools = function (cb) {
        this.devToolsHookCb = cb;
    };
    ApolloClient.prototype.__requestRaw = function (payload) {
        return execute(this.link, payload);
    };
    ApolloClient.prototype.resetStore = function () {
        var _this = this;
        return Promise.resolve()
            .then(function () { return _this.queryManager.clearStore(); })
            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })
            .then(function () { return _this.reFetchObservableQueries(); });
    };
    ApolloClient.prototype.clearStore = function () {
        var _this = this;
        return Promise.resolve()
            .then(function () { return _this.queryManager.clearStore(); })
            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });
    };
    ApolloClient.prototype.onResetStore = function (cb) {
        var _this = this;
        this.resetStoreCallbacks.push(cb);
        return function () {
            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });
        };
    };
    ApolloClient.prototype.onClearStore = function (cb) {
        var _this = this;
        this.clearStoreCallbacks.push(cb);
        return function () {
            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });
        };
    };
    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {
        return this.queryManager.reFetchObservableQueries(includeStandby);
    };
    ApolloClient.prototype.refetchQueries = function (options) {
        var map = this.queryManager.refetchQueries(options);
        var queries = [];
        var results = [];
        map.forEach(function (result, obsQuery) {
            queries.push(obsQuery);
            results.push(result);
        });
        var result = Promise.all(results);
        result.queries = queries;
        result.results = results;
        result.catch(function (error) {
            __DEV__ && invariant$2.debug("In client.refetchQueries, Promise.all promise rejected with error " + error);
        });
        return result;
    };
    ApolloClient.prototype.getObservableQueries = function (include) {
        if (include === void 0) { include = "active"; }
        return this.queryManager.getObservableQueries(include);
    };
    ApolloClient.prototype.extract = function (optimistic) {
        return this.cache.extract(optimistic);
    };
    ApolloClient.prototype.restore = function (serializedState) {
        return this.cache.restore(serializedState);
    };
    ApolloClient.prototype.addResolvers = function (resolvers) {
        this.localState.addResolvers(resolvers);
    };
    ApolloClient.prototype.setResolvers = function (resolvers) {
        this.localState.setResolvers(resolvers);
    };
    ApolloClient.prototype.getResolvers = function () {
        return this.localState.getResolvers();
    };
    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {
        this.localState.setFragmentMatcher(fragmentMatcher);
    };
    ApolloClient.prototype.setLink = function (newLink) {
        this.link = this.queryManager.link = newLink;
    };
    return ApolloClient;
}());

var docCache = new Map();
var fragmentSourceMap = new Map();
var printFragmentWarnings = true;
var experimentalFragmentVariables = false;
function normalize(string) {
    return string.replace(/[\s,]+/g, ' ').trim();
}
function cacheKeyFromLoc(loc) {
    return normalize(loc.source.body.substring(loc.start, loc.end));
}
function processFragments(ast) {
    var seenKeys = new Set();
    var definitions = [];
    ast.definitions.forEach(function (fragmentDefinition) {
        if (fragmentDefinition.kind === 'FragmentDefinition') {
            var fragmentName = fragmentDefinition.name.value;
            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);
            var sourceKeySet = fragmentSourceMap.get(fragmentName);
            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {
                if (printFragmentWarnings) {
                    console.warn("Warning: fragment with name " + fragmentName + " already exists.\n"
                        + "graphql-tag enforces all fragment names across your application to be unique; read more about\n"
                        + "this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
                }
            }
            else if (!sourceKeySet) {
                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);
            }
            sourceKeySet.add(sourceKey);
            if (!seenKeys.has(sourceKey)) {
                seenKeys.add(sourceKey);
                definitions.push(fragmentDefinition);
            }
        }
        else {
            definitions.push(fragmentDefinition);
        }
    });
    return __assign(__assign({}, ast), { definitions: definitions });
}
function stripLoc(doc) {
    var workSet = new Set(doc.definitions);
    workSet.forEach(function (node) {
        if (node.loc)
            delete node.loc;
        Object.keys(node).forEach(function (key) {
            var value = node[key];
            if (value && typeof value === 'object') {
                workSet.add(value);
            }
        });
    });
    var loc = doc.loc;
    if (loc) {
        delete loc.startToken;
        delete loc.endToken;
    }
    return doc;
}
function parseDocument(source) {
    var cacheKey = normalize(source);
    if (!docCache.has(cacheKey)) {
        var parsed = parse$1r(source, {
            experimentalFragmentVariables: experimentalFragmentVariables
        });
        if (!parsed || parsed.kind !== 'Document') {
            throw new Error('Not a valid GraphQL document.');
        }
        docCache.set(cacheKey, stripLoc(processFragments(parsed)));
    }
    return docCache.get(cacheKey);
}
function gql(literals) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof literals === 'string') {
        literals = [literals];
    }
    var result = literals[0];
    args.forEach(function (arg, i) {
        if (arg && arg.kind === 'Document') {
            result += arg.loc.source.body;
        }
        else {
            result += arg;
        }
        result += literals[i + 1];
    });
    return parseDocument(result);
}
function resetCaches() {
    docCache.clear();
    fragmentSourceMap.clear();
}
function disableFragmentWarnings() {
    printFragmentWarnings = false;
}
function enableExperimentalFragmentVariables() {
    experimentalFragmentVariables = true;
}
function disableExperimentalFragmentVariables() {
    experimentalFragmentVariables = false;
}
var extras = {
    gql: gql,
    resetCaches: resetCaches,
    disableFragmentWarnings: disableFragmentWarnings,
    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,
    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables
};
(function (gql_1) {
    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;
})(gql || (gql = {}));
gql["default"] = gql;

var MutationData = (function (_super) {
    __extends(MutationData, _super);
    function MutationData(_a) {
        var options = _a.options, context = _a.context, result = _a.result, setResult = _a.setResult;
        var _this = _super.call(this, options, context) || this;
        _this.runMutation = function (mutationFunctionOptions) {
            if (mutationFunctionOptions === void 0) { mutationFunctionOptions = {}; }
            _this.onMutationStart();
            var mutationId = _this.generateNewMutationId();
            return _this.mutate(mutationFunctionOptions)
                .then(function (response) {
                _this.onMutationCompleted(response, mutationId);
                return response;
            })
                .catch(function (error) {
                var onError = _this.getOptions().onError;
                _this.onMutationError(error, mutationId);
                if (onError) {
                    onError(error);
                    return {
                        data: undefined,
                        errors: error,
                    };
                }
                else {
                    throw error;
                }
            });
        };
        _this.verifyDocumentType(options.mutation, DocumentType.Mutation);
        _this.result = result;
        _this.setResult = setResult;
        _this.mostRecentMutationId = 0;
        return _this;
    }
    MutationData.prototype.execute = function (result) {
        this.isMounted = true;
        this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);
        return [
            this.runMutation,
            __assign(__assign({}, result), { client: this.refreshClient().client })
        ];
    };
    MutationData.prototype.afterExecute = function () {
        this.isMounted = true;
        return this.unmount.bind(this);
    };
    MutationData.prototype.cleanup = function () {
    };
    MutationData.prototype.mutate = function (options) {
        return this.refreshClient().client.mutate(mergeOptions(this.getOptions(), options));
    };
    MutationData.prototype.onMutationStart = function () {
        if (!this.result.loading && !this.getOptions().ignoreResults) {
            this.updateResult({
                loading: true,
                error: undefined,
                data: undefined,
                called: true
            });
        }
    };
    MutationData.prototype.onMutationCompleted = function (response, mutationId) {
        var _a = this.getOptions(), onCompleted = _a.onCompleted, ignoreResults = _a.ignoreResults;
        var data = response.data, errors = response.errors;
        var error = errors && errors.length > 0
            ? new ApolloError({ graphQLErrors: errors })
            : undefined;
        var callOncomplete = function () {
            return onCompleted ? onCompleted(data) : null;
        };
        if (this.isMostRecentMutation(mutationId) && !ignoreResults) {
            this.updateResult({
                called: true,
                loading: false,
                data: data,
                error: error
            });
        }
        callOncomplete();
    };
    MutationData.prototype.onMutationError = function (error, mutationId) {
        if (this.isMostRecentMutation(mutationId)) {
            this.updateResult({
                loading: false,
                error: error,
                data: undefined,
                called: true
            });
        }
    };
    MutationData.prototype.generateNewMutationId = function () {
        return ++this.mostRecentMutationId;
    };
    MutationData.prototype.isMostRecentMutation = function (mutationId) {
        return this.mostRecentMutationId === mutationId;
    };
    MutationData.prototype.updateResult = function (result) {
        if (this.isMounted &&
            (!this.previousResult || !equal$1(this.previousResult, result))) {
            this.setResult(result);
            this.previousResult = result;
            return result;
        }
    };
    return MutationData;
}(OperationData));

var QueryData = (function (_super) {
    __extends(QueryData, _super);
    function QueryData(_a) {
        var options = _a.options, context = _a.context, onNewData = _a.onNewData;
        var _this = _super.call(this, options, context) || this;
        _this.runLazy = false;
        _this.previous = Object.create(null);
        _this.runLazyQuery = function (options) {
            _this.cleanup();
            _this.runLazy = true;
            _this.lazyOptions = options;
            _this.onNewData();
        };
        _this.obsRefetch = function (variables) { var _a; return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.refetch(variables); };
        _this.obsFetchMore = function (fetchMoreOptions) { var _a; return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.fetchMore(fetchMoreOptions); };
        _this.obsUpdateQuery = function (mapFn) { var _a; return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.updateQuery(mapFn); };
        _this.obsStartPolling = function (pollInterval) {
            var _a;
            (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);
        };
        _this.obsStopPolling = function () {
            var _a;
            (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();
        };
        _this.obsSubscribeToMore = function (options) { var _a; return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.subscribeToMore(options); };
        _this.onNewData = onNewData;
        return _this;
    }
    QueryData.prototype.execute = function () {
        this.refreshClient();
        var _a = this.getOptions(), skip = _a.skip, query = _a.query;
        if (skip || query !== this.previous.query) {
            this.removeQuerySubscription();
            this.removeObservable(!skip);
            this.previous.query = query;
        }
        this.updateObservableQuery();
        return this.getExecuteSsrResult() || this.getExecuteResult();
    };
    QueryData.prototype.executeLazy = function () {
        return !this.runLazy
            ? [
                this.runLazyQuery,
                {
                    loading: false,
                    networkStatus: NetworkStatus.ready,
                    called: false,
                    data: undefined
                }
            ]
            : [this.runLazyQuery, this.execute()];
    };
    QueryData.prototype.fetchData = function () {
        var _this = this;
        var options = this.getOptions();
        if (options.skip || options.ssr === false)
            return false;
        return new Promise(function (resolve) { return _this.startQuerySubscription(resolve); });
    };
    QueryData.prototype.afterExecute = function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.lazy, lazy = _c === void 0 ? false : _c;
        this.isMounted = true;
        var options = this.getOptions();
        if (this.currentObservable && !this.ssrInitiated()) {
            this.startQuerySubscription();
        }
        if (!lazy || this.runLazy) {
            this.handleErrorOrCompleted();
        }
        this.previousOptions = options;
        return this.unmount.bind(this);
    };
    QueryData.prototype.cleanup = function () {
        this.removeQuerySubscription();
        this.removeObservable(true);
        delete this.previous.result;
    };
    QueryData.prototype.getOptions = function () {
        var options = _super.prototype.getOptions.call(this);
        if (this.lazyOptions) {
            options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);
            options.context = __assign(__assign({}, options.context), this.lazyOptions.context);
        }
        if (this.runLazy) {
            delete options.skip;
        }
        return options;
    };
    QueryData.prototype.ssrInitiated = function () {
        return this.context && this.context.renderPromises;
    };
    QueryData.prototype.getExecuteSsrResult = function () {
        var _a = this.getOptions(), ssr = _a.ssr, skip = _a.skip;
        var ssrDisabled = ssr === false;
        var fetchDisabled = this.refreshClient().client.disableNetworkFetches;
        var ssrLoading = __assign({ loading: true, networkStatus: NetworkStatus.loading, called: true, data: undefined, stale: false, client: this.client }, this.observableQueryFields());
        if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {
            this.previous.result = ssrLoading;
            return ssrLoading;
        }
        if (this.ssrInitiated()) {
            var result = this.getExecuteResult() || ssrLoading;
            if (result.loading && !skip) {
                this.context.renderPromises.addQueryPromise(this, function () { return null; });
            }
            return result;
        }
    };
    QueryData.prototype.prepareObservableQueryOptions = function () {
        var options = this.getOptions();
        this.verifyDocumentType(options.query, DocumentType.Query);
        var displayName = options.displayName || 'Query';
        if (this.ssrInitiated() &&
            (options.fetchPolicy === 'network-only' ||
                options.fetchPolicy === 'cache-and-network')) {
            options.fetchPolicy = 'cache-first';
        }
        return __assign(__assign({}, options), { displayName: displayName, context: options.context });
    };
    QueryData.prototype.initializeObservableQuery = function () {
        if (this.ssrInitiated()) {
            this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());
        }
        if (!this.currentObservable) {
            var observableQueryOptions = this.prepareObservableQueryOptions();
            this.previous.observableQueryOptions = __assign(__assign({}, observableQueryOptions), { children: void 0 });
            this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));
            if (this.ssrInitiated()) {
                this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);
            }
        }
    };
    QueryData.prototype.updateObservableQuery = function () {
        if (!this.currentObservable) {
            this.initializeObservableQuery();
            return;
        }
        var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), { children: void 0 });
        if (this.getOptions().skip) {
            this.previous.observableQueryOptions = newObservableQueryOptions;
            return;
        }
        if (!equal$1(newObservableQueryOptions, this.previous.observableQueryOptions)) {
            this.previous.observableQueryOptions = newObservableQueryOptions;
            this.currentObservable
                .setOptions(newObservableQueryOptions)
                .catch(function () { });
        }
    };
    QueryData.prototype.startQuerySubscription = function (onNewData) {
        var _this = this;
        if (onNewData === void 0) { onNewData = this.onNewData; }
        if (this.currentSubscription || this.getOptions().skip)
            return;
        this.currentSubscription = this.currentObservable.subscribe({
            next: function (_a) {
                var loading = _a.loading, networkStatus = _a.networkStatus, data = _a.data;
                var previousResult = _this.previous.result;
                if (previousResult &&
                    previousResult.loading === loading &&
                    previousResult.networkStatus === networkStatus &&
                    equal$1(previousResult.data, data)) {
                    return;
                }
                onNewData();
            },
            error: function (error) {
                _this.resubscribeToQuery();
                if (!error.hasOwnProperty('graphQLErrors'))
                    throw error;
                var previousResult = _this.previous.result;
                if ((previousResult && previousResult.loading) ||
                    !equal$1(error, _this.previous.error)) {
                    _this.previous.error = error;
                    onNewData();
                }
            }
        });
    };
    QueryData.prototype.resubscribeToQuery = function () {
        this.removeQuerySubscription();
        var currentObservable = this.currentObservable;
        if (currentObservable) {
            var last = currentObservable["last"];
            try {
                currentObservable.resetLastResults();
                this.startQuerySubscription();
            }
            finally {
                currentObservable["last"] = last;
            }
        }
    };
    QueryData.prototype.getExecuteResult = function () {
        var result = this.observableQueryFields();
        var options = this.getOptions();
        if (options.skip) {
            result = __assign(__assign({}, result), { data: undefined, error: undefined, loading: false, networkStatus: NetworkStatus.ready, called: true });
        }
        else if (this.currentObservable) {
            var currentResult = this.currentObservable.getCurrentResult();
            var data = currentResult.data, loading = currentResult.loading, partial = currentResult.partial, networkStatus = currentResult.networkStatus, errors = currentResult.errors;
            var error = currentResult.error;
            if (errors && errors.length > 0) {
                error = new ApolloError({ graphQLErrors: errors });
            }
            result = __assign(__assign({}, result), { data: data, loading: loading, networkStatus: networkStatus, error: error, called: true });
            if (loading) ;
            else if (error) {
                Object.assign(result, {
                    data: (this.currentObservable.getLastResult() || {})
                        .data
                });
            }
            else {
                var fetchPolicy = this.currentObservable.options.fetchPolicy;
                var partialRefetch = options.partialRefetch;
                if (partialRefetch &&
                    partial &&
                    (!data || Object.keys(data).length === 0) &&
                    fetchPolicy !== 'cache-only') {
                    Object.assign(result, {
                        loading: true,
                        networkStatus: NetworkStatus.loading
                    });
                    result.refetch();
                    return result;
                }
            }
        }
        result.client = this.client;
        this.setOptions(options, true);
        var previousResult = this.previous.result;
        this.previous.loading =
            previousResult && previousResult.loading || false;
        result.previousData = previousResult &&
            (previousResult.data || previousResult.previousData);
        this.previous.result = result;
        this.currentObservable && this.currentObservable.resetQueryStoreErrors();
        return result;
    };
    QueryData.prototype.handleErrorOrCompleted = function () {
        if (!this.currentObservable || !this.previous.result)
            return;
        var _a = this.previous.result, data = _a.data, loading = _a.loading, error = _a.error;
        if (!loading) {
            var _b = this.getOptions(), query = _b.query, variables = _b.variables, onCompleted = _b.onCompleted, onError = _b.onError, skip = _b.skip;
            if (this.previousOptions &&
                !this.previous.loading &&
                equal$1(this.previousOptions.query, query) &&
                equal$1(this.previousOptions.variables, variables)) {
                return;
            }
            if (onCompleted && !error && !skip) {
                onCompleted(data);
            }
            else if (onError && error) {
                onError(error);
            }
        }
    };
    QueryData.prototype.removeQuerySubscription = function () {
        if (this.currentSubscription) {
            this.currentSubscription.unsubscribe();
            delete this.currentSubscription;
        }
    };
    QueryData.prototype.removeObservable = function (andDelete) {
        if (this.currentObservable) {
            this.currentObservable["tearDownQuery"]();
            if (andDelete) {
                delete this.currentObservable;
            }
        }
    };
    QueryData.prototype.observableQueryFields = function () {
        var _a;
        return {
            variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,
            refetch: this.obsRefetch,
            fetchMore: this.obsFetchMore,
            updateQuery: this.obsUpdateQuery,
            startPolling: this.obsStartPolling,
            stopPolling: this.obsStopPolling,
            subscribeToMore: this.obsSubscribeToMore
        };
    };
    return QueryData;
}(OperationData));

function useDeepMemo(memoFn, key) {
    var ref = React.useRef();
    if (!ref.current || !equal$1(key, ref.current.key)) {
        ref.current = { key: key, value: memoFn() };
    }
    return ref.current.value;
}

function useAfterFastRefresh(effectFn) {
    if (__DEV__) {
        var didRefresh_1 = React.useRef(false);
        React.useEffect(function () {
            return function () {
                didRefresh_1.current = true;
            };
        }, []);
        React.useEffect(function () {
            if (didRefresh_1.current === true) {
                didRefresh_1.current = false;
                effectFn();
            }
        }, []);
    }
}

function useBaseQuery(query, options, lazy) {
    if (lazy === void 0) { lazy = false; }
    var context = React.useContext(getApolloContext());
    var _a = React.useReducer(function (x) { return x + 1; }, 0), tick = _a[0], forceUpdate = _a[1];
    var updatedOptions = options ? __assign(__assign({}, options), { query: query }) : { query: query };
    var queryDataRef = React.useRef();
    var queryData = queryDataRef.current || (queryDataRef.current = new QueryData({
        options: updatedOptions,
        context: context,
        onNewData: function () {
            if (!queryData.ssrInitiated()) {
                Promise.resolve().then(function () { return queryDataRef.current && queryDataRef.current.isMounted && forceUpdate(); });
            }
            else {
                forceUpdate();
            }
        }
    }));
    queryData.setOptions(updatedOptions);
    queryData.context = context;
    var memo = {
        options: __assign(__assign({}, updatedOptions), { onError: void 0, onCompleted: void 0 }),
        context: context,
        tick: tick
    };
    var result = useDeepMemo(function () { return (lazy ? queryData.executeLazy() : queryData.execute()); }, memo);
    var queryResult = lazy
        ? result[1]
        : result;
    if (__DEV__) {
        useAfterFastRefresh(forceUpdate);
    }
    React.useEffect(function () {
        return function () {
            queryData.cleanup();
            queryDataRef.current = void 0;
        };
    }, []);
    React.useEffect(function () { return queryData.afterExecute({ lazy: lazy }); }, [
        queryResult.loading,
        queryResult.networkStatus,
        queryResult.error,
        queryResult.data,
        queryData.currentObservable,
    ]);
    return result;
}

function useMutation(mutation, options) {
    var context = React.useContext(getApolloContext());
    var _a = React.useState({ called: false, loading: false }), result = _a[0], setResult = _a[1];
    var updatedOptions = options ? __assign(__assign({}, options), { mutation: mutation }) : { mutation: mutation };
    var mutationDataRef = React.useRef();
    function getMutationDataRef() {
        if (!mutationDataRef.current) {
            mutationDataRef.current = new MutationData({
                options: updatedOptions,
                context: context,
                result: result,
                setResult: setResult
            });
        }
        return mutationDataRef.current;
    }
    var mutationData = getMutationDataRef();
    mutationData.setOptions(updatedOptions);
    mutationData.context = context;
    React.useEffect(function () { return mutationData.afterExecute(); });
    return mutationData.execute(result);
}

function useQuery(query, options) {
    return useBaseQuery(query, options, false);
}

function Query(props) {
    var children = props.children, query = props.query, options = __rest(props, ["children", "query"]);
    var result = useQuery(query, options);
    return result ? children(result) : null;
}
Query.propTypes = {
    client: propTypes$1.exports.object,
    children: propTypes$1.exports.func.isRequired,
    fetchPolicy: propTypes$1.exports.string,
    notifyOnNetworkStatusChange: propTypes$1.exports.bool,
    onCompleted: propTypes$1.exports.func,
    onError: propTypes$1.exports.func,
    pollInterval: propTypes$1.exports.number,
    query: propTypes$1.exports.object.isRequired,
    variables: propTypes$1.exports.object,
    ssr: propTypes$1.exports.bool,
    partialRefetch: propTypes$1.exports.bool,
    returnPartialData: propTypes$1.exports.bool
};

function Mutation(props) {
    var _a = useMutation(props.mutation, props), runMutation = _a[0], result = _a[1];
    return props.children ? props.children(runMutation, result) : null;
}
Mutation.propTypes = {
    mutation: propTypes$1.exports.object.isRequired,
    variables: propTypes$1.exports.object,
    optimisticResponse: propTypes$1.exports.oneOfType([propTypes$1.exports.object, propTypes$1.exports.func]),
    refetchQueries: propTypes$1.exports.oneOfType([
        propTypes$1.exports.arrayOf(propTypes$1.exports.oneOfType([propTypes$1.exports.string, propTypes$1.exports.object])),
        propTypes$1.exports.func
    ]),
    awaitRefetchQueries: propTypes$1.exports.bool,
    update: propTypes$1.exports.func,
    children: propTypes$1.exports.func.isRequired,
    onCompleted: propTypes$1.exports.func,
    onError: propTypes$1.exports.func,
    fetchPolicy: propTypes$1.exports.string,
};

var Loading = function Loading() {
  return /*#__PURE__*/React__default['default'].createElement("svg", {
    version: "1.1",
    id: "Layer_1",
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    width: "24px",
    height: "30px",
    viewBox: "0 0 24 30",
    style: {
      enableBackground: 'new 0 0 50 50'
    },
    xmlSpace: "preserve"
  }, /*#__PURE__*/React__default['default'].createElement("rect", {
    x: "0",
    y: "10",
    width: "4",
    height: "10",
    fill: "#333",
    opacity: "0.2"
  }, /*#__PURE__*/React__default['default'].createElement("animate", {
    attributeName: "opacity",
    attributeType: "XML",
    values: "0.2; 1; .2",
    begin: "0s",
    dur: "0.6s",
    repeatCount: "indefinite"
  }), /*#__PURE__*/React__default['default'].createElement("animate", {
    attributeName: "height",
    attributeType: "XML",
    values: "10; 20; 10",
    begin: "0s",
    dur: "0.6s",
    repeatCount: "indefinite"
  }), /*#__PURE__*/React__default['default'].createElement("animate", {
    attributeName: "y",
    attributeType: "XML",
    values: "10; 5; 10",
    begin: "0s",
    dur: "0.6s",
    repeatCount: "indefinite"
  })), /*#__PURE__*/React__default['default'].createElement("rect", {
    x: "8",
    y: "10",
    width: "4",
    height: "10",
    fill: "#333",
    opacity: "0.2"
  }, /*#__PURE__*/React__default['default'].createElement("animate", {
    attributeName: "opacity",
    attributeType: "XML",
    values: "0.2; 1; .2",
    begin: "0.15s",
    dur: "0.6s",
    repeatCount: "indefinite"
  }), /*#__PURE__*/React__default['default'].createElement("animate", {
    attributeName: "height",
    attributeType: "XML",
    values: "10; 20; 10",
    begin: "0.15s",
    dur: "0.6s",
    repeatCount: "indefinite"
  }), /*#__PURE__*/React__default['default'].createElement("animate", {
    attributeName: "y",
    attributeType: "XML",
    values: "10; 5; 10",
    begin: "0.15s",
    dur: "0.6s",
    repeatCount: "indefinite"
  })), /*#__PURE__*/React__default['default'].createElement("rect", {
    x: "16",
    y: "10",
    width: "4",
    height: "10",
    fill: "#333",
    opacity: "0.2"
  }, /*#__PURE__*/React__default['default'].createElement("animate", {
    attributeName: "opacity",
    attributeType: "XML",
    values: "0.2; 1; .2",
    begin: "0.3s",
    dur: "0.6s",
    repeatCount: "indefinite"
  }), /*#__PURE__*/React__default['default'].createElement("animate", {
    attributeName: "height",
    attributeType: "XML",
    values: "10; 20; 10",
    begin: "0.3s",
    dur: "0.6s",
    repeatCount: "indefinite"
  }), /*#__PURE__*/React__default['default'].createElement("animate", {
    attributeName: "y",
    attributeType: "XML",
    values: "10; 5; 10",
    begin: "0.3s",
    dur: "0.6s",
    repeatCount: "indefinite"
  })));
};

var _templateObject$5, _templateObject2$1, _templateObject3$1, _templateObject4;
var PORTAL_QUERY = gql(_templateObject$5 || (_templateObject$5 = _taggedTemplateLiteral(["\n  query PortalSiteQuery($id: ID!) {\n    PortalSite(id: $id) {\n      portal_code\n      options\n      countries {\n        id\n        name\n      }\n      regions {\n        id\n        name\n        country_id\n      }\n      cities {\n        id\n        name\n        region\n        country_id\n      }\n      extra_search\n      max_bathrooms\n      max_bedrooms\n      max_nights\n      max_persons\n      max_weekprice\n      country_placeholder\n      categories\n      countries_label\n      country_placeholder\n      regions_label\n      cities_label\n      arrival_date_label\n      departure_date_label\n      max_weekprice_label\n      persons_min_label\n      persons_max_label\n      bedrooms_min_label\n      bathrooms_min_label\n      weekprice_max_label\n      no_nights_label\n      extra_search_label\n      properties_label\n    }\n  }\n"])));
var CALENDAR_QUERY$1 = gql(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteral(["\n         query PortalSiteHousesQuery(\n           $id: ID!\n           $house_id: String!\n           $starts_at: Date!\n           $ends_at: Date!\n         ) {\n           PortalSite(id: $id) {\n             houses(house_code: $house_id) {\n               id\n               name\n               last_minute_days\n               availabilities(starts_at: $starts_at, ends_at: $ends_at) {\n                 arrival\n                 arrival_time_from\n                 arrival_time_to\n                 date\n                 departure\n                 departure_time\n                 max_nights\n                 min_nights\n                 special_offer\n               }\n             }\n           }\n           Discounts(\n             house_code: $house_id\n             discount_starts_at: $ends_at\n             discount_ends_at: $starts_at\n             active_today: true\n           ) {\n             name\n             discount_starts_at\n             discount_ends_at\n           }\n         }\n       "])));
var BOOKING_PRICE_QUERY = gql(_templateObject3$1 || (_templateObject3$1 = _taggedTemplateLiteral(["\n  query BookingPriceQuery(\n    $id: ID!\n    $house_id: String!\n    $starts_at: Date!\n    $ends_at: Date!\n  ) {\n    PortalSite(id: $id) {\n      options\n      first_name_label\n      preposition_label\n      last_name_label\n      email_label\n      zipcode_label\n      city_label\n      address_label\n      house_number_label\n      phone_label\n      phone_mobile_label\n      country_label\n      iban_label\n      holder_label\n      bic_label\n      comment_label\n      company_name_label\n      extra_fields_drivers_license_label\n      extra_fields_destination_label\n      booking_fields {\n        id\n        label\n        field_type\n        options\n        placeholder\n      }\n      houses(house_code: $house_id) {\n        id\n        name\n        code\n        allow_option\n        persons\n        image_url\n        discounts\n        discounts_info\n        house_type\n        rental_terms\n        cancel_insurance\n        damage_insurance\n        damage_insurance_required\n        travel_insurance\n        babies_extra\n        booking_price(starts_at: $starts_at, ends_at: $ends_at)\n      }\n    }\n  }\n"])));
var CREATE_BOOKING_MUTATION = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  mutation CreateBooking(\n    $first_name: String!\n    $preposition: String\n    $last_name: String!\n    $company_name: String\n    $is_option: Boolean!\n    $address: String\n    $house_number: String\n    $zipcode: String\n    $city: String\n    $phone: String\n    $phone_mobile: String\n    $iban: String\n    $bic: String\n    $holder: String\n    $email: String!\n    $house_code: String!\n    $portal_code: String\n    $language: String\n    $country: String!\n    $adults: Int!\n    $children: Int\n    $babies: Int\n    $discount: Int\n    $damage_insurance: Int\n    $cancel_insurance: Int\n    $travel_insurance: Int\n    $discount_reason: String\n    $discount_code: String\n    $comment: String\n    $arrival_date: String!\n    $departure_date: String!\n    $costs: Json\n    $extra_fields: String\n  ) {\n    createBooking(\n      first_name: $first_name\n      preposition: $preposition\n      company_name: $company_name\n      last_name: $last_name\n      is_option: $is_option\n      address: $address\n      house_number: $house_number\n      zipcode: $zipcode\n      city: $city\n      phone: $phone\n      phone_mobile: $phone_mobile\n      iban: $iban\n      bic: $bic\n      holder: $holder\n      email: $email\n      house_code: $house_code\n      portal_code: $portal_code\n      language: $language\n      country: $country\n      adults: $adults\n      children: $children\n      babies: $babies\n      discount: $discount\n      discount_code: $discount_code\n      damage_insurance: $damage_insurance\n      cancel_insurance: $cancel_insurance\n      travel_insurance: $travel_insurance\n      discount_reason: $discount_reason\n      arrival_date: $arrival_date\n      departure_date: $departure_date\n      comment: $comment\n      costs: $costs\n      extra_fields: $extra_fields\n    ) {\n      booking_nr\n    }\n  }\n"])));

var entry$1 = {};

var DatePicker$1 = {};

var entry = {};

Object.defineProperty(entry, "__esModule", {
  value: true
});
entry.default = entry.focusEvents = entry.keyboardEvents = entry.touchEvents = entry.mouseEvents = void 0;
// As defined on the list of supported mouse events: https://reactjs.org/docs/events.html#mouse-events
var mouseEvents = ['onClick', 'onContextMenu', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp']; // As defined on the list of supported touch events: https://reactjs.org/docs/events.html#touch-events

entry.mouseEvents = mouseEvents;
var touchEvents = ['onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart']; // As defined on the list of supported keyboard events: https://reactjs.org/docs/events.html#keyboard-events

entry.touchEvents = touchEvents;
var keyboardEvents = ['onKeyDown', 'onKeyPress', 'onKeyUp']; // As defined on the list of supported keyboard events: https://reactjs.org/docs/events.html#focus-events

entry.keyboardEvents = keyboardEvents;
var focusEvents = ['onFocus', 'onBlur'];
/**
 * Returns an object with on-event callback props curried with provided args.
 * @param {Object} props Props passed to a component.
 * @param {Function=} getArgs A function that returns argument(s) on-event callbacks
 *   shall be curried with.
 */

entry.focusEvents = focusEvents;

var makeEventProps = function makeEventProps(props, getArgs) {
  var eventProps = {};
  [].concat(mouseEvents, touchEvents, keyboardEvents, focusEvents).forEach(function (eventName) {
    if (props[eventName]) {
      eventProps[eventName] = function (event) {
        return getArgs ? props[eventName](event, getArgs(eventName)) : props[eventName](event);
      };
    }
  });
  return eventProps;
};

var _default = makeEventProps;
entry.default = _default;

function mergeClassNames() {
  return Array.prototype.slice.call(arguments).reduce(function (classList, arg) {
    return typeof arg === 'string' || Array.isArray(arg) ? classList.concat(arg) : classList;
  }, []).filter(Boolean).join(' ');
}

var esm$5 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': mergeClassNames
});

var require$$3$1 = /*@__PURE__*/getAugmentedNamespace(esm$5);

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT$1 = 'Expected a function';

/** Used as references for various `Number` constants. */
var INFINITY$2 = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308,
    NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag$3 = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Used for built-in method references. */
var objectProto$e = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$1 = objectProto$e.toString;

/**
 * Creates a function that invokes `func`, with the `this` binding and arguments
 * of the created function, while it's called less than `n` times. Subsequent
 * calls to the created function return the result of the last `func` invocation.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {number} n The number of calls at which `func` is no longer invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * jQuery(element).on('click', _.before(5, addContactToList));
 * // => Allows adding up to 4 contacts to the list.
 */
function before(n, func) {
  var result;
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  n = toInteger(n);
  return function() {
    if (--n > 0) {
      result = func.apply(this, arguments);
    }
    if (n <= 1) {
      func = undefined;
    }
    return result;
  };
}

/**
 * Creates a function that is restricted to invoking `func` once. Repeat calls
 * to the function return the value of the first invocation. The `func` is
 * invoked with the `this` binding and arguments of the created function.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var initialize = _.once(createApplication);
 * initialize();
 * initialize();
 * // => `createApplication` is invoked once
 */
function once(func) {
  return before(2, func);
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$3(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike$1(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$3(value) {
  return typeof value == 'symbol' ||
    (isObjectLike$1(value) && objectToString$1.call(value) == symbolTag$3);
}

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY$2 || value === -INFINITY$2) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol$3(value)) {
    return NAN;
  }
  if (isObject$3(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject$3(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

var lodash_once = once;

var once$1 = lodash_once;

function filterDuplicates(arr) {
  return arr.filter(function (el, index, self) {
    return self.indexOf(el) === index;
  });
}

function fixLowercaseProperties(arr) {
  return arr.map(function (el) {
    if (!el || el.indexOf('-') === -1 || el.toLowerCase() !== el) {
      return el;
    }

    var splitEl = el.split('-');
    return "".concat(splitEl[0], "-").concat(splitEl[1].toUpperCase());
  });
}

function getUserLocalesInternal() {
  var languageList = [];

  if (typeof window !== 'undefined') {
    if (window.navigator.languages) {
      languageList = languageList.concat(window.navigator.languages);
    }

    if (window.navigator.language) {
      languageList.push(window.navigator.language);
    }

    if (window.navigator.userLanguage) {
      languageList.push(window.navigator.userLanguage);
    }

    if (window.navigator.browserLanguage) {
      languageList.push(window.navigator.browserLanguage);
    }

    if (window.navigator.systemLanguage) {
      languageList.push(window.navigator.systemLanguage);
    }
  }

  languageList.push('en-US'); // Fallback

  return fixLowercaseProperties(filterDuplicates(languageList));
}

var getUserLocales = once$1(getUserLocalesInternal);

function getUserLocaleInternal() {
  return getUserLocales()[0];
}

var getUserLocale = once$1(getUserLocaleInternal);

var esm$4 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getUserLocales: getUserLocales,
  getUserLocale: getUserLocale,
  'default': getUserLocale
});

/**
 * Utils
 */
function makeGetEdgeOfNeighbor(getPeriod, getEdgeOfPeriod, defaultOffset) {
  return function makeGetEdgeOfNeighborInternal(date) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOffset;
    var previousPeriod = getPeriod(date) + offset;
    return getEdgeOfPeriod(previousPeriod);
  };
}

function makeGetEnd(getBeginOfNextPeriod) {
  return function makeGetEndInternal(date) {
    return new Date(getBeginOfNextPeriod(date).getTime() - 1);
  };
}

function makeGetRange(functions) {
  return function makeGetRangeInternal(date) {
    return functions.map(function (fn) {
      return fn(date);
    });
  };
}
/**
 * Simple getters - getting a property of a given point in time
 */

/**
 * Gets year from date.
 *
 * @param {Date|number|string} date Date to get year from.
 */


function getYear$1(date) {
  if (date instanceof Date) {
    return date.getFullYear();
  }

  if (typeof date === 'number') {
    return date;
  }

  var year = parseInt(date, 10);

  if (typeof date === 'string' && !isNaN(year)) {
    return year;
  }

  throw new Error("Failed to get year from date: ".concat(date, "."));
}
/**
 * Gets month from date.
 *
 * @param {Date} date Date to get month from.
 */

function getMonth$1(date) {
  if (date instanceof Date) {
    return date.getMonth();
  }

  throw new Error("Failed to get month from date: ".concat(date, "."));
}
/**
 * Gets human-readable month from date.
 *
 * @param {Date} date Date to get human-readable month from.
 */

function getMonthHuman(date) {
  if (date instanceof Date) {
    return date.getMonth() + 1;
  }

  throw new Error("Failed to get human-readable month from date: ".concat(date, "."));
}
/**
 * Gets human-readable day of the month from date.
 *
 * @param {Date} date Date to get day of the month from.
 */

function getDate$1(date) {
  if (date instanceof Date) {
    return date.getDate();
  }

  throw new Error("Failed to get year from date: ".concat(date, "."));
}
/**
 * Gets hours from date.
 *
 * @param {Date|string} date Date to get hours from.
 */

function getHours$1(date) {
  if (date instanceof Date) {
    return date.getHours();
  }

  if (typeof date === 'string') {
    var datePieces = date.split(':');

    if (datePieces.length >= 2) {
      var hoursString = datePieces[0];
      var hours = parseInt(hoursString, 10);

      if (!isNaN(hours)) {
        return hours;
      }
    }
  }

  throw new Error("Failed to get hours from date: ".concat(date, "."));
}
/**
 * Gets minutes from date.
 *
 * @param {Date|string} date Date to get minutes from.
 */

function getMinutes$1(date) {
  if (date instanceof Date) {
    return date.getMinutes();
  }

  if (typeof date === 'string') {
    var datePieces = date.split(':');

    if (datePieces.length >= 2) {
      var minutesString = datePieces[1] || 0;
      var minutes = parseInt(minutesString, 10);

      if (!isNaN(minutes)) {
        return minutes;
      }
    }
  }

  throw new Error("Failed to get minutes from date: ".concat(date, "."));
}
/**
 * Gets seconds from date.
 *
 * @param {Date|string} date Date to get seconds from.
 */

function getSeconds$1(date) {
  if (date instanceof Date) {
    return date.getSeconds();
  }

  if (typeof date === 'string') {
    var datePieces = date.split(':');

    if (datePieces.length >= 2) {
      var secondsString = datePieces[2] || 0;
      var seconds = parseInt(secondsString, 10);

      if (!isNaN(seconds)) {
        return seconds;
      }
    }
  }

  throw new Error("Failed to get seconds from date: ".concat(date, "."));
}
/**
 * Century
 */

function getCenturyStart(date) {
  var year = getYear$1(date);
  var centuryStartYear = year + (-year + 1) % 100;
  var centuryStartDate = new Date();
  centuryStartDate.setFullYear(centuryStartYear, 0, 1);
  centuryStartDate.setHours(0, 0, 0, 0);
  return centuryStartDate;
}
var getPreviousCenturyStart = makeGetEdgeOfNeighbor(getYear$1, getCenturyStart, -100);
var getNextCenturyStart = makeGetEdgeOfNeighbor(getYear$1, getCenturyStart, 100);
var getCenturyEnd = makeGetEnd(getNextCenturyStart);
var getPreviousCenturyEnd = makeGetEdgeOfNeighbor(getYear$1, getCenturyEnd, -100);
var getNextCenturyEnd = makeGetEdgeOfNeighbor(getYear$1, getCenturyEnd, 100);
var getCenturyRange = makeGetRange([getCenturyStart, getCenturyEnd]);
/**
 * Decade
 */

function getDecadeStart(date) {
  var year = getYear$1(date);
  var decadeStartYear = year + (-year + 1) % 10;
  var decadeStartDate = new Date();
  decadeStartDate.setFullYear(decadeStartYear, 0, 1);
  decadeStartDate.setHours(0, 0, 0, 0);
  return decadeStartDate;
}
var getPreviousDecadeStart = makeGetEdgeOfNeighbor(getYear$1, getDecadeStart, -10);
var getNextDecadeStart = makeGetEdgeOfNeighbor(getYear$1, getDecadeStart, 10);
var getDecadeEnd = makeGetEnd(getNextDecadeStart);
var getPreviousDecadeEnd = makeGetEdgeOfNeighbor(getYear$1, getDecadeEnd, -10);
var getNextDecadeEnd = makeGetEdgeOfNeighbor(getYear$1, getDecadeEnd, 10);
var getDecadeRange = makeGetRange([getDecadeStart, getDecadeEnd]);
/**
 * Year
 */

function getYearStart(date) {
  var year = getYear$1(date);
  var yearStartDate = new Date();
  yearStartDate.setFullYear(year, 0, 1);
  yearStartDate.setHours(0, 0, 0, 0);
  return yearStartDate;
}
var getPreviousYearStart = makeGetEdgeOfNeighbor(getYear$1, getYearStart, -1);
var getNextYearStart = makeGetEdgeOfNeighbor(getYear$1, getYearStart, 1);
var getYearEnd = makeGetEnd(getNextYearStart);
var getPreviousYearEnd = makeGetEdgeOfNeighbor(getYear$1, getYearEnd, -1);
var getNextYearEnd = makeGetEdgeOfNeighbor(getYear$1, getYearEnd, 1);
var getYearRange = makeGetRange([getYearStart, getYearEnd]);
/**
 * Month
 */

function makeGetEdgeOfNeighborMonth(getEdgeOfPeriod, defaultOffset) {
  return function makeGetEdgeOfNeighborMonthInternal(date) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOffset;
    var year = getYear$1(date);
    var month = getMonth$1(date) + offset;
    var previousPeriod = new Date();
    previousPeriod.setFullYear(year, month, 1);
    previousPeriod.setHours(0, 0, 0, 0);
    return getEdgeOfPeriod(previousPeriod);
  };
}

function getMonthStart(date) {
  var year = getYear$1(date);
  var month = getMonth$1(date);
  var monthStartDate = new Date();
  monthStartDate.setFullYear(year, month, 1);
  monthStartDate.setHours(0, 0, 0, 0);
  return monthStartDate;
}
var getPreviousMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, -1);
var getNextMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, 1);
var getMonthEnd = makeGetEnd(getNextMonthStart);
var getPreviousMonthEnd = makeGetEdgeOfNeighborMonth(getMonthEnd, -1);
var getNextMonthEnd = makeGetEdgeOfNeighborMonth(getMonthEnd, 1);
var getMonthRange = makeGetRange([getMonthStart, getMonthEnd]);
/**
 * Day
 */

function makeGetEdgeOfNeighborDay(getEdgeOfPeriod, defaultOffset) {
  return function makeGetEdgeOfNeighborDayInternal(date) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOffset;
    var year = getYear$1(date);
    var month = getMonth$1(date);
    var day = getDate$1(date) + offset;
    var previousPeriod = new Date();
    previousPeriod.setFullYear(year, month, day);
    previousPeriod.setHours(0, 0, 0, 0);
    return getEdgeOfPeriod(previousPeriod);
  };
}

function getDayStart(date) {
  var year = getYear$1(date);
  var month = getMonth$1(date);
  var day = getDate$1(date);
  var dayStartDate = new Date();
  dayStartDate.setFullYear(year, month, day);
  dayStartDate.setHours(0, 0, 0, 0);
  return dayStartDate;
}
var getPreviousDayStart = makeGetEdgeOfNeighborDay(getDayStart, -1);
var getNextDayStart = makeGetEdgeOfNeighborDay(getDayStart, 1);
var getDayEnd = makeGetEnd(getNextDayStart);
var getPreviousDayEnd = makeGetEdgeOfNeighborDay(getDayEnd, -1);
var getNextDayEnd = makeGetEdgeOfNeighborDay(getDayEnd, 1);
var getDayRange = makeGetRange([getDayStart, getDayEnd]);
/**
 * Other
 */

/**
 * Returns a number of days in a month of a given date.
 *
 * @param {Date} date Date.
 */

function getDaysInMonth$3(date) {
  return getDate$1(getMonthEnd(date));
}

function padStart(num) {
  var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var numStr = "".concat(num);

  if (numStr.length >= val) {
    return num;
  }

  return "0000".concat(numStr).slice(-val);
}
/**
 * Returns local hours and minutes (hh:mm).
 */


function getHoursMinutes(date) {
  var hours = padStart(getHours$1(date));
  var minutes = padStart(getMinutes$1(date));
  return "".concat(hours, ":").concat(minutes);
}
/**
 * Returns local hours, minutes and seconds (hh:mm:ss).
 */

function getHoursMinutesSeconds(date) {
  var hours = padStart(getHours$1(date));
  var minutes = padStart(getMinutes$1(date));
  var seconds = padStart(getSeconds$1(date));
  return "".concat(hours, ":").concat(minutes, ":").concat(seconds);
}
/**
 * Returns local month in ISO-like format (YYYY-MM).
 */

function getISOLocalMonth(date) {
  var year = padStart(getYear$1(date), 4);
  var month = padStart(getMonthHuman(date));
  return "".concat(year, "-").concat(month);
}
/**
 * Returns local date in ISO-like format (YYYY-MM-DD).
 */

function getISOLocalDate(date) {
  var year = padStart(getYear$1(date), 4);
  var month = padStart(getMonthHuman(date));
  var day = padStart(getDate$1(date));
  return "".concat(year, "-").concat(month, "-").concat(day);
}
/**
 * Returns local date & time in ISO-like format (YYYY-MM-DDThh:mm:ss).
 */

function getISOLocalDateTime(date) {
  return "".concat(getISOLocalDate(date), "T").concat(getHoursMinutesSeconds(date));
}

var esm$3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getYear: getYear$1,
  getMonth: getMonth$1,
  getMonthHuman: getMonthHuman,
  getDate: getDate$1,
  getHours: getHours$1,
  getMinutes: getMinutes$1,
  getSeconds: getSeconds$1,
  getCenturyStart: getCenturyStart,
  getPreviousCenturyStart: getPreviousCenturyStart,
  getNextCenturyStart: getNextCenturyStart,
  getCenturyEnd: getCenturyEnd,
  getPreviousCenturyEnd: getPreviousCenturyEnd,
  getNextCenturyEnd: getNextCenturyEnd,
  getCenturyRange: getCenturyRange,
  getDecadeStart: getDecadeStart,
  getPreviousDecadeStart: getPreviousDecadeStart,
  getNextDecadeStart: getNextDecadeStart,
  getDecadeEnd: getDecadeEnd,
  getPreviousDecadeEnd: getPreviousDecadeEnd,
  getNextDecadeEnd: getNextDecadeEnd,
  getDecadeRange: getDecadeRange,
  getYearStart: getYearStart,
  getPreviousYearStart: getPreviousYearStart,
  getNextYearStart: getNextYearStart,
  getYearEnd: getYearEnd,
  getPreviousYearEnd: getPreviousYearEnd,
  getNextYearEnd: getNextYearEnd,
  getYearRange: getYearRange,
  getMonthStart: getMonthStart,
  getPreviousMonthStart: getPreviousMonthStart,
  getNextMonthStart: getNextMonthStart,
  getMonthEnd: getMonthEnd,
  getPreviousMonthEnd: getPreviousMonthEnd,
  getNextMonthEnd: getNextMonthEnd,
  getMonthRange: getMonthRange,
  getDayStart: getDayStart,
  getPreviousDayStart: getPreviousDayStart,
  getNextDayStart: getNextDayStart,
  getDayEnd: getDayEnd,
  getPreviousDayEnd: getPreviousDayEnd,
  getNextDayEnd: getNextDayEnd,
  getDayRange: getDayRange,
  getDaysInMonth: getDaysInMonth$3,
  getHoursMinutes: getHoursMinutes,
  getHoursMinutesSeconds: getHoursMinutesSeconds,
  getISOLocalMonth: getISOLocalMonth,
  getISOLocalDate: getISOLocalDate,
  getISOLocalDateTime: getISOLocalDateTime
});

var _CALENDAR_TYPE_LOCALE;

function _toConsumableArray$4(arr) { return _arrayWithoutHoles$4(arr) || _iterableToArray$4(arr) || _unsupportedIterableToArray$4(arr) || _nonIterableSpread$4(); }

function _nonIterableSpread$4() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray$4(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$4(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen); }

function _iterableToArray$4(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles$4(arr) { if (Array.isArray(arr)) return _arrayLikeToArray$4(arr); }

function _arrayLikeToArray$4(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperty$d(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CALENDAR_TYPES = {
  ARABIC: 'Arabic',
  HEBREW: 'Hebrew',
  ISO_8601: 'ISO 8601',
  US: 'US'
};
var CALENDAR_TYPE_LOCALES = (_CALENDAR_TYPE_LOCALE = {}, _defineProperty$d(_CALENDAR_TYPE_LOCALE, CALENDAR_TYPES.US, ['en-CA', 'en-US', 'es-AR', 'es-BO', 'es-CL', 'es-CO', 'es-CR', 'es-DO', 'es-EC', 'es-GT', 'es-HN', 'es-MX', 'es-NI', 'es-PA', 'es-PE', 'es-PR', 'es-SV', 'es-VE', 'pt-BR']), _defineProperty$d(_CALENDAR_TYPE_LOCALE, CALENDAR_TYPES.ARABIC, [// ar-LB, ar-MA intentionally missing
'ar', 'ar-AE', 'ar-BH', 'ar-DZ', 'ar-EG', 'ar-IQ', 'ar-JO', 'ar-KW', 'ar-LY', 'ar-OM', 'ar-QA', 'ar-SA', 'ar-SD', 'ar-SY', 'ar-YE', 'dv', 'dv-MV', 'ps', 'ps-AR']), _defineProperty$d(_CALENDAR_TYPE_LOCALE, CALENDAR_TYPES.HEBREW, ['he', 'he-IL']), _CALENDAR_TYPE_LOCALE);
var WEEKDAYS = _toConsumableArray$4(Array(7)).map(function (el, index) {
  return index;
});

function getFormatter$1(options) {
  return function (locale, date) {
    return date.toLocaleString(locale || getUserLocale(), options);
  };
}
/**
 * Changes the hour in a Date to ensure right date formatting even if DST is messed up.
 * Workaround for bug in WebKit and Firefox with historical dates.
 * For more details, see:
 * https://bugs.chromium.org/p/chromium/issues/detail?id=750465
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1385643
 *
 * @param {Date} date Date.
 */


function toSafeHour$1(date) {
  var safeDate = new Date(date);
  return new Date(safeDate.setHours(12));
}

function getSafeFormatter$1(options) {
  return function (locale, date) {
    return getFormatter$1(options)(locale, toSafeHour$1(date));
  };
}
var formatDayOptions = {
  day: 'numeric'
};
var formatLongDateOptions = {
  day: 'numeric',
  month: 'long',
  year: 'numeric'
};
var formatMonthOptions$1 = {
  month: 'long'
};
var formatMonthYearOptions = {
  month: 'long',
  year: 'numeric'
};
var formatShortWeekdayOptions = {
  weekday: 'short'
};
var formatWeekdayOptions = {
  weekday: 'long'
};
var formatYearOptions = {
  year: 'numeric'
};
var formatDay = getSafeFormatter$1(formatDayOptions);
var formatLongDate = getSafeFormatter$1(formatLongDateOptions);
var formatMonth$1 = getSafeFormatter$1(formatMonthOptions$1);
var formatMonthYear = getSafeFormatter$1(formatMonthYearOptions);
var formatShortWeekday = getSafeFormatter$1(formatShortWeekdayOptions);
var formatWeekday = getSafeFormatter$1(formatWeekdayOptions);
var formatYear = getSafeFormatter$1(formatYearOptions);

var SUNDAY = WEEKDAYS[0];
var FRIDAY = WEEKDAYS[5];
var SATURDAY = WEEKDAYS[6];
/* Simple getters - getting a property of a given point in time */

function getDayOfWeek(date) {
  var calendarType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CALENDAR_TYPES.ISO_8601;
  var weekday = date.getDay();

  switch (calendarType) {
    case CALENDAR_TYPES.ISO_8601:
      // Shifts days of the week so that Monday is 0, Sunday is 6
      return (weekday + 6) % 7;

    case CALENDAR_TYPES.ARABIC:
      return (weekday + 1) % 7;

    case CALENDAR_TYPES.HEBREW:
    case CALENDAR_TYPES.US:
      return weekday;

    default:
      throw new Error('Unsupported calendar type.');
  }
}
/**
 * Century
 */

function getBeginOfCenturyYear(date) {
  var beginOfCentury = getCenturyStart(date);
  return getYear$1(beginOfCentury);
}
/**
 * Decade
 */

function getBeginOfDecadeYear(date) {
  var beginOfDecade = getDecadeStart(date);
  return getYear$1(beginOfDecade);
}
/**
 * Week
 */

/**
 * Returns the beginning of a given week.
 *
 * @param {Date} date Date.
 * @param {string} calendarType Calendar type. Can be ISO 8601 or US.
 */

function getBeginOfWeek(date) {
  var calendarType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CALENDAR_TYPES.ISO_8601;
  var year = getYear$1(date);
  var monthIndex = getMonth$1(date);
  var day = date.getDate() - getDayOfWeek(date, calendarType);
  return new Date(year, monthIndex, day);
}
/**
 * Gets week number according to ISO 8601 or US standard.
 * In ISO 8601, Arabic and Hebrew week 1 is the one with January 4.
 * In US calendar week 1 is the one with January 1.
 *
 * @param {Date} date Date.
 * @param {string} calendarType Calendar type. Can be ISO 8601 or US.
 */

function getWeekNumber(date) {
  var calendarType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CALENDAR_TYPES.ISO_8601;
  var calendarTypeForWeekNumber = calendarType === CALENDAR_TYPES.US ? CALENDAR_TYPES.US : CALENDAR_TYPES.ISO_8601;
  var beginOfWeek = getBeginOfWeek(date, calendarTypeForWeekNumber);
  var year = getYear$1(date) + 1;
  var dayInWeekOne;
  var beginOfFirstWeek; // Look for the first week one that does not come after a given date

  do {
    dayInWeekOne = new Date(year, 0, calendarTypeForWeekNumber === CALENDAR_TYPES.ISO_8601 ? 4 : 1);
    beginOfFirstWeek = getBeginOfWeek(dayInWeekOne, calendarTypeForWeekNumber);
    year -= 1;
  } while (date - beginOfFirstWeek < 0);

  return Math.round((beginOfWeek - beginOfFirstWeek) / (8.64e7 * 7)) + 1;
}
/**
 * Others
 */

/**
 * Returns the beginning of a given range.
 *
 * @param {string} rangeType Range type (e.g. 'day')
 * @param {Date} date Date.
 */

function getBegin$1(rangeType, date) {
  switch (rangeType) {
    case 'century':
      return getCenturyStart(date);

    case 'decade':
      return getDecadeStart(date);

    case 'year':
      return getYearStart(date);

    case 'month':
      return getMonthStart(date);

    case 'day':
      return getDayStart(date);

    default:
      throw new Error("Invalid rangeType: ".concat(rangeType));
  }
}
function getBeginPrevious(rangeType, date) {
  switch (rangeType) {
    case 'century':
      return getPreviousCenturyStart(date);

    case 'decade':
      return getPreviousDecadeStart(date);

    case 'year':
      return getPreviousYearStart(date);

    case 'month':
      return getPreviousMonthStart(date);

    default:
      throw new Error("Invalid rangeType: ".concat(rangeType));
  }
}
function getBeginNext(rangeType, date) {
  switch (rangeType) {
    case 'century':
      return getNextCenturyStart(date);

    case 'decade':
      return getNextDecadeStart(date);

    case 'year':
      return getNextYearStart(date);

    case 'month':
      return getNextMonthStart(date);

    default:
      throw new Error("Invalid rangeType: ".concat(rangeType));
  }
}
var getBeginPrevious2 = function getBeginPrevious2(rangeType, date) {
  switch (rangeType) {
    case 'decade':
      return getPreviousDecadeStart(date, -100);

    case 'year':
      return getPreviousYearStart(date, -10);

    case 'month':
      return getPreviousMonthStart(date, -12);

    default:
      throw new Error("Invalid rangeType: ".concat(rangeType));
  }
};
var getBeginNext2 = function getBeginNext2(rangeType, date) {
  switch (rangeType) {
    case 'decade':
      return getNextDecadeStart(date, 100);

    case 'year':
      return getNextYearStart(date, 10);

    case 'month':
      return getNextMonthStart(date, 12);

    default:
      throw new Error("Invalid rangeType: ".concat(rangeType));
  }
};
/**
 * Returns the end of a given range.
 *
 * @param {string} rangeType Range type (e.g. 'day')
 * @param {Date} date Date.
 */

function getEnd$1(rangeType, date) {
  switch (rangeType) {
    case 'century':
      return getCenturyEnd(date);

    case 'decade':
      return getDecadeEnd(date);

    case 'year':
      return getYearEnd(date);

    case 'month':
      return getMonthEnd(date);

    case 'day':
      return getDayEnd(date);

    default:
      throw new Error("Invalid rangeType: ".concat(rangeType));
  }
}
function getEndPrevious(rangeType, date) {
  switch (rangeType) {
    case 'century':
      return getPreviousCenturyEnd(date);

    case 'decade':
      return getPreviousDecadeEnd(date);

    case 'year':
      return getPreviousYearEnd(date);

    case 'month':
      return getPreviousMonthEnd(date);

    default:
      throw new Error("Invalid rangeType: ".concat(rangeType));
  }
}
var getEndPrevious2 = function getEndPrevious2(rangeType, date) {
  switch (rangeType) {
    case 'decade':
      return getPreviousDecadeEnd(date, -100);

    case 'year':
      return getPreviousYearEnd(date, -10);

    case 'month':
      return getPreviousMonthEnd(date, -12);

    default:
      throw new Error("Invalid rangeType: ".concat(rangeType));
  }
};
/**
 * Returns an array with the beginning and the end of a given range.
 *
 * @param {string} rangeType Range type (e.g. 'day')
 * @param {Date} date Date.
 */

function getRange(rangeType, date) {
  switch (rangeType) {
    case 'century':
      return getCenturyRange(date);

    case 'decade':
      return getDecadeRange(date);

    case 'year':
      return getYearRange(date);

    case 'month':
      return getMonthRange(date);

    case 'day':
      return getDayRange(date);

    default:
      throw new Error("Invalid rangeType: ".concat(rangeType));
  }
}
/**
 * Creates a range out of two values, ensuring they are in order and covering entire period ranges.
 *
 * @param {string} rangeType Range type (e.g. 'day')
 * @param {Date} date1 First date.
 * @param {Date} date2 Second date.
 */

function getValueRange(rangeType, date1, date2) {
  var rawNextValue = [date1, date2].sort(function (a, b) {
    return a - b;
  });
  return [getBegin$1(rangeType, rawNextValue[0]), getEnd$1(rangeType, rawNextValue[1])];
}

function toYearLabel(locale) {
  var formatYear$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : formatYear;
  var dates = arguments.length > 2 ? arguments[2] : undefined;
  return dates.map(function (date) {
    return formatYear$1(locale, date);
  }).join(' – ');
}
/**
 * Returns a string labelling a century of a given date.
 * For example, for 2017 it will return 2001-2100.
 *
 * @param {Date|String|Number} date Date or a year as a string or as a number.
 */


function getCenturyLabel(locale, formatYear, date) {
  return toYearLabel(locale, formatYear, getCenturyRange(date));
}
/**
 * Returns a string labelling a century of a given date.
 * For example, for 2017 it will return 2011-2020.
 *
 * @param {Date|String|Number} date Date or a year as a string or as a number.
 */

function getDecadeLabel(locale, formatYear, date) {
  return toYearLabel(locale, formatYear, getDecadeRange(date));
}
/**
 * Returns a boolean determining whether a given date is on Saturday or Sunday.
 *
 * @param {Date} date Date.
 */

function isWeekend$1(date) {
  var calendarType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CALENDAR_TYPES.ISO_8601;
  var weekday = date.getDay();

  switch (calendarType) {
    case CALENDAR_TYPES.ARABIC:
    case CALENDAR_TYPES.HEBREW:
      return weekday === FRIDAY || weekday === SATURDAY;

    case CALENDAR_TYPES.ISO_8601:
    case CALENDAR_TYPES.US:
      return weekday === SATURDAY || weekday === SUNDAY;

    default:
      throw new Error('Unsupported calendar type.');
  }
}

function _typeof$5(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$5 = function _typeof(obj) { return typeof obj; }; } else { _typeof$5 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$5(obj); }
var calendarTypes = Object.values(CALENDAR_TYPES);
var allViews$2 = ['century', 'decade', 'year', 'month'];
var isCalendarType = PropTypes.oneOf(calendarTypes);
var isClassName = PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]);
var isMinDate$1 = function isMinDate(props, propName, componentName) {
  var minDate = props[propName];

  if (!minDate) {
    return null;
  }

  if (!(minDate instanceof Date)) {
    return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof$5(minDate), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
  }

  var maxDate = props.maxDate;

  if (maxDate && minDate > maxDate) {
    return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof$5(minDate), "` supplied to `").concat(componentName, "`, minDate cannot be larger than maxDate."));
  }

  return null;
};
var isMaxDate$1 = function isMaxDate(props, propName, componentName) {
  var maxDate = props[propName];

  if (!maxDate) {
    return null;
  }

  if (!(maxDate instanceof Date)) {
    return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof$5(maxDate), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
  }

  var minDate = props.minDate;

  if (minDate && maxDate < minDate) {
    return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof$5(maxDate), "` supplied to `").concat(componentName, "`, maxDate cannot be smaller than minDate."));
  }

  return null;
};
var isRef$1 = PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
  // eslint-disable-next-line react/forbid-prop-types
  current: PropTypes.any
})]);
var isValue = PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.arrayOf(PropTypes.instanceOf(Date))]);
var isViews = PropTypes.arrayOf(PropTypes.oneOf(allViews$2));
var isView = function isView(props, propName, componentName) {
  var view = props[propName];
  var views = props.views;
  var allowedViews = views || allViews$2;

  if (view !== undefined && allowedViews.indexOf(view) === -1) {
    return new Error("Invalid prop `".concat(propName, "` of value `").concat(view, "` supplied to `").concat(componentName, "`, expected one of [").concat(allowedViews.map(function (a) {
      return "\"".concat(a, "\"");
    }).join(', '), "]."));
  } // Everything is fine


  return null;
};

isView.isRequired = function (props, propName, componentName) {
  var view = props[propName];

  if (!view) {
    return new Error("The prop `".concat(propName, "` is marked as required in `").concat(componentName, "`, but its value is `").concat(view, "`."));
  }

  return isView(props, propName, componentName);
};

var tileGroupProps = {
  activeStartDate: PropTypes.instanceOf(Date).isRequired,
  hover: PropTypes.instanceOf(Date),
  locale: PropTypes.string,
  maxDate: isMaxDate$1,
  minDate: isMinDate$1,
  onClick: PropTypes.func,
  onMouseOver: PropTypes.func,
  tileClassName: PropTypes.oneOfType([PropTypes.func, isClassName]),
  tileContent: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
  value: isValue,
  valueType: PropTypes.string
};
var tileProps = {
  activeStartDate: PropTypes.instanceOf(Date).isRequired,
  classes: PropTypes.arrayOf(PropTypes.string).isRequired,
  date: PropTypes.instanceOf(Date).isRequired,
  locale: PropTypes.string,
  maxDate: isMaxDate$1,
  minDate: isMinDate$1,
  onClick: PropTypes.func,
  onMouseOver: PropTypes.func,
  style: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),
  tileClassName: PropTypes.oneOfType([PropTypes.func, isClassName]),
  tileContent: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
  tileDisabled: PropTypes.func
};

var className$5 = 'react-calendar__navigation';
function Navigation(_ref) {
  var activeStartDate = _ref.activeStartDate,
      drillUp = _ref.drillUp,
      _ref$formatMonthYear = _ref.formatMonthYear,
      formatMonthYear$1 = _ref$formatMonthYear === void 0 ? formatMonthYear : _ref$formatMonthYear,
      _ref$formatYear = _ref.formatYear,
      formatYear$1 = _ref$formatYear === void 0 ? formatYear : _ref$formatYear,
      locale = _ref.locale,
      maxDate = _ref.maxDate,
      minDate = _ref.minDate,
      _ref$navigationAriaLa = _ref.navigationAriaLabel,
      navigationAriaLabel = _ref$navigationAriaLa === void 0 ? '' : _ref$navigationAriaLa,
      navigationLabel = _ref.navigationLabel,
      _ref$next2AriaLabel = _ref.next2AriaLabel,
      next2AriaLabel = _ref$next2AriaLabel === void 0 ? '' : _ref$next2AriaLabel,
      _ref$next2Label = _ref.next2Label,
      next2Label = _ref$next2Label === void 0 ? '»' : _ref$next2Label,
      _ref$nextAriaLabel = _ref.nextAriaLabel,
      nextAriaLabel = _ref$nextAriaLabel === void 0 ? '' : _ref$nextAriaLabel,
      _ref$nextLabel = _ref.nextLabel,
      nextLabel = _ref$nextLabel === void 0 ? '›' : _ref$nextLabel,
      _ref$prev2AriaLabel = _ref.prev2AriaLabel,
      prev2AriaLabel = _ref$prev2AriaLabel === void 0 ? '' : _ref$prev2AriaLabel,
      _ref$prev2Label = _ref.prev2Label,
      prev2Label = _ref$prev2Label === void 0 ? '«' : _ref$prev2Label,
      _ref$prevAriaLabel = _ref.prevAriaLabel,
      prevAriaLabel = _ref$prevAriaLabel === void 0 ? '' : _ref$prevAriaLabel,
      _ref$prevLabel = _ref.prevLabel,
      prevLabel = _ref$prevLabel === void 0 ? '‹' : _ref$prevLabel,
      setActiveStartDate = _ref.setActiveStartDate,
      showDoubleView = _ref.showDoubleView,
      view = _ref.view,
      views = _ref.views;
  var drillUpAvailable = views.indexOf(view) > 0;
  var shouldShowPrevNext2Buttons = view !== 'century';
  var previousActiveStartDate = getBeginPrevious(view, activeStartDate);
  var previousActiveStartDate2 = shouldShowPrevNext2Buttons && getBeginPrevious2(view, activeStartDate);
  var nextActiveStartDate = getBeginNext(view, activeStartDate);
  var nextActiveStartDate2 = shouldShowPrevNext2Buttons && getBeginNext2(view, activeStartDate);

  var prevButtonDisabled = function () {
    if (previousActiveStartDate.getFullYear() < 0) {
      return true;
    }

    var previousActiveEndDate = getEndPrevious(view, activeStartDate);
    return minDate && minDate >= previousActiveEndDate;
  }();

  var prev2ButtonDisabled = shouldShowPrevNext2Buttons && function () {
    if (previousActiveStartDate2.getFullYear() < 0) {
      return true;
    }

    var previousActiveEndDate = getEndPrevious2(view, activeStartDate);
    return minDate && minDate >= previousActiveEndDate;
  }();

  var nextButtonDisabled = maxDate && maxDate <= nextActiveStartDate;
  var next2ButtonDisabled = shouldShowPrevNext2Buttons && maxDate && maxDate <= nextActiveStartDate2;

  function onClickPrevious() {
    setActiveStartDate(previousActiveStartDate);
  }

  function onClickPrevious2() {
    setActiveStartDate(previousActiveStartDate2);
  }

  function onClickNext() {
    setActiveStartDate(nextActiveStartDate);
  }

  function onClickNext2() {
    setActiveStartDate(nextActiveStartDate2);
  }

  function renderLabel(date) {
    var label = function () {
      switch (view) {
        case 'century':
          return getCenturyLabel(locale, formatYear$1, date);

        case 'decade':
          return getDecadeLabel(locale, formatYear$1, date);

        case 'year':
          return formatYear$1(locale, date);

        case 'month':
          return formatMonthYear$1(locale, date);

        default:
          throw new Error("Invalid view: ".concat(view, "."));
      }
    }();

    return navigationLabel ? navigationLabel({
      date: date,
      label: label,
      locale: locale || getUserLocale(),
      view: view
    }) : label;
  }

  function renderButton() {
    var labelClassName = "".concat(className$5, "__label");
    return /*#__PURE__*/React__default['default'].createElement("button", {
      "aria-label": navigationAriaLabel,
      className: labelClassName,
      disabled: !drillUpAvailable,
      onClick: drillUp,
      style: {
        flexGrow: 1
      },
      type: "button"
    }, /*#__PURE__*/React__default['default'].createElement("span", {
      className: "".concat(labelClassName, "__labelText ").concat(labelClassName, "__labelText--from")
    }, renderLabel(activeStartDate)), showDoubleView && /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement("span", {
      className: "".concat(labelClassName, "__divider")
    }, ' ', "\u2013", ' '), /*#__PURE__*/React__default['default'].createElement("span", {
      className: "".concat(labelClassName, "__labelText ").concat(labelClassName, "__labelText--to")
    }, renderLabel(nextActiveStartDate))));
  }

  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: className$5,
    style: {
      display: 'flex'
    }
  }, prev2Label !== null && shouldShowPrevNext2Buttons && /*#__PURE__*/React__default['default'].createElement("button", {
    "aria-label": prev2AriaLabel,
    className: "".concat(className$5, "__arrow ").concat(className$5, "__prev2-button"),
    disabled: prev2ButtonDisabled,
    onClick: onClickPrevious2,
    type: "button"
  }, prev2Label), prevLabel !== null && /*#__PURE__*/React__default['default'].createElement("button", {
    "aria-label": prevAriaLabel,
    className: "".concat(className$5, "__arrow ").concat(className$5, "__prev-button"),
    disabled: prevButtonDisabled,
    onClick: onClickPrevious,
    type: "button"
  }, prevLabel), renderButton(), nextLabel !== null && /*#__PURE__*/React__default['default'].createElement("button", {
    "aria-label": nextAriaLabel,
    className: "".concat(className$5, "__arrow ").concat(className$5, "__next-button"),
    disabled: nextButtonDisabled,
    onClick: onClickNext,
    type: "button"
  }, nextLabel), next2Label !== null && shouldShowPrevNext2Buttons && /*#__PURE__*/React__default['default'].createElement("button", {
    "aria-label": next2AriaLabel,
    className: "".concat(className$5, "__arrow ").concat(className$5, "__next2-button"),
    disabled: next2ButtonDisabled,
    onClick: onClickNext2,
    type: "button"
  }, next2Label));
}
Navigation.propTypes = {
  activeStartDate: PropTypes.instanceOf(Date).isRequired,
  drillUp: PropTypes.func.isRequired,
  formatMonthYear: PropTypes.func,
  formatYear: PropTypes.func,
  locale: PropTypes.string,
  maxDate: PropTypes.instanceOf(Date),
  minDate: PropTypes.instanceOf(Date),
  navigationAriaLabel: PropTypes.string,
  navigationLabel: PropTypes.func,
  next2AriaLabel: PropTypes.string,
  next2Label: PropTypes.node,
  nextAriaLabel: PropTypes.string,
  nextLabel: PropTypes.node,
  prev2AriaLabel: PropTypes.string,
  prev2Label: PropTypes.node,
  prevAriaLabel: PropTypes.string,
  prevLabel: PropTypes.node,
  setActiveStartDate: PropTypes.func.isRequired,
  showDoubleView: PropTypes.bool,
  view: isView.isRequired,
  views: isViews.isRequired
};

function _extends$e() { _extends$e = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$e.apply(this, arguments); }

function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$c(Object(source), true).forEach(function (key) { _defineProperty$c(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$c(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties$9(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$a(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$a(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function toPercent(num) {
  return "".concat(num, "%");
}

function Flex(_ref) {
  var children = _ref.children,
      className = _ref.className,
      direction = _ref.direction,
      count = _ref.count,
      offset = _ref.offset,
      style = _ref.style,
      wrap = _ref.wrap,
      otherProps = _objectWithoutProperties$9(_ref, ["children", "className", "direction", "count", "offset", "style", "wrap"]);

  return /*#__PURE__*/React__default['default'].createElement("div", _extends$e({
    className: className,
    style: _objectSpread$c({
      display: 'flex',
      flexDirection: direction,
      flexWrap: wrap ? 'wrap' : 'no-wrap'
    }, style)
  }, otherProps), React__default['default'].Children.map(children, function (child, index) {
    return /*#__PURE__*/React__default['default'].cloneElement(child, _objectSpread$c(_objectSpread$c({}, child.props), {}, {
      style: {
        flexBasis: toPercent(100 / count),
        maxWidth: toPercent(100 / count),
        overflow: 'hidden',
        marginLeft: offset && index === 0 ? toPercent(100 * offset / count) : null
      }
    }));
  }));
}
Flex.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  count: PropTypes.number.isRequired,
  direction: PropTypes.string,
  offset: PropTypes.number,
  style: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),
  wrap: PropTypes.bool
};

function _toConsumableArray$3(arr) { return _arrayWithoutHoles$3(arr) || _iterableToArray$3(arr) || _unsupportedIterableToArray$3(arr) || _nonIterableSpread$3(); }

function _nonIterableSpread$3() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

function _iterableToArray$3(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles$3(arr) { if (Array.isArray(arr)) return _arrayLikeToArray$3(arr); }

function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
/**
 * Returns a value no smaller than min and no larger than max.
 *
 * @param {*} value Value to return.
 * @param {*} min Minimum return value.
 * @param {*} max Maximum return value.
 */

function between$1(value, min, max) {
  if (min && min > value) {
    return min;
  }

  if (max && max < value) {
    return max;
  }

  return value;
}
function isValueWithinRange(value, range) {
  return range[0] <= value && range[1] >= value;
}
function isRangeWithinRange(greaterRange, smallerRange) {
  return greaterRange[0] <= smallerRange[0] && greaterRange[1] >= smallerRange[1];
}
function doRangesOverlap(range1, range2) {
  return isValueWithinRange(range1[0], range2) || isValueWithinRange(range1[1], range2);
}

function getRangeClassNames(valueRange, dateRange, baseClassName) {
  var isRange = doRangesOverlap(dateRange, valueRange);
  var classes = [];

  if (isRange) {
    classes.push(baseClassName);
    var isRangeStart = isValueWithinRange(valueRange[0], dateRange);
    var isRangeEnd = isValueWithinRange(valueRange[1], dateRange);

    if (isRangeStart) {
      classes.push("".concat(baseClassName, "Start"));
    }

    if (isRangeEnd) {
      classes.push("".concat(baseClassName, "End"));
    }

    if (isRangeStart && isRangeEnd) {
      classes.push("".concat(baseClassName, "BothEnds"));
    }
  }

  return classes;
}

function getTileClasses() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      value = _ref.value,
      valueType = _ref.valueType,
      date = _ref.date,
      dateType = _ref.dateType,
      hover = _ref.hover;

  var className = 'react-calendar__tile';
  var classes = [className];

  if (!date) {
    return classes;
  }

  if (!Array.isArray(date) && !dateType) {
    throw new Error('getTileClasses(): Unable to get tile activity classes because one or more required arguments were not passed.');
  }

  var now = new Date();
  var dateRange = Array.isArray(date) ? date : getRange(dateType, date);

  if (isValueWithinRange(now, dateRange)) {
    classes.push("".concat(className, "--now"));
  }

  if (!value) {
    return classes;
  }

  if (!Array.isArray(value) && !valueType) {
    throw new Error('getTileClasses(): Unable to get tile activity classes because one or more required arguments were not passed.');
  }

  var valueRange = Array.isArray(value) ? value : getRange(valueType, value);

  if (isRangeWithinRange(valueRange, dateRange)) {
    classes.push("".concat(className, "--active"));
  } else if (doRangesOverlap(valueRange, dateRange)) {
    classes.push("".concat(className, "--hasActive"));
  }

  var valueRangeClassNames = getRangeClassNames(valueRange, dateRange, "".concat(className, "--range"));
  classes.push.apply(classes, _toConsumableArray$3(valueRangeClassNames));

  if (hover) {
    var hoverRange = hover > valueRange[1] ? [valueRange[1], hover] : [hover, valueRange[0]];
    var hoverRangeClassNames = getRangeClassNames(hoverRange, dateRange, "".concat(className, "--hover"));
    classes.push.apply(classes, _toConsumableArray$3(hoverRangeClassNames));
  }

  return classes;
}

function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$b(Object(source), true).forEach(function (key) { _defineProperty$b(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$b(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends$d() { _extends$d = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$d.apply(this, arguments); }

function _objectWithoutProperties$8(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$9(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$9(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function TileGroup(_ref) {
  var className = _ref.className,
      _ref$count = _ref.count,
      count = _ref$count === void 0 ? 3 : _ref$count,
      dateTransform = _ref.dateTransform,
      dateType = _ref.dateType,
      end = _ref.end,
      hover = _ref.hover,
      offset = _ref.offset,
      start = _ref.start,
      _ref$step = _ref.step,
      step = _ref$step === void 0 ? 1 : _ref$step,
      Tile = _ref.tile,
      value = _ref.value,
      valueType = _ref.valueType,
      tileProps = _objectWithoutProperties$8(_ref, ["className", "count", "dateTransform", "dateType", "end", "hover", "offset", "start", "step", "tile", "value", "valueType"]);

  var tiles = [];

  for (var point = start; point <= end; point += step) {
    var date = dateTransform(point);
    tiles.push( /*#__PURE__*/React__default['default'].createElement(Tile, _extends$d({
      key: date.getTime(),
      classes: getTileClasses({
        value: value,
        valueType: valueType,
        date: date,
        dateType: dateType,
        hover: hover
      }),
      date: date,
      point: point
    }, tileProps)));
  }

  return /*#__PURE__*/React__default['default'].createElement(Flex, {
    className: className,
    count: count,
    offset: offset,
    wrap: true
  }, tiles);
}
TileGroup.propTypes = _objectSpread$b(_objectSpread$b({}, tileGroupProps), {}, {
  activeStartDate: PropTypes.instanceOf(Date),
  count: PropTypes.number,
  dateTransform: PropTypes.func.isRequired,
  dateType: PropTypes.string,
  offset: PropTypes.number,
  step: PropTypes.number,
  tile: PropTypes.func.isRequired
});

function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$a(Object(source), true).forEach(function (key) { _defineProperty$a(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _typeof$4(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$4 = function _typeof(obj) { return typeof obj; }; } else { _typeof$4 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$4(obj); }

function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties$2(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass$2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$2(Constructor.prototype, protoProps); if (staticProps) _defineProperties$2(Constructor, staticProps); return Constructor; }

function _inherits$2(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$2(subClass, superClass); }

function _setPrototypeOf$2(o, p) { _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$2(o, p); }

function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf$2(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$2(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$2(this, result); }; }

function _possibleConstructorReturn$2(self, call) { if (call && (_typeof$4(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$2(self); }

function _assertThisInitialized$2(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf$2(o) { _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$2(o); }

function _defineProperty$a(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getValue$2(nextProps, prop) {
  var activeStartDate = nextProps.activeStartDate,
      date = nextProps.date,
      view = nextProps.view;
  return typeof prop === 'function' ? prop({
    activeStartDate: activeStartDate,
    date: date,
    view: view
  }) : prop;
}

var Tile = /*#__PURE__*/function (_Component) {
  _inherits$2(Tile, _Component);

  var _super = _createSuper$2(Tile);

  function Tile() {
    var _this;

    _classCallCheck$2(this, Tile);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty$a(_assertThisInitialized$2(_this), "state", {});

    return _this;
  }

  _createClass$2(Tile, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          activeStartDate = _this$props.activeStartDate,
          children = _this$props.children,
          classes = _this$props.classes,
          date = _this$props.date,
          formatAbbr = _this$props.formatAbbr,
          locale = _this$props.locale,
          maxDate = _this$props.maxDate,
          maxDateTransform = _this$props.maxDateTransform,
          minDate = _this$props.minDate,
          minDateTransform = _this$props.minDateTransform,
          onClick = _this$props.onClick,
          onMouseOver = _this$props.onMouseOver,
          style = _this$props.style,
          tileDisabled = _this$props.tileDisabled,
          view = _this$props.view;
      var _this$state = this.state,
          tileClassName = _this$state.tileClassName,
          tileContent = _this$state.tileContent;
      return /*#__PURE__*/React__default['default'].createElement("button", {
        className: mergeClassNames(classes, tileClassName),
        disabled: minDate && minDateTransform(minDate) > date || maxDate && maxDateTransform(maxDate) < date || tileDisabled && tileDisabled({
          activeStartDate: activeStartDate,
          date: date,
          view: view
        }),
        onClick: onClick && function (event) {
          return onClick(date, event);
        },
        onFocus: onMouseOver && function () {
          return onMouseOver(date);
        },
        onMouseOver: onMouseOver && function () {
          return onMouseOver(date);
        },
        style: style,
        type: "button"
      }, formatAbbr ? /*#__PURE__*/React__default['default'].createElement("abbr", {
        "aria-label": formatAbbr(locale, date)
      }, children) : children, tileContent);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var tileClassName = nextProps.tileClassName,
          tileContent = nextProps.tileContent;
      var nextState = {};

      if (tileClassName !== prevState.tileClassNameProps) {
        nextState.tileClassName = getValue$2(nextProps, tileClassName);
        nextState.tileClassNameProps = tileClassName;
      }

      if (tileContent !== prevState.tileContentProps) {
        nextState.tileContent = getValue$2(nextProps, tileContent);
        nextState.tileContentProps = tileContent;
      }

      return nextState;
    }
  }]);

  return Tile;
}(React.Component);
Tile.propTypes = _objectSpread$a(_objectSpread$a({}, tileProps), {}, {
  children: PropTypes.node.isRequired,
  formatAbbr: PropTypes.func,
  maxDateTransform: PropTypes.func.isRequired,
  minDateTransform: PropTypes.func.isRequired
});

function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { _defineProperty$9(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$9(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends$c() { _extends$c = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$c.apply(this, arguments); }

function _objectWithoutProperties$7(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$8(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$8(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var className$4 = 'react-calendar__century-view__decades__decade';
function Decade(_ref) {
  var classes = _ref.classes,
      _ref$formatYear = _ref.formatYear,
      formatYear$1 = _ref$formatYear === void 0 ? formatYear : _ref$formatYear,
      otherProps = _objectWithoutProperties$7(_ref, ["classes", "formatYear"]);

  var date = otherProps.date,
      locale = otherProps.locale;
  return /*#__PURE__*/React__default['default'].createElement(Tile, _extends$c({}, otherProps, {
    classes: [].concat(classes, className$4),
    maxDateTransform: getDecadeEnd,
    minDateTransform: getDecadeStart,
    view: "century"
  }), getDecadeLabel(locale, formatYear$1, date));
}
Decade.propTypes = _objectSpread$9(_objectSpread$9({}, tileProps), {}, {
  formatYear: PropTypes.func
});

function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { _defineProperty$8(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$8(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends$b() { _extends$b = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$b.apply(this, arguments); }
function Decades(props) {
  var activeStartDate = props.activeStartDate;
  var start = getBeginOfCenturyYear(activeStartDate);
  var end = start + 99;
  return /*#__PURE__*/React__default['default'].createElement(TileGroup, _extends$b({}, props, {
    className: "react-calendar__century-view__decades",
    dateTransform: getDecadeStart,
    dateType: "decade",
    end: end,
    start: start,
    step: 10,
    tile: Decade
  }));
}
Decades.propTypes = _objectSpread$8({}, tileGroupProps);

function CenturyView(props) {
  function renderDecades() {
    return /*#__PURE__*/React__default['default'].createElement(Decades, props);
  }

  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: "react-calendar__century-view"
  }, renderDecades());
}

function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { _defineProperty$7(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$7(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends$a() { _extends$a = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$a.apply(this, arguments); }

function _objectWithoutProperties$6(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$7(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$7(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var className$3 = 'react-calendar__decade-view__years__year';
function Year(_ref) {
  var classes = _ref.classes,
      _ref$formatYear = _ref.formatYear,
      formatYear$1 = _ref$formatYear === void 0 ? formatYear : _ref$formatYear,
      otherProps = _objectWithoutProperties$6(_ref, ["classes", "formatYear"]);

  var date = otherProps.date,
      locale = otherProps.locale;
  return /*#__PURE__*/React__default['default'].createElement(Tile, _extends$a({}, otherProps, {
    classes: [].concat(classes, className$3),
    maxDateTransform: getYearEnd,
    minDateTransform: getYearStart,
    view: "decade"
  }), formatYear$1(locale, date));
}
Year.propTypes = _objectSpread$7(_objectSpread$7({}, tileProps), {}, {
  formatYear: PropTypes.func
});

function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty$6(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$6(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends$9() { _extends$9 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$9.apply(this, arguments); }
function Years(props) {
  var activeStartDate = props.activeStartDate;
  var start = getBeginOfDecadeYear(activeStartDate);
  var end = start + 9;
  return /*#__PURE__*/React__default['default'].createElement(TileGroup, _extends$9({}, props, {
    className: "react-calendar__decade-view__years",
    dateTransform: function dateTransform(year) {
      var date = new Date();
      date.setFullYear(year, 0, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    },
    dateType: "year",
    end: end,
    start: start,
    tile: Year
  }));
}
Years.propTypes = _objectSpread$6({}, tileGroupProps);

function DecadeView(props) {
  function renderYears() {
    return /*#__PURE__*/React__default['default'].createElement(Years, props);
  }

  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: "react-calendar__decade-view"
  }, renderYears());
}

function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty$5(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$5(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends$8() { _extends$8 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$8.apply(this, arguments); }

function _objectWithoutProperties$5(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$6(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$6(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var className$2 = 'react-calendar__year-view__months__month';
function Month(_ref) {
  var classes = _ref.classes,
      _ref$formatMonth = _ref.formatMonth,
      formatMonth = _ref$formatMonth === void 0 ? formatMonth$1 : _ref$formatMonth,
      _ref$formatMonthYear = _ref.formatMonthYear,
      formatMonthYear$1 = _ref$formatMonthYear === void 0 ? formatMonthYear : _ref$formatMonthYear,
      otherProps = _objectWithoutProperties$5(_ref, ["classes", "formatMonth", "formatMonthYear"]);

  var date = otherProps.date,
      locale = otherProps.locale;
  return /*#__PURE__*/React__default['default'].createElement(Tile, _extends$8({}, otherProps, {
    classes: [].concat(classes, className$2),
    formatAbbr: formatMonthYear$1,
    maxDateTransform: getMonthEnd,
    minDateTransform: getMonthStart,
    view: "year"
  }), formatMonth(locale, date));
}
Month.propTypes = _objectSpread$5(_objectSpread$5({}, tileProps), {}, {
  formatMonth: PropTypes.func,
  formatMonthYear: PropTypes.func
});

function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty$4(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$4(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends$7() { _extends$7 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$7.apply(this, arguments); }
function Months(props) {
  var activeStartDate = props.activeStartDate;
  var start = 0;
  var end = 11;
  var year = getYear$1(activeStartDate);
  return /*#__PURE__*/React__default['default'].createElement(TileGroup, _extends$7({}, props, {
    className: "react-calendar__year-view__months",
    dateTransform: function dateTransform(monthIndex) {
      var date = new Date();
      date.setFullYear(year, monthIndex, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    },
    dateType: "month",
    end: end,
    start: start,
    tile: Month
  }));
}
Months.propTypes = _objectSpread$4(_objectSpread$4({}, tileGroupProps), {}, {
  locale: PropTypes.string
});

function YearView(props) {
  function renderMonths() {
    return /*#__PURE__*/React__default['default'].createElement(Months, props);
  }

  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: "react-calendar__year-view"
  }, renderMonths());
}

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$3(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends$6() { _extends$6 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$6.apply(this, arguments); }

function _objectWithoutProperties$4(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$5(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$5(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var className$1 = 'react-calendar__month-view__days__day';
function Day(_ref) {
  var _ref$formatDay = _ref.formatDay,
      formatDay$1 = _ref$formatDay === void 0 ? formatDay : _ref$formatDay,
      _ref$formatLongDate = _ref.formatLongDate,
      formatLongDate$1 = _ref$formatLongDate === void 0 ? formatLongDate : _ref$formatLongDate,
      calendarType = _ref.calendarType,
      classes = _ref.classes,
      currentMonthIndex = _ref.currentMonthIndex,
      otherProps = _objectWithoutProperties$4(_ref, ["formatDay", "formatLongDate", "calendarType", "classes", "currentMonthIndex"]);

  var date = otherProps.date,
      locale = otherProps.locale;
  return /*#__PURE__*/React__default['default'].createElement(Tile, _extends$6({}, otherProps, {
    classes: [].concat(classes, className$1, isWeekend$1(date, calendarType) ? "".concat(className$1, "--weekend") : null, date.getMonth() !== currentMonthIndex ? "".concat(className$1, "--neighboringMonth") : null),
    formatAbbr: formatLongDate$1,
    maxDateTransform: getDayEnd,
    minDateTransform: getDayStart,
    view: "month"
  }), formatDay$1(locale, date));
}
Day.propTypes = _objectSpread$3(_objectSpread$3({}, tileProps), {}, {
  currentMonthIndex: PropTypes.number.isRequired,
  formatDay: PropTypes.func,
  formatLongDate: PropTypes.func
});

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends$5() { _extends$5 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$5.apply(this, arguments); }

function _objectWithoutProperties$3(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$4(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$4(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function Days(props) {
  var activeStartDate = props.activeStartDate,
      calendarType = props.calendarType;

  var showFixedNumberOfWeeks = props.showFixedNumberOfWeeks,
      showNeighboringMonth = props.showNeighboringMonth,
      otherProps = _objectWithoutProperties$3(props, ["showFixedNumberOfWeeks", "showNeighboringMonth"]);

  var year = getYear$1(activeStartDate);
  var monthIndex = getMonth$1(activeStartDate);
  var hasFixedNumberOfWeeks = showFixedNumberOfWeeks || showNeighboringMonth;
  var dayOfWeek = getDayOfWeek(activeStartDate, calendarType);
  var offset = hasFixedNumberOfWeeks ? 0 : dayOfWeek;
  /**
   * Defines on which day of the month the grid shall start. If we simply show current
   * month, we obviously start on day one, but if showNeighboringMonth is set to
   * true, we need to find the beginning of the week the first day of the month is in.
   */

  var start = (hasFixedNumberOfWeeks ? -dayOfWeek : 0) + 1;
  /**
   * Defines on which day of the month the grid shall end. If we simply show current
   * month, we need to stop on the last day of the month, but if showNeighboringMonth
   * is set to true, we need to find the end of the week the last day of the month is in.
   */

  var end = function () {
    if (showFixedNumberOfWeeks) {
      // Always show 6 weeks
      return start + 6 * 7 - 1;
    }

    var daysInMonth = getDaysInMonth$3(activeStartDate);

    if (showNeighboringMonth) {
      var activeEndDate = new Date();
      activeEndDate.setFullYear(year, monthIndex, daysInMonth);
      activeEndDate.setHours(0, 0, 0, 0);
      var daysUntilEndOfTheWeek = 7 - getDayOfWeek(activeEndDate, calendarType) - 1;
      return daysInMonth + daysUntilEndOfTheWeek;
    }

    return daysInMonth;
  }();

  return /*#__PURE__*/React__default['default'].createElement(TileGroup, _extends$5({}, otherProps, {
    className: "react-calendar__month-view__days",
    count: 7,
    currentMonthIndex: monthIndex,
    dateTransform: function dateTransform(day) {
      var date = new Date();
      date.setFullYear(year, monthIndex, day);
      date.setHours(0, 0, 0, 0);
      return date;
    },
    dateType: "day",
    end: end,
    offset: offset,
    start: start,
    tile: Day
  }));
}
Days.propTypes = _objectSpread$2({
  calendarType: isCalendarType.isRequired,
  showFixedNumberOfWeeks: PropTypes.bool,
  showNeighboringMonth: PropTypes.bool
}, tileGroupProps);

var className = 'react-calendar__month-view__weekdays';
function Weekdays(props) {
  var calendarType = props.calendarType,
      _props$formatShortWee = props.formatShortWeekday,
      formatShortWeekday$1 = _props$formatShortWee === void 0 ? formatShortWeekday : _props$formatShortWee,
      locale = props.locale,
      onMouseLeave = props.onMouseLeave;
  var anyDate = new Date();
  var beginOfMonth = getMonthStart(anyDate);
  var year = getYear$1(beginOfMonth);
  var monthIndex = getMonth$1(beginOfMonth);
  var weekdays = [];

  for (var weekday = 1; weekday <= 7; weekday += 1) {
    var weekdayDate = new Date(year, monthIndex, weekday - getDayOfWeek(beginOfMonth, calendarType));
    var abbr = formatWeekday(locale, weekdayDate);
    weekdays.push( /*#__PURE__*/React__default['default'].createElement("div", {
      key: weekday,
      className: "".concat(className, "__weekday")
    }, /*#__PURE__*/React__default['default'].createElement("abbr", {
      "aria-label": abbr,
      title: abbr
    }, formatShortWeekday$1(locale, weekdayDate).replace('.', ''))));
  }

  return /*#__PURE__*/React__default['default'].createElement(Flex, {
    className: className,
    count: 7,
    onFocus: onMouseLeave,
    onMouseOver: onMouseLeave
  }, weekdays);
}
Weekdays.propTypes = {
  calendarType: isCalendarType.isRequired,
  formatShortWeekday: PropTypes.func,
  locale: PropTypes.string,
  onMouseLeave: PropTypes.func
};

function _extends$4() { _extends$4 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$4.apply(this, arguments); }
function WeekNumber(_ref) {
  var date = _ref.date,
      onClickWeekNumber = _ref.onClickWeekNumber,
      weekNumber = _ref.weekNumber;
  var props = {
    className: 'react-calendar__tile',
    style: {
      flexGrow: 1
    }
  };
  var children = /*#__PURE__*/React__default['default'].createElement("span", null, weekNumber);
  return onClickWeekNumber ? /*#__PURE__*/React__default['default'].createElement("button", _extends$4({}, props, {
    onClick: function onClick(event) {
      return onClickWeekNumber(weekNumber, date, event);
    },
    type: "button"
  }), children) : /*#__PURE__*/React__default['default'].createElement("div", props, children);
}
WeekNumber.propTypes = {
  date: PropTypes.instanceOf(Date).isRequired,
  onClickWeekNumber: PropTypes.func,
  weekNumber: PropTypes.node.isRequired
};

function WeekNumbers(props) {
  var activeStartDate = props.activeStartDate,
      calendarType = props.calendarType,
      onClickWeekNumber = props.onClickWeekNumber,
      onMouseLeave = props.onMouseLeave,
      showFixedNumberOfWeeks = props.showFixedNumberOfWeeks;

  var numberOfWeeks = function () {
    if (showFixedNumberOfWeeks) {
      return 6;
    }

    var numberOfDays = getDaysInMonth$3(activeStartDate);
    var startWeekday = getDayOfWeek(activeStartDate, calendarType);
    var days = numberOfDays - (7 - startWeekday);
    return 1 + Math.ceil(days / 7);
  }();

  var dates = function () {
    var year = getYear$1(activeStartDate);
    var monthIndex = getMonth$1(activeStartDate);
    var day = getDate$1(activeStartDate);
    var result = [];

    for (var index = 0; index < numberOfWeeks; index += 1) {
      result.push(getBeginOfWeek(new Date(year, monthIndex, day + index * 7), calendarType));
    }

    return result;
  }();

  var weekNumbers = dates.map(function (date) {
    return getWeekNumber(date, calendarType);
  });
  return /*#__PURE__*/React__default['default'].createElement(Flex, {
    className: "react-calendar__month-view__weekNumbers",
    count: numberOfWeeks,
    direction: "column",
    onFocus: onMouseLeave,
    onMouseOver: onMouseLeave,
    style: {
      flexBasis: 'calc(100% * (1 / 8)',
      flexShrink: 0
    }
  }, weekNumbers.map(function (weekNumber, weekIndex) {
    return /*#__PURE__*/React__default['default'].createElement(WeekNumber, {
      key: weekNumber,
      date: dates[weekIndex],
      onClickWeekNumber: onClickWeekNumber,
      weekNumber: weekNumber
    });
  }));
}
WeekNumbers.propTypes = {
  activeStartDate: PropTypes.instanceOf(Date).isRequired,
  calendarType: isCalendarType.isRequired,
  onClickWeekNumber: PropTypes.func,
  onMouseLeave: PropTypes.func,
  showFixedNumberOfWeeks: PropTypes.bool
};

function _extends$3() { _extends$3 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }

function _objectWithoutProperties$2(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$3(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$3(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function getCalendarTypeFromLocale(locale) {
  return Object.keys(CALENDAR_TYPE_LOCALES).find(function (calendarType) {
    return CALENDAR_TYPE_LOCALES[calendarType].includes(locale);
  }) || CALENDAR_TYPES.ISO_8601;
}

function MonthView(props) {
  var activeStartDate = props.activeStartDate,
      locale = props.locale,
      onMouseLeave = props.onMouseLeave,
      showFixedNumberOfWeeks = props.showFixedNumberOfWeeks;

  var _props$calendarType = props.calendarType,
      calendarType = _props$calendarType === void 0 ? getCalendarTypeFromLocale(locale) : _props$calendarType,
      formatShortWeekday = props.formatShortWeekday,
      onClickWeekNumber = props.onClickWeekNumber,
      showWeekNumbers = props.showWeekNumbers,
      childProps = _objectWithoutProperties$2(props, ["calendarType", "formatShortWeekday", "onClickWeekNumber", "showWeekNumbers"]);

  function renderWeekdays() {
    return /*#__PURE__*/React__default['default'].createElement(Weekdays, {
      calendarType: calendarType,
      formatShortWeekday: formatShortWeekday,
      locale: locale,
      onMouseLeave: onMouseLeave
    });
  }

  function renderWeekNumbers() {
    if (!showWeekNumbers) {
      return null;
    }

    return /*#__PURE__*/React__default['default'].createElement(WeekNumbers, {
      activeStartDate: activeStartDate,
      calendarType: calendarType,
      onClickWeekNumber: onClickWeekNumber,
      onMouseLeave: onMouseLeave,
      showFixedNumberOfWeeks: showFixedNumberOfWeeks
    });
  }

  function renderDays() {
    return /*#__PURE__*/React__default['default'].createElement(Days, _extends$3({
      calendarType: calendarType
    }, childProps));
  }

  var className = 'react-calendar__month-view';
  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: mergeClassNames(className, showWeekNumbers ? "".concat(className, "--weekNumbers") : '')
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    style: {
      display: 'flex',
      alignItems: 'flex-end'
    }
  }, renderWeekNumbers(), /*#__PURE__*/React__default['default'].createElement("div", {
    style: {
      flexGrow: 1,
      width: '100%'
    }
  }, renderWeekdays(), renderDays())));
}
MonthView.propTypes = {
  activeStartDate: PropTypes.instanceOf(Date).isRequired,
  calendarType: isCalendarType,
  formatShortWeekday: PropTypes.func,
  locale: PropTypes.string,
  onClickWeekNumber: PropTypes.func,
  onMouseLeave: PropTypes.func,
  showFixedNumberOfWeeks: PropTypes.bool,
  showWeekNumbers: PropTypes.bool
};

function _extends$2() { _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }

function _typeof$3(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }

function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }

function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$1(subClass, superClass); }

function _setPrototypeOf$1(o, p) { _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$1(o, p); }

function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }

function _possibleConstructorReturn$1(self, call) { if (call && (_typeof$3(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$1(self); }

function _assertThisInitialized$1(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf$1(o) { _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$1(o); }

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties$1(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$2(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$2(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray$2(arr) { return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread$2(); }

function _nonIterableSpread$2() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

function _iterableToArray$2(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles$2(arr) { if (Array.isArray(arr)) return _arrayLikeToArray$2(arr); }

function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var defaultMinDate = new Date();
defaultMinDate.setFullYear(1, 0, 1);
defaultMinDate.setHours(0, 0, 0, 0);
var defaultMaxDate = new Date(8.64e15);
var baseClassName = 'react-calendar';
var allViews$1 = ['century', 'decade', 'year', 'month'];
var allValueTypes$1 = [].concat(_toConsumableArray$2(allViews$1.slice(1)), ['day']);

function toDate(value) {
  if (value instanceof Date) {
    return value;
  }

  return new Date(value);
}
/**
 * Returns views array with disallowed values cut off.
 */


function getLimitedViews(minDetail, maxDetail) {
  return allViews$1.slice(allViews$1.indexOf(minDetail), allViews$1.indexOf(maxDetail) + 1);
}
/**
 * Determines whether a given view is allowed with currently applied settings.
 */


function isViewAllowed(view, minDetail, maxDetail) {
  var views = getLimitedViews(minDetail, maxDetail);
  return views.indexOf(view) !== -1;
}
/**
 * Gets either provided view if allowed by minDetail and maxDetail, or gets
 * the default view if not allowed.
 */


function getView(view, minDetail, maxDetail) {
  if (isViewAllowed(view, minDetail, maxDetail)) {
    return view;
  }

  return maxDetail;
}
/**
 * Returns value type that can be returned with currently applied settings.
 */


function getValueType(maxDetail) {
  return allValueTypes$1[allViews$1.indexOf(maxDetail)];
}

function getValue$1(value, index) {
  if (!value) {
    return null;
  }

  var rawValue = Array.isArray(value) && value.length === 2 ? value[index] : value;

  if (!rawValue) {
    return null;
  }

  var valueDate = toDate(rawValue);

  if (isNaN(valueDate.getTime())) {
    throw new Error("Invalid date: ".concat(value));
  }

  return valueDate;
}

function getDetailValue(_ref, index) {
  var value = _ref.value,
      minDate = _ref.minDate,
      maxDate = _ref.maxDate,
      maxDetail = _ref.maxDetail;
  var valuePiece = getValue$1(value, index);

  if (!valuePiece) {
    return null;
  }

  var valueType = getValueType(maxDetail);
  var detailValueFrom = [getBegin$1, getEnd$1][index](valueType, valuePiece);
  return between$1(detailValueFrom, minDate, maxDate);
}

var getDetailValueFrom = function getDetailValueFrom(args) {
  return getDetailValue(args, 0);
};

var getDetailValueTo = function getDetailValueTo(args) {
  return getDetailValue(args, 1);
};

var getDetailValueArray = function getDetailValueArray(args) {
  var value = args.value;

  if (Array.isArray(value)) {
    return value;
  }

  return [getDetailValueFrom, getDetailValueTo].map(function (fn) {
    return fn(args);
  });
};

function getActiveStartDate(props) {
  var maxDate = props.maxDate,
      maxDetail = props.maxDetail,
      minDate = props.minDate,
      minDetail = props.minDetail,
      value = props.value,
      view = props.view;
  var rangeType = getView(view, minDetail, maxDetail);
  var valueFrom = getDetailValueFrom({
    value: value,
    minDate: minDate,
    maxDate: maxDate,
    maxDetail: maxDetail
  }) || new Date();
  return getBegin$1(rangeType, valueFrom);
}

function getInitialActiveStartDate(props) {
  var activeStartDate = props.activeStartDate,
      defaultActiveStartDate = props.defaultActiveStartDate,
      defaultValue = props.defaultValue,
      defaultView = props.defaultView,
      maxDetail = props.maxDetail,
      minDetail = props.minDetail,
      value = props.value,
      view = props.view,
      otherProps = _objectWithoutProperties$1(props, ["activeStartDate", "defaultActiveStartDate", "defaultValue", "defaultView", "maxDetail", "minDetail", "value", "view"]);

  var rangeType = getView(view, minDetail, maxDetail);
  var valueFrom = activeStartDate || defaultActiveStartDate;

  if (valueFrom) {
    return getBegin$1(rangeType, valueFrom);
  }

  return getActiveStartDate(_objectSpread$1({
    maxDetail: maxDetail,
    minDetail: minDetail,
    value: value || defaultValue,
    view: view || defaultView
  }, otherProps));
}

var getIsSingleValue = function getIsSingleValue(value) {
  return value && [].concat(value).length === 1;
};

var Calendar$1 = /*#__PURE__*/function (_Component) {
  _inherits$1(Calendar, _Component);

  var _super = _createSuper$1(Calendar);

  function Calendar() {
    var _this;

    _classCallCheck$1(this, Calendar);

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(_args));

    _defineProperty$1(_assertThisInitialized$1(_this), "state", {
      /* eslint-disable react/destructuring-assignment */
      activeStartDate: _this.props.defaultActiveStartDate,
      value: _this.props.defaultValue,
      view: _this.props.defaultView
      /* eslint-enable react/destructuring-assignment */

    });

    _defineProperty$1(_assertThisInitialized$1(_this), "setStateAndCallCallbacks", function (nextState, event, callback) {
      var _assertThisInitialize = _assertThisInitialized$1(_this),
          previousActiveStartDate = _assertThisInitialize.activeStartDate,
          previousView = _assertThisInitialize.view;

      var _this$props = _this.props,
          allowPartialRange = _this$props.allowPartialRange,
          onActiveStartDateChange = _this$props.onActiveStartDateChange,
          onChange = _this$props.onChange,
          onViewChange = _this$props.onViewChange,
          selectRange = _this$props.selectRange;
      var prevArgs = {
        activeStartDate: previousActiveStartDate,
        view: previousView
      };

      _this.setState(nextState, function () {
        var args = {
          activeStartDate: nextState.activeStartDate || _this.activeStartDate,
          value: nextState.value || _this.value,
          view: nextState.view || _this.view
        };

        function shouldUpdate(key) {
          return (// Key must exist, and…
            key in nextState && ( // …key changed from undefined to defined or the other way around, or…
            _typeof$3(nextState[key]) !== _typeof$3(prevArgs[key]) // …value changed.
            || (nextState[key] instanceof Date ? nextState[key].getTime() !== prevArgs[key].getTime() : nextState[key] !== prevArgs[key]))
          );
        }

        if (shouldUpdate('activeStartDate')) {
          if (onActiveStartDateChange) onActiveStartDateChange(args);
        }

        if (shouldUpdate('view')) {
          if (onViewChange) onViewChange(args);
        }

        if (shouldUpdate('value')) {
          if (onChange) {
            if (selectRange) {
              var isSingleValue = getIsSingleValue(nextState.value);

              if (!isSingleValue) {
                onChange(nextState.value, event);
              } else if (allowPartialRange) {
                onChange([nextState.value], event);
              }
            } else {
              onChange(nextState.value, event);
            }
          }
        }

        if (callback) callback(args);
      });
    });

    _defineProperty$1(_assertThisInitialized$1(_this), "setActiveStartDate", function (activeStartDate) {
      _this.setStateAndCallCallbacks({
        activeStartDate: activeStartDate
      });
    });

    _defineProperty$1(_assertThisInitialized$1(_this), "drillDown", function (nextActiveStartDate, event) {
      if (!_this.drillDownAvailable) {
        return;
      }

      _this.onClickTile(nextActiveStartDate, event);

      var _assertThisInitialize2 = _assertThisInitialized$1(_this),
          view = _assertThisInitialize2.view,
          views = _assertThisInitialize2.views;

      var onDrillDown = _this.props.onDrillDown;
      var nextView = views[views.indexOf(view) + 1];

      _this.setStateAndCallCallbacks({
        activeStartDate: nextActiveStartDate,
        view: nextView
      }, undefined, onDrillDown);
    });

    _defineProperty$1(_assertThisInitialized$1(_this), "drillUp", function () {
      if (!_this.drillUpAvailable) {
        return;
      }

      var _assertThisInitialize3 = _assertThisInitialized$1(_this),
          activeStartDate = _assertThisInitialize3.activeStartDate,
          view = _assertThisInitialize3.view,
          views = _assertThisInitialize3.views;

      var onDrillUp = _this.props.onDrillUp;
      var nextView = views[views.indexOf(view) - 1];
      var nextActiveStartDate = getBegin$1(nextView, activeStartDate);

      _this.setStateAndCallCallbacks({
        activeStartDate: nextActiveStartDate,
        view: nextView
      }, undefined, onDrillUp);
    });

    _defineProperty$1(_assertThisInitialized$1(_this), "onChange", function (value, event) {
      var selectRange = _this.props.selectRange;

      _this.onClickTile(value, event);

      var nextValue;

      if (selectRange) {
        // Range selection turned on
        var _assertThisInitialize4 = _assertThisInitialized$1(_this),
            previousValue = _assertThisInitialize4.value,
            valueType = _assertThisInitialize4.valueType;

        if (!getIsSingleValue(previousValue)) {
          // Value has 0 or 2 elements - either way we're starting a new array
          // First value
          nextValue = getBegin$1(valueType, value);
        } else {
          // Second value
          nextValue = getValueRange(valueType, previousValue, value);
        }
      } else {
        // Range selection turned off
        nextValue = _this.getProcessedValue(value);
      }

      var nextActiveStartDate = getActiveStartDate(_objectSpread$1(_objectSpread$1({}, _this.props), {}, {
        value: nextValue
      }));
      event.persist();

      _this.setStateAndCallCallbacks({
        activeStartDate: nextActiveStartDate,
        value: nextValue
      }, event);
    });

    _defineProperty$1(_assertThisInitialized$1(_this), "onClickTile", function (value, event) {
      var _assertThisInitialize5 = _assertThisInitialized$1(_this),
          view = _assertThisInitialize5.view;

      var _this$props2 = _this.props,
          onClickDay = _this$props2.onClickDay,
          onClickDecade = _this$props2.onClickDecade,
          onClickMonth = _this$props2.onClickMonth,
          onClickYear = _this$props2.onClickYear;

      var callback = function () {
        switch (view) {
          case 'century':
            return onClickDecade;

          case 'decade':
            return onClickYear;

          case 'year':
            return onClickMonth;

          case 'month':
            return onClickDay;

          default:
            throw new Error("Invalid view: ".concat(view, "."));
        }
      }();

      if (callback) callback(value, event);
    });

    _defineProperty$1(_assertThisInitialized$1(_this), "onMouseOver", function (value) {
      _this.setState(function (prevState) {
        if (prevState.hover && prevState.hover.getTime() === value.getTime()) {
          return null;
        }

        return {
          hover: value
        };
      });
    });

    _defineProperty$1(_assertThisInitialized$1(_this), "onMouseLeave", function () {
      _this.setState({
        hover: null
      });
    });

    return _this;
  }

  _createClass$1(Calendar, [{
    key: "getProcessedValue",

    /**
     * Gets current value in a desired format.
     */
    value: function getProcessedValue(value) {
      var _this$props3 = this.props,
          minDate = _this$props3.minDate,
          maxDate = _this$props3.maxDate,
          maxDetail = _this$props3.maxDetail,
          returnValue = _this$props3.returnValue;

      var processFunction = function () {
        switch (returnValue) {
          case 'start':
            return getDetailValueFrom;

          case 'end':
            return getDetailValueTo;

          case 'range':
            return getDetailValueArray;

          default:
            throw new Error('Invalid returnValue.');
        }
      }();

      return processFunction({
        value: value,
        minDate: minDate,
        maxDate: maxDate,
        maxDetail: maxDetail
      });
    }
  }, {
    key: "renderContent",
    value: function renderContent(next) {
      var currentActiveStartDate = this.activeStartDate,
          onMouseOver = this.onMouseOver,
          valueType = this.valueType,
          value = this.value,
          view = this.view;
      var _this$props4 = this.props,
          calendarType = _this$props4.calendarType,
          locale = _this$props4.locale,
          maxDate = _this$props4.maxDate,
          minDate = _this$props4.minDate,
          selectRange = _this$props4.selectRange,
          tileClassName = _this$props4.tileClassName,
          tileContent = _this$props4.tileContent,
          tileDisabled = _this$props4.tileDisabled;
      var hover = this.hover;
      var activeStartDate = next ? getBeginNext(view, currentActiveStartDate) : getBegin$1(view, currentActiveStartDate);
      var onClick = this.drillDownAvailable ? this.drillDown : this.onChange;
      var commonProps = {
        activeStartDate: activeStartDate,
        hover: hover,
        locale: locale,
        maxDate: maxDate,
        minDate: minDate,
        onClick: onClick,
        onMouseOver: selectRange ? onMouseOver : null,
        tileClassName: tileClassName,
        tileContent: tileContent,
        tileDisabled: tileDisabled,
        value: value,
        valueType: valueType
      };

      switch (view) {
        case 'century':
          {
            var formatYear = this.props.formatYear;
            return /*#__PURE__*/React__default['default'].createElement(CenturyView, _extends$2({
              formatYear: formatYear
            }, commonProps));
          }

        case 'decade':
          {
            var _formatYear = this.props.formatYear;
            return /*#__PURE__*/React__default['default'].createElement(DecadeView, _extends$2({
              formatYear: _formatYear
            }, commonProps));
          }

        case 'year':
          {
            var _this$props5 = this.props,
                formatMonth = _this$props5.formatMonth,
                formatMonthYear = _this$props5.formatMonthYear;
            return /*#__PURE__*/React__default['default'].createElement(YearView, _extends$2({
              formatMonth: formatMonth,
              formatMonthYear: formatMonthYear
            }, commonProps));
          }

        case 'month':
          {
            var _this$props6 = this.props,
                formatDay = _this$props6.formatDay,
                formatLongDate = _this$props6.formatLongDate,
                formatShortWeekday = _this$props6.formatShortWeekday,
                onClickWeekNumber = _this$props6.onClickWeekNumber,
                showDoubleView = _this$props6.showDoubleView,
                showFixedNumberOfWeeks = _this$props6.showFixedNumberOfWeeks,
                showNeighboringMonth = _this$props6.showNeighboringMonth,
                showWeekNumbers = _this$props6.showWeekNumbers;
            var onMouseLeave = this.onMouseLeave;
            return /*#__PURE__*/React__default['default'].createElement(MonthView, _extends$2({
              calendarType: calendarType,
              formatDay: formatDay,
              formatLongDate: formatLongDate,
              formatShortWeekday: formatShortWeekday,
              onClickWeekNumber: onClickWeekNumber,
              onMouseLeave: selectRange ? onMouseLeave : null,
              showFixedNumberOfWeeks: showFixedNumberOfWeeks || showDoubleView,
              showNeighboringMonth: showNeighboringMonth,
              showWeekNumbers: showWeekNumbers
            }, commonProps));
          }

        default:
          throw new Error("Invalid view: ".concat(view, "."));
      }
    }
  }, {
    key: "renderNavigation",
    value: function renderNavigation() {
      var showNavigation = this.props.showNavigation;

      if (!showNavigation) {
        return null;
      }

      var activeStartDate = this.activeStartDate,
          view = this.view,
          views = this.views;
      var _this$props7 = this.props,
          formatMonthYear = _this$props7.formatMonthYear,
          formatYear = _this$props7.formatYear,
          locale = _this$props7.locale,
          maxDate = _this$props7.maxDate,
          minDate = _this$props7.minDate,
          navigationAriaLabel = _this$props7.navigationAriaLabel,
          navigationLabel = _this$props7.navigationLabel,
          next2AriaLabel = _this$props7.next2AriaLabel,
          next2Label = _this$props7.next2Label,
          nextAriaLabel = _this$props7.nextAriaLabel,
          nextLabel = _this$props7.nextLabel,
          prev2AriaLabel = _this$props7.prev2AriaLabel,
          prev2Label = _this$props7.prev2Label,
          prevAriaLabel = _this$props7.prevAriaLabel,
          prevLabel = _this$props7.prevLabel,
          showDoubleView = _this$props7.showDoubleView;
      return /*#__PURE__*/React__default['default'].createElement(Navigation, {
        activeStartDate: activeStartDate,
        drillUp: this.drillUp,
        formatMonthYear: formatMonthYear,
        formatYear: formatYear,
        locale: locale,
        maxDate: maxDate,
        minDate: minDate,
        navigationAriaLabel: navigationAriaLabel,
        navigationLabel: navigationLabel,
        next2AriaLabel: next2AriaLabel,
        next2Label: next2Label,
        nextAriaLabel: nextAriaLabel,
        nextLabel: nextLabel,
        prev2AriaLabel: prev2AriaLabel,
        prev2Label: prev2Label,
        prevAriaLabel: prevAriaLabel,
        prevLabel: prevLabel,
        setActiveStartDate: this.setActiveStartDate,
        showDoubleView: showDoubleView,
        view: view,
        views: views
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props8 = this.props,
          className = _this$props8.className,
          inputRef = _this$props8.inputRef,
          selectRange = _this$props8.selectRange,
          showDoubleView = _this$props8.showDoubleView;
      var onMouseLeave = this.onMouseLeave,
          value = this.value;
      var valueArray = [].concat(value);
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: mergeClassNames(baseClassName, selectRange && valueArray.length === 1 && "".concat(baseClassName, "--selectRange"), showDoubleView && "".concat(baseClassName, "--doubleView"), className),
        ref: inputRef
      }, this.renderNavigation(), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "".concat(baseClassName, "__viewContainer"),
        onBlur: selectRange ? onMouseLeave : null,
        onMouseLeave: selectRange ? onMouseLeave : null
      }, this.renderContent(), showDoubleView && this.renderContent(true)));
    }
  }, {
    key: "activeStartDate",
    get: function get() {
      var activeStartDateProps = this.props.activeStartDate;
      var activeStartDateState = this.state.activeStartDate;
      return activeStartDateProps || activeStartDateState || getInitialActiveStartDate(this.props);
    }
  }, {
    key: "value",
    get: function get() {
      var _this$props9 = this.props,
          selectRange = _this$props9.selectRange,
          valueProps = _this$props9.value;
      var valueState = this.state.value; // In the middle of range selection, use value from state

      if (selectRange && getIsSingleValue(valueState)) {
        return valueState;
      }

      return valueProps !== undefined ? valueProps : valueState;
    }
  }, {
    key: "valueType",
    get: function get() {
      var maxDetail = this.props.maxDetail;
      return getValueType(maxDetail);
    }
  }, {
    key: "view",
    get: function get() {
      var _this$props10 = this.props,
          minDetail = _this$props10.minDetail,
          maxDetail = _this$props10.maxDetail,
          viewProps = _this$props10.view;
      var viewState = this.state.view;
      return getView(viewProps || viewState, minDetail, maxDetail);
    }
  }, {
    key: "views",
    get: function get() {
      var _this$props11 = this.props,
          minDetail = _this$props11.minDetail,
          maxDetail = _this$props11.maxDetail;
      return getLimitedViews(minDetail, maxDetail);
    }
  }, {
    key: "hover",
    get: function get() {
      var selectRange = this.props.selectRange;
      var hover = this.state.hover;
      return selectRange ? hover : null;
    }
  }, {
    key: "drillDownAvailable",
    get: function get() {
      var view = this.view,
          views = this.views;
      return views.indexOf(view) < views.length - 1;
    }
  }, {
    key: "drillUpAvailable",
    get: function get() {
      var view = this.view,
          views = this.views;
      return views.indexOf(view) > 0;
    }
  }]);

  return Calendar;
}(React.Component);
Calendar$1.defaultProps = {
  maxDate: defaultMaxDate,
  maxDetail: 'month',
  minDate: defaultMinDate,
  minDetail: 'century',
  returnValue: 'start',
  showNavigation: true,
  showNeighboringMonth: true
};
var isActiveStartDate = PropTypes.instanceOf(Date);
var isLooseValue = PropTypes.oneOfType([PropTypes.string, isValue]);
Calendar$1.propTypes = {
  activeStartDate: isActiveStartDate,
  allowPartialRange: PropTypes.bool,
  calendarType: isCalendarType,
  className: isClassName,
  defaultActiveStartDate: isActiveStartDate,
  defaultValue: isLooseValue,
  defaultView: isView,
  formatDay: PropTypes.func,
  formatLongDate: PropTypes.func,
  formatMonth: PropTypes.func,
  formatMonthYear: PropTypes.func,
  formatShortWeekday: PropTypes.func,
  formatYear: PropTypes.func,
  inputRef: isRef$1,
  locale: PropTypes.string,
  maxDate: isMaxDate$1,
  maxDetail: PropTypes.oneOf(allViews$1),
  minDate: isMinDate$1,
  minDetail: PropTypes.oneOf(allViews$1),
  navigationAriaLabel: PropTypes.string,
  navigationLabel: PropTypes.func,
  next2AriaLabel: PropTypes.string,
  next2Label: PropTypes.node,
  nextAriaLabel: PropTypes.string,
  nextLabel: PropTypes.node,
  onActiveStartDateChange: PropTypes.func,
  onChange: PropTypes.func,
  onClickDay: PropTypes.func,
  onClickDecade: PropTypes.func,
  onClickMonth: PropTypes.func,
  onClickWeekNumber: PropTypes.func,
  onClickYear: PropTypes.func,
  onDrillDown: PropTypes.func,
  onDrillUp: PropTypes.func,
  onViewChange: PropTypes.func,
  prev2AriaLabel: PropTypes.string,
  prev2Label: PropTypes.node,
  prevAriaLabel: PropTypes.string,
  prevLabel: PropTypes.node,
  returnValue: PropTypes.oneOf(['start', 'end', 'range']),
  selectRange: PropTypes.bool,
  showDoubleView: PropTypes.bool,
  showFixedNumberOfWeeks: PropTypes.bool,
  showNavigation: PropTypes.bool,
  showNeighboringMonth: PropTypes.bool,
  showWeekNumbers: PropTypes.bool,
  tileClassName: PropTypes.oneOfType([PropTypes.func, isClassName]),
  tileContent: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
  tileDisabled: PropTypes.func,
  value: isLooseValue,
  view: isView
};

var esm$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': Calendar$1,
  Calendar: Calendar$1,
  CenturyView: CenturyView,
  DecadeView: DecadeView,
  YearView: YearView,
  MonthView: MonthView
});

var require$$4$1 = /*@__PURE__*/getAugmentedNamespace(esm$2);

var getRect = function getRect(element) {
  return element.getBoundingClientRect();
};

var detectElementOverflow = function detectElementOverflow(element, container) {
  return {
    get collidedTop() {
      return getRect(element).top < getRect(container).top;
    },

    get collidedBottom() {
      return getRect(element).bottom > getRect(container).bottom;
    },

    get collidedLeft() {
      return getRect(element).left < getRect(container).left;
    },

    get collidedRight() {
      return getRect(element).right > getRect(container).right;
    },

    get overflowTop() {
      return getRect(container).top - getRect(element).top;
    },

    get overflowBottom() {
      return getRect(element).bottom - getRect(container).bottom;
    },

    get overflowLeft() {
      return getRect(container).left - getRect(element).left;
    },

    get overflowRight() {
      return getRect(element).right - getRect(container).right;
    }

  };
};

var detectElementOverflow$1 = detectElementOverflow;

/**
 * Checks whether we're running on a production build or not.
 */
var isProduction$1 = process.env.NODE_ENV === 'production';

var consoleOnDev = function consoleOnDev(method) {
  if (!isProduction$1) {
    var _console;

    for (var _len = arguments.length, message = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      message[_key - 1] = arguments[_key];
    }

    // eslint-disable-next-line no-console
    (_console = console)[method].apply(_console, message);
  }
};

var warnOnDev = function warnOnDev() {
  for (var _len2 = arguments.length, message = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    message[_key2] = arguments[_key2];
  }

  return consoleOnDev.apply(void 0, ['warn'].concat(message));
};

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof$2(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$1(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$1(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof$2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }
var isBrowser = typeof window !== 'undefined';
var isDisplayContentsSupported = isBrowser && 'CSS' in window && 'supports' in window.CSS && CSS.supports('display', 'contents');
var isMutationObserverSupported = isBrowser && 'MutationObserver' in window;

function capitalize(a) {
  return a[0].toUpperCase() + a.slice(1);
}

function findScrollContainer(element) {
  if (!element) {
    return undefined;
  }

  var parent = element.parentElement;

  while (parent) {
    var _window$getComputedSt = window.getComputedStyle(parent),
        overflow = _window$getComputedSt.overflow;

    if (overflow.split(' ').every(function (o) {
      return o === 'auto' || o === 'scroll';
    })) {
      return parent;
    }

    parent = parent.parentElement;
  }

  return document.documentElement;
}

function alignAxis(_ref) {
  var axis = _ref.axis,
      container = _ref.container,
      element = _ref.element,
      invertAxis = _ref.invertAxis,
      secondary = _ref.secondary,
      scrollContainer = _ref.scrollContainer,
      spacing = _ref.spacing;
  var style = window.getComputedStyle(element);
  var parent = container.parentElement;
  var scrollContainerCollisions = detectElementOverflow$1(parent, scrollContainer);
  var documentCollisions = detectElementOverflow$1(parent, document.documentElement);
  var isX = axis === 'x';
  var startProperty = isX ? 'left' : 'top';
  var endProperty = isX ? 'right' : 'bottom';
  var sizeProperty = isX ? 'width' : 'height';
  var overflowStartProperty = "overflow".concat(capitalize(startProperty));
  var overflowEndProperty = "overflow".concat(capitalize(endProperty));
  var scrollProperty = "scroll".concat(capitalize(startProperty));
  var uppercasedSizeProperty = capitalize(sizeProperty);
  var offsetSizeProperty = "offset".concat(uppercasedSizeProperty);
  var clientSizeProperty = "client".concat(uppercasedSizeProperty);
  var minSizeProperty = "min-".concat(sizeProperty);
  var scrollbarWidth = scrollContainer[offsetSizeProperty] - scrollContainer[clientSizeProperty];
  var startSpacing = _typeof$2(spacing) === 'object' ? spacing[startProperty] : spacing;
  var availableStartSpace = -Math.max(scrollContainerCollisions[overflowStartProperty], documentCollisions[overflowStartProperty] + document.documentElement[scrollProperty]) - startSpacing;
  var endSpacing = _typeof$2(spacing) === 'object' ? spacing[endProperty] : spacing;
  var availableEndSpace = -Math.max(scrollContainerCollisions[overflowEndProperty], documentCollisions[overflowEndProperty] - document.documentElement[scrollProperty]) - endSpacing - scrollbarWidth;

  if (secondary) {
    availableStartSpace += parent[clientSizeProperty];
    availableEndSpace += parent[clientSizeProperty];
  }

  var offsetSize = element[offsetSizeProperty];

  function displayStart() {
    element.style[startProperty] = 'unset';
    element.style[endProperty] = secondary ? '0' : '100%';
  }

  function displayEnd() {
    element.style[startProperty] = secondary ? '0' : '100%';
    element.style[endProperty] = 'unset';
  }

  function displayIfFits(availableSpace, display) {
    var fits = offsetSize <= availableSpace;

    if (fits) {
      display();
    }

    return fits;
  }

  function displayStartIfFits() {
    return displayIfFits(availableStartSpace, displayStart);
  }

  function displayEndIfFits() {
    return displayIfFits(availableEndSpace, displayEnd);
  }

  function displayWhereverShrinkedFits() {
    var moreSpaceStart = availableStartSpace > availableEndSpace;
    var minSize = style[minSizeProperty] && parseInt(style[minSizeProperty], 10);

    function shrinkToSize(size) {
      if (minSize && size < minSize) {
        warnOnDev("<Fit />'s child will not fit anywhere with its current ".concat(minSizeProperty, " of ").concat(minSize, "px."));
      }

      var newSize = Math.max(size, minSize || 0);
      warnOnDev("<Fit />'s child needed to have its ".concat(sizeProperty, " decreased to ").concat(newSize, "px."));
      element.style[sizeProperty] = "".concat(newSize, "px");
    }

    if (moreSpaceStart) {
      shrinkToSize(availableStartSpace);
      displayStart();
    } else {
      shrinkToSize(availableEndSpace);
      displayEnd();
    }
  }

  var fits;

  if (invertAxis) {
    fits = displayStartIfFits() || displayEndIfFits();
  } else {
    fits = displayEndIfFits() || displayStartIfFits();
  }

  if (!fits) {
    displayWhereverShrinkedFits();
  }
}

function alignMainAxis(args) {
  alignAxis(args);
}

function alignSecondaryAxis(args) {
  alignAxis(_objectSpread(_objectSpread({}, args), {}, {
    axis: args.axis === 'x' ? 'y' : 'x',
    secondary: true
  }));
}

function alignBothAxis(args) {
  var invertAxis = args.invertAxis,
      invertSecondaryAxis = args.invertSecondaryAxis,
      commonArgs = _objectWithoutProperties(args, ["invertAxis", "invertSecondaryAxis"]);

  alignMainAxis(_objectSpread(_objectSpread({}, commonArgs), {}, {
    invertAxis: invertAxis
  }));
  alignSecondaryAxis(_objectSpread(_objectSpread({}, commonArgs), {}, {
    invertAxis: invertSecondaryAxis
  }));
}

var Fit = /*#__PURE__*/function (_Component) {
  _inherits(Fit, _Component);

  var _super = _createSuper(Fit);

  function Fit() {
    var _this;

    _classCallCheck(this, Fit);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onMutation", function () {
      _this.fit();
    });

    _defineProperty(_assertThisInitialized(_this), "mutationObserver", isMutationObserverSupported && new MutationObserver(_this.onMutation));

    _defineProperty(_assertThisInitialized(_this), "fit", function () {
      var _assertThisInitialize = _assertThisInitialized(_this),
          scrollContainer = _assertThisInitialize.scrollContainer,
          container = _assertThisInitialize.container,
          element = _assertThisInitialize.element;

      if (!element) {
        return;
      }

      var elementWidth = element.clientWidth;
      var elementHeight = element.clientHeight; // No need to recalculate - already did that for current dimensions

      if (_this.elementWidth === elementWidth && _this.elementHeight === elementHeight) {
        return;
      } // Save the dimensions so that we know we don't need to repeat the function if unchanged


      _this.elementWidth = elementWidth;
      _this.elementHeight = elementHeight;
      var parent = container.parentElement; // Container was unmounted

      if (!parent) {
        return;
      }
      /**
       * We need to ensure that <Fit />'s child has a absolute position. Otherwise,
       * we wouldn't be able to place the child in the correct position.
       */


      var style = window.getComputedStyle(element);
      var position = style.position;

      if (position !== 'absolute') {
        warnOnDev('<Fit />\'s child does not have absolute position. You should apply `position: absolute` to it.');
        element.style.position = 'absolute';
      }
      /**
       * We need to ensure that <Fit />'s parent has a relative position. Otherwise,
       * we wouldn't be able to place the child in the correct position.
       */


      var parentStyle = window.getComputedStyle(parent);
      var parentPosition = parentStyle.position;

      if (parentPosition !== 'relative' && parentPosition !== 'absolute') {
        warnOnDev('<Fit />\'s parent does not have relative position. You should apply `position: relative` to it.');
        parent.style.position = 'relative';
      }

      var _this$props = _this.props,
          invertAxis = _this$props.invertAxis,
          invertSecondaryAxis = _this$props.invertSecondaryAxis,
          mainAxis = _this$props.mainAxis,
          spacing = _this$props.spacing;
      alignBothAxis({
        container: container,
        element: element,
        invertAxis: invertAxis,
        invertSecondaryAxis: invertSecondaryAxis,
        axis: mainAxis,
        scrollContainer: scrollContainer,
        spacing: spacing
      });
    });

    return _this;
  }

  _createClass(Fit, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (!isDisplayContentsSupported) {
        // eslint-disable-next-line react/no-find-dom-node
        var element = reactDom.findDOMNode(this);
        this.container = element;
        this.element = element;
        this.scrollContainer = findScrollContainer(element);
      }

      this.fit();

      if (isMutationObserverSupported) {
        this.mutationObserver.observe(this.element, {
          attributes: true,
          attributeFilter: ['class', 'style']
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var children = this.props.children;
      var child = React__default['default'].Children.only(children);

      if (isDisplayContentsSupported) {
        return /*#__PURE__*/React__default['default'].createElement("span", {
          ref: function ref(container) {
            _this2.container = container;
            var element = container && container.firstChild;
            _this2.element = element;
            _this2.scrollContainer = findScrollContainer(element);
          },
          style: {
            display: 'contents'
          }
        }, child);
      }

      return child;
    }
  }]);

  return Fit;
}(React.Component);
Fit.propTypes = {
  children: PropTypes.node,
  invertAxis: PropTypes.bool,
  invertSecondaryAxis: PropTypes.bool,
  mainAxis: PropTypes.oneOf(['x', 'y']),
  spacing: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    bottom: PropTypes.number.isRequired,
    left: PropTypes.number.isRequired,
    right: PropTypes.number.isRequired,
    top: PropTypes.number.isRequired
  })])
};
Fit.defaultProps = {
  mainAxis: 'y',
  spacing: 8
};

var Fit$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': Fit
});

var require$$5 = /*@__PURE__*/getAugmentedNamespace(Fit$1);

var DateInput = {};

var require$$2 = /*@__PURE__*/getAugmentedNamespace(esm$3);

var Divider = {};

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Divider;

var _react = _interopRequireDefault(React__default['default']);

var _propTypes = _interopRequireDefault(propTypes$1.exports);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function Divider(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/_react["default"].createElement("span", {
    className: "react-date-picker__inputGroup__divider"
  }, children);
}

Divider.propTypes = {
  children: _propTypes["default"].node
};
}(Divider));

var DayInput = {};

var Input = {};

/**
 * A function that merges React refs into one.
 * Supports both functions and ref objects created using createRef() and useRef().
 *
 * Usage:
 * ```jsx
 * <div ref={mergeRefs(ref1, ref2, ref3)} />
 * ```
 *
 * @param {...Array<Function|object>} inputRefs Array of refs
 * @returns {Function} Merged refs
 */
function mergeRefs() {
  for (var _len = arguments.length, inputRefs = new Array(_len), _key = 0; _key < _len; _key++) {
    inputRefs[_key] = arguments[_key];
  }

  var filteredInputRefs = inputRefs.filter(Boolean);

  if (filteredInputRefs.length <= 1) {
    return filteredInputRefs[0];
  }

  return function mergedRefs(ref) {
    filteredInputRefs.forEach(function (inputRef) {
      if (typeof inputRef === 'function') {
        inputRef(ref);
      } else {
        // eslint-disable-next-line no-param-reassign
        inputRef.current = ref;
      }
    });
  };
}

var esm$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': mergeRefs
});

var require$$3 = /*@__PURE__*/getAugmentedNamespace(esm$1);

var allowedVariants = ['normal', 'small-caps'];
/**
 * Gets font CSS shorthand property given element.
 *
 * @param {HTMLElement} element Element to get font CSS shorthand property from
 */

function getFontShorthand(element) {
  if (!element) {
    return '';
  }

  var style = window.getComputedStyle(element);

  if (style.font) {
    return style.font;
  }

  var isFontDefined = style['font-family'] !== '';

  if (!isFontDefined) {
    return '';
  }

  var fontVariant = allowedVariants.includes(style['font-variant']) ? style['font-variant'] : 'normal';
  return "".concat(style['font-style'], " ").concat(fontVariant, " ").concat(style['font-weight'], " ").concat(style['font-size'], " / ").concat(style['line-height'], " ").concat(style['font-family']);
}
/**
 * Measures text width given text and font CSS shorthand.
 *
 * @param {string} text Text to measure
 * @param {string} font Font to use when measuring the text
 */

function measureText(text, font) {
  var canvas = measureText.canvas || (measureText.canvas = document.createElement('canvas'));
  var context = canvas.getContext('2d'); // Context type not supported

  if (!context) {
    return null;
  }

  context.font = font;

  var _context$measureText = context.measureText(text),
      width = _context$measureText.width;

  return Math.ceil(width);
}
/**
 * Updates input element width to fit its content given input element
 * @param {HTMLInputElement} element
 */

function updateInputWidth(element) {
  if (typeof window === 'undefined' || !element) {
    return null;
  }

  var font = getFontShorthand(element);
  var text = element.value || element.placeholder;
  var width = measureText(text, font);

  if (width === null) {
    return null;
  }

  element.style.width = "".concat(width, "px");
  return width;
}

var esm = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getFontShorthand: getFontShorthand,
  measureText: measureText,
  updateInputWidth: updateInputWidth,
  'default': updateInputWidth
});

var require$$4 = /*@__PURE__*/getAugmentedNamespace(esm);

var propTypes = {};

Object.defineProperty(propTypes, "__esModule", {
  value: true
});
propTypes.isRef = propTypes.isMaxDate = propTypes.isMinDate = propTypes.isValueType = void 0;

var _propTypes = _interopRequireDefault$1(propTypes$1.exports);

function _interopRequireDefault$1(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof$1(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

function _toConsumableArray$1(arr) { return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1(); }

function _nonIterableSpread$1() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

function _iterableToArray$1(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles$1(arr) { if (Array.isArray(arr)) return _arrayLikeToArray$1(arr); }

function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var allViews = ['century', 'decade', 'year', 'month'];
var allValueTypes = [].concat(_toConsumableArray$1(allViews.slice(1)), ['day']);

var isValueType = _propTypes["default"].oneOf(allValueTypes);

propTypes.isValueType = isValueType;

var isMinDate = function isMinDate(props, propName, componentName) {
  var minDate = props[propName];

  if (!minDate) {
    return null;
  }

  if (!(minDate instanceof Date)) {
    return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof$1(minDate), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
  }

  var maxDate = props.maxDate;

  if (maxDate && minDate > maxDate) {
    return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof$1(minDate), "` supplied to `").concat(componentName, "`, minDate cannot be larger than maxDate."));
  }

  return null;
};

propTypes.isMinDate = isMinDate;

var isMaxDate = function isMaxDate(props, propName, componentName) {
  var maxDate = props[propName];

  if (!maxDate) {
    return null;
  }

  if (!(maxDate instanceof Date)) {
    return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof$1(maxDate), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
  }

  var minDate = props.minDate;

  if (minDate && maxDate < minDate) {
    return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof$1(maxDate), "` supplied to `").concat(componentName, "`, maxDate cannot be smaller than minDate."));
  }

  return null;
};

propTypes.isMaxDate = isMaxDate;

var isRef = _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].shape({
  // eslint-disable-next-line react/forbid-prop-types
  current: _propTypes["default"].any
})]);

propTypes.isRef = isRef;

(function (exports) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Input;

var _react = _interopRequireDefault(React__default['default']);

var _propTypes = _interopRequireDefault(propTypes$1.exports);

var _mergeClassNames = _interopRequireDefault(require$$3$1);

var _mergeRefs = _interopRequireDefault(require$$3);

var _updateInputWidth = _interopRequireWildcard(require$$4);

var _propTypes2 = propTypes;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-disable jsx-a11y/no-autofocus */
var isEdgeLegacy = typeof window !== 'undefined' && 'navigator' in window && navigator.userAgent.match(/ Edge\/1/);

function onFocus(event) {
  var target = event.target;

  if (isEdgeLegacy) {
    requestAnimationFrame(function () {
      return target.select();
    });
  } else {
    target.select();
  }
}

function updateInputWidthOnFontLoad(element) {
  if (!document.fonts) {
    return;
  }

  var font = (0, _updateInputWidth.getFontShorthand)(element);

  if (!font) {
    return;
  }

  var isFontLoaded = document.fonts.check(font);

  if (isFontLoaded) {
    return;
  }

  function onLoadingDone() {
    (0, _updateInputWidth["default"])(element);
  }

  document.fonts.addEventListener('loadingdone', onLoadingDone);
}

function getSelectionString() {
  if (typeof window === 'undefined') {
    return null;
  }

  return window.getSelection().toString();
}

function makeOnKeyPress(maxLength) {
  /**
   * Prevents keystrokes that would not produce a number or when value after keystroke would
   * exceed maxLength.
   */
  return function onKeyPress(event) {
    var key = event.key,
        input = event.target;
    var value = input.value;
    var isNumberKey = !isNaN(parseInt(key, 10));
    var selection = getSelectionString();

    if (isNumberKey && (selection || value.length < maxLength)) {
      return;
    }

    event.preventDefault();
  };
}

function Input(_ref) {
  var ariaLabel = _ref.ariaLabel,
      autoFocus = _ref.autoFocus,
      className = _ref.className,
      disabled = _ref.disabled,
      inputRef = _ref.inputRef,
      max = _ref.max,
      min = _ref.min,
      name = _ref.name,
      nameForClass = _ref.nameForClass,
      onChange = _ref.onChange,
      onKeyDown = _ref.onKeyDown,
      _onKeyUp = _ref.onKeyUp,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? '--' : _ref$placeholder,
      required = _ref.required,
      showLeadingZeros = _ref.showLeadingZeros,
      step = _ref.step,
      value = _ref.value;
  var hasLeadingZero = showLeadingZeros && value && value < 10 && (value === '0' || !value.toString().startsWith('0'));
  var maxLength = max ? max.toString().length : null;
  return [hasLeadingZero && /*#__PURE__*/_react["default"].createElement("span", {
    key: "leadingZero",
    className: "".concat(className, "__leadingZero")
  }, "0"), /*#__PURE__*/_react["default"].createElement("input", {
    key: "input",
    "aria-label": ariaLabel,
    autoComplete: "off",
    autoFocus: autoFocus,
    className: (0, _mergeClassNames["default"])("".concat(className, "__input"), "".concat(className, "__").concat(nameForClass || name), hasLeadingZero && "".concat(className, "__input--hasLeadingZero")),
    "data-input": "true",
    disabled: disabled,
    inputMode: "numeric",
    max: max,
    min: min,
    name: name,
    onChange: onChange,
    onFocus: onFocus,
    onKeyDown: onKeyDown,
    onKeyPress: makeOnKeyPress(maxLength),
    onKeyUp: function onKeyUp(event) {
      (0, _updateInputWidth["default"])(event.target);

      if (_onKeyUp) {
        _onKeyUp(event);
      }
    },
    placeholder: placeholder,
    ref: (0, _mergeRefs["default"])(_updateInputWidth["default"], updateInputWidthOnFontLoad, inputRef),
    required: required,
    step: step,
    type: "number",
    value: value !== null ? value : ''
  })];
}

Input.propTypes = {
  ariaLabel: _propTypes["default"].string,
  autoFocus: _propTypes["default"].bool,
  className: _propTypes["default"].string.isRequired,
  disabled: _propTypes["default"].bool,
  inputRef: _propTypes2.isRef,
  max: _propTypes["default"].number,
  min: _propTypes["default"].number,
  name: _propTypes["default"].string,
  nameForClass: _propTypes["default"].string,
  onChange: _propTypes["default"].func,
  onKeyDown: _propTypes["default"].func,
  onKeyUp: _propTypes["default"].func,
  placeholder: _propTypes["default"].string,
  required: _propTypes["default"].bool,
  showLeadingZeros: _propTypes["default"].bool,
  step: _propTypes["default"].number,
  value: _propTypes["default"].string
};
}(Input));

var utils$1 = {};

Object.defineProperty(utils$1, "__esModule", {
  value: true
});
utils$1.between = between;
utils$1.safeMin = safeMin;
utils$1.safeMax = safeMax;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Returns a value no smaller than min and no larger than max.
 *
 * @param {*} value Value to return.
 * @param {*} min Minimum return value.
 * @param {*} max Maximum return value.
 */
function between(value, min, max) {
  if (min && min > value) {
    return min;
  }

  if (max && max < value) {
    return max;
  }

  return value;
}

function isValidNumber(num) {
  return num !== null && num !== false && !Number.isNaN(Number(num));
}

function safeMin() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Math.min.apply(Math, _toConsumableArray(args.filter(isValidNumber)));
}

function safeMax() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return Math.max.apply(Math, _toConsumableArray(args.filter(isValidNumber)));
}

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = DayInput;

var _react = _interopRequireDefault(React__default['default']);

var _propTypes = _interopRequireDefault(propTypes$1.exports);

var _dateUtils = require$$2;

var _Input = _interopRequireDefault(Input);

var _propTypes2 = propTypes;

var _utils = utils$1;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function DayInput(_ref) {
  var maxDate = _ref.maxDate,
      minDate = _ref.minDate,
      month = _ref.month,
      year = _ref.year,
      otherProps = _objectWithoutProperties(_ref, ["maxDate", "minDate", "month", "year"]);

  var currentMonthMaxDays = function () {
    if (!month) {
      return 31;
    }

    return (0, _dateUtils.getDaysInMonth)(new Date(year, month - 1, 1));
  }();

  function isSameMonth(date) {
    return date && year === (0, _dateUtils.getYear)(date).toString() && month === (0, _dateUtils.getMonthHuman)(date).toString();
  }

  var maxDay = (0, _utils.safeMin)(currentMonthMaxDays, isSameMonth(maxDate) && (0, _dateUtils.getDate)(maxDate));
  var minDay = (0, _utils.safeMax)(1, isSameMonth(minDate) && (0, _dateUtils.getDate)(minDate));
  return /*#__PURE__*/_react["default"].createElement(_Input["default"], _extends({
    max: maxDay,
    min: minDay,
    name: "day"
  }, otherProps));
}

DayInput.propTypes = {
  ariaLabel: _propTypes["default"].string,
  className: _propTypes["default"].string.isRequired,
  disabled: _propTypes["default"].bool,
  inputRef: _propTypes2.isRef,
  maxDate: _propTypes2.isMaxDate,
  minDate: _propTypes2.isMinDate,
  month: _propTypes["default"].string,
  onChange: _propTypes["default"].func,
  onKeyDown: _propTypes["default"].func,
  onKeyUp: _propTypes["default"].func,
  placeholder: _propTypes["default"].string,
  required: _propTypes["default"].bool,
  showLeadingZeros: _propTypes["default"].bool,
  value: _propTypes["default"].string,
  year: _propTypes["default"].string
};
}(DayInput));

var MonthInput = {};

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = MonthInput;

var _react = _interopRequireDefault(React__default['default']);

var _propTypes = _interopRequireDefault(propTypes$1.exports);

var _dateUtils = require$$2;

var _Input = _interopRequireDefault(Input);

var _propTypes2 = propTypes;

var _utils = utils$1;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function MonthInput(_ref) {
  var maxDate = _ref.maxDate,
      minDate = _ref.minDate,
      year = _ref.year,
      otherProps = _objectWithoutProperties(_ref, ["maxDate", "minDate", "year"]);

  function isSameYear(date) {
    return date && year === (0, _dateUtils.getYear)(date).toString();
  }

  var maxMonth = (0, _utils.safeMin)(12, isSameYear(maxDate) && (0, _dateUtils.getMonthHuman)(maxDate));
  var minMonth = (0, _utils.safeMax)(1, isSameYear(minDate) && (0, _dateUtils.getMonthHuman)(minDate));
  return /*#__PURE__*/_react["default"].createElement(_Input["default"], _extends({
    max: maxMonth,
    min: minMonth,
    name: "month"
  }, otherProps));
}

MonthInput.propTypes = {
  ariaLabel: _propTypes["default"].string,
  className: _propTypes["default"].string.isRequired,
  disabled: _propTypes["default"].bool,
  inputRef: _propTypes2.isRef,
  maxDate: _propTypes2.isMaxDate,
  minDate: _propTypes2.isMinDate,
  onChange: _propTypes["default"].func,
  onKeyDown: _propTypes["default"].func,
  onKeyUp: _propTypes["default"].func,
  placeholder: _propTypes["default"].string,
  required: _propTypes["default"].bool,
  showLeadingZeros: _propTypes["default"].bool,
  value: _propTypes["default"].string,
  year: _propTypes["default"].string
};
}(MonthInput));

var MonthSelect = {};

var dateFormatter = {};

var require$$0 = /*@__PURE__*/getAugmentedNamespace(esm$4);

Object.defineProperty(dateFormatter, "__esModule", {
  value: true
});
dateFormatter.getFormatter = getFormatter;
dateFormatter.formatShortMonth = dateFormatter.formatMonth = void 0;

var _getUserLocale = _interopRequireDefault(require$$0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function getFormatter(options) {
  return function (locale, date) {
    return date.toLocaleString(locale || (0, _getUserLocale["default"])(), options);
  };
}
/**
 * Changes the hour in a Date to ensure right date formatting even if DST is messed up.
 * Workaround for bug in WebKit and Firefox with historical dates.
 * For more details, see:
 * https://bugs.chromium.org/p/chromium/issues/detail?id=750465
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1385643
 *
 * @param {Date} date Date.
 */


function toSafeHour(date) {
  var safeDate = new Date(date);
  return new Date(safeDate.setHours(12));
}

function getSafeFormatter(options) {
  return function (locale, date) {
    return getFormatter(options)(locale, toSafeHour(date));
  };
}

var formatMonthOptions = {
  month: 'long'
};
var formatShortMonthOptions = {
  month: 'short'
};
var formatMonth = getSafeFormatter(formatMonthOptions);
dateFormatter.formatMonth = formatMonth;
var formatShortMonth = getSafeFormatter(formatShortMonthOptions);
dateFormatter.formatShortMonth = formatShortMonth;

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = MonthSelect;

var _react = _interopRequireDefault(React__default['default']);

var _propTypes = _interopRequireDefault(propTypes$1.exports);

var _mergeClassNames = _interopRequireDefault(require$$3$1);

var _dateUtils = require$$2;

var _dateFormatter = dateFormatter;

var _propTypes2 = propTypes;

var _utils = utils$1;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function MonthSelect(_ref) {
  var ariaLabel = _ref.ariaLabel,
      className = _ref.className,
      inputRef = _ref.inputRef,
      locale = _ref.locale,
      maxDate = _ref.maxDate,
      minDate = _ref.minDate,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? '--' : _ref$placeholder,
      _short = _ref["short"],
      value = _ref.value,
      year = _ref.year,
      otherProps = _objectWithoutProperties(_ref, ["ariaLabel", "className", "inputRef", "locale", "maxDate", "minDate", "placeholder", "short", "value", "year"]);

  function isSameYear(date) {
    return date && year === (0, _dateUtils.getYear)(date).toString();
  }

  var maxMonth = (0, _utils.safeMin)(12, isSameYear(maxDate) && (0, _dateUtils.getMonthHuman)(maxDate));
  var minMonth = (0, _utils.safeMax)(1, isSameYear(minDate) && (0, _dateUtils.getMonthHuman)(minDate));

  var dates = _toConsumableArray(Array(12)).map(function (el, index) {
    return new Date(2019, index, 1);
  });

  var name = 'month';
  var formatter = _short ? _dateFormatter.formatShortMonth : _dateFormatter.formatMonth;
  return /*#__PURE__*/_react["default"].createElement("select", _extends({
    "aria-label": ariaLabel,
    className: (0, _mergeClassNames["default"])("".concat(className, "__input"), "".concat(className, "__").concat(name)),
    "data-input": "true",
    name: name,
    ref: inputRef,
    value: value !== null ? value : ''
  }, otherProps), !value && /*#__PURE__*/_react["default"].createElement("option", {
    value: ""
  }, placeholder), dates.map(function (date) {
    var month = (0, _dateUtils.getMonthHuman)(date);
    var disabled = month < minMonth || month > maxMonth;
    return /*#__PURE__*/_react["default"].createElement("option", {
      key: month,
      disabled: disabled,
      value: month
    }, formatter(locale, date));
  }));
}

MonthSelect.propTypes = {
  ariaLabel: _propTypes["default"].string,
  className: _propTypes["default"].string.isRequired,
  disabled: _propTypes["default"].bool,
  inputRef: _propTypes2.isRef,
  locale: _propTypes["default"].string,
  maxDate: _propTypes2.isMaxDate,
  minDate: _propTypes2.isMinDate,
  onChange: _propTypes["default"].func,
  onKeyDown: _propTypes["default"].func,
  onKeyUp: _propTypes["default"].func,
  placeholder: _propTypes["default"].string,
  required: _propTypes["default"].bool,
  "short": _propTypes["default"].bool,
  value: _propTypes["default"].string,
  year: _propTypes["default"].string
};
}(MonthSelect));

var YearInput = {};

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = YearInput;

var _react = _interopRequireDefault(React__default['default']);

var _propTypes = _interopRequireDefault(propTypes$1.exports);

var _dateUtils = require$$2;

var _Input = _interopRequireDefault(Input);

var _propTypes2 = propTypes;

var _utils = utils$1;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function YearInput(_ref) {
  var maxDate = _ref.maxDate,
      minDate = _ref.minDate,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? '----' : _ref$placeholder,
      valueType = _ref.valueType,
      otherProps = _objectWithoutProperties(_ref, ["maxDate", "minDate", "placeholder", "valueType"]);

  var maxYear = (0, _utils.safeMin)(275760, maxDate && (0, _dateUtils.getYear)(maxDate));
  var minYear = (0, _utils.safeMax)(1, minDate && (0, _dateUtils.getYear)(minDate));

  var yearStep = function () {
    if (valueType === 'century') {
      return 10;
    }

    return 1;
  }();

  return /*#__PURE__*/_react["default"].createElement(_Input["default"], _extends({
    max: maxYear,
    min: minYear,
    name: "year",
    placeholder: placeholder,
    step: yearStep
  }, otherProps));
}

YearInput.propTypes = {
  ariaLabel: _propTypes["default"].string,
  className: _propTypes["default"].string.isRequired,
  disabled: _propTypes["default"].bool,
  inputRef: _propTypes2.isRef,
  maxDate: _propTypes2.isMaxDate,
  minDate: _propTypes2.isMinDate,
  onChange: _propTypes["default"].func,
  onKeyDown: _propTypes["default"].func,
  onKeyUp: _propTypes["default"].func,
  placeholder: _propTypes["default"].string,
  required: _propTypes["default"].bool,
  value: _propTypes["default"].string,
  valueType: _propTypes2.isValueType
};
}(YearInput));

var NativeInput = {};

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = NativeInput;

var _react = _interopRequireDefault(React__default['default']);

var _propTypes = _interopRequireDefault(propTypes$1.exports);

var _dateUtils = require$$2;

var _propTypes2 = propTypes;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function NativeInput(_ref) {
  var ariaLabel = _ref.ariaLabel,
      disabled = _ref.disabled,
      maxDate = _ref.maxDate,
      minDate = _ref.minDate,
      name = _ref.name,
      onChange = _ref.onChange,
      required = _ref.required,
      value = _ref.value,
      valueType = _ref.valueType;

  var nativeInputType = function () {
    switch (valueType) {
      case 'decade':
      case 'year':
        return 'number';

      case 'month':
        return 'month';

      case 'day':
        return 'date';

      default:
        throw new Error('Invalid valueType.');
    }
  }();

  var nativeValueParser = function () {
    switch (valueType) {
      case 'century':
      case 'decade':
      case 'year':
        return _dateUtils.getYear;

      case 'month':
        return _dateUtils.getISOLocalMonth;

      case 'day':
        return _dateUtils.getISOLocalDate;

      default:
        throw new Error('Invalid valueType.');
    }
  }();

  function stopPropagation(event) {
    event.stopPropagation();
  }

  return /*#__PURE__*/_react["default"].createElement("input", {
    "aria-label": ariaLabel,
    disabled: disabled,
    max: maxDate ? nativeValueParser(maxDate) : null,
    min: minDate ? nativeValueParser(minDate) : null,
    name: name,
    onChange: onChange,
    onFocus: stopPropagation,
    required: required,
    style: {
      visibility: 'hidden',
      position: 'absolute',
      zIndex: '-999'
    },
    type: nativeInputType,
    value: value ? nativeValueParser(value) : ''
  });
}

NativeInput.propTypes = {
  ariaLabel: _propTypes["default"].string,
  disabled: _propTypes["default"].bool,
  maxDate: _propTypes2.isMaxDate,
  minDate: _propTypes2.isMinDate,
  name: _propTypes["default"].string,
  onChange: _propTypes["default"].func,
  required: _propTypes["default"].bool,
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].instanceOf(Date)]),
  valueType: _propTypes2.isValueType
};
}(NativeInput));

var dates = {};

Object.defineProperty(dates, "__esModule", {
  value: true
});
dates.getBegin = getBegin;
dates.getEnd = getEnd;

var _dateUtils = require$$2;

/**
 * Returns the beginning of a given range.
 *
 * @param {string} rangeType Range type (e.g. 'day')
 * @param {Date} date Date.
 */
function getBegin(rangeType, date) {
  switch (rangeType) {
    case 'century':
      return (0, _dateUtils.getCenturyStart)(date);

    case 'decade':
      return (0, _dateUtils.getDecadeStart)(date);

    case 'year':
      return (0, _dateUtils.getYearStart)(date);

    case 'month':
      return (0, _dateUtils.getMonthStart)(date);

    case 'day':
      return (0, _dateUtils.getDayStart)(date);

    default:
      throw new Error("Invalid rangeType: ".concat(rangeType));
  }
}
/**
 * Returns the end of a given range.
 *
 * @param {string} rangeType Range type (e.g. 'day')
 * @param {Date} date Date.
 */


function getEnd(rangeType, date) {
  switch (rangeType) {
    case 'century':
      return (0, _dateUtils.getCenturyEnd)(date);

    case 'decade':
      return (0, _dateUtils.getDecadeEnd)(date);

    case 'year':
      return (0, _dateUtils.getYearEnd)(date);

    case 'month':
      return (0, _dateUtils.getMonthEnd)(date);

    case 'day':
      return (0, _dateUtils.getDayEnd)(date);

    default:
      throw new Error("Invalid rangeType: ".concat(rangeType));
  }
}

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(React__default['default']);

var _propTypes = _interopRequireDefault(propTypes$1.exports);

var _dateUtils = require$$2;

var _Divider = _interopRequireDefault(Divider);

var _DayInput = _interopRequireDefault(DayInput);

var _MonthInput = _interopRequireDefault(MonthInput);

var _MonthSelect = _interopRequireDefault(MonthSelect);

var _YearInput = _interopRequireDefault(YearInput);

var _NativeInput = _interopRequireDefault(NativeInput);

var _dateFormatter = dateFormatter;

var _dates = dates;

var _propTypes2 = propTypes;

var _utils = utils$1;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var defaultMinDate = new Date();
defaultMinDate.setFullYear(1, 0, 1);
defaultMinDate.setHours(0, 0, 0, 0);
var defaultMaxDate = new Date(8.64e15);
var allViews = ['century', 'decade', 'year', 'month'];
var allValueTypes = [].concat(_toConsumableArray(allViews.slice(1)), ['day']);

function toDate(value) {
  if (value instanceof Date) {
    return value;
  }

  return new Date(value);
}

function datesAreDifferent(date1, date2) {
  return date1 && !date2 || !date1 && date2 || date1 && date2 && date1.getTime() !== date2.getTime();
}
/**
 * Returns value type that can be returned with currently applied settings.
 */


function getValueType(maxDetail) {
  return allValueTypes[allViews.indexOf(maxDetail)];
}

function getValue(value, index) {
  if (!value) {
    return null;
  }

  var rawValue = Array.isArray(value) && value.length === 2 ? value[index] : value;

  if (!rawValue) {
    return null;
  }

  var valueDate = toDate(rawValue);

  if (isNaN(valueDate.getTime())) {
    throw new Error("Invalid date: ".concat(value));
  }

  return valueDate;
}

function getDetailValue(_ref, index) {
  var value = _ref.value,
      minDate = _ref.minDate,
      maxDate = _ref.maxDate,
      maxDetail = _ref.maxDetail;
  var valuePiece = getValue(value, index);

  if (!valuePiece) {
    return null;
  }

  var valueType = getValueType(maxDetail);
  var detailValueFrom = [_dates.getBegin, _dates.getEnd][index](valueType, valuePiece);
  return (0, _utils.between)(detailValueFrom, minDate, maxDate);
}

var getDetailValueFrom = function getDetailValueFrom(args) {
  return getDetailValue(args, 0);
};

var getDetailValueTo = function getDetailValueTo(args) {
  return getDetailValue(args, 1);
};

var getDetailValueArray = function getDetailValueArray(args) {
  var value = args.value;

  if (Array.isArray(value)) {
    return value;
  }

  return [getDetailValueFrom, getDetailValueTo].map(function (fn) {
    return fn(args);
  });
};

function isInternalInput(element) {
  return element.getAttribute('data-input') === 'true';
}

function findInput(element, property) {
  var nextElement = element;

  do {
    nextElement = nextElement[property];
  } while (nextElement && !isInternalInput(nextElement));

  return nextElement;
}

function focus(element) {
  if (element) {
    element.focus();
  }
}

function _renderCustomInputs(placeholder, elementFunctions, allowMultipleInstances) {
  var usedFunctions = [];
  var pattern = new RegExp(Object.keys(elementFunctions).map(function (el) {
    return "".concat(el, "+");
  }).join('|'), 'g');
  var matches = placeholder.match(pattern);
  return placeholder.split(pattern).reduce(function (arr, element, index) {
    var divider = element &&
    /*#__PURE__*/
    // eslint-disable-next-line react/no-array-index-key
    _react["default"].createElement(_Divider["default"], {
      key: "separator_".concat(index)
    }, element);

    var res = [].concat(_toConsumableArray(arr), [divider]);
    var currentMatch = matches && matches[index];

    if (currentMatch) {
      var renderFunction = elementFunctions[currentMatch] || elementFunctions[Object.keys(elementFunctions).find(function (elementFunction) {
        return currentMatch.match(elementFunction);
      })];

      if (!allowMultipleInstances && usedFunctions.includes(renderFunction)) {
        res.push(currentMatch);
      } else {
        res.push(renderFunction(currentMatch, index));
        usedFunctions.push(renderFunction);
      }
    }

    return res;
  }, []);
}

var DateInput = /*#__PURE__*/function (_PureComponent) {
  _inherits(DateInput, _PureComponent);

  var _super = _createSuper(DateInput);

  function DateInput() {
    var _this;

    _classCallCheck(this, DateInput);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      year: null,
      month: null,
      day: null
    });

    _defineProperty(_assertThisInitialized(_this), "dayInput", /*#__PURE__*/(0, _react.createRef)());

    _defineProperty(_assertThisInitialized(_this), "monthInput", /*#__PURE__*/(0, _react.createRef)());

    _defineProperty(_assertThisInitialized(_this), "yearInput", /*#__PURE__*/(0, _react.createRef)());

    _defineProperty(_assertThisInitialized(_this), "onClick", function (event) {
      if (event.target === event.currentTarget) {
        // Wrapper was directly clicked
        var firstInput = event.target.children[1];
        focus(firstInput);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onKeyDown", function (event) {
      switch (event.key) {
        case 'ArrowLeft':
        case 'ArrowRight':
        case _this.divider:
          {
            event.preventDefault();
            var input = event.target;
            var property = event.key === 'ArrowLeft' ? 'previousElementSibling' : 'nextElementSibling';
            var nextInput = findInput(input, property);
            focus(nextInput);
            break;
          }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onKeyUp", function (event) {
      var key = event.key,
          input = event.target;
      var isNumberKey = !isNaN(parseInt(key, 10));

      if (!isNumberKey) {
        return;
      }

      var value = input.value;
      var max = input.getAttribute('max');
      /**
       * Given 1, the smallest possible number the user could type by adding another digit is 10.
       * 10 would be a valid value given max = 12, so we won't jump to the next input.
       * However, given 2, smallers possible number would be 20, and thus keeping the focus in
       * this field doesn't make sense.
       */

      if (value * 10 > max || value.length >= max.length) {
        var property = 'nextElementSibling';
        var nextInput = findInput(input, property);
        focus(nextInput);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onChange", function (event) {
      var _event$target = event.target,
          name = _event$target.name,
          value = _event$target.value;

      _this.setState(_defineProperty({}, name, value), _this.onChangeExternal);
    });

    _defineProperty(_assertThisInitialized(_this), "onChangeNative", function (event) {
      var onChange = _this.props.onChange;
      var value = event.target.value;

      if (!onChange) {
        return;
      }

      var processedValue = function () {
        if (!value) {
          return null;
        }

        var _value$split = value.split('-'),
            _value$split2 = _slicedToArray(_value$split, 3),
            yearString = _value$split2[0],
            monthString = _value$split2[1],
            dayString = _value$split2[2];

        var year = parseInt(yearString, 10);
        var monthIndex = parseInt(monthString, 10) - 1 || 0;
        var day = parseInt(dayString, 10) || 1;
        var proposedValue = new Date();
        proposedValue.setFullYear(year, monthIndex, day);
        proposedValue.setHours(0, 0, 0, 0);
        return proposedValue;
      }();

      onChange(processedValue, false);
    });

    _defineProperty(_assertThisInitialized(_this), "onChangeExternal", function () {
      var onChange = _this.props.onChange;

      if (!onChange) {
        return;
      }

      var formElements = [_this.dayInput.current, _this.monthInput.current, _this.yearInput.current].filter(Boolean);
      var values = {};
      formElements.forEach(function (formElement) {
        values[formElement.name] = formElement.value;
      });

      if (formElements.every(function (formElement) {
        return !formElement.value;
      })) {
        onChange(null, false);
      } else if (formElements.every(function (formElement) {
        return formElement.value && formElement.validity.valid;
      })) {
        var year = parseInt(values.year, 10);
        var monthIndex = parseInt(values.month, 10) - 1 || 0;
        var day = parseInt(values.day || 1, 10);
        var proposedValue = new Date();
        proposedValue.setFullYear(year, monthIndex, day);
        proposedValue.setHours(0, 0, 0, 0);

        var processedValue = _this.getProcessedValue(proposedValue);

        onChange(processedValue, false);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "renderDay", function (currentMatch, index) {
      var _this$props = _this.props,
          autoFocus = _this$props.autoFocus,
          dayAriaLabel = _this$props.dayAriaLabel,
          dayPlaceholder = _this$props.dayPlaceholder,
          showLeadingZeros = _this$props.showLeadingZeros;
      var _this$state = _this.state,
          day = _this$state.day,
          month = _this$state.month,
          year = _this$state.year;

      if (currentMatch && currentMatch.length > 2) {
        throw new Error("Unsupported token: ".concat(currentMatch));
      }

      var showLeadingZerosFromFormat = currentMatch && currentMatch.length === 2;
      return /*#__PURE__*/_react["default"].createElement(_DayInput["default"], _extends({
        key: "day"
      }, _this.commonInputProps, {
        ariaLabel: dayAriaLabel,
        autoFocus: index === 0 && autoFocus,
        inputRef: _this.dayInput,
        month: month,
        placeholder: dayPlaceholder,
        showLeadingZeros: showLeadingZerosFromFormat || showLeadingZeros,
        value: day,
        year: year
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "renderMonth", function (currentMatch, index) {
      var _this$props2 = _this.props,
          autoFocus = _this$props2.autoFocus,
          locale = _this$props2.locale,
          monthAriaLabel = _this$props2.monthAriaLabel,
          monthPlaceholder = _this$props2.monthPlaceholder,
          showLeadingZeros = _this$props2.showLeadingZeros;
      var _this$state2 = _this.state,
          month = _this$state2.month,
          year = _this$state2.year;

      if (currentMatch && currentMatch.length > 4) {
        throw new Error("Unsupported token: ".concat(currentMatch));
      }

      if (currentMatch.length > 2) {
        return /*#__PURE__*/_react["default"].createElement(_MonthSelect["default"], _extends({
          key: "month"
        }, _this.commonInputProps, {
          ariaLabel: monthAriaLabel,
          autoFocus: index === 0 && autoFocus,
          inputRef: _this.monthInput,
          locale: locale,
          placeholder: monthPlaceholder,
          "short": currentMatch.length === 3,
          value: month,
          year: year
        }));
      }

      var showLeadingZerosFromFormat = currentMatch && currentMatch.length === 2;
      return /*#__PURE__*/_react["default"].createElement(_MonthInput["default"], _extends({
        key: "month"
      }, _this.commonInputProps, {
        ariaLabel: monthAriaLabel,
        autoFocus: index === 0 && autoFocus,
        inputRef: _this.monthInput,
        placeholder: monthPlaceholder,
        showLeadingZeros: showLeadingZerosFromFormat || showLeadingZeros,
        value: month,
        year: year
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "renderYear", function (currentMatch, index) {
      var _this$props3 = _this.props,
          autoFocus = _this$props3.autoFocus,
          yearAriaLabel = _this$props3.yearAriaLabel,
          yearPlaceholder = _this$props3.yearPlaceholder;
      var year = _this.state.year;
      return /*#__PURE__*/_react["default"].createElement(_YearInput["default"], _extends({
        key: "year"
      }, _this.commonInputProps, {
        ariaLabel: yearAriaLabel,
        autoFocus: index === 0 && autoFocus,
        inputRef: _this.yearInput,
        placeholder: yearPlaceholder,
        value: year,
        valueType: _this.valueType
      }));
    });

    return _this;
  }

  _createClass(DateInput, [{
    key: "getProcessedValue",

    /**
     * Gets current value in a desired format.
     */
    value: function getProcessedValue(value) {
      var _this$props4 = this.props,
          minDate = _this$props4.minDate,
          maxDate = _this$props4.maxDate,
          maxDetail = _this$props4.maxDetail,
          returnValue = _this$props4.returnValue;

      var processFunction = function () {
        switch (returnValue) {
          case 'start':
            return getDetailValueFrom;

          case 'end':
            return getDetailValueTo;

          case 'range':
            return getDetailValueArray;

          default:
            throw new Error('Invalid returnValue.');
        }
      }();

      return processFunction({
        value: value,
        minDate: minDate,
        maxDate: maxDate,
        maxDetail: maxDetail
      });
    }
  }, {
    key: "renderCustomInputs",
    value: function renderCustomInputs() {
      var placeholder = this.placeholder;
      var format = this.props.format;
      var elementFunctions = {
        d: this.renderDay,
        M: this.renderMonth,
        y: this.renderYear
      };
      var allowMultipleInstances = typeof format !== 'undefined';
      return _renderCustomInputs(placeholder, elementFunctions, allowMultipleInstances);
    }
  }, {
    key: "renderNativeInput",
    value: function renderNativeInput() {
      var _this$props5 = this.props,
          disabled = _this$props5.disabled,
          maxDate = _this$props5.maxDate,
          minDate = _this$props5.minDate,
          name = _this$props5.name,
          nativeInputAriaLabel = _this$props5.nativeInputAriaLabel,
          required = _this$props5.required;
      var value = this.state.value;
      return /*#__PURE__*/_react["default"].createElement(_NativeInput["default"], {
        key: "date",
        ariaLabel: nativeInputAriaLabel,
        disabled: disabled,
        maxDate: maxDate || defaultMaxDate,
        minDate: minDate || defaultMinDate,
        name: name,
        onChange: this.onChangeNative,
        required: required,
        value: value,
        valueType: this.valueType
      });
    }
  }, {
    key: "render",
    value: function render() {
      var className = this.props.className;
      /* eslint-disable jsx-a11y/click-events-have-key-events */

      /* eslint-disable jsx-a11y/no-static-element-interactions */

      return /*#__PURE__*/_react["default"].createElement("div", {
        className: className,
        onClick: this.onClick
      }, this.renderNativeInput(), this.renderCustomInputs());
    }
  }, {
    key: "formatDate",
    get: function get() {
      var maxDetail = this.props.maxDetail;
      var options = {
        year: 'numeric'
      };
      var level = allViews.indexOf(maxDetail);

      if (level >= 2) {
        options.month = 'numeric';
      }

      if (level >= 3) {
        options.day = 'numeric';
      }

      return (0, _dateFormatter.getFormatter)(options);
    }
  }, {
    key: "divider",
    get: function get() {
      var dividers = this.placeholder.match(/[^0-9a-z]/i);
      return dividers ? dividers[0] : null;
    }
  }, {
    key: "placeholder",
    get: function get() {
      var _this$props6 = this.props,
          format = _this$props6.format,
          locale = _this$props6.locale;

      if (format) {
        return format;
      }

      var year = 2017;
      var monthIndex = 11;
      var day = 11;
      var date = new Date(year, monthIndex, day);
      var formattedDate = this.formatDate(locale, date);
      var datePieces = ['year', 'month', 'day'];
      var datePieceReplacements = ['y', 'M', 'd'];

      function formatDatePiece(name, dateToFormat) {
        return (0, _dateFormatter.getFormatter)(_defineProperty({
          useGrouping: false
        }, name, 'numeric'))(locale, dateToFormat).match(/\d{1,}/);
      }

      var placeholder = formattedDate;
      datePieces.forEach(function (datePiece, index) {
        var formattedDatePiece = formatDatePiece(datePiece, date);
        var datePieceReplacement = datePieceReplacements[index];
        placeholder = placeholder.replace(formattedDatePiece, datePieceReplacement);
      });
      return placeholder;
    }
  }, {
    key: "commonInputProps",
    get: function get() {
      var _this$props7 = this.props,
          className = _this$props7.className,
          disabled = _this$props7.disabled,
          isCalendarOpen = _this$props7.isCalendarOpen,
          maxDate = _this$props7.maxDate,
          minDate = _this$props7.minDate,
          required = _this$props7.required;
      return {
        className: className,
        disabled: disabled,
        maxDate: maxDate || defaultMaxDate,
        minDate: minDate || defaultMinDate,
        onChange: this.onChange,
        onKeyDown: this.onKeyDown,
        onKeyUp: this.onKeyUp,
        // This is only for showing validity when editing
        required: required || isCalendarOpen
      };
    }
  }, {
    key: "valueType",
    get: function get() {
      var maxDetail = this.props.maxDetail;
      return getValueType(maxDetail);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var minDate = nextProps.minDate,
          maxDate = nextProps.maxDate,
          maxDetail = nextProps.maxDetail;
      var nextState = {};
      /**
       * If isCalendarOpen flag has changed, we have to update it.
       * It's saved in state purely for use in getDerivedStateFromProps.
       */

      if (nextProps.isCalendarOpen !== prevState.isCalendarOpen) {
        nextState.isCalendarOpen = nextProps.isCalendarOpen;
      }
      /**
       * If the next value is different from the current one  (with an exception of situation in
       * which values provided are limited by minDate and maxDate so that the dates are the same),
       * get a new one.
       */


      var nextValue = getDetailValueFrom({
        value: nextProps.value,
        minDate: minDate,
        maxDate: maxDate,
        maxDetail: maxDetail
      });
      var values = [nextValue, prevState.value];

      if ( // Toggling calendar visibility resets values
      nextState.isCalendarOpen // Flag was toggled
      || datesAreDifferent.apply(void 0, _toConsumableArray(values.map(function (value) {
        return getDetailValueFrom({
          value: value,
          minDate: minDate,
          maxDate: maxDate,
          maxDetail: maxDetail
        });
      }))) || datesAreDifferent.apply(void 0, _toConsumableArray(values.map(function (value) {
        return getDetailValueTo({
          value: value,
          minDate: minDate,
          maxDate: maxDate,
          maxDetail: maxDetail
        });
      })))) {
        if (nextValue) {
          nextState.year = (0, _dateUtils.getYear)(nextValue).toString();
          nextState.month = (0, _dateUtils.getMonthHuman)(nextValue).toString();
          nextState.day = (0, _dateUtils.getDate)(nextValue).toString();
        } else {
          nextState.year = null;
          nextState.month = null;
          nextState.day = null;
        }

        nextState.value = nextValue;
      }

      return nextState;
    }
  }]);

  return DateInput;
}(_react.PureComponent);

exports["default"] = DateInput;
DateInput.defaultProps = {
  maxDetail: 'month',
  name: 'date',
  returnValue: 'start'
};

var isValue = _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].instanceOf(Date)]);

DateInput.propTypes = {
  autoFocus: _propTypes["default"].bool,
  className: _propTypes["default"].string.isRequired,
  dayAriaLabel: _propTypes["default"].string,
  dayPlaceholder: _propTypes["default"].string,
  disabled: _propTypes["default"].bool,
  format: _propTypes["default"].string,
  isCalendarOpen: _propTypes["default"].bool,
  locale: _propTypes["default"].string,
  maxDate: _propTypes2.isMaxDate,
  maxDetail: _propTypes["default"].oneOf(allViews),
  minDate: _propTypes2.isMinDate,
  monthAriaLabel: _propTypes["default"].string,
  monthPlaceholder: _propTypes["default"].string,
  name: _propTypes["default"].string,
  nativeInputAriaLabel: _propTypes["default"].string,
  onChange: _propTypes["default"].func,
  required: _propTypes["default"].bool,
  returnValue: _propTypes["default"].oneOf(['start', 'end', 'range']),
  showLeadingZeros: _propTypes["default"].bool,
  value: _propTypes["default"].oneOfType([isValue, _propTypes["default"].arrayOf(isValue)]),
  yearAriaLabel: _propTypes["default"].string,
  yearPlaceholder: _propTypes["default"].string
};
}(DateInput));

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(React__default['default']);

var _propTypes = _interopRequireDefault(propTypes$1.exports);

var _makeEventProps = _interopRequireDefault(entry);

var _mergeClassNames = _interopRequireDefault(require$$3$1);

var _reactCalendar = _interopRequireDefault(require$$4$1);

var _reactFit = _interopRequireDefault(require$$5);

var _DateInput = _interopRequireDefault(DateInput);

var _propTypes2 = propTypes;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var baseClassName = 'react-date-picker';
var outsideActionEvents = ['mousedown', 'focusin', 'touchstart'];
var allViews = ['century', 'decade', 'year', 'month'];

var DatePicker = /*#__PURE__*/function (_PureComponent) {
  _inherits(DatePicker, _PureComponent);

  var _super = _createSuper(DatePicker);

  function DatePicker() {
    var _this;

    _classCallCheck(this, DatePicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {});

    _defineProperty(_assertThisInitialized(_this), "onOutsideAction", function (event) {
      // Try event.composedPath first to handle clicks inside a Shadow DOM.
      var target = 'composedPath' in event ? event.composedPath()[0] : event.target;

      if (_this.wrapper && !_this.wrapper.contains(target)) {
        _this.closeCalendar();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onChange", function (value) {
      var closeCalendar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props.closeCalendar;
      var onChange = _this.props.onChange;

      if (closeCalendar) {
        _this.closeCalendar();
      }

      if (onChange) {
        onChange(value);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onFocus", function (event) {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          onFocus = _this$props.onFocus,
          openCalendarOnFocus = _this$props.openCalendarOnFocus;

      if (onFocus) {
        onFocus(event);
      } // Internet Explorer still fires onFocus on disabled elements


      if (disabled) {
        return;
      }

      if (openCalendarOnFocus) {
        _this.openCalendar();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "openCalendar", function () {
      _this.setState({
        isOpen: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "closeCalendar", function () {
      _this.setState(function (prevState) {
        if (!prevState.isOpen) {
          return null;
        }

        return {
          isOpen: false
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "toggleCalendar", function () {
      _this.setState(function (prevState) {
        return {
          isOpen: !prevState.isOpen
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "stopPropagation", function (event) {
      return event.stopPropagation();
    });

    _defineProperty(_assertThisInitialized(_this), "clear", function () {
      return _this.onChange(null);
    });

    return _this;
  }

  _createClass(DatePicker, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.handleOutsideActionListeners();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var isOpen = this.state.isOpen;
      var _this$props2 = this.props,
          onCalendarClose = _this$props2.onCalendarClose,
          onCalendarOpen = _this$props2.onCalendarOpen;

      if (isOpen !== prevState.isOpen) {
        this.handleOutsideActionListeners();
        var callback = isOpen ? onCalendarOpen : onCalendarClose;
        if (callback) callback();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.handleOutsideActionListeners(false);
    }
  }, {
    key: "handleOutsideActionListeners",
    value: function handleOutsideActionListeners(shouldListen) {
      var _this2 = this;

      var isOpen = this.state.isOpen;
      var shouldListenWithFallback = typeof shouldListen !== 'undefined' ? shouldListen : isOpen;
      var fnName = shouldListenWithFallback ? 'addEventListener' : 'removeEventListener';
      outsideActionEvents.forEach(function (eventName) {
        return document[fnName](eventName, _this2.onOutsideAction);
      });
    }
  }, {
    key: "renderInputs",
    value: function renderInputs() {
      var _this$props3 = this.props,
          autoFocus = _this$props3.autoFocus,
          calendarAriaLabel = _this$props3.calendarAriaLabel,
          calendarIcon = _this$props3.calendarIcon,
          clearAriaLabel = _this$props3.clearAriaLabel,
          clearIcon = _this$props3.clearIcon,
          dayAriaLabel = _this$props3.dayAriaLabel,
          dayPlaceholder = _this$props3.dayPlaceholder,
          disableCalendar = _this$props3.disableCalendar,
          disabled = _this$props3.disabled,
          format = _this$props3.format,
          locale = _this$props3.locale,
          maxDate = _this$props3.maxDate,
          maxDetail = _this$props3.maxDetail,
          minDate = _this$props3.minDate,
          monthAriaLabel = _this$props3.monthAriaLabel,
          monthPlaceholder = _this$props3.monthPlaceholder,
          name = _this$props3.name,
          nativeInputAriaLabel = _this$props3.nativeInputAriaLabel,
          required = _this$props3.required,
          returnValue = _this$props3.returnValue,
          showLeadingZeros = _this$props3.showLeadingZeros,
          value = _this$props3.value,
          yearAriaLabel = _this$props3.yearAriaLabel,
          yearPlaceholder = _this$props3.yearPlaceholder;
      var isOpen = this.state.isOpen;

      var _concat = [].concat(value),
          _concat2 = _slicedToArray(_concat, 1),
          valueFrom = _concat2[0];

      var ariaLabelProps = {
        dayAriaLabel: dayAriaLabel,
        monthAriaLabel: monthAriaLabel,
        nativeInputAriaLabel: nativeInputAriaLabel,
        yearAriaLabel: yearAriaLabel
      };
      var placeholderProps = {
        dayPlaceholder: dayPlaceholder,
        monthPlaceholder: monthPlaceholder,
        yearPlaceholder: yearPlaceholder
      };
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "".concat(baseClassName, "__wrapper")
      }, /*#__PURE__*/_react["default"].createElement(_DateInput["default"], _extends({}, ariaLabelProps, placeholderProps, {
        autoFocus: autoFocus,
        className: "".concat(baseClassName, "__inputGroup"),
        disabled: disabled,
        format: format,
        isCalendarOpen: isOpen,
        locale: locale,
        maxDate: maxDate,
        maxDetail: maxDetail,
        minDate: minDate,
        name: name,
        onChange: this.onChange,
        required: required,
        returnValue: returnValue,
        showLeadingZeros: showLeadingZeros,
        value: valueFrom
      })), clearIcon !== null && /*#__PURE__*/_react["default"].createElement("button", {
        "aria-label": clearAriaLabel,
        className: "".concat(baseClassName, "__clear-button ").concat(baseClassName, "__button"),
        disabled: disabled,
        onClick: this.clear,
        onFocus: this.stopPropagation,
        type: "button"
      }, clearIcon), calendarIcon !== null && !disableCalendar && /*#__PURE__*/_react["default"].createElement("button", {
        "aria-label": calendarAriaLabel,
        className: "".concat(baseClassName, "__calendar-button ").concat(baseClassName, "__button"),
        disabled: disabled,
        onBlur: this.resetValue,
        onClick: this.toggleCalendar,
        onFocus: this.stopPropagation,
        type: "button"
      }, calendarIcon));
    }
  }, {
    key: "renderCalendar",
    value: function renderCalendar() {
      var disableCalendar = this.props.disableCalendar;
      var isOpen = this.state.isOpen;

      if (isOpen === null || disableCalendar) {
        return null;
      }

      var _this$props4 = this.props,
          calendarClassName = _this$props4.calendarClassName;
          _this$props4.className;
          _this$props4.onChange;
          var value = _this$props4.value,
          calendarProps = _objectWithoutProperties(_this$props4, ["calendarClassName", "className", "onChange", "value"]);

      var className = "".concat(baseClassName, "__calendar");
      return /*#__PURE__*/_react["default"].createElement(_reactFit["default"], null, /*#__PURE__*/_react["default"].createElement("div", {
        className: (0, _mergeClassNames["default"])(className, "".concat(className, "--").concat(isOpen ? 'open' : 'closed'))
      }, /*#__PURE__*/_react["default"].createElement(_reactCalendar["default"], _extends({
        className: calendarClassName,
        onChange: this.onChange,
        value: value || null
      }, calendarProps))));
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props5 = this.props,
          className = _this$props5.className,
          disabled = _this$props5.disabled;
      var isOpen = this.state.isOpen;
      return /*#__PURE__*/_react["default"].createElement("div", _extends({
        className: (0, _mergeClassNames["default"])(baseClassName, "".concat(baseClassName, "--").concat(isOpen ? 'open' : 'closed'), "".concat(baseClassName, "--").concat(disabled ? 'disabled' : 'enabled'), className)
      }, this.eventProps, {
        onFocus: this.onFocus,
        ref: function ref(_ref) {
          if (!_ref) {
            return;
          }

          _this3.wrapper = _ref;
        }
      }), this.renderInputs(), this.renderCalendar());
    }
  }, {
    key: "eventProps",
    get: function get() {
      return (0, _makeEventProps["default"])(this.props);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (nextProps.isOpen !== prevState.isOpenProps) {
        return {
          isOpen: nextProps.isOpen,
          isOpenProps: nextProps.isOpen
        };
      }

      return null;
    }
  }]);

  return DatePicker;
}(_react.PureComponent);

exports["default"] = DatePicker;
var iconProps = {
  xmlns: 'http://www.w3.org/2000/svg',
  width: 19,
  height: 19,
  viewBox: '0 0 19 19',
  stroke: 'black',
  strokeWidth: 2
};

var CalendarIcon = /*#__PURE__*/_react["default"].createElement("svg", _extends({}, iconProps, {
  className: "".concat(baseClassName, "__calendar-button__icon ").concat(baseClassName, "__button__icon")
}), /*#__PURE__*/_react["default"].createElement("rect", {
  fill: "none",
  height: "15",
  width: "15",
  x: "2",
  y: "2"
}), /*#__PURE__*/_react["default"].createElement("line", {
  x1: "6",
  x2: "6",
  y1: "0",
  y2: "4"
}), /*#__PURE__*/_react["default"].createElement("line", {
  x1: "13",
  x2: "13",
  y1: "0",
  y2: "4"
}));

var ClearIcon = /*#__PURE__*/_react["default"].createElement("svg", _extends({}, iconProps, {
  className: "".concat(baseClassName, "__clear-button__icon ").concat(baseClassName, "__button__icon")
}), /*#__PURE__*/_react["default"].createElement("line", {
  x1: "4",
  x2: "15",
  y1: "4",
  y2: "15"
}), /*#__PURE__*/_react["default"].createElement("line", {
  x1: "15",
  x2: "4",
  y1: "4",
  y2: "15"
}));

DatePicker.defaultProps = {
  calendarIcon: CalendarIcon,
  clearIcon: ClearIcon,
  closeCalendar: true,
  isOpen: null,
  openCalendarOnFocus: true,
  returnValue: 'start'
};

var isValue = _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].instanceOf(Date)]);

DatePicker.propTypes = {
  autoFocus: _propTypes["default"].bool,
  calendarAriaLabel: _propTypes["default"].string,
  calendarClassName: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]),
  calendarIcon: _propTypes["default"].node,
  className: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]),
  clearAriaLabel: _propTypes["default"].string,
  clearIcon: _propTypes["default"].node,
  closeCalendar: _propTypes["default"].bool,
  dayAriaLabel: _propTypes["default"].string,
  dayPlaceholder: _propTypes["default"].string,
  disableCalendar: _propTypes["default"].bool,
  disabled: _propTypes["default"].bool,
  format: _propTypes["default"].string,
  isOpen: _propTypes["default"].bool,
  locale: _propTypes["default"].string,
  maxDate: _propTypes2.isMaxDate,
  maxDetail: _propTypes["default"].oneOf(allViews),
  minDate: _propTypes2.isMinDate,
  monthAriaLabel: _propTypes["default"].string,
  monthPlaceholder: _propTypes["default"].string,
  name: _propTypes["default"].string,
  nativeInputAriaLabel: _propTypes["default"].string,
  onCalendarClose: _propTypes["default"].func,
  onCalendarOpen: _propTypes["default"].func,
  onChange: _propTypes["default"].func,
  onFocus: _propTypes["default"].func,
  openCalendarOnFocus: _propTypes["default"].bool,
  required: _propTypes["default"].bool,
  returnValue: _propTypes["default"].oneOf(['start', 'end', 'range']),
  showLeadingZeros: _propTypes["default"].bool,
  value: _propTypes["default"].oneOfType([isValue, _propTypes["default"].arrayOf(isValue)]),
  yearAriaLabel: _propTypes["default"].string,
  yearPlaceholder: _propTypes["default"].string
};
}(DatePicker$1));

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;



var _DatePicker = _interopRequireDefault(DatePicker$1);



function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// File is created during build phase and placed in dist directory
// eslint-disable-next-line import/no-unresolved
var _default = _DatePicker["default"];
exports["default"] = _default;
}(entry$1));

var DatePicker = /*@__PURE__*/getDefaultExportFromCjs(entry$1);

var toStr$8 = Object.prototype.toString;

var isArguments$2 = function isArguments(value) {
	var str = toStr$8.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr$8.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

var keysShim$1;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr$7 = Object.prototype.toString;
	var isArgs$1 = isArguments$2; // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim$1 = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr$7.call(object) === '[object Function]';
		var isArguments = isArgs$1(object);
		var isString = isObject && toStr$7.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
var implementation$5 = keysShim$1;

var slice$1 = Array.prototype.slice;
var isArgs = isArguments$2;

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : implementation$5;

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice$1.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

var objectKeys = keysShim;

var keys$1 = objectKeys;
var hasSymbols$5 = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr$6 = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction$2 = function (fn) {
	return typeof fn === 'function' && toStr$6.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
			return false;
		}
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty$4 = function (object, name, value, predicate) {
	if (name in object && (!isFunction$2(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys$1(map);
	if (hasSymbols$5) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty$4(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

var defineProperties_1 = defineProperties;

/* eslint complexity: [2, 18], max-statements: [2, 33] */
var shams$1 = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = shams$1;

var hasSymbols$4 = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr$5 = Object.prototype.toString;
var funcType = '[object Function]';

var implementation$4 = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr$5.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

var implementation$3 = implementation$4;

var functionBind = Function.prototype.bind || implementation$3;

var bind$1 = functionBind;

var src = bind$1.call(Function.call, Object.prototype.hasOwnProperty);

var undefined$1;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError$2 = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError$2();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols$3 = hasSymbols$4();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols$3 ? getProto([][Symbol.iterator]()) : undefined$1,
	'%AsyncFromSyncIteratorPrototype%': undefined$1,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols$3 ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$3 ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$3 ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols$3 ? getProto(''[Symbol.iterator]()) : undefined$1,
	'%Symbol%': hasSymbols$3 ? Symbol : undefined$1,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError$2,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = functionBind;
var hasOwn = src;
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace$1 = bind.call(Function.call, String.prototype.replace);
var $strSlice$1 = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName$1 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar$1 = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath$2 = function stringToPath(string) {
	var first = $strSlice$1(string, 0, 1);
	var last = $strSlice$1(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace$1(string, rePropName$1, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace$1(subString, reEscapeChar$1, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError$2('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

var getIntrinsic = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError$2('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError$2('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath$2(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice$1(part, 0, 1);
		var last = $strSlice$1(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError$2('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined$1;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

var GetIntrinsic$7 = getIntrinsic;

var $TypeError$1 = GetIntrinsic$7('%TypeError%');

// http://262.ecma-international.org/5.1/#sec-9.10

var CheckObjectCoercible = function CheckObjectCoercible(value, optMessage) {
	if (value == null) {
		throw new $TypeError$1(optMessage || ('Cannot call method on ' + value));
	}
	return value;
};

var RequireObjectCoercible$2 = CheckObjectCoercible;

var callBind$3 = {exports: {}};

(function (module) {

var bind = functionBind;
var GetIntrinsic = getIntrinsic;

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}
}(callBind$3));

var GetIntrinsic$6 = getIntrinsic;

var callBind$2 = callBind$3.exports;

var $indexOf$1 = callBind$2(GetIntrinsic$6('String.prototype.indexOf'));

var callBound$3 = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic$6(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf$1(name, '.prototype.') > -1) {
		return callBind$2(intrinsic);
	}
	return intrinsic;
};

var GetIntrinsic$5 = getIntrinsic;

var $abs = GetIntrinsic$5('%Math.abs%');

// http://262.ecma-international.org/5.1/#sec-5.2

var abs$1 = function abs(x) {
	return $abs(x);
};

// var modulo = require('./modulo');
var $floor = Math.floor;

// http://262.ecma-international.org/5.1/#sec-5.2

var floor$1 = function floor(x) {
	// return x - modulo(x, 1);
	return $floor(x);
};

var isPrimitive$4 = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr$4 = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag$2 = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
/* globals document: false */
var documentDotAll = typeof document === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : {};

var isCallable$2 = reflectApply
	? function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value);
	}
	: function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		if (hasToStringTag$2) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr$4.call(value);
		return strClass === fnClass || strClass === genClass;
	};

var toStr$3 = Object.prototype.toString;

var isPrimitive$3 = isPrimitive$4;

var isCallable$1 = isCallable$2;

// http://ecma-international.org/ecma-262/5.1/#sec-8.12.8
var ES5internalSlots = {
	'[[DefaultValue]]': function (O) {
		var actualHint;
		if (arguments.length > 1) {
			actualHint = arguments[1];
		} else {
			actualHint = toStr$3.call(O) === '[object Date]' ? String : Number;
		}

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable$1(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive$3(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// http://ecma-international.org/ecma-262/5.1/#sec-9.1
var es5$2 = function ToPrimitive(input) {
	if (isPrimitive$3(input)) {
		return input;
	}
	if (arguments.length > 1) {
		return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
	}
	return ES5internalSlots['[[DefaultValue]]'](input);
};

// http://262.ecma-international.org/5.1/#sec-9.1

var ToPrimitive$3 = es5$2;

var ToPrimitive$2 = ToPrimitive$3;

// http://262.ecma-international.org/5.1/#sec-9.3

var ToNumber$3 = function ToNumber(value) {
	var prim = ToPrimitive$2(value, Number);
	if (typeof prim !== 'string') {
		return +prim; // eslint-disable-line no-implicit-coercion
	}

	// eslint-disable-next-line no-control-regex
	var trimmed = prim.replace(/^[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+|[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+$/g, '');
	if ((/^0[ob]|^[+-]0x/).test(trimmed)) {
		return NaN;
	}

	return +trimmed; // eslint-disable-line no-implicit-coercion
};

var _isNaN = Number.isNaN || function isNaN(a) {
	return a !== a;
};

var $isNaN$3 = Number.isNaN || function (a) { return a !== a; };

var _isFinite = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN$3(x) && x !== Infinity && x !== -Infinity; };

var sign = function sign(number) {
	return number >= 0 ? 1 : -1;
};

var abs = abs$1;
var floor = floor$1;
var ToNumber$2 = ToNumber$3;

var $isNaN$2 = _isNaN;
var $isFinite$1 = _isFinite;
var $sign = sign;

// http://262.ecma-international.org/5.1/#sec-9.4

var ToInteger$3 = function ToInteger(value) {
	var number = ToNumber$2(value);
	if ($isNaN$2(number)) { return 0; }
	if (number === 0 || !$isFinite$1(number)) { return number; }
	return $sign(number) * floor(abs(number));
};

var GetIntrinsic$4 = getIntrinsic;

var $test = GetIntrinsic$4('RegExp.prototype.test');

var callBind$1 = callBind$3.exports;

var regexTester$1 = function regexTester(regex) {
	return callBind$1($test, regex);
};

var isPrimitive$2 = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

var hasSymbols$2 = shams$1;

var shams = function hasToStringTagShams() {
	return hasSymbols$2() && !!Symbol.toStringTag;
};

var getDay$1 = Date.prototype.getDay;
var tryDateObject = function tryDateGetDayCall(value) {
	try {
		getDay$1.call(value);
		return true;
	} catch (e) {
		return false;
	}
};

var toStr$2 = Object.prototype.toString;
var dateClass = '[object Date]';
var hasToStringTag$1 = shams();

var isDateObject = function isDateObject(value) {
	if (typeof value !== 'object' || value === null) {
		return false;
	}
	return hasToStringTag$1 ? tryDateObject(value) : toStr$2.call(value) === dateClass;
};

var isSymbol$2 = {exports: {}};

var toStr$1 = Object.prototype.toString;
var hasSymbols$1 = hasSymbols$4();

if (hasSymbols$1) {
	var symToStr = Symbol.prototype.toString;
	var symStringRegex = /^Symbol\(.*\)$/;
	var isSymbolObject = function isRealSymbolObject(value) {
		if (typeof value.valueOf() !== 'symbol') {
			return false;
		}
		return symStringRegex.test(symToStr.call(value));
	};

	isSymbol$2.exports = function isSymbol(value) {
		if (typeof value === 'symbol') {
			return true;
		}
		if (toStr$1.call(value) !== '[object Symbol]') {
			return false;
		}
		try {
			return isSymbolObject(value);
		} catch (e) {
			return false;
		}
	};
} else {

	isSymbol$2.exports = function isSymbol(value) {
		// this environment does not support Symbols.
		return false ;
	};
}

var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';

var isPrimitive$1 = isPrimitive$4;
var isCallable = isCallable$2;
var isDate$3 = isDateObject;
var isSymbol$1 = isSymbol$2.exports;

var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
	if (typeof O === 'undefined' || O === null) {
		throw new TypeError('Cannot call method on ' + O);
	}
	if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {
		throw new TypeError('hint must be "string" or "number"');
	}
	var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
	var method, result, i;
	for (i = 0; i < methodNames.length; ++i) {
		method = O[methodNames[i]];
		if (isCallable(method)) {
			result = method.call(O);
			if (isPrimitive$1(result)) {
				return result;
			}
		}
	}
	throw new TypeError('No default value');
};

var GetMethod = function GetMethod(O, P) {
	var func = O[P];
	if (func !== null && typeof func !== 'undefined') {
		if (!isCallable(func)) {
			throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
		}
		return func;
	}
	return void 0;
};

// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
var es2015 = function ToPrimitive(input) {
	if (isPrimitive$1(input)) {
		return input;
	}
	var hint = 'default';
	if (arguments.length > 1) {
		if (arguments[1] === String) {
			hint = 'string';
		} else if (arguments[1] === Number) {
			hint = 'number';
		}
	}

	var exoticToPrim;
	if (hasSymbols) {
		if (Symbol.toPrimitive) {
			exoticToPrim = GetMethod(input, Symbol.toPrimitive);
		} else if (isSymbol$1(input)) {
			exoticToPrim = Symbol.prototype.valueOf;
		}
	}
	if (typeof exoticToPrim !== 'undefined') {
		var result = exoticToPrim.call(input, hint);
		if (isPrimitive$1(result)) {
			return result;
		}
		throw new TypeError('unable to convert exotic object to primitive');
	}
	if (hint === 'default' && (isDate$3(input) || isSymbol$1(input))) {
		hint = 'string';
	}
	return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
};

var toPrimitive = es2015;

// https://ecma-international.org/ecma-262/6.0/#sec-toprimitive

var ToPrimitive$1 = function ToPrimitive(input) {
	if (arguments.length > 1) {
		return toPrimitive(input, arguments[1]);
	}
	return toPrimitive(input);
};

var GetIntrinsic$3 = getIntrinsic;

var $TypeError = GetIntrinsic$3('%TypeError%');
var $Number$1 = GetIntrinsic$3('%Number%');
var $RegExp = GetIntrinsic$3('%RegExp%');
var $parseInteger = GetIntrinsic$3('%parseInt%');

var callBound$2 = callBound$3;
var regexTester = regexTester$1;
var isPrimitive = isPrimitive$2;

var $strSlice = callBound$2('String.prototype.slice');
var isBinary = regexTester(/^0b[01]+$/i);
var isOctal = regexTester(/^0o[0-7]+$/i);
var isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);
var nonWS = ['\u0085', '\u200b', '\ufffe'].join('');
var nonWSregex = new $RegExp('[' + nonWS + ']', 'g');
var hasNonWS = regexTester(nonWSregex);

// whitespace from: https://es5.github.io/#x15.5.4.20
// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324
var ws = [
	'\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003',
	'\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028',
	'\u2029\uFEFF'
].join('');
var trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');
var $replace = callBound$2('String.prototype.replace');
var $trim = function (value) {
	return $replace(value, trimRegex, '');
};

var ToPrimitive = ToPrimitive$1;

// https://ecma-international.org/ecma-262/6.0/#sec-tonumber

var ToNumber$1 = function ToNumber(argument) {
	var value = isPrimitive(argument) ? argument : ToPrimitive(argument, $Number$1);
	if (typeof value === 'symbol') {
		throw new $TypeError('Cannot convert a Symbol value to a number');
	}
	if (typeof value === 'bigint') {
		throw new $TypeError('Conversion from \'BigInt\' to \'number\' is not allowed.');
	}
	if (typeof value === 'string') {
		if (isBinary(value)) {
			return ToNumber($parseInteger($strSlice(value, 2), 2));
		} else if (isOctal(value)) {
			return ToNumber($parseInteger($strSlice(value, 2), 8));
		} else if (hasNonWS(value) || isInvalidHexLiteral(value)) {
			return NaN;
		} else {
			var trimmed = $trim(value);
			if (trimmed !== value) {
				return ToNumber(trimmed);
			}
		}
	}
	return $Number$1(value);
};

var ES5ToInteger = ToInteger$3;

var ToNumber = ToNumber$1;

// https://262.ecma-international.org/11.0/#sec-tointeger

var ToInteger$2 = function ToInteger(value) {
	var number = ToNumber(value);
	if (number !== 0) {
		number = ES5ToInteger(number);
	}
	return number === 0 ? 0 : number;
};

var GetIntrinsic$2 = getIntrinsic;

var $Math = GetIntrinsic$2('%Math%');
var $Number = GetIntrinsic$2('%Number%');

var maxSafeInteger = $Number.MAX_SAFE_INTEGER || $Math.pow(2, 53) - 1;

var MAX_SAFE_INTEGER$2 = maxSafeInteger;

var ToInteger$1 = ToInteger$2;

var ToLength$1 = function ToLength(argument) {
	var len = ToInteger$1(argument);
	if (len <= 0) { return 0; } // includes converting -0 to +0
	if (len > MAX_SAFE_INTEGER$2) { return MAX_SAFE_INTEGER$2; }
	return len;
};

var GetIntrinsic$1 = getIntrinsic;

var $Object = GetIntrinsic$1('%Object%');

var RequireObjectCoercible$1 = RequireObjectCoercible$2;

// https://ecma-international.org/ecma-262/6.0/#sec-toobject

var ToObject$1 = function ToObject(value) {
	RequireObjectCoercible$1(value);
	return $Object(value);
};

var $isNaN$1 = _isNaN;

// https://ecma-international.org/ecma-262/6.0/#sec-samevaluezero

var SameValueZero$1 = function SameValueZero(x, y) {
	return (x === y) || ($isNaN$1(x) && $isNaN$1(y));
};

var strValue = String.prototype.valueOf;
var tryStringObject = function tryStringObject(value) {
	try {
		strValue.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var strClass = '[object String]';
var hasToStringTag = shams();

var isString$2 = function isString(value) {
	if (typeof value === 'string') {
		return true;
	}
	if (typeof value !== 'object') {
		return false;
	}
	return hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass;
};

var ToInteger = ToInteger$2;
var ToLength = ToLength$1;
var ToObject = ToObject$1;
var SameValueZero = SameValueZero$1;
var $isNaN = _isNaN;
var $isFinite = _isFinite;
var GetIntrinsic = getIntrinsic;
var callBound$1 = callBound$3;
var isString$1 = isString$2;

var $charAt = callBound$1('String.prototype.charAt');
var $indexOf = GetIntrinsic('%Array.prototype.indexOf%'); // TODO: use callBind.apply without breaking IE 8

var implementation$2 = function includes(searchElement) {
	var fromIndex = arguments.length > 1 ? ToInteger(arguments[1]) : 0;
	if ($indexOf && !$isNaN(searchElement) && $isFinite(fromIndex) && typeof searchElement !== 'undefined') {
		return $indexOf.apply(this, arguments) > -1;
	}

	var O = ToObject(this);
	var length = ToLength(O.length);
	if (length === 0) {
		return false;
	}
	var k = fromIndex >= 0 ? fromIndex : Math.max(0, length + fromIndex);
	while (k < length) {
		if (SameValueZero(searchElement, isString$1(O) ? $charAt(O, k) : O[k])) {
			return true;
		}
		k += 1;
	}
	return false;
};

var implementation$1 = implementation$2;

var polyfill$1 = function getPolyfill() {
	return Array.prototype.includes || implementation$1;
};

var define$1 = defineProperties_1;
var getPolyfill$1 = polyfill$1;

var shim$1 = function shimArrayPrototypeIncludes() {
	var polyfill = getPolyfill$1();
	define$1(
		Array.prototype,
		{ includes: polyfill },
		{ includes: function () { return Array.prototype.includes !== polyfill; } }
	);
	return polyfill;
};

var define = defineProperties_1;
var RequireObjectCoercible = RequireObjectCoercible$2;
var callBind = callBind$3.exports;
var callBound = callBound$3;

var implementation = implementation$2;
var getPolyfill = polyfill$1;
var polyfill = callBind.apply(getPolyfill());
var shim = shim$1;

var $slice = callBound('Array.prototype.slice');

/* eslint-disable no-unused-vars */
var boundShim = function includes(array, searchElement) {
/* eslint-enable no-unused-vars */
	RequireObjectCoercible(array);
	return polyfill(array, $slice(arguments, 1));
};
define(boundShim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

var arrayIncludes = boundShim;

function List(_ref) {
  var countries = _ref.countries,
      field = _ref.field,
      options = _ref.options,
      handleCheckboxChange = _ref.handleCheckboxChange,
      value = _ref.value;

  var updateList = function updateList(e) {
    if (value === e.target.value) {
      handleCheckboxChange(null);
    } else {
      handleCheckboxChange(e.target.value);
    }
  };

  if (arrayIncludes(['cities', 'regions'], field.id)) {
    return /*#__PURE__*/React__default['default'].createElement("ul", {
      className: "radioList"
    }, options.map(function (opt) {
      return /*#__PURE__*/React__default['default'].createElement("li", {
        key: opt.id,
        className: "bu-list-item ".concat(countries && !arrayIncludes(countries, opt.country_id) ? 'bu-disabled' : 'bu-open')
      }, /*#__PURE__*/React__default['default'].createElement("input", {
        name: field.id,
        type: "checkbox",
        id: opt.id,
        value: opt.id,
        disabled: countries ? !arrayIncludes(countries, opt.country_id) : false,
        checked: value === opt.id,
        onBlur: handleCheckboxChange,
        onChange: handleCheckboxChange
      }), /*#__PURE__*/React__default['default'].createElement("label", {
        htmlFor: opt.id
      }, opt.name));
    }));
  } else {
    return /*#__PURE__*/React__default['default'].createElement("ul", {
      className: "radioList"
    }, options.map(function (opt) {
      return /*#__PURE__*/React__default['default'].createElement("li", {
        key: opt.id,
        className: "bu-list-item bu-open"
      }, /*#__PURE__*/React__default['default'].createElement("input", {
        name: field.id,
        type: "checkbox",
        id: opt.id,
        value: opt.id,
        checked: value === opt.id,
        onBlur: handleCheckboxChange,
        onChange: updateList
      }), /*#__PURE__*/React__default['default'].createElement("label", {
        htmlFor: opt.id
      }, opt.name));
    }));
  }
}

var MILLISECONDS_IN_MINUTE$7 = 60000;

/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
var getTimezoneOffsetInMilliseconds$1 = function getTimezoneOffsetInMilliseconds (dirtyDate) {
  var date = new Date(dirtyDate.getTime());
  var baseTimezoneOffset = date.getTimezoneOffset();
  date.setSeconds(0, 0);
  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE$7;

  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE$7 + millisecondsPartOfTimezoneOffset
};

/**
 * @category Common Helpers
 * @summary Is the given argument an instance of Date?
 *
 * @description
 * Is the given argument an instance of Date?
 *
 * @param {*} argument - the argument to check
 * @returns {Boolean} the given argument is an instance of Date
 *
 * @example
 * // Is 'mayonnaise' a Date?
 * var result = isDate('mayonnaise')
 * //=> false
 */

function isDate$2 (argument) {
  return argument instanceof Date
}

var is_date = isDate$2;

var getTimezoneOffsetInMilliseconds = getTimezoneOffsetInMilliseconds$1;
var isDate$1 = is_date;

var MILLISECONDS_IN_HOUR$2 = 3600000;
var MILLISECONDS_IN_MINUTE$6 = 60000;
var DEFAULT_ADDITIONAL_DIGITS = 2;

var parseTokenDateTimeDelimeter = /[T ]/;
var parseTokenPlainTime = /:/;

// year tokens
var parseTokenYY = /^(\d{2})$/;
var parseTokensYYY = [
  /^([+-]\d{2})$/, // 0 additional digits
  /^([+-]\d{3})$/, // 1 additional digit
  /^([+-]\d{4})$/ // 2 additional digits
];

var parseTokenYYYY = /^(\d{4})/;
var parseTokensYYYYY = [
  /^([+-]\d{4})/, // 0 additional digits
  /^([+-]\d{5})/, // 1 additional digit
  /^([+-]\d{6})/ // 2 additional digits
];

// date tokens
var parseTokenMM = /^-(\d{2})$/;
var parseTokenDDD = /^-?(\d{3})$/;
var parseTokenMMDD = /^-?(\d{2})-?(\d{2})$/;
var parseTokenWww = /^-?W(\d{2})$/;
var parseTokenWwwD = /^-?W(\d{2})-?(\d{1})$/;

// time tokens
var parseTokenHH = /^(\d{2}([.,]\d*)?)$/;
var parseTokenHHMM = /^(\d{2}):?(\d{2}([.,]\d*)?)$/;
var parseTokenHHMMSS = /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/;

// timezone tokens
var parseTokenTimezone = /([Z+-].*)$/;
var parseTokenTimezoneZ = /^(Z)$/;
var parseTokenTimezoneHH = /^([+-])(\d{2})$/;
var parseTokenTimezoneHHMM = /^([+-])(\d{2}):?(\d{2})$/;

/**
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If an argument is a string, the function tries to parse it.
 * Function accepts complete ISO 8601 formats as well as partial implementations.
 * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
 *
 * If all above fails, the function passes the given argument to Date constructor.
 *
 * @param {Date|String|Number} argument - the value to convert
 * @param {Object} [options] - the object with options
 * @param {0 | 1 | 2} [options.additionalDigits=2] - the additional number of digits in the extended year format
 * @returns {Date} the parsed date in the local time zone
 *
 * @example
 * // Convert string '2014-02-11T11:30:30' to date:
 * var result = parse('2014-02-11T11:30:30')
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Parse string '+02014101',
 * // if the additional number of digits in the extended year format is 1:
 * var result = parse('+02014101', {additionalDigits: 1})
 * //=> Fri Apr 11 2014 00:00:00
 */
function parse$1q (argument, dirtyOptions) {
  if (isDate$1(argument)) {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime())
  } else if (typeof argument !== 'string') {
    return new Date(argument)
  }

  var options = dirtyOptions || {};
  var additionalDigits = options.additionalDigits;
  if (additionalDigits == null) {
    additionalDigits = DEFAULT_ADDITIONAL_DIGITS;
  } else {
    additionalDigits = Number(additionalDigits);
  }

  var dateStrings = splitDateString(argument);

  var parseYearResult = parseYear(dateStrings.date, additionalDigits);
  var year = parseYearResult.year;
  var restDateString = parseYearResult.restDateString;

  var date = parseDate(restDateString, year);

  if (date) {
    var timestamp = date.getTime();
    var time = 0;
    var offset;

    if (dateStrings.time) {
      time = parseTime(dateStrings.time);
    }

    if (dateStrings.timezone) {
      offset = parseTimezone(dateStrings.timezone) * MILLISECONDS_IN_MINUTE$6;
    } else {
      var fullTime = timestamp + time;
      var fullTimeDate = new Date(fullTime);

      offset = getTimezoneOffsetInMilliseconds(fullTimeDate);

      // Adjust time when it's coming from DST
      var fullTimeDateNextDay = new Date(fullTime);
      fullTimeDateNextDay.setDate(fullTimeDate.getDate() + 1);
      var offsetDiff =
        getTimezoneOffsetInMilliseconds(fullTimeDateNextDay) -
        getTimezoneOffsetInMilliseconds(fullTimeDate);
      if (offsetDiff > 0) {
        offset += offsetDiff;
      }
    }

    return new Date(timestamp + time + offset)
  } else {
    return new Date(argument)
  }
}

function splitDateString (dateString) {
  var dateStrings = {};
  var array = dateString.split(parseTokenDateTimeDelimeter);
  var timeString;

  if (parseTokenPlainTime.test(array[0])) {
    dateStrings.date = null;
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
  }

  if (timeString) {
    var token = parseTokenTimezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], '');
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }

  return dateStrings
}

function parseYear (dateString, additionalDigits) {
  var parseTokenYYY = parseTokensYYY[additionalDigits];
  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits];

  var token;

  // YYYY or ±YYYYY
  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString);
  if (token) {
    var yearString = token[1];
    return {
      year: parseInt(yearString, 10),
      restDateString: dateString.slice(yearString.length)
    }
  }

  // YY or ±YYY
  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString);
  if (token) {
    var centuryString = token[1];
    return {
      year: parseInt(centuryString, 10) * 100,
      restDateString: dateString.slice(centuryString.length)
    }
  }

  // Invalid ISO-formatted year
  return {
    year: null
  }
}

function parseDate (dateString, year) {
  // Invalid ISO-formatted year
  if (year === null) {
    return null
  }

  var token;
  var date;
  var month;
  var week;

  // YYYY
  if (dateString.length === 0) {
    date = new Date(0);
    date.setUTCFullYear(year);
    return date
  }

  // YYYY-MM
  token = parseTokenMM.exec(dateString);
  if (token) {
    date = new Date(0);
    month = parseInt(token[1], 10) - 1;
    date.setUTCFullYear(year, month);
    return date
  }

  // YYYY-DDD or YYYYDDD
  token = parseTokenDDD.exec(dateString);
  if (token) {
    date = new Date(0);
    var dayOfYear = parseInt(token[1], 10);
    date.setUTCFullYear(year, 0, dayOfYear);
    return date
  }

  // YYYY-MM-DD or YYYYMMDD
  token = parseTokenMMDD.exec(dateString);
  if (token) {
    date = new Date(0);
    month = parseInt(token[1], 10) - 1;
    var day = parseInt(token[2], 10);
    date.setUTCFullYear(year, month, day);
    return date
  }

  // YYYY-Www or YYYYWww
  token = parseTokenWww.exec(dateString);
  if (token) {
    week = parseInt(token[1], 10) - 1;
    return dayOfISOYear(year, week)
  }

  // YYYY-Www-D or YYYYWwwD
  token = parseTokenWwwD.exec(dateString);
  if (token) {
    week = parseInt(token[1], 10) - 1;
    var dayOfWeek = parseInt(token[2], 10) - 1;
    return dayOfISOYear(year, week, dayOfWeek)
  }

  // Invalid ISO-formatted date
  return null
}

function parseTime (timeString) {
  var token;
  var hours;
  var minutes;

  // hh
  token = parseTokenHH.exec(timeString);
  if (token) {
    hours = parseFloat(token[1].replace(',', '.'));
    return (hours % 24) * MILLISECONDS_IN_HOUR$2
  }

  // hh:mm or hhmm
  token = parseTokenHHMM.exec(timeString);
  if (token) {
    hours = parseInt(token[1], 10);
    minutes = parseFloat(token[2].replace(',', '.'));
    return (hours % 24) * MILLISECONDS_IN_HOUR$2 +
      minutes * MILLISECONDS_IN_MINUTE$6
  }

  // hh:mm:ss or hhmmss
  token = parseTokenHHMMSS.exec(timeString);
  if (token) {
    hours = parseInt(token[1], 10);
    minutes = parseInt(token[2], 10);
    var seconds = parseFloat(token[3].replace(',', '.'));
    return (hours % 24) * MILLISECONDS_IN_HOUR$2 +
      minutes * MILLISECONDS_IN_MINUTE$6 +
      seconds * 1000
  }

  // Invalid ISO-formatted time
  return null
}

function parseTimezone (timezoneString) {
  var token;
  var absoluteOffset;

  // Z
  token = parseTokenTimezoneZ.exec(timezoneString);
  if (token) {
    return 0
  }

  // ±hh
  token = parseTokenTimezoneHH.exec(timezoneString);
  if (token) {
    absoluteOffset = parseInt(token[2], 10) * 60;
    return (token[1] === '+') ? -absoluteOffset : absoluteOffset
  }

  // ±hh:mm or ±hhmm
  token = parseTokenTimezoneHHMM.exec(timezoneString);
  if (token) {
    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10);
    return (token[1] === '+') ? -absoluteOffset : absoluteOffset
  }

  return 0
}

function dayOfISOYear (isoYear, week, day) {
  week = week || 0;
  day = day || 0;
  var date = new Date(0);
  date.setUTCFullYear(isoYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date
}

var parse_1 = parse$1q;

var parse$1p = parse_1;

/**
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be added
 * @returns {Date} the new date with the days added
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * var result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */
function addDays$4 (dirtyDate, dirtyAmount) {
  var date = parse$1p(dirtyDate);
  var amount = Number(dirtyAmount);
  date.setDate(date.getDate() + amount);
  return date
}

var add_days = addDays$4;

var parse$1o = parse_1;

/**
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added
 * @returns {Date} the new date with the milliseconds added
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */
function addMilliseconds$4 (dirtyDate, dirtyAmount) {
  var timestamp = parse$1o(dirtyDate).getTime();
  var amount = Number(dirtyAmount);
  return new Date(timestamp + amount)
}

var add_milliseconds = addMilliseconds$4;

var addMilliseconds$3 = add_milliseconds;

var MILLISECONDS_IN_HOUR$1 = 3600000;

/**
 * @category Hour Helpers
 * @summary Add the specified number of hours to the given date.
 *
 * @description
 * Add the specified number of hours to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of hours to be added
 * @returns {Date} the new date with the hours added
 *
 * @example
 * // Add 2 hours to 10 July 2014 23:00:00:
 * var result = addHours(new Date(2014, 6, 10, 23, 0), 2)
 * //=> Fri Jul 11 2014 01:00:00
 */
function addHours$1 (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addMilliseconds$3(dirtyDate, amount * MILLISECONDS_IN_HOUR$1)
}

var add_hours = addHours$1;

var parse$1n = parse_1;

/**
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the start of a week
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfWeek$3 (dirtyDate, dirtyOptions) {
  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0;

  var date = parse$1n(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;

  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date
}

var start_of_week = startOfWeek$3;

var startOfWeek$2 = start_of_week;

/**
 * @category ISO Week Helpers
 * @summary Return the start of an ISO week for the given date.
 *
 * @description
 * Return the start of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of an ISO week
 *
 * @example
 * // The start of an ISO week for 2 September 2014 11:55:00:
 * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfISOWeek$6 (dirtyDate) {
  return startOfWeek$2(dirtyDate, {weekStartsOn: 1})
}

var start_of_iso_week = startOfISOWeek$6;

var parse$1m = parse_1;
var startOfISOWeek$5 = start_of_iso_week;

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the ISO week-numbering year of the given date.
 *
 * @description
 * Get the ISO week-numbering year of the given date,
 * which always starts 3 days before the year's first Thursday.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the ISO week-numbering year
 *
 * @example
 * // Which ISO-week numbering year is 2 January 2005?
 * var result = getISOYear(new Date(2005, 0, 2))
 * //=> 2004
 */
function getISOYear$6 (dirtyDate) {
  var date = parse$1m(dirtyDate);
  var year = date.getFullYear();

  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  var startOfNextYear = startOfISOWeek$5(fourthOfJanuaryOfNextYear);

  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  var startOfThisYear = startOfISOWeek$5(fourthOfJanuaryOfThisYear);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year
  } else {
    return year - 1
  }
}

var get_iso_year = getISOYear$6;

var getISOYear$5 = get_iso_year;
var startOfISOWeek$4 = start_of_iso_week;

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the start of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the start of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of an ISO year
 *
 * @example
 * // The start of an ISO week-numbering year for 2 July 2005:
 * var result = startOfISOYear(new Date(2005, 6, 2))
 * //=> Mon Jan 03 2005 00:00:00
 */
function startOfISOYear$4 (dirtyDate) {
  var year = getISOYear$5(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  var date = startOfISOWeek$4(fourthOfJanuary);
  return date
}

var start_of_iso_year = startOfISOYear$4;

var parse$1l = parse_1;

/**
 * @category Day Helpers
 * @summary Return the start of a day for the given date.
 *
 * @description
 * Return the start of a day for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of a day
 *
 * @example
 * // The start of a day for 2 September 2014 11:55:00:
 * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 00:00:00
 */
function startOfDay$7 (dirtyDate) {
  var date = parse$1l(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date
}

var start_of_day = startOfDay$7;

var startOfDay$6 = start_of_day;

var MILLISECONDS_IN_MINUTE$5 = 60000;
var MILLISECONDS_IN_DAY$2 = 86400000;

/**
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar days
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * var result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 */
function differenceInCalendarDays$4 (dirtyDateLeft, dirtyDateRight) {
  var startOfDayLeft = startOfDay$6(dirtyDateLeft);
  var startOfDayRight = startOfDay$6(dirtyDateRight);

  var timestampLeft = startOfDayLeft.getTime() -
    startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE$5;
  var timestampRight = startOfDayRight.getTime() -
    startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE$5;

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a day is not constant
  // (e.g. it's different in the day of the daylight saving time clock shift)
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY$2)
}

var difference_in_calendar_days = differenceInCalendarDays$4;

var parse$1k = parse_1;
var startOfISOYear$3 = start_of_iso_year;
var differenceInCalendarDays$3 = difference_in_calendar_days;

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Set the ISO week-numbering year to the given date.
 *
 * @description
 * Set the ISO week-numbering year to the given date,
 * saving the week number and the weekday number.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} isoYear - the ISO week-numbering year of the new date
 * @returns {Date} the new date with the ISO week-numbering year setted
 *
 * @example
 * // Set ISO week-numbering year 2007 to 29 December 2008:
 * var result = setISOYear(new Date(2008, 11, 29), 2007)
 * //=> Mon Jan 01 2007 00:00:00
 */
function setISOYear$1 (dirtyDate, dirtyISOYear) {
  var date = parse$1k(dirtyDate);
  var isoYear = Number(dirtyISOYear);
  var diff = differenceInCalendarDays$3(date, startOfISOYear$3(date));
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setFullYear(isoYear, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  date = startOfISOYear$3(fourthOfJanuary);
  date.setDate(date.getDate() + diff);
  return date
}

var set_iso_year = setISOYear$1;

var getISOYear$4 = get_iso_year;
var setISOYear = set_iso_year;

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Add the specified number of ISO week-numbering years to the given date.
 *
 * @description
 * Add the specified number of ISO week-numbering years to the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of ISO week-numbering years to be added
 * @returns {Date} the new date with the ISO week-numbering years added
 *
 * @example
 * // Add 5 ISO week-numbering years to 2 July 2010:
 * var result = addISOYears(new Date(2010, 6, 2), 5)
 * //=> Fri Jun 26 2015 00:00:00
 */
function addISOYears$1 (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return setISOYear(dirtyDate, getISOYear$4(dirtyDate) + amount)
}

var add_iso_years = addISOYears$1;

var addMilliseconds$2 = add_milliseconds;

var MILLISECONDS_IN_MINUTE$4 = 60000;

/**
 * @category Minute Helpers
 * @summary Add the specified number of minutes to the given date.
 *
 * @description
 * Add the specified number of minutes to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of minutes to be added
 * @returns {Date} the new date with the minutes added
 *
 * @example
 * // Add 30 minutes to 10 July 2014 12:00:00:
 * var result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
 * //=> Thu Jul 10 2014 12:30:00
 */
function addMinutes$1 (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addMilliseconds$2(dirtyDate, amount * MILLISECONDS_IN_MINUTE$4)
}

var add_minutes = addMinutes$1;

var parse$1j = parse_1;

/**
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the number of days in a month
 *
 * @example
 * // How many days are in February 2000?
 * var result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */
function getDaysInMonth$2 (dirtyDate) {
  var date = parse$1j(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth = new Date(0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate()
}

var get_days_in_month = getDaysInMonth$2;

var parse$1i = parse_1;
var getDaysInMonth$1 = get_days_in_month;

/**
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be added
 * @returns {Date} the new date with the months added
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * var result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 */
function addMonths$3 (dirtyDate, dirtyAmount) {
  var date = parse$1i(dirtyDate);
  var amount = Number(dirtyAmount);
  var desiredMonth = date.getMonth() + amount;
  var dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(date.getFullYear(), desiredMonth, 1);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth$1(dateWithDesiredMonth);
  // Set the last day of the new month
  // if the original date was the last day of the longer month
  date.setMonth(desiredMonth, Math.min(daysInMonth, date.getDate()));
  return date
}

var add_months = addMonths$3;

var addMonths$2 = add_months;

/**
 * @category Quarter Helpers
 * @summary Add the specified number of year quarters to the given date.
 *
 * @description
 * Add the specified number of year quarters to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of quarters to be added
 * @returns {Date} the new date with the quarters added
 *
 * @example
 * // Add 1 quarter to 1 September 2014:
 * var result = addQuarters(new Date(2014, 8, 1), 1)
 * //=> Mon Dec 01 2014 00:00:00
 */
function addQuarters$1 (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  var months = amount * 3;
  return addMonths$2(dirtyDate, months)
}

var add_quarters = addQuarters$1;

var addMilliseconds$1 = add_milliseconds;

/**
 * @category Second Helpers
 * @summary Add the specified number of seconds to the given date.
 *
 * @description
 * Add the specified number of seconds to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of seconds to be added
 * @returns {Date} the new date with the seconds added
 *
 * @example
 * // Add 30 seconds to 10 July 2014 12:45:00:
 * var result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:45:30
 */
function addSeconds$1 (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addMilliseconds$1(dirtyDate, amount * 1000)
}

var add_seconds = addSeconds$1;

var addDays$3 = add_days;

/**
 * @category Week Helpers
 * @summary Add the specified number of weeks to the given date.
 *
 * @description
 * Add the specified number of week to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of weeks to be added
 * @returns {Date} the new date with the weeks added
 *
 * @example
 * // Add 4 weeks to 1 September 2014:
 * var result = addWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Sep 29 2014 00:00:00
 */
function addWeeks$2 (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  var days = amount * 7;
  return addDays$3(dirtyDate, days)
}

var add_weeks = addWeeks$2;

var addMonths$1 = add_months;

/**
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be added
 * @returns {Date} the new date with the years added
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * var result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */
function addYears$1 (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addMonths$1(dirtyDate, amount * 12)
}

var add_years = addYears$1;

var parse$1h = parse_1;

/**
 * @category Range Helpers
 * @summary Is the given date range overlapping with another date range?
 *
 * @description
 * Is the given date range overlapping with another date range?
 *
 * @param {Date|String|Number} initialRangeStartDate - the start of the initial range
 * @param {Date|String|Number} initialRangeEndDate - the end of the initial range
 * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with
 * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with
 * @returns {Boolean} whether the date ranges are overlapping
 * @throws {Error} startDate of a date range cannot be after its endDate
 *
 * @example
 * // For overlapping date ranges:
 * areRangesOverlapping(
 *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)
 * )
 * //=> true
 *
 * @example
 * // For non-overlapping date ranges:
 * areRangesOverlapping(
 *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)
 * )
 * //=> false
 */
function areRangesOverlapping (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {
  var initialStartTime = parse$1h(dirtyInitialRangeStartDate).getTime();
  var initialEndTime = parse$1h(dirtyInitialRangeEndDate).getTime();
  var comparedStartTime = parse$1h(dirtyComparedRangeStartDate).getTime();
  var comparedEndTime = parse$1h(dirtyComparedRangeEndDate).getTime();

  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {
    throw new Error('The start of the range cannot be after the end of the range')
  }

  return initialStartTime < comparedEndTime && comparedStartTime < initialEndTime
}

var are_ranges_overlapping = areRangesOverlapping;

var parse$1g = parse_1;

/**
 * @category Common Helpers
 * @summary Return an index of the closest date from the array comparing to the given date.
 *
 * @description
 * Return an index of the closest date from the array comparing to the given date.
 *
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @param {Date[]|String[]|Number[]} datesArray - the array to search
 * @returns {Number} an index of the date closest to the given date
 * @throws {TypeError} the second argument must be an instance of Array
 *
 * @example
 * // Which date is closer to 6 September 2015?
 * var dateToCompare = new Date(2015, 8, 6)
 * var datesArray = [
 *   new Date(2015, 0, 1),
 *   new Date(2016, 0, 1),
 *   new Date(2017, 0, 1)
 * ]
 * var result = closestIndexTo(dateToCompare, datesArray)
 * //=> 1
 */
function closestIndexTo (dirtyDateToCompare, dirtyDatesArray) {
  if (!(dirtyDatesArray instanceof Array)) {
    throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array')
  }

  var dateToCompare = parse$1g(dirtyDateToCompare);
  var timeToCompare = dateToCompare.getTime();

  var result;
  var minDistance;

  dirtyDatesArray.forEach(function (dirtyDate, index) {
    var currentDate = parse$1g(dirtyDate);
    var distance = Math.abs(timeToCompare - currentDate.getTime());
    if (result === undefined || distance < minDistance) {
      result = index;
      minDistance = distance;
    }
  });

  return result
}

var closest_index_to = closestIndexTo;

var parse$1f = parse_1;

/**
 * @category Common Helpers
 * @summary Return a date from the array closest to the given date.
 *
 * @description
 * Return a date from the array closest to the given date.
 *
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @param {Date[]|String[]|Number[]} datesArray - the array to search
 * @returns {Date} the date from the array closest to the given date
 * @throws {TypeError} the second argument must be an instance of Array
 *
 * @example
 * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?
 * var dateToCompare = new Date(2015, 8, 6)
 * var result = closestTo(dateToCompare, [
 *   new Date(2000, 0, 1),
 *   new Date(2030, 0, 1)
 * ])
 * //=> Tue Jan 01 2030 00:00:00
 */
function closestTo (dirtyDateToCompare, dirtyDatesArray) {
  if (!(dirtyDatesArray instanceof Array)) {
    throw new TypeError(toString.call(dirtyDatesArray) + ' is not an instance of Array')
  }

  var dateToCompare = parse$1f(dirtyDateToCompare);
  var timeToCompare = dateToCompare.getTime();

  var result;
  var minDistance;

  dirtyDatesArray.forEach(function (dirtyDate) {
    var currentDate = parse$1f(dirtyDate);
    var distance = Math.abs(timeToCompare - currentDate.getTime());
    if (result === undefined || distance < minDistance) {
      result = currentDate;
      minDistance = distance;
    }
  });

  return result
}

var closest_to = closestTo;

var parse$1e = parse_1;

/**
 * @category Common Helpers
 * @summary Compare the two dates and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return 1 if the first date is after the second,
 * -1 if the first date is before the second or 0 if dates are equal.
 *
 * @param {Date|String|Number} dateLeft - the first date to compare
 * @param {Date|String|Number} dateRight - the second date to compare
 * @returns {Number} the result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989:
 * var result = compareAsc(
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * )
 * //=> -1
 *
 * @example
 * // Sort the array of dates:
 * var result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareAsc)
 * //=> [
 * //   Wed Feb 11 1987 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Sun Jul 02 1995 00:00:00
 * // ]
 */
function compareAsc$4 (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse$1e(dirtyDateLeft);
  var timeLeft = dateLeft.getTime();
  var dateRight = parse$1e(dirtyDateRight);
  var timeRight = dateRight.getTime();

  if (timeLeft < timeRight) {
    return -1
  } else if (timeLeft > timeRight) {
    return 1
  } else {
    return 0
  }
}

var compare_asc = compareAsc$4;

var parse$1d = parse_1;

/**
 * @category Common Helpers
 * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return -1 if the first date is after the second,
 * 1 if the first date is before the second or 0 if dates are equal.
 *
 * @param {Date|String|Number} dateLeft - the first date to compare
 * @param {Date|String|Number} dateRight - the second date to compare
 * @returns {Number} the result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:
 * var result = compareDesc(
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * )
 * //=> 1
 *
 * @example
 * // Sort the array of dates in reverse chronological order:
 * var result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareDesc)
 * //=> [
 * //   Sun Jul 02 1995 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Wed Feb 11 1987 00:00:00
 * // ]
 */
function compareDesc$2 (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse$1d(dirtyDateLeft);
  var timeLeft = dateLeft.getTime();
  var dateRight = parse$1d(dirtyDateRight);
  var timeRight = dateRight.getTime();

  if (timeLeft > timeRight) {
    return -1
  } else if (timeLeft < timeRight) {
    return 1
  } else {
    return 0
  }
}

var compare_desc = compareDesc$2;

var startOfISOWeek$3 = start_of_iso_week;

var MILLISECONDS_IN_MINUTE$3 = 60000;
var MILLISECONDS_IN_WEEK$3 = 604800000;

/**
 * @category ISO Week Helpers
 * @summary Get the number of calendar ISO weeks between the given dates.
 *
 * @description
 * Get the number of calendar ISO weeks between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar ISO weeks
 *
 * @example
 * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?
 * var result = differenceInCalendarISOWeeks(
 *   new Date(2014, 6, 21),
 *   new Date(2014, 6, 6)
 * )
 * //=> 3
 */
function differenceInCalendarISOWeeks (dirtyDateLeft, dirtyDateRight) {
  var startOfISOWeekLeft = startOfISOWeek$3(dirtyDateLeft);
  var startOfISOWeekRight = startOfISOWeek$3(dirtyDateRight);

  var timestampLeft = startOfISOWeekLeft.getTime() -
    startOfISOWeekLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE$3;
  var timestampRight = startOfISOWeekRight.getTime() -
    startOfISOWeekRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE$3;

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK$3)
}

var difference_in_calendar_iso_weeks = differenceInCalendarISOWeeks;

var getISOYear$3 = get_iso_year;

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of calendar ISO week-numbering years between the given dates.
 *
 * @description
 * Get the number of calendar ISO week-numbering years between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar ISO week-numbering years
 *
 * @example
 * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?
 * var result = differenceInCalendarISOYears(
 *   new Date(2012, 0, 1),
 *   new Date(2010, 0, 1)
 * )
 * //=> 2
 */
function differenceInCalendarISOYears$1 (dirtyDateLeft, dirtyDateRight) {
  return getISOYear$3(dirtyDateLeft) - getISOYear$3(dirtyDateRight)
}

var difference_in_calendar_iso_years = differenceInCalendarISOYears$1;

var parse$1c = parse_1;

/**
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar months
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * var result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */
function differenceInCalendarMonths$1 (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse$1c(dirtyDateLeft);
  var dateRight = parse$1c(dirtyDateRight);

  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();

  return yearDiff * 12 + monthDiff
}

var difference_in_calendar_months = differenceInCalendarMonths$1;

var parse$1b = parse_1;

/**
 * @category Quarter Helpers
 * @summary Get the year quarter of the given date.
 *
 * @description
 * Get the year quarter of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the quarter
 *
 * @example
 * // Which quarter is 2 July 2014?
 * var result = getQuarter(new Date(2014, 6, 2))
 * //=> 3
 */
function getQuarter$1 (dirtyDate) {
  var date = parse$1b(dirtyDate);
  var quarter = Math.floor(date.getMonth() / 3) + 1;
  return quarter
}

var get_quarter = getQuarter$1;

var getQuarter = get_quarter;
var parse$1a = parse_1;

/**
 * @category Quarter Helpers
 * @summary Get the number of calendar quarters between the given dates.
 *
 * @description
 * Get the number of calendar quarters between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar quarters
 *
 * @example
 * // How many calendar quarters are between 31 December 2013 and 2 July 2014?
 * var result = differenceInCalendarQuarters(
 *   new Date(2014, 6, 2),
 *   new Date(2013, 11, 31)
 * )
 * //=> 3
 */
function differenceInCalendarQuarters (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse$1a(dirtyDateLeft);
  var dateRight = parse$1a(dirtyDateRight);

  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var quarterDiff = getQuarter(dateLeft) - getQuarter(dateRight);

  return yearDiff * 4 + quarterDiff
}

var difference_in_calendar_quarters = differenceInCalendarQuarters;

var startOfWeek$1 = start_of_week;

var MILLISECONDS_IN_MINUTE$2 = 60000;
var MILLISECONDS_IN_WEEK$2 = 604800000;

/**
 * @category Week Helpers
 * @summary Get the number of calendar weeks between the given dates.
 *
 * @description
 * Get the number of calendar weeks between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Number} the number of calendar weeks
 *
 * @example
 * // How many calendar weeks are between 5 July 2014 and 20 July 2014?
 * var result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5)
 * )
 * //=> 3
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks are between 5 July 2014 and 20 July 2014?
 * var result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5),
 *   {weekStartsOn: 1}
 * )
 * //=> 2
 */
function differenceInCalendarWeeks (dirtyDateLeft, dirtyDateRight, dirtyOptions) {
  var startOfWeekLeft = startOfWeek$1(dirtyDateLeft, dirtyOptions);
  var startOfWeekRight = startOfWeek$1(dirtyDateRight, dirtyOptions);

  var timestampLeft = startOfWeekLeft.getTime() -
    startOfWeekLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE$2;
  var timestampRight = startOfWeekRight.getTime() -
    startOfWeekRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE$2;

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK$2)
}

var difference_in_calendar_weeks = differenceInCalendarWeeks;

var parse$19 = parse_1;

/**
 * @category Year Helpers
 * @summary Get the number of calendar years between the given dates.
 *
 * @description
 * Get the number of calendar years between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar years
 *
 * @example
 * // How many calendar years are between 31 December 2013 and 11 February 2015?
 * var result = differenceInCalendarYears(
 *   new Date(2015, 1, 11),
 *   new Date(2013, 11, 31)
 * )
 * //=> 2
 */
function differenceInCalendarYears$1 (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse$19(dirtyDateLeft);
  var dateRight = parse$19(dirtyDateRight);

  return dateLeft.getFullYear() - dateRight.getFullYear()
}

var difference_in_calendar_years = differenceInCalendarYears$1;

var parse$18 = parse_1;
var differenceInCalendarDays$2 = difference_in_calendar_days;
var compareAsc$3 = compare_asc;

/**
 * @category Day Helpers
 * @summary Get the number of full days between the given dates.
 *
 * @description
 * Get the number of full days between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of full days
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * var result = differenceInDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 365
 */
function differenceInDays$1 (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse$18(dirtyDateLeft);
  var dateRight = parse$18(dirtyDateRight);

  var sign = compareAsc$3(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarDays$2(dateLeft, dateRight));
  dateLeft.setDate(dateLeft.getDate() - sign * difference);

  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
  // If so, result must be decreased by 1 in absolute value
  var isLastDayNotFull = compareAsc$3(dateLeft, dateRight) === -sign;
  return sign * (difference - isLastDayNotFull)
}

var difference_in_days = differenceInDays$1;

var parse$17 = parse_1;

/**
 * @category Millisecond Helpers
 * @summary Get the number of milliseconds between the given dates.
 *
 * @description
 * Get the number of milliseconds between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of milliseconds
 *
 * @example
 * // How many milliseconds are between
 * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
 * var result = differenceInMilliseconds(
 *   new Date(2014, 6, 2, 12, 30, 21, 700),
 *   new Date(2014, 6, 2, 12, 30, 20, 600)
 * )
 * //=> 1100
 */
function differenceInMilliseconds$3 (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse$17(dirtyDateLeft);
  var dateRight = parse$17(dirtyDateRight);
  return dateLeft.getTime() - dateRight.getTime()
}

var difference_in_milliseconds = differenceInMilliseconds$3;

var differenceInMilliseconds$2 = difference_in_milliseconds;

var MILLISECONDS_IN_HOUR = 3600000;

/**
 * @category Hour Helpers
 * @summary Get the number of hours between the given dates.
 *
 * @description
 * Get the number of hours between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of hours
 *
 * @example
 * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?
 * var result = differenceInHours(
 *   new Date(2014, 6, 2, 19, 0),
 *   new Date(2014, 6, 2, 6, 50)
 * )
 * //=> 12
 */
function differenceInHours (dirtyDateLeft, dirtyDateRight) {
  var diff = differenceInMilliseconds$2(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_HOUR;
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
}

var difference_in_hours = differenceInHours;

var addISOYears = add_iso_years;

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Subtract the specified number of ISO week-numbering years from the given date.
 *
 * @description
 * Subtract the specified number of ISO week-numbering years from the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of ISO week-numbering years to be subtracted
 * @returns {Date} the new date with the ISO week-numbering years subtracted
 *
 * @example
 * // Subtract 5 ISO week-numbering years from 1 September 2014:
 * var result = subISOYears(new Date(2014, 8, 1), 5)
 * //=> Mon Aug 31 2009 00:00:00
 */
function subISOYears$1 (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addISOYears(dirtyDate, -amount)
}

var sub_iso_years = subISOYears$1;

var parse$16 = parse_1;
var differenceInCalendarISOYears = difference_in_calendar_iso_years;
var compareAsc$2 = compare_asc;
var subISOYears = sub_iso_years;

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of full ISO week-numbering years between the given dates.
 *
 * @description
 * Get the number of full ISO week-numbering years between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of full ISO week-numbering years
 *
 * @example
 * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?
 * var result = differenceInISOYears(
 *   new Date(2012, 0, 1),
 *   new Date(2010, 0, 1)
 * )
 * //=> 1
 */
function differenceInISOYears (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse$16(dirtyDateLeft);
  var dateRight = parse$16(dirtyDateRight);

  var sign = compareAsc$2(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarISOYears(dateLeft, dateRight));
  dateLeft = subISOYears(dateLeft, sign * difference);

  // Math.abs(diff in full ISO years - diff in calendar ISO years) === 1
  // if last calendar ISO year is not full
  // If so, result must be decreased by 1 in absolute value
  var isLastISOYearNotFull = compareAsc$2(dateLeft, dateRight) === -sign;
  return sign * (difference - isLastISOYearNotFull)
}

var difference_in_iso_years = differenceInISOYears;

var differenceInMilliseconds$1 = difference_in_milliseconds;

var MILLISECONDS_IN_MINUTE$1 = 60000;

/**
 * @category Minute Helpers
 * @summary Get the number of minutes between the given dates.
 *
 * @description
 * Get the number of minutes between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of minutes
 *
 * @example
 * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?
 * var result = differenceInMinutes(
 *   new Date(2014, 6, 2, 12, 20, 0),
 *   new Date(2014, 6, 2, 12, 7, 59)
 * )
 * //=> 12
 */
function differenceInMinutes (dirtyDateLeft, dirtyDateRight) {
  var diff = differenceInMilliseconds$1(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_MINUTE$1;
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
}

var difference_in_minutes = differenceInMinutes;

var parse$15 = parse_1;
var differenceInCalendarMonths = difference_in_calendar_months;
var compareAsc$1 = compare_asc;

/**
 * @category Month Helpers
 * @summary Get the number of full months between the given dates.
 *
 * @description
 * Get the number of full months between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of full months
 *
 * @example
 * // How many full months are between 31 January 2014 and 1 September 2014?
 * var result = differenceInMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 7
 */
function differenceInMonths$2 (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse$15(dirtyDateLeft);
  var dateRight = parse$15(dirtyDateRight);

  var sign = compareAsc$1(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
  dateLeft.setMonth(dateLeft.getMonth() - sign * difference);

  // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
  // If so, result must be decreased by 1 in absolute value
  var isLastMonthNotFull = compareAsc$1(dateLeft, dateRight) === -sign;
  return sign * (difference - isLastMonthNotFull)
}

var difference_in_months = differenceInMonths$2;

var differenceInMonths$1 = difference_in_months;

/**
 * @category Quarter Helpers
 * @summary Get the number of full quarters between the given dates.
 *
 * @description
 * Get the number of full quarters between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of full quarters
 *
 * @example
 * // How many full quarters are between 31 December 2013 and 2 July 2014?
 * var result = differenceInQuarters(
 *   new Date(2014, 6, 2),
 *   new Date(2013, 11, 31)
 * )
 * //=> 2
 */
function differenceInQuarters (dirtyDateLeft, dirtyDateRight) {
  var diff = differenceInMonths$1(dirtyDateLeft, dirtyDateRight) / 3;
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
}

var difference_in_quarters = differenceInQuarters;

var differenceInMilliseconds = difference_in_milliseconds;

/**
 * @category Second Helpers
 * @summary Get the number of seconds between the given dates.
 *
 * @description
 * Get the number of seconds between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of seconds
 *
 * @example
 * // How many seconds are between
 * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
 * var result = differenceInSeconds(
 *   new Date(2014, 6, 2, 12, 30, 20, 0),
 *   new Date(2014, 6, 2, 12, 30, 7, 999)
 * )
 * //=> 12
 */
function differenceInSeconds$2 (dirtyDateLeft, dirtyDateRight) {
  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
}

var difference_in_seconds = differenceInSeconds$2;

var differenceInDays = difference_in_days;

/**
 * @category Week Helpers
 * @summary Get the number of full weeks between the given dates.
 *
 * @description
 * Get the number of full weeks between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of full weeks
 *
 * @example
 * // How many full weeks are between 5 July 2014 and 20 July 2014?
 * var result = differenceInWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5)
 * )
 * //=> 2
 */
function differenceInWeeks (dirtyDateLeft, dirtyDateRight) {
  var diff = differenceInDays(dirtyDateLeft, dirtyDateRight) / 7;
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)
}

var difference_in_weeks = differenceInWeeks;

var parse$14 = parse_1;
var differenceInCalendarYears = difference_in_calendar_years;
var compareAsc = compare_asc;

/**
 * @category Year Helpers
 * @summary Get the number of full years between the given dates.
 *
 * @description
 * Get the number of full years between the given dates.
 *
 * @param {Date|String|Number} dateLeft - the later date
 * @param {Date|String|Number} dateRight - the earlier date
 * @returns {Number} the number of full years
 *
 * @example
 * // How many full years are between 31 December 2013 and 11 February 2015?
 * var result = differenceInYears(
 *   new Date(2015, 1, 11),
 *   new Date(2013, 11, 31)
 * )
 * //=> 1
 */
function differenceInYears (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse$14(dirtyDateLeft);
  var dateRight = parse$14(dirtyDateRight);

  var sign = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight));
  dateLeft.setFullYear(dateLeft.getFullYear() - sign * difference);

  // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full
  // If so, result must be decreased by 1 in absolute value
  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;
  return sign * (difference - isLastYearNotFull)
}

var difference_in_years = differenceInYears;

function buildDistanceInWordsLocale$b () {
  var distanceInWordsLocale = {
    lessThanXSeconds: {
      one: 'less than a second',
      other: 'less than {{count}} seconds'
    },

    xSeconds: {
      one: '1 second',
      other: '{{count}} seconds'
    },

    halfAMinute: 'half a minute',

    lessThanXMinutes: {
      one: 'less than a minute',
      other: 'less than {{count}} minutes'
    },

    xMinutes: {
      one: '1 minute',
      other: '{{count}} minutes'
    },

    aboutXHours: {
      one: 'about 1 hour',
      other: 'about {{count}} hours'
    },

    xHours: {
      one: '1 hour',
      other: '{{count}} hours'
    },

    xDays: {
      one: '1 day',
      other: '{{count}} days'
    },

    aboutXMonths: {
      one: 'about 1 month',
      other: 'about {{count}} months'
    },

    xMonths: {
      one: '1 month',
      other: '{{count}} months'
    },

    aboutXYears: {
      one: 'about 1 year',
      other: 'about {{count}} years'
    },

    xYears: {
      one: '1 year',
      other: '{{count}} years'
    },

    overXYears: {
      one: 'over 1 year',
      other: 'over {{count}} years'
    },

    almostXYears: {
      one: 'almost 1 year',
      other: 'almost {{count}} years'
    }
  };

  function localize (token, count, options) {
    options = options || {};

    var result;
    if (typeof distanceInWordsLocale[token] === 'string') {
      result = distanceInWordsLocale[token];
    } else if (count === 1) {
      result = distanceInWordsLocale[token].one;
    } else {
      result = distanceInWordsLocale[token].other.replace('{{count}}', count);
    }

    if (options.addSuffix) {
      if (options.comparison > 0) {
        return 'in ' + result
      } else {
        return result + ' ago'
      }
    }

    return result
  }

  return {
    localize: localize
  }
}

var build_distance_in_words_locale$5 = buildDistanceInWordsLocale$b;

var commonFormatterKeys = [
  'M', 'MM', 'Q', 'D', 'DD', 'DDD', 'DDDD', 'd',
  'E', 'W', 'WW', 'YY', 'YYYY', 'GG', 'GGGG',
  'H', 'HH', 'h', 'hh', 'm', 'mm',
  's', 'ss', 'S', 'SS', 'SSS',
  'Z', 'ZZ', 'X', 'x'
];

function buildFormattingTokensRegExp$6 (formatters) {
  var formatterKeys = [];
  for (var key in formatters) {
    if (formatters.hasOwnProperty(key)) {
      formatterKeys.push(key);
    }
  }

  var formattingTokens = commonFormatterKeys
    .concat(formatterKeys)
    .sort()
    .reverse();
  var formattingTokensRegExp = new RegExp(
    '(\\[[^\\[]*\\])|(\\\\)?' + '(' + formattingTokens.join('|') + '|.)', 'g'
  );

  return formattingTokensRegExp
}

var build_formatting_tokens_reg_exp = buildFormattingTokensRegExp$6;

var buildFormattingTokensRegExp$5 = build_formatting_tokens_reg_exp;

function buildFormatLocale$b () {
  // Note: in English, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.
  var months3char = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  var monthsFull = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  var weekdays2char = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
  var weekdays3char = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  var weekdaysFull = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  var meridiemUppercase = ['AM', 'PM'];
  var meridiemLowercase = ['am', 'pm'];
  var meridiemFull = ['a.m.', 'p.m.'];

  var formatters = {
    // Month: Jan, Feb, ..., Dec
    'MMM': function (date) {
      return months3char[date.getMonth()]
    },

    // Month: January, February, ..., December
    'MMMM': function (date) {
      return monthsFull[date.getMonth()]
    },

    // Day of week: Su, Mo, ..., Sa
    'dd': function (date) {
      return weekdays2char[date.getDay()]
    },

    // Day of week: Sun, Mon, ..., Sat
    'ddd': function (date) {
      return weekdays3char[date.getDay()]
    },

    // Day of week: Sunday, Monday, ..., Saturday
    'dddd': function (date) {
      return weekdaysFull[date.getDay()]
    },

    // AM, PM
    'A': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]
    },

    // am, pm
    'a': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]
    },

    // a.m., p.m.
    'aa': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]
    }
  };

  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.
  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W'];
  ordinalFormatters.forEach(function (formatterToken) {
    formatters[formatterToken + 'o'] = function (date, formatters) {
      return ordinal$4(formatters[formatterToken](date))
    };
  });

  return {
    formatters: formatters,
    formattingTokensRegExp: buildFormattingTokensRegExp$5(formatters)
  }
}

function ordinal$4 (number) {
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st'
      case 2:
        return number + 'nd'
      case 3:
        return number + 'rd'
    }
  }
  return number + 'th'
}

var build_format_locale$5 = buildFormatLocale$b;

var buildDistanceInWordsLocale$a = build_distance_in_words_locale$5;
var buildFormatLocale$a = build_format_locale$5;

/**
 * @category Locales
 * @summary English locale.
 */
var en$5 = {
  distanceInWords: buildDistanceInWordsLocale$a(),
  format: buildFormatLocale$a()
};

var compareDesc$1 = compare_desc;
var parse$13 = parse_1;
var differenceInSeconds$1 = difference_in_seconds;
var differenceInMonths = difference_in_months;
var enLocale$2 = en$5;

var MINUTES_IN_DAY$1 = 1440;
var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
var MINUTES_IN_MONTH$1 = 43200;
var MINUTES_IN_TWO_MONTHS = 86400;

/**
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words.
 *
 * | Distance between dates                                            | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance between dates | Result               |
 * |------------------------|----------------------|
 * | 0 secs ... 5 secs      | less than 5 seconds  |
 * | 5 secs ... 10 secs     | less than 10 seconds |
 * | 10 secs ... 20 secs    | less than 20 seconds |
 * | 20 secs ... 40 secs    | half a minute        |
 * | 40 secs ... 60 secs    | less than a minute   |
 * | 60 secs ... 90 secs    | 1 minute             |
 *
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @param {Date|String|Number} date - the other date
 * @param {Object} [options] - the object with options
 * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
 * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
 * @param {Object} [options.locale=enLocale] - the locale object
 * @returns {String} the distance in words
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * var result = distanceInWords(
 *   new Date(2014, 6, 2),
 *   new Date(2015, 0, 1)
 * )
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00, including seconds?
 * var result = distanceInWords(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0),
 *   {includeSeconds: true}
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * var result = distanceInWords(
 *   new Date(2016, 0, 1),
 *   new Date(2015, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> 'about 1 year ago'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * var eoLocale = require('date-fns/locale/eo')
 * var result = distanceInWords(
 *   new Date(2016, 7, 1),
 *   new Date(2015, 0, 1),
 *   {locale: eoLocale}
 * )
 * //=> 'pli ol 1 jaro'
 */
function distanceInWords$1 (dirtyDateToCompare, dirtyDate, dirtyOptions) {
  var options = dirtyOptions || {};

  var comparison = compareDesc$1(dirtyDateToCompare, dirtyDate);

  var locale = options.locale;
  var localize = enLocale$2.distanceInWords.localize;
  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {
    localize = locale.distanceInWords.localize;
  }

  var localizeOptions = {
    addSuffix: Boolean(options.addSuffix),
    comparison: comparison
  };

  var dateLeft, dateRight;
  if (comparison > 0) {
    dateLeft = parse$13(dirtyDateToCompare);
    dateRight = parse$13(dirtyDate);
  } else {
    dateLeft = parse$13(dirtyDate);
    dateRight = parse$13(dirtyDateToCompare);
  }

  var seconds = differenceInSeconds$1(dateRight, dateLeft);
  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset();
  var minutes = Math.round(seconds / 60) - offset;
  var months;

  // 0 up to 2 mins
  if (minutes < 2) {
    if (options.includeSeconds) {
      if (seconds < 5) {
        return localize('lessThanXSeconds', 5, localizeOptions)
      } else if (seconds < 10) {
        return localize('lessThanXSeconds', 10, localizeOptions)
      } else if (seconds < 20) {
        return localize('lessThanXSeconds', 20, localizeOptions)
      } else if (seconds < 40) {
        return localize('halfAMinute', null, localizeOptions)
      } else if (seconds < 60) {
        return localize('lessThanXMinutes', 1, localizeOptions)
      } else {
        return localize('xMinutes', 1, localizeOptions)
      }
    } else {
      if (minutes === 0) {
        return localize('lessThanXMinutes', 1, localizeOptions)
      } else {
        return localize('xMinutes', minutes, localizeOptions)
      }
    }

  // 2 mins up to 0.75 hrs
  } else if (minutes < 45) {
    return localize('xMinutes', minutes, localizeOptions)

  // 0.75 hrs up to 1.5 hrs
  } else if (minutes < 90) {
    return localize('aboutXHours', 1, localizeOptions)

  // 1.5 hrs up to 24 hrs
  } else if (minutes < MINUTES_IN_DAY$1) {
    var hours = Math.round(minutes / 60);
    return localize('aboutXHours', hours, localizeOptions)

  // 1 day up to 1.75 days
  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
    return localize('xDays', 1, localizeOptions)

  // 1.75 days up to 30 days
  } else if (minutes < MINUTES_IN_MONTH$1) {
    var days = Math.round(minutes / MINUTES_IN_DAY$1);
    return localize('xDays', days, localizeOptions)

  // 1 month up to 2 months
  } else if (minutes < MINUTES_IN_TWO_MONTHS) {
    months = Math.round(minutes / MINUTES_IN_MONTH$1);
    return localize('aboutXMonths', months, localizeOptions)
  }

  months = differenceInMonths(dateRight, dateLeft);

  // 2 months up to 12 months
  if (months < 12) {
    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH$1);
    return localize('xMonths', nearestMonth, localizeOptions)

  // 1 year up to max Date
  } else {
    var monthsSinceStartOfYear = months % 12;
    var years = Math.floor(months / 12);

    // N years up to 1 years 3 months
    if (monthsSinceStartOfYear < 3) {
      return localize('aboutXYears', years, localizeOptions)

    // N years 3 months up to N years 9 months
    } else if (monthsSinceStartOfYear < 9) {
      return localize('overXYears', years, localizeOptions)

    // N years 9 months up to N year 12 months
    } else {
      return localize('almostXYears', years + 1, localizeOptions)
    }
  }
}

var distance_in_words = distanceInWords$1;

var compareDesc = compare_desc;
var parse$12 = parse_1;
var differenceInSeconds = difference_in_seconds;
var enLocale$1 = en$5;

var MINUTES_IN_DAY = 1440;
var MINUTES_IN_MONTH = 43200;
var MINUTES_IN_YEAR = 525600;

/**
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words, using strict units.
 * This is like `distanceInWords`, but does not use helpers like 'almost', 'over',
 * 'less than' and the like.
 *
 * | Distance between dates | Result              |
 * |------------------------|---------------------|
 * | 0 ... 59 secs          | [0..59] seconds     |
 * | 1 ... 59 mins          | [1..59] minutes     |
 * | 1 ... 23 hrs           | [1..23] hours       |
 * | 1 ... 29 days          | [1..29] days        |
 * | 1 ... 11 months        | [1..11] months      |
 * | 1 ... N years          | [1..N]  years       |
 *
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @param {Date|String|Number} date - the other date
 * @param {Object} [options] - the object with options
 * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
 * @param {'s'|'m'|'h'|'d'|'M'|'Y'} [options.unit] - if specified, will force a unit
 * @param {'floor'|'ceil'|'round'} [options.partialMethod='floor'] - which way to round partial units
 * @param {Object} [options.locale=enLocale] - the locale object
 * @returns {String} the distance in words
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * var result = distanceInWordsStrict(
 *   new Date(2014, 6, 2),
 *   new Date(2015, 0, 2)
 * )
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00?
 * var result = distanceInWordsStrict(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0),
 * )
 * //=> '15 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * var result = distanceInWordsStrict(
 *   new Date(2016, 0, 1),
 *   new Date(2015, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> '1 year ago'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, in minutes?
 * var result = distanceInWordsStrict(
 *   new Date(2016, 0, 1),
 *   new Date(2015, 0, 1),
 *   {unit: 'm'}
 * )
 * //=> '525600 minutes'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 28 January 2015, in months, rounded up?
 * var result = distanceInWordsStrict(
 *   new Date(2015, 0, 28),
 *   new Date(2015, 0, 1),
 *   {unit: 'M', partialMethod: 'ceil'}
 * )
 * //=> '1 month'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * var eoLocale = require('date-fns/locale/eo')
 * var result = distanceInWordsStrict(
 *   new Date(2016, 7, 1),
 *   new Date(2015, 0, 1),
 *   {locale: eoLocale}
 * )
 * //=> '1 jaro'
 */
function distanceInWordsStrict (dirtyDateToCompare, dirtyDate, dirtyOptions) {
  var options = dirtyOptions || {};

  var comparison = compareDesc(dirtyDateToCompare, dirtyDate);

  var locale = options.locale;
  var localize = enLocale$1.distanceInWords.localize;
  if (locale && locale.distanceInWords && locale.distanceInWords.localize) {
    localize = locale.distanceInWords.localize;
  }

  var localizeOptions = {
    addSuffix: Boolean(options.addSuffix),
    comparison: comparison
  };

  var dateLeft, dateRight;
  if (comparison > 0) {
    dateLeft = parse$12(dirtyDateToCompare);
    dateRight = parse$12(dirtyDate);
  } else {
    dateLeft = parse$12(dirtyDate);
    dateRight = parse$12(dirtyDateToCompare);
  }

  var unit;
  var mathPartial = Math[options.partialMethod ? String(options.partialMethod) : 'floor'];
  var seconds = differenceInSeconds(dateRight, dateLeft);
  var offset = dateRight.getTimezoneOffset() - dateLeft.getTimezoneOffset();
  var minutes = mathPartial(seconds / 60) - offset;
  var hours, days, months, years;

  if (options.unit) {
    unit = String(options.unit);
  } else {
    if (minutes < 1) {
      unit = 's';
    } else if (minutes < 60) {
      unit = 'm';
    } else if (minutes < MINUTES_IN_DAY) {
      unit = 'h';
    } else if (minutes < MINUTES_IN_MONTH) {
      unit = 'd';
    } else if (minutes < MINUTES_IN_YEAR) {
      unit = 'M';
    } else {
      unit = 'Y';
    }
  }

  // 0 up to 60 seconds
  if (unit === 's') {
    return localize('xSeconds', seconds, localizeOptions)

  // 1 up to 60 mins
  } else if (unit === 'm') {
    return localize('xMinutes', minutes, localizeOptions)

  // 1 up to 24 hours
  } else if (unit === 'h') {
    hours = mathPartial(minutes / 60);
    return localize('xHours', hours, localizeOptions)

  // 1 up to 30 days
  } else if (unit === 'd') {
    days = mathPartial(minutes / MINUTES_IN_DAY);
    return localize('xDays', days, localizeOptions)

  // 1 up to 12 months
  } else if (unit === 'M') {
    months = mathPartial(minutes / MINUTES_IN_MONTH);
    return localize('xMonths', months, localizeOptions)

  // 1 year up to max Date
  } else if (unit === 'Y') {
    years = mathPartial(minutes / MINUTES_IN_YEAR);
    return localize('xYears', years, localizeOptions)
  }

  throw new Error('Unknown unit: ' + unit)
}

var distance_in_words_strict = distanceInWordsStrict;

var distanceInWords = distance_in_words;

/**
 * @category Common Helpers
 * @summary Return the distance between the given date and now in words.
 *
 * @description
 * Return the distance between the given date and now in words.
 *
 * | Distance to now                                                   | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance to now     | Result               |
 * |---------------------|----------------------|
 * | 0 secs ... 5 secs   | less than 5 seconds  |
 * | 5 secs ... 10 secs  | less than 10 seconds |
 * | 10 secs ... 20 secs | less than 20 seconds |
 * | 20 secs ... 40 secs | half a minute        |
 * | 40 secs ... 60 secs | less than a minute   |
 * | 60 secs ... 90 secs | 1 minute             |
 *
 * @param {Date|String|Number} date - the given date
 * @param {Object} [options] - the object with options
 * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
 * @param {Boolean} [options.addSuffix=false] - result specifies if the second date is earlier or later than the first
 * @param {Object} [options.locale=enLocale] - the locale object
 * @returns {String} the distance in words
 *
 * @example
 * // If today is 1 January 2015, what is the distance to 2 July 2014?
 * var result = distanceInWordsToNow(
 *   new Date(2014, 6, 2)
 * )
 * //=> '6 months'
 *
 * @example
 * // If now is 1 January 2015 00:00:00,
 * // what is the distance to 1 January 2015 00:00:15, including seconds?
 * var result = distanceInWordsToNow(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   {includeSeconds: true}
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016, with a suffix?
 * var result = distanceInWordsToNow(
 *   new Date(2016, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> 'in about 1 year'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 August 2016 in Esperanto?
 * var eoLocale = require('date-fns/locale/eo')
 * var result = distanceInWordsToNow(
 *   new Date(2016, 7, 1),
 *   {locale: eoLocale}
 * )
 * //=> 'pli ol 1 jaro'
 */
function distanceInWordsToNow (dirtyDate, dirtyOptions) {
  return distanceInWords(Date.now(), dirtyDate, dirtyOptions)
}

var distance_in_words_to_now = distanceInWordsToNow;

var parse$11 = parse_1;

/**
 * @category Day Helpers
 * @summary Return the array of dates within the specified range.
 *
 * @description
 * Return the array of dates within the specified range.
 *
 * @param {Date|String|Number} startDate - the first date
 * @param {Date|String|Number} endDate - the last date
 * @param {Number} [step=1] - the step between each day
 * @returns {Date[]} the array with starts of days from the day of startDate to the day of endDate
 * @throws {Error} startDate cannot be after endDate
 *
 * @example
 * // Each day between 6 October 2014 and 10 October 2014:
 * var result = eachDay(
 *   new Date(2014, 9, 6),
 *   new Date(2014, 9, 10)
 * )
 * //=> [
 * //   Mon Oct 06 2014 00:00:00,
 * //   Tue Oct 07 2014 00:00:00,
 * //   Wed Oct 08 2014 00:00:00,
 * //   Thu Oct 09 2014 00:00:00,
 * //   Fri Oct 10 2014 00:00:00
 * // ]
 */
function eachDay (dirtyStartDate, dirtyEndDate, dirtyStep) {
  var startDate = parse$11(dirtyStartDate);
  var endDate = parse$11(dirtyEndDate);
  var step = dirtyStep !== undefined ? dirtyStep : 1;

  var endTime = endDate.getTime();

  if (startDate.getTime() > endTime) {
    throw new Error('The first date cannot be after the second date')
  }

  var dates = [];

  var currentDate = startDate;
  currentDate.setHours(0, 0, 0, 0);

  while (currentDate.getTime() <= endTime) {
    dates.push(parse$11(currentDate));
    currentDate.setDate(currentDate.getDate() + step);
  }

  return dates
}

var each_day = eachDay;

var parse$10 = parse_1;

/**
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of a day
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * var result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */
function endOfDay$2 (dirtyDate) {
  var date = parse$10(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date
}

var end_of_day = endOfDay$2;

var parse$$ = parse_1;

/**
 * @category Hour Helpers
 * @summary Return the end of an hour for the given date.
 *
 * @description
 * Return the end of an hour for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of an hour
 *
 * @example
 * // The end of an hour for 2 September 2014 11:55:00:
 * var result = endOfHour(new Date(2014, 8, 2, 11, 55))
 * //=> Tue Sep 02 2014 11:59:59.999
 */
function endOfHour (dirtyDate) {
  var date = parse$$(dirtyDate);
  date.setMinutes(59, 59, 999);
  return date
}

var end_of_hour = endOfHour;

var parse$_ = parse_1;

/**
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the end of a week
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfWeek$1 (dirtyDate, dirtyOptions) {
  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0;

  var date = parse$_(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);

  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date
}

var end_of_week = endOfWeek$1;

var endOfWeek = end_of_week;

/**
 * @category ISO Week Helpers
 * @summary Return the end of an ISO week for the given date.
 *
 * @description
 * Return the end of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of an ISO week
 *
 * @example
 * // The end of an ISO week for 2 September 2014 11:55:00:
 * var result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Sep 07 2014 23:59:59.999
 */
function endOfISOWeek (dirtyDate) {
  return endOfWeek(dirtyDate, {weekStartsOn: 1})
}

var end_of_iso_week = endOfISOWeek;

var getISOYear$2 = get_iso_year;
var startOfISOWeek$2 = start_of_iso_week;

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the end of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the end of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of an ISO week-numbering year
 *
 * @example
 * // The end of an ISO week-numbering year for 2 July 2005:
 * var result = endOfISOYear(new Date(2005, 6, 2))
 * //=> Sun Jan 01 2006 23:59:59.999
 */
function endOfISOYear (dirtyDate) {
  var year = getISOYear$2(dirtyDate);
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  var date = startOfISOWeek$2(fourthOfJanuaryOfNextYear);
  date.setMilliseconds(date.getMilliseconds() - 1);
  return date
}

var end_of_iso_year = endOfISOYear;

var parse$Z = parse_1;

/**
 * @category Minute Helpers
 * @summary Return the end of a minute for the given date.
 *
 * @description
 * Return the end of a minute for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of a minute
 *
 * @example
 * // The end of a minute for 1 December 2014 22:15:45.400:
 * var result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:59.999
 */
function endOfMinute (dirtyDate) {
  var date = parse$Z(dirtyDate);
  date.setSeconds(59, 999);
  return date
}

var end_of_minute = endOfMinute;

var parse$Y = parse_1;

/**
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of a month
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfMonth$1 (dirtyDate) {
  var date = parse$Y(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date
}

var end_of_month = endOfMonth$1;

var parse$X = parse_1;

/**
 * @category Quarter Helpers
 * @summary Return the end of a year quarter for the given date.
 *
 * @description
 * Return the end of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of a quarter
 *
 * @example
 * // The end of a quarter for 2 September 2014 11:55:00:
 * var result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfQuarter (dirtyDate) {
  var date = parse$X(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3 + 3;
  date.setMonth(month, 0);
  date.setHours(23, 59, 59, 999);
  return date
}

var end_of_quarter = endOfQuarter;

var parse$W = parse_1;

/**
 * @category Second Helpers
 * @summary Return the end of a second for the given date.
 *
 * @description
 * Return the end of a second for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of a second
 *
 * @example
 * // The end of a second for 1 December 2014 22:15:45.400:
 * var result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:45.999
 */
function endOfSecond (dirtyDate) {
  var date = parse$W(dirtyDate);
  date.setMilliseconds(999);
  return date
}

var end_of_second = endOfSecond;

var endOfDay$1 = end_of_day;

/**
 * @category Day Helpers
 * @summary Return the end of today.
 *
 * @description
 * Return the end of today.
 *
 * @returns {Date} the end of today
 *
 * @example
 * // If today is 6 October 2014:
 * var result = endOfToday()
 * //=> Mon Oct 6 2014 23:59:59.999
 */
function endOfToday () {
  return endOfDay$1(new Date())
}

var end_of_today = endOfToday;

/**
 * @category Day Helpers
 * @summary Return the end of tomorrow.
 *
 * @description
 * Return the end of tomorrow.
 *
 * @returns {Date} the end of tomorrow
 *
 * @example
 * // If today is 6 October 2014:
 * var result = endOfTomorrow()
 * //=> Tue Oct 7 2014 23:59:59.999
 */

function endOfTomorrow () {
  var now = new Date();
  var year = now.getFullYear();
  var month = now.getMonth();
  var day = now.getDate();

  var date = new Date(0);
  date.setFullYear(year, month, day + 1);
  date.setHours(23, 59, 59, 999);
  return date
}

var end_of_tomorrow = endOfTomorrow;

var parse$V = parse_1;

/**
 * @category Year Helpers
 * @summary Return the end of a year for the given date.
 *
 * @description
 * Return the end of a year for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of a year
 *
 * @example
 * // The end of a year for 2 September 2014 11:55:00:
 * var result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Dec 31 2014 23:59:59.999
 */
function endOfYear (dirtyDate) {
  var date = parse$V(dirtyDate);
  var year = date.getFullYear();
  date.setFullYear(year + 1, 0, 0);
  date.setHours(23, 59, 59, 999);
  return date
}

var end_of_year = endOfYear;

/**
 * @category Day Helpers
 * @summary Return the end of yesterday.
 *
 * @description
 * Return the end of yesterday.
 *
 * @returns {Date} the end of yesterday
 *
 * @example
 * // If today is 6 October 2014:
 * var result = endOfYesterday()
 * //=> Sun Oct 5 2014 23:59:59.999
 */

function endOfYesterday () {
  var now = new Date();
  var year = now.getFullYear();
  var month = now.getMonth();
  var day = now.getDate();

  var date = new Date(0);
  date.setFullYear(year, month, day - 1);
  date.setHours(23, 59, 59, 999);
  return date
}

var end_of_yesterday = endOfYesterday;

var parse$U = parse_1;

/**
 * @category Year Helpers
 * @summary Return the start of a year for the given date.
 *
 * @description
 * Return the start of a year for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of a year
 *
 * @example
 * // The start of a year for 2 September 2014 11:55:00:
 * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Jan 01 2014 00:00:00
 */
function startOfYear$1 (dirtyDate) {
  var cleanDate = parse$U(dirtyDate);
  var date = new Date(0);
  date.setFullYear(cleanDate.getFullYear(), 0, 1);
  date.setHours(0, 0, 0, 0);
  return date
}

var start_of_year = startOfYear$1;

var parse$T = parse_1;
var startOfYear = start_of_year;
var differenceInCalendarDays$1 = difference_in_calendar_days;

/**
 * @category Day Helpers
 * @summary Get the day of the year of the given date.
 *
 * @description
 * Get the day of the year of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the day of year
 *
 * @example
 * // Which day of the year is 2 July 2014?
 * var result = getDayOfYear(new Date(2014, 6, 2))
 * //=> 183
 */
function getDayOfYear$1 (dirtyDate) {
  var date = parse$T(dirtyDate);
  var diff = differenceInCalendarDays$1(date, startOfYear(date));
  var dayOfYear = diff + 1;
  return dayOfYear
}

var get_day_of_year = getDayOfYear$1;

var parse$S = parse_1;
var startOfISOWeek$1 = start_of_iso_week;
var startOfISOYear$2 = start_of_iso_year;

var MILLISECONDS_IN_WEEK$1 = 604800000;

/**
 * @category ISO Week Helpers
 * @summary Get the ISO week of the given date.
 *
 * @description
 * Get the ISO week of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the ISO week
 *
 * @example
 * // Which week of the ISO-week numbering year is 2 January 2005?
 * var result = getISOWeek(new Date(2005, 0, 2))
 * //=> 53
 */
function getISOWeek$2 (dirtyDate) {
  var date = parse$S(dirtyDate);
  var diff = startOfISOWeek$1(date).getTime() - startOfISOYear$2(date).getTime();

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1
}

var get_iso_week = getISOWeek$2;

var isDate = is_date;

/**
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @param {Date} date - the date to check
 * @returns {Boolean} the date is valid
 * @throws {TypeError} argument must be an instance of Date
 *
 * @example
 * // For the valid date:
 * var result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the invalid date:
 * var result = isValid(new Date(''))
 * //=> false
 */
function isValid$1 (dirtyDate) {
  if (isDate(dirtyDate)) {
    return !isNaN(dirtyDate)
  } else {
    throw new TypeError(toString.call(dirtyDate) + ' is not an instance of Date')
  }
}

var is_valid = isValid$1;

var getDayOfYear = get_day_of_year;
var getISOWeek$1 = get_iso_week;
var getISOYear$1 = get_iso_year;
var parse$R = parse_1;
var isValid = is_valid;
var enLocale = en$5;

/**
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format.
 *
 * Accepted tokens:
 * | Unit                    | Token | Result examples                  |
 * |-------------------------|-------|----------------------------------|
 * | Month                   | M     | 1, 2, ..., 12                    |
 * |                         | Mo    | 1st, 2nd, ..., 12th              |
 * |                         | MM    | 01, 02, ..., 12                  |
 * |                         | MMM   | Jan, Feb, ..., Dec               |
 * |                         | MMMM  | January, February, ..., December |
 * | Quarter                 | Q     | 1, 2, 3, 4                       |
 * |                         | Qo    | 1st, 2nd, 3rd, 4th               |
 * | Day of month            | D     | 1, 2, ..., 31                    |
 * |                         | Do    | 1st, 2nd, ..., 31st              |
 * |                         | DD    | 01, 02, ..., 31                  |
 * | Day of year             | DDD   | 1, 2, ..., 366                   |
 * |                         | DDDo  | 1st, 2nd, ..., 366th             |
 * |                         | DDDD  | 001, 002, ..., 366               |
 * | Day of week             | d     | 0, 1, ..., 6                     |
 * |                         | do    | 0th, 1st, ..., 6th               |
 * |                         | dd    | Su, Mo, ..., Sa                  |
 * |                         | ddd   | Sun, Mon, ..., Sat               |
 * |                         | dddd  | Sunday, Monday, ..., Saturday    |
 * | Day of ISO week         | E     | 1, 2, ..., 7                     |
 * | ISO week                | W     | 1, 2, ..., 53                    |
 * |                         | Wo    | 1st, 2nd, ..., 53rd              |
 * |                         | WW    | 01, 02, ..., 53                  |
 * | Year                    | YY    | 00, 01, ..., 99                  |
 * |                         | YYYY  | 1900, 1901, ..., 2099            |
 * | ISO week-numbering year | GG    | 00, 01, ..., 99                  |
 * |                         | GGGG  | 1900, 1901, ..., 2099            |
 * | AM/PM                   | A     | AM, PM                           |
 * |                         | a     | am, pm                           |
 * |                         | aa    | a.m., p.m.                       |
 * | Hour                    | H     | 0, 1, ... 23                     |
 * |                         | HH    | 00, 01, ... 23                   |
 * |                         | h     | 1, 2, ..., 12                    |
 * |                         | hh    | 01, 02, ..., 12                  |
 * | Minute                  | m     | 0, 1, ..., 59                    |
 * |                         | mm    | 00, 01, ..., 59                  |
 * | Second                  | s     | 0, 1, ..., 59                    |
 * |                         | ss    | 00, 01, ..., 59                  |
 * | 1/10 of second          | S     | 0, 1, ..., 9                     |
 * | 1/100 of second         | SS    | 00, 01, ..., 99                  |
 * | Millisecond             | SSS   | 000, 001, ..., 999               |
 * | Timezone                | Z     | -01:00, +00:00, ... +12:00       |
 * |                         | ZZ    | -0100, +0000, ..., +1200         |
 * | Seconds timestamp       | X     | 512969520                        |
 * | Milliseconds timestamp  | x     | 512969520900                     |
 *
 * The characters wrapped in square brackets are escaped.
 *
 * The result may vary by locale.
 *
 * @param {Date|String|Number} date - the original date
 * @param {String} [format='YYYY-MM-DDTHH:mm:ss.SSSZ'] - the string of tokens
 * @param {Object} [options] - the object with options
 * @param {Object} [options.locale=enLocale] - the locale object
 * @returns {String} the formatted date string
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * var result = format(
 *   new Date(2014, 1, 11),
 *   'MM/DD/YYYY'
 * )
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * var eoLocale = require('date-fns/locale/eo')
 * var result = format(
 *   new Date(2014, 6, 2),
 *   'Do [de] MMMM YYYY',
 *   {locale: eoLocale}
 * )
 * //=> '2-a de julio 2014'
 */
function format$2 (dirtyDate, dirtyFormatStr, dirtyOptions) {
  var formatStr = dirtyFormatStr ? String(dirtyFormatStr) : 'YYYY-MM-DDTHH:mm:ss.SSSZ';
  var options = dirtyOptions || {};

  var locale = options.locale;
  var localeFormatters = enLocale.format.formatters;
  var formattingTokensRegExp = enLocale.format.formattingTokensRegExp;
  if (locale && locale.format && locale.format.formatters) {
    localeFormatters = locale.format.formatters;

    if (locale.format.formattingTokensRegExp) {
      formattingTokensRegExp = locale.format.formattingTokensRegExp;
    }
  }

  var date = parse$R(dirtyDate);

  if (!isValid(date)) {
    return 'Invalid Date'
  }

  var formatFn = buildFormatFn(formatStr, localeFormatters, formattingTokensRegExp);

  return formatFn(date)
}

var formatters = {
  // Month: 1, 2, ..., 12
  'M': function (date) {
    return date.getMonth() + 1
  },

  // Month: 01, 02, ..., 12
  'MM': function (date) {
    return addLeadingZeros(date.getMonth() + 1, 2)
  },

  // Quarter: 1, 2, 3, 4
  'Q': function (date) {
    return Math.ceil((date.getMonth() + 1) / 3)
  },

  // Day of month: 1, 2, ..., 31
  'D': function (date) {
    return date.getDate()
  },

  // Day of month: 01, 02, ..., 31
  'DD': function (date) {
    return addLeadingZeros(date.getDate(), 2)
  },

  // Day of year: 1, 2, ..., 366
  'DDD': function (date) {
    return getDayOfYear(date)
  },

  // Day of year: 001, 002, ..., 366
  'DDDD': function (date) {
    return addLeadingZeros(getDayOfYear(date), 3)
  },

  // Day of week: 0, 1, ..., 6
  'd': function (date) {
    return date.getDay()
  },

  // Day of ISO week: 1, 2, ..., 7
  'E': function (date) {
    return date.getDay() || 7
  },

  // ISO week: 1, 2, ..., 53
  'W': function (date) {
    return getISOWeek$1(date)
  },

  // ISO week: 01, 02, ..., 53
  'WW': function (date) {
    return addLeadingZeros(getISOWeek$1(date), 2)
  },

  // Year: 00, 01, ..., 99
  'YY': function (date) {
    return addLeadingZeros(date.getFullYear(), 4).substr(2)
  },

  // Year: 1900, 1901, ..., 2099
  'YYYY': function (date) {
    return addLeadingZeros(date.getFullYear(), 4)
  },

  // ISO week-numbering year: 00, 01, ..., 99
  'GG': function (date) {
    return String(getISOYear$1(date)).substr(2)
  },

  // ISO week-numbering year: 1900, 1901, ..., 2099
  'GGGG': function (date) {
    return getISOYear$1(date)
  },

  // Hour: 0, 1, ... 23
  'H': function (date) {
    return date.getHours()
  },

  // Hour: 00, 01, ..., 23
  'HH': function (date) {
    return addLeadingZeros(date.getHours(), 2)
  },

  // Hour: 1, 2, ..., 12
  'h': function (date) {
    var hours = date.getHours();
    if (hours === 0) {
      return 12
    } else if (hours > 12) {
      return hours % 12
    } else {
      return hours
    }
  },

  // Hour: 01, 02, ..., 12
  'hh': function (date) {
    return addLeadingZeros(formatters['h'](date), 2)
  },

  // Minute: 0, 1, ..., 59
  'm': function (date) {
    return date.getMinutes()
  },

  // Minute: 00, 01, ..., 59
  'mm': function (date) {
    return addLeadingZeros(date.getMinutes(), 2)
  },

  // Second: 0, 1, ..., 59
  's': function (date) {
    return date.getSeconds()
  },

  // Second: 00, 01, ..., 59
  'ss': function (date) {
    return addLeadingZeros(date.getSeconds(), 2)
  },

  // 1/10 of second: 0, 1, ..., 9
  'S': function (date) {
    return Math.floor(date.getMilliseconds() / 100)
  },

  // 1/100 of second: 00, 01, ..., 99
  'SS': function (date) {
    return addLeadingZeros(Math.floor(date.getMilliseconds() / 10), 2)
  },

  // Millisecond: 000, 001, ..., 999
  'SSS': function (date) {
    return addLeadingZeros(date.getMilliseconds(), 3)
  },

  // Timezone: -01:00, +00:00, ... +12:00
  'Z': function (date) {
    return formatTimezone(date.getTimezoneOffset(), ':')
  },

  // Timezone: -0100, +0000, ... +1200
  'ZZ': function (date) {
    return formatTimezone(date.getTimezoneOffset())
  },

  // Seconds timestamp: 512969520
  'X': function (date) {
    return Math.floor(date.getTime() / 1000)
  },

  // Milliseconds timestamp: 512969520900
  'x': function (date) {
    return date.getTime()
  }
};

function buildFormatFn (formatStr, localeFormatters, formattingTokensRegExp) {
  var array = formatStr.match(formattingTokensRegExp);
  var length = array.length;

  var i;
  var formatter;
  for (i = 0; i < length; i++) {
    formatter = localeFormatters[array[i]] || formatters[array[i]];
    if (formatter) {
      array[i] = formatter;
    } else {
      array[i] = removeFormattingTokens(array[i]);
    }
  }

  return function (date) {
    var output = '';
    for (var i = 0; i < length; i++) {
      if (array[i] instanceof Function) {
        output += array[i](date, formatters);
      } else {
        output += array[i];
      }
    }
    return output
  }
}

function removeFormattingTokens (input) {
  if (input.match(/\[[\s\S]/)) {
    return input.replace(/^\[|]$/g, '')
  }
  return input.replace(/\\/g, '')
}

function formatTimezone (offset, delimeter) {
  delimeter = delimeter || '';
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  return sign + addLeadingZeros(hours, 2) + delimeter + addLeadingZeros(minutes, 2)
}

function addLeadingZeros (number, targetLength) {
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = '0' + output;
  }
  return output
}

var format_1$1 = format$2;

var parse$Q = parse_1;

/**
 * @category Day Helpers
 * @summary Get the day of the month of the given date.
 *
 * @description
 * Get the day of the month of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the day of month
 *
 * @example
 * // Which day of the month is 29 February 2012?
 * var result = getDate(new Date(2012, 1, 29))
 * //=> 29
 */
function getDate (dirtyDate) {
  var date = parse$Q(dirtyDate);
  var dayOfMonth = date.getDate();
  return dayOfMonth
}

var get_date = getDate;

var parse$P = parse_1;

/**
 * @category Weekday Helpers
 * @summary Get the day of the week of the given date.
 *
 * @description
 * Get the day of the week of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the day of week
 *
 * @example
 * // Which day of the week is 29 February 2012?
 * var result = getDay(new Date(2012, 1, 29))
 * //=> 3
 */
function getDay (dirtyDate) {
  var date = parse$P(dirtyDate);
  var day = date.getDay();
  return day
}

var get_day = getDay;

var parse$O = parse_1;

/**
 * @category Year Helpers
 * @summary Is the given date in the leap year?
 *
 * @description
 * Is the given date in the leap year?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in the leap year
 *
 * @example
 * // Is 1 September 2012 in the leap year?
 * var result = isLeapYear(new Date(2012, 8, 1))
 * //=> true
 */
function isLeapYear$1 (dirtyDate) {
  var date = parse$O(dirtyDate);
  var year = date.getFullYear();
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0
}

var is_leap_year = isLeapYear$1;

var isLeapYear = is_leap_year;

/**
 * @category Year Helpers
 * @summary Get the number of days in a year of the given date.
 *
 * @description
 * Get the number of days in a year of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the number of days in a year
 *
 * @example
 * // How many days are in 2012?
 * var result = getDaysInYear(new Date(2012, 0, 1))
 * //=> 366
 */
function getDaysInYear (dirtyDate) {
  return isLeapYear(dirtyDate) ? 366 : 365
}

var get_days_in_year = getDaysInYear;

var parse$N = parse_1;

/**
 * @category Hour Helpers
 * @summary Get the hours of the given date.
 *
 * @description
 * Get the hours of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the hours
 *
 * @example
 * // Get the hours of 29 February 2012 11:45:00:
 * var result = getHours(new Date(2012, 1, 29, 11, 45))
 * //=> 11
 */
function getHours (dirtyDate) {
  var date = parse$N(dirtyDate);
  var hours = date.getHours();
  return hours
}

var get_hours = getHours;

var parse$M = parse_1;

/**
 * @category Weekday Helpers
 * @summary Get the day of the ISO week of the given date.
 *
 * @description
 * Get the day of the ISO week of the given date,
 * which is 7 for Sunday, 1 for Monday etc.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the day of ISO week
 *
 * @example
 * // Which day of the ISO week is 26 February 2012?
 * var result = getISODay(new Date(2012, 1, 26))
 * //=> 7
 */
function getISODay$1 (dirtyDate) {
  var date = parse$M(dirtyDate);
  var day = date.getDay();

  if (day === 0) {
    day = 7;
  }

  return day
}

var get_iso_day = getISODay$1;

var startOfISOYear$1 = start_of_iso_year;
var addWeeks$1 = add_weeks;

var MILLISECONDS_IN_WEEK = 604800000;

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of weeks in an ISO week-numbering year of the given date.
 *
 * @description
 * Get the number of weeks in an ISO week-numbering year of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the number of ISO weeks in a year
 *
 * @example
 * // How many weeks are in ISO week-numbering year 2015?
 * var result = getISOWeeksInYear(new Date(2015, 1, 11))
 * //=> 53
 */
function getISOWeeksInYear (dirtyDate) {
  var thisYear = startOfISOYear$1(dirtyDate);
  var nextYear = startOfISOYear$1(addWeeks$1(thisYear, 60));
  var diff = nextYear.valueOf() - thisYear.valueOf();
  // Round the number of weeks to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round(diff / MILLISECONDS_IN_WEEK)
}

var get_iso_weeks_in_year = getISOWeeksInYear;

var parse$L = parse_1;

/**
 * @category Millisecond Helpers
 * @summary Get the milliseconds of the given date.
 *
 * @description
 * Get the milliseconds of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the milliseconds
 *
 * @example
 * // Get the milliseconds of 29 February 2012 11:45:05.123:
 * var result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 123
 */
function getMilliseconds (dirtyDate) {
  var date = parse$L(dirtyDate);
  var milliseconds = date.getMilliseconds();
  return milliseconds
}

var get_milliseconds = getMilliseconds;

var parse$K = parse_1;

/**
 * @category Minute Helpers
 * @summary Get the minutes of the given date.
 *
 * @description
 * Get the minutes of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the minutes
 *
 * @example
 * // Get the minutes of 29 February 2012 11:45:05:
 * var result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 45
 */
function getMinutes (dirtyDate) {
  var date = parse$K(dirtyDate);
  var minutes = date.getMinutes();
  return minutes
}

var get_minutes = getMinutes;

var parse$J = parse_1;

/**
 * @category Month Helpers
 * @summary Get the month of the given date.
 *
 * @description
 * Get the month of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the month
 *
 * @example
 * // Which month is 29 February 2012?
 * var result = getMonth(new Date(2012, 1, 29))
 * //=> 1
 */
function getMonth (dirtyDate) {
  var date = parse$J(dirtyDate);
  var month = date.getMonth();
  return month
}

var get_month = getMonth;

var parse$I = parse_1;

var MILLISECONDS_IN_DAY$1 = 24 * 60 * 60 * 1000;

/**
 * @category Range Helpers
 * @summary Get the number of days that overlap in two date ranges
 *
 * @description
 * Get the number of days that overlap in two date ranges
 *
 * @param {Date|String|Number} initialRangeStartDate - the start of the initial range
 * @param {Date|String|Number} initialRangeEndDate - the end of the initial range
 * @param {Date|String|Number} comparedRangeStartDate - the start of the range to compare it with
 * @param {Date|String|Number} comparedRangeEndDate - the end of the range to compare it with
 * @returns {Number} the number of days that overlap in two date ranges
 * @throws {Error} startDate of a date range cannot be after its endDate
 *
 * @example
 * // For overlapping date ranges adds 1 for each started overlapping day:
 * getOverlappingDaysInRanges(
 *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 17), new Date(2014, 0, 21)
 * )
 * //=> 3
 *
 * @example
 * // For non-overlapping date ranges returns 0:
 * getOverlappingDaysInRanges(
 *   new Date(2014, 0, 10), new Date(2014, 0, 20), new Date(2014, 0, 21), new Date(2014, 0, 22)
 * )
 * //=> 0
 */
function getOverlappingDaysInRanges (dirtyInitialRangeStartDate, dirtyInitialRangeEndDate, dirtyComparedRangeStartDate, dirtyComparedRangeEndDate) {
  var initialStartTime = parse$I(dirtyInitialRangeStartDate).getTime();
  var initialEndTime = parse$I(dirtyInitialRangeEndDate).getTime();
  var comparedStartTime = parse$I(dirtyComparedRangeStartDate).getTime();
  var comparedEndTime = parse$I(dirtyComparedRangeEndDate).getTime();

  if (initialStartTime > initialEndTime || comparedStartTime > comparedEndTime) {
    throw new Error('The start of the range cannot be after the end of the range')
  }

  var isOverlapping = initialStartTime < comparedEndTime && comparedStartTime < initialEndTime;

  if (!isOverlapping) {
    return 0
  }

  var overlapStartDate = comparedStartTime < initialStartTime
    ? initialStartTime
    : comparedStartTime;

  var overlapEndDate = comparedEndTime > initialEndTime
    ? initialEndTime
    : comparedEndTime;

  var differenceInMs = overlapEndDate - overlapStartDate;

  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY$1)
}

var get_overlapping_days_in_ranges = getOverlappingDaysInRanges;

var parse$H = parse_1;

/**
 * @category Second Helpers
 * @summary Get the seconds of the given date.
 *
 * @description
 * Get the seconds of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the seconds
 *
 * @example
 * // Get the seconds of 29 February 2012 11:45:05.123:
 * var result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 5
 */
function getSeconds (dirtyDate) {
  var date = parse$H(dirtyDate);
  var seconds = date.getSeconds();
  return seconds
}

var get_seconds = getSeconds;

var parse$G = parse_1;

/**
 * @category Timestamp Helpers
 * @summary Get the milliseconds timestamp of the given date.
 *
 * @description
 * Get the milliseconds timestamp of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the timestamp
 *
 * @example
 * // Get the timestamp of 29 February 2012 11:45:05.123:
 * var result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 1330515905123
 */
function getTime (dirtyDate) {
  var date = parse$G(dirtyDate);
  var timestamp = date.getTime();
  return timestamp
}

var get_time = getTime;

var parse$F = parse_1;

/**
 * @category Year Helpers
 * @summary Get the year of the given date.
 *
 * @description
 * Get the year of the given date.
 *
 * @param {Date|String|Number} date - the given date
 * @returns {Number} the year
 *
 * @example
 * // Which year is 2 July 2014?
 * var result = getYear(new Date(2014, 6, 2))
 * //=> 2014
 */
function getYear (dirtyDate) {
  var date = parse$F(dirtyDate);
  var year = date.getFullYear();
  return year
}

var get_year = getYear;

var parse$E = parse_1;

/**
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * @param {Date|String|Number} date - the date that should be after the other one to return true
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is after the second date
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */
function isAfter (dirtyDate, dirtyDateToCompare) {
  var date = parse$E(dirtyDate);
  var dateToCompare = parse$E(dirtyDateToCompare);
  return date.getTime() > dateToCompare.getTime()
}

var is_after = isAfter;

var parse$D = parse_1;

/**
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * @param {Date|String|Number} date - the date that should be before the other one to return true
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is before the second date
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */
function isBefore (dirtyDate, dirtyDateToCompare) {
  var date = parse$D(dirtyDate);
  var dateToCompare = parse$D(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime()
}

var is_before = isBefore;

var parse$C = parse_1;

/**
 * @category Common Helpers
 * @summary Are the given dates equal?
 *
 * @description
 * Are the given dates equal?
 *
 * @param {Date|String|Number} dateLeft - the first date to compare
 * @param {Date|String|Number} dateRight - the second date to compare
 * @returns {Boolean} the dates are equal
 *
 * @example
 * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
 * var result = isEqual(
 *   new Date(2014, 6, 2, 6, 30, 45, 0)
 *   new Date(2014, 6, 2, 6, 30, 45, 500)
 * )
 * //=> false
 */
function isEqual (dirtyLeftDate, dirtyRightDate) {
  var dateLeft = parse$C(dirtyLeftDate);
  var dateRight = parse$C(dirtyRightDate);
  return dateLeft.getTime() === dateRight.getTime()
}

var is_equal = isEqual;

var parse$B = parse_1;

/**
 * @category Month Helpers
 * @summary Is the given date the first day of a month?
 *
 * @description
 * Is the given date the first day of a month?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is the first day of a month
 *
 * @example
 * // Is 1 September 2014 the first day of a month?
 * var result = isFirstDayOfMonth(new Date(2014, 8, 1))
 * //=> true
 */
function isFirstDayOfMonth (dirtyDate) {
  return parse$B(dirtyDate).getDate() === 1
}

var is_first_day_of_month = isFirstDayOfMonth;

var parse$A = parse_1;

/**
 * @category Weekday Helpers
 * @summary Is the given date Friday?
 *
 * @description
 * Is the given date Friday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Friday
 *
 * @example
 * // Is 26 September 2014 Friday?
 * var result = isFriday(new Date(2014, 8, 26))
 * //=> true
 */
function isFriday (dirtyDate) {
  return parse$A(dirtyDate).getDay() === 5
}

var is_friday = isFriday;

var parse$z = parse_1;

/**
 * @category Common Helpers
 * @summary Is the given date in the future?
 *
 * @description
 * Is the given date in the future?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in the future
 *
 * @example
 * // If today is 6 October 2014, is 31 December 2014 in the future?
 * var result = isFuture(new Date(2014, 11, 31))
 * //=> true
 */
function isFuture (dirtyDate) {
  return parse$z(dirtyDate).getTime() > new Date().getTime()
}

var is_future = isFuture;

var parse$y = parse_1;
var endOfDay = end_of_day;
var endOfMonth = end_of_month;

/**
 * @category Month Helpers
 * @summary Is the given date the last day of a month?
 *
 * @description
 * Is the given date the last day of a month?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is the last day of a month
 *
 * @example
 * // Is 28 February 2014 the last day of a month?
 * var result = isLastDayOfMonth(new Date(2014, 1, 28))
 * //=> true
 */
function isLastDayOfMonth (dirtyDate) {
  var date = parse$y(dirtyDate);
  return endOfDay(date).getTime() === endOfMonth(date).getTime()
}

var is_last_day_of_month = isLastDayOfMonth;

var parse$x = parse_1;

/**
 * @category Weekday Helpers
 * @summary Is the given date Monday?
 *
 * @description
 * Is the given date Monday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Monday
 *
 * @example
 * // Is 22 September 2014 Monday?
 * var result = isMonday(new Date(2014, 8, 22))
 * //=> true
 */
function isMonday (dirtyDate) {
  return parse$x(dirtyDate).getDay() === 1
}

var is_monday = isMonday;

var parse$w = parse_1;

/**
 * @category Common Helpers
 * @summary Is the given date in the past?
 *
 * @description
 * Is the given date in the past?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in the past
 *
 * @example
 * // If today is 6 October 2014, is 2 July 2014 in the past?
 * var result = isPast(new Date(2014, 6, 2))
 * //=> true
 */
function isPast (dirtyDate) {
  return parse$w(dirtyDate).getTime() < new Date().getTime()
}

var is_past = isPast;

var startOfDay$5 = start_of_day;

/**
 * @category Day Helpers
 * @summary Are the given dates in the same day?
 *
 * @description
 * Are the given dates in the same day?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same day
 *
 * @example
 * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
 * var result = isSameDay(
 *   new Date(2014, 8, 4, 6, 0),
 *   new Date(2014, 8, 4, 18, 0)
 * )
 * //=> true
 */
function isSameDay (dirtyDateLeft, dirtyDateRight) {
  var dateLeftStartOfDay = startOfDay$5(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay$5(dirtyDateRight);

  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime()
}

var is_same_day = isSameDay;

var parse$v = parse_1;

/**
 * @category Hour Helpers
 * @summary Return the start of an hour for the given date.
 *
 * @description
 * Return the start of an hour for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of an hour
 *
 * @example
 * // The start of an hour for 2 September 2014 11:55:00:
 * var result = startOfHour(new Date(2014, 8, 2, 11, 55))
 * //=> Tue Sep 02 2014 11:00:00
 */
function startOfHour$1 (dirtyDate) {
  var date = parse$v(dirtyDate);
  date.setMinutes(0, 0, 0);
  return date
}

var start_of_hour = startOfHour$1;

var startOfHour = start_of_hour;

/**
 * @category Hour Helpers
 * @summary Are the given dates in the same hour?
 *
 * @description
 * Are the given dates in the same hour?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same hour
 *
 * @example
 * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?
 * var result = isSameHour(
 *   new Date(2014, 8, 4, 6, 0),
 *   new Date(2014, 8, 4, 6, 30)
 * )
 * //=> true
 */
function isSameHour$1 (dirtyDateLeft, dirtyDateRight) {
  var dateLeftStartOfHour = startOfHour(dirtyDateLeft);
  var dateRightStartOfHour = startOfHour(dirtyDateRight);

  return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime()
}

var is_same_hour = isSameHour$1;

var startOfWeek = start_of_week;

/**
 * @category Week Helpers
 * @summary Are the given dates in the same week?
 *
 * @description
 * Are the given dates in the same week?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Boolean} the dates are in the same week
 *
 * @example
 * // Are 31 August 2014 and 4 September 2014 in the same week?
 * var result = isSameWeek(
 *   new Date(2014, 7, 31),
 *   new Date(2014, 8, 4)
 * )
 * //=> true
 *
 * @example
 * // If week starts with Monday,
 * // are 31 August 2014 and 4 September 2014 in the same week?
 * var result = isSameWeek(
 *   new Date(2014, 7, 31),
 *   new Date(2014, 8, 4),
 *   {weekStartsOn: 1}
 * )
 * //=> false
 */
function isSameWeek$2 (dirtyDateLeft, dirtyDateRight, dirtyOptions) {
  var dateLeftStartOfWeek = startOfWeek(dirtyDateLeft, dirtyOptions);
  var dateRightStartOfWeek = startOfWeek(dirtyDateRight, dirtyOptions);

  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime()
}

var is_same_week = isSameWeek$2;

var isSameWeek$1 = is_same_week;

/**
 * @category ISO Week Helpers
 * @summary Are the given dates in the same ISO week?
 *
 * @description
 * Are the given dates in the same ISO week?
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same ISO week
 *
 * @example
 * // Are 1 September 2014 and 7 September 2014 in the same ISO week?
 * var result = isSameISOWeek(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 8, 7)
 * )
 * //=> true
 */
function isSameISOWeek$1 (dirtyDateLeft, dirtyDateRight) {
  return isSameWeek$1(dirtyDateLeft, dirtyDateRight, {weekStartsOn: 1})
}

var is_same_iso_week = isSameISOWeek$1;

var startOfISOYear = start_of_iso_year;

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Are the given dates in the same ISO week-numbering year?
 *
 * @description
 * Are the given dates in the same ISO week-numbering year?
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same ISO week-numbering year
 *
 * @example
 * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?
 * var result = isSameISOYear(
 *   new Date(2003, 11, 29),
 *   new Date(2005, 0, 2)
 * )
 * //=> true
 */
function isSameISOYear$1 (dirtyDateLeft, dirtyDateRight) {
  var dateLeftStartOfYear = startOfISOYear(dirtyDateLeft);
  var dateRightStartOfYear = startOfISOYear(dirtyDateRight);

  return dateLeftStartOfYear.getTime() === dateRightStartOfYear.getTime()
}

var is_same_iso_year = isSameISOYear$1;

var parse$u = parse_1;

/**
 * @category Minute Helpers
 * @summary Return the start of a minute for the given date.
 *
 * @description
 * Return the start of a minute for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of a minute
 *
 * @example
 * // The start of a minute for 1 December 2014 22:15:45.400:
 * var result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:00
 */
function startOfMinute$1 (dirtyDate) {
  var date = parse$u(dirtyDate);
  date.setSeconds(0, 0);
  return date
}

var start_of_minute = startOfMinute$1;

var startOfMinute = start_of_minute;

/**
 * @category Minute Helpers
 * @summary Are the given dates in the same minute?
 *
 * @description
 * Are the given dates in the same minute?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same minute
 *
 * @example
 * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15
 * // in the same minute?
 * var result = isSameMinute(
 *   new Date(2014, 8, 4, 6, 30),
 *   new Date(2014, 8, 4, 6, 30, 15)
 * )
 * //=> true
 */
function isSameMinute$1 (dirtyDateLeft, dirtyDateRight) {
  var dateLeftStartOfMinute = startOfMinute(dirtyDateLeft);
  var dateRightStartOfMinute = startOfMinute(dirtyDateRight);

  return dateLeftStartOfMinute.getTime() === dateRightStartOfMinute.getTime()
}

var is_same_minute = isSameMinute$1;

var parse$t = parse_1;

/**
 * @category Month Helpers
 * @summary Are the given dates in the same month?
 *
 * @description
 * Are the given dates in the same month?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same month
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same month?
 * var result = isSameMonth(
 *   new Date(2014, 8, 2),
 *   new Date(2014, 8, 25)
 * )
 * //=> true
 */
function isSameMonth$1 (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse$t(dirtyDateLeft);
  var dateRight = parse$t(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear() &&
    dateLeft.getMonth() === dateRight.getMonth()
}

var is_same_month = isSameMonth$1;

var parse$s = parse_1;

/**
 * @category Quarter Helpers
 * @summary Return the start of a year quarter for the given date.
 *
 * @description
 * Return the start of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of a quarter
 *
 * @example
 * // The start of a quarter for 2 September 2014 11:55:00:
 * var result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Jul 01 2014 00:00:00
 */
function startOfQuarter$1 (dirtyDate) {
  var date = parse$s(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3;
  date.setMonth(month, 1);
  date.setHours(0, 0, 0, 0);
  return date
}

var start_of_quarter = startOfQuarter$1;

var startOfQuarter = start_of_quarter;

/**
 * @category Quarter Helpers
 * @summary Are the given dates in the same year quarter?
 *
 * @description
 * Are the given dates in the same year quarter?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same quarter
 *
 * @example
 * // Are 1 January 2014 and 8 March 2014 in the same quarter?
 * var result = isSameQuarter(
 *   new Date(2014, 0, 1),
 *   new Date(2014, 2, 8)
 * )
 * //=> true
 */
function isSameQuarter$1 (dirtyDateLeft, dirtyDateRight) {
  var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft);
  var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight);

  return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime()
}

var is_same_quarter = isSameQuarter$1;

var parse$r = parse_1;

/**
 * @category Second Helpers
 * @summary Return the start of a second for the given date.
 *
 * @description
 * Return the start of a second for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of a second
 *
 * @example
 * // The start of a second for 1 December 2014 22:15:45.400:
 * var result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:45.000
 */
function startOfSecond$1 (dirtyDate) {
  var date = parse$r(dirtyDate);
  date.setMilliseconds(0);
  return date
}

var start_of_second = startOfSecond$1;

var startOfSecond = start_of_second;

/**
 * @category Second Helpers
 * @summary Are the given dates in the same second?
 *
 * @description
 * Are the given dates in the same second?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same second
 *
 * @example
 * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500
 * // in the same second?
 * var result = isSameSecond(
 *   new Date(2014, 8, 4, 6, 30, 15),
 *   new Date(2014, 8, 4, 6, 30, 15, 500)
 * )
 * //=> true
 */
function isSameSecond$1 (dirtyDateLeft, dirtyDateRight) {
  var dateLeftStartOfSecond = startOfSecond(dirtyDateLeft);
  var dateRightStartOfSecond = startOfSecond(dirtyDateRight);

  return dateLeftStartOfSecond.getTime() === dateRightStartOfSecond.getTime()
}

var is_same_second = isSameSecond$1;

var parse$q = parse_1;

/**
 * @category Year Helpers
 * @summary Are the given dates in the same year?
 *
 * @description
 * Are the given dates in the same year?
 *
 * @param {Date|String|Number} dateLeft - the first date to check
 * @param {Date|String|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same year
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same year?
 * var result = isSameYear(
 *   new Date(2014, 8, 2),
 *   new Date(2014, 8, 25)
 * )
 * //=> true
 */
function isSameYear$1 (dirtyDateLeft, dirtyDateRight) {
  var dateLeft = parse$q(dirtyDateLeft);
  var dateRight = parse$q(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear()
}

var is_same_year = isSameYear$1;

var parse$p = parse_1;

/**
 * @category Weekday Helpers
 * @summary Is the given date Saturday?
 *
 * @description
 * Is the given date Saturday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Saturday
 *
 * @example
 * // Is 27 September 2014 Saturday?
 * var result = isSaturday(new Date(2014, 8, 27))
 * //=> true
 */
function isSaturday (dirtyDate) {
  return parse$p(dirtyDate).getDay() === 6
}

var is_saturday = isSaturday;

var parse$o = parse_1;

/**
 * @category Weekday Helpers
 * @summary Is the given date Sunday?
 *
 * @description
 * Is the given date Sunday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Sunday
 *
 * @example
 * // Is 21 September 2014 Sunday?
 * var result = isSunday(new Date(2014, 8, 21))
 * //=> true
 */
function isSunday (dirtyDate) {
  return parse$o(dirtyDate).getDay() === 0
}

var is_sunday = isSunday;

var isSameHour = is_same_hour;

/**
 * @category Hour Helpers
 * @summary Is the given date in the same hour as the current date?
 *
 * @description
 * Is the given date in the same hour as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this hour
 *
 * @example
 * // If now is 25 September 2014 18:30:15.500,
 * // is 25 September 2014 18:00:00 in this hour?
 * var result = isThisHour(new Date(2014, 8, 25, 18))
 * //=> true
 */
function isThisHour (dirtyDate) {
  return isSameHour(new Date(), dirtyDate)
}

var is_this_hour = isThisHour;

var isSameISOWeek = is_same_iso_week;

/**
 * @category ISO Week Helpers
 * @summary Is the given date in the same ISO week as the current date?
 *
 * @description
 * Is the given date in the same ISO week as the current date?
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this ISO week
 *
 * @example
 * // If today is 25 September 2014, is 22 September 2014 in this ISO week?
 * var result = isThisISOWeek(new Date(2014, 8, 22))
 * //=> true
 */
function isThisISOWeek (dirtyDate) {
  return isSameISOWeek(new Date(), dirtyDate)
}

var is_this_iso_week = isThisISOWeek;

var isSameISOYear = is_same_iso_year;

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Is the given date in the same ISO week-numbering year as the current date?
 *
 * @description
 * Is the given date in the same ISO week-numbering year as the current date?
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this ISO week-numbering year
 *
 * @example
 * // If today is 25 September 2014,
 * // is 30 December 2013 in this ISO week-numbering year?
 * var result = isThisISOYear(new Date(2013, 11, 30))
 * //=> true
 */
function isThisISOYear (dirtyDate) {
  return isSameISOYear(new Date(), dirtyDate)
}

var is_this_iso_year = isThisISOYear;

var isSameMinute = is_same_minute;

/**
 * @category Minute Helpers
 * @summary Is the given date in the same minute as the current date?
 *
 * @description
 * Is the given date in the same minute as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this minute
 *
 * @example
 * // If now is 25 September 2014 18:30:15.500,
 * // is 25 September 2014 18:30:00 in this minute?
 * var result = isThisMinute(new Date(2014, 8, 25, 18, 30))
 * //=> true
 */
function isThisMinute (dirtyDate) {
  return isSameMinute(new Date(), dirtyDate)
}

var is_this_minute = isThisMinute;

var isSameMonth = is_same_month;

/**
 * @category Month Helpers
 * @summary Is the given date in the same month as the current date?
 *
 * @description
 * Is the given date in the same month as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this month
 *
 * @example
 * // If today is 25 September 2014, is 15 September 2014 in this month?
 * var result = isThisMonth(new Date(2014, 8, 15))
 * //=> true
 */
function isThisMonth (dirtyDate) {
  return isSameMonth(new Date(), dirtyDate)
}

var is_this_month = isThisMonth;

var isSameQuarter = is_same_quarter;

/**
 * @category Quarter Helpers
 * @summary Is the given date in the same quarter as the current date?
 *
 * @description
 * Is the given date in the same quarter as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this quarter
 *
 * @example
 * // If today is 25 September 2014, is 2 July 2014 in this quarter?
 * var result = isThisQuarter(new Date(2014, 6, 2))
 * //=> true
 */
function isThisQuarter (dirtyDate) {
  return isSameQuarter(new Date(), dirtyDate)
}

var is_this_quarter = isThisQuarter;

var isSameSecond = is_same_second;

/**
 * @category Second Helpers
 * @summary Is the given date in the same second as the current date?
 *
 * @description
 * Is the given date in the same second as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this second
 *
 * @example
 * // If now is 25 September 2014 18:30:15.500,
 * // is 25 September 2014 18:30:15.000 in this second?
 * var result = isThisSecond(new Date(2014, 8, 25, 18, 30, 15))
 * //=> true
 */
function isThisSecond (dirtyDate) {
  return isSameSecond(new Date(), dirtyDate)
}

var is_this_second = isThisSecond;

var isSameWeek = is_same_week;

/**
 * @category Week Helpers
 * @summary Is the given date in the same week as the current date?
 *
 * @description
 * Is the given date in the same week as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Boolean} the date is in this week
 *
 * @example
 * // If today is 25 September 2014, is 21 September 2014 in this week?
 * var result = isThisWeek(new Date(2014, 8, 21))
 * //=> true
 *
 * @example
 * // If today is 25 September 2014 and week starts with Monday
 * // is 21 September 2014 in this week?
 * var result = isThisWeek(new Date(2014, 8, 21), {weekStartsOn: 1})
 * //=> false
 */
function isThisWeek (dirtyDate, dirtyOptions) {
  return isSameWeek(new Date(), dirtyDate, dirtyOptions)
}

var is_this_week = isThisWeek;

var isSameYear = is_same_year;

/**
 * @category Year Helpers
 * @summary Is the given date in the same year as the current date?
 *
 * @description
 * Is the given date in the same year as the current date?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is in this year
 *
 * @example
 * // If today is 25 September 2014, is 2 July 2014 in this year?
 * var result = isThisYear(new Date(2014, 6, 2))
 * //=> true
 */
function isThisYear (dirtyDate) {
  return isSameYear(new Date(), dirtyDate)
}

var is_this_year = isThisYear;

var parse$n = parse_1;

/**
 * @category Weekday Helpers
 * @summary Is the given date Thursday?
 *
 * @description
 * Is the given date Thursday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Thursday
 *
 * @example
 * // Is 25 September 2014 Thursday?
 * var result = isThursday(new Date(2014, 8, 25))
 * //=> true
 */
function isThursday (dirtyDate) {
  return parse$n(dirtyDate).getDay() === 4
}

var is_thursday = isThursday;

var startOfDay$4 = start_of_day;

/**
 * @category Day Helpers
 * @summary Is the given date today?
 *
 * @description
 * Is the given date today?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is today
 *
 * @example
 * // If today is 6 October 2014, is 6 October 14:00:00 today?
 * var result = isToday(new Date(2014, 9, 6, 14, 0))
 * //=> true
 */
function isToday (dirtyDate) {
  return startOfDay$4(dirtyDate).getTime() === startOfDay$4(new Date()).getTime()
}

var is_today = isToday;

var startOfDay$3 = start_of_day;

/**
 * @category Day Helpers
 * @summary Is the given date tomorrow?
 *
 * @description
 * Is the given date tomorrow?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is tomorrow
 *
 * @example
 * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?
 * var result = isTomorrow(new Date(2014, 9, 7, 14, 0))
 * //=> true
 */
function isTomorrow (dirtyDate) {
  var tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  return startOfDay$3(dirtyDate).getTime() === startOfDay$3(tomorrow).getTime()
}

var is_tomorrow = isTomorrow;

var parse$m = parse_1;

/**
 * @category Weekday Helpers
 * @summary Is the given date Tuesday?
 *
 * @description
 * Is the given date Tuesday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Tuesday
 *
 * @example
 * // Is 23 September 2014 Tuesday?
 * var result = isTuesday(new Date(2014, 8, 23))
 * //=> true
 */
function isTuesday (dirtyDate) {
  return parse$m(dirtyDate).getDay() === 2
}

var is_tuesday = isTuesday;

var parse$l = parse_1;

/**
 * @category Weekday Helpers
 * @summary Is the given date Wednesday?
 *
 * @description
 * Is the given date Wednesday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is Wednesday
 *
 * @example
 * // Is 24 September 2014 Wednesday?
 * var result = isWednesday(new Date(2014, 8, 24))
 * //=> true
 */
function isWednesday (dirtyDate) {
  return parse$l(dirtyDate).getDay() === 3
}

var is_wednesday = isWednesday;

var parse$k = parse_1;

/**
 * @category Weekday Helpers
 * @summary Does the given date fall on a weekend?
 *
 * @description
 * Does the given date fall on a weekend?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date falls on a weekend
 *
 * @example
 * // Does 5 October 2014 fall on a weekend?
 * var result = isWeekend(new Date(2014, 9, 5))
 * //=> true
 */
function isWeekend (dirtyDate) {
  var date = parse$k(dirtyDate);
  var day = date.getDay();
  return day === 0 || day === 6
}

var is_weekend = isWeekend;

var parse$j = parse_1;

/**
 * @category Range Helpers
 * @summary Is the given date within the range?
 *
 * @description
 * Is the given date within the range?
 *
 * @param {Date|String|Number} date - the date to check
 * @param {Date|String|Number} startDate - the start of range
 * @param {Date|String|Number} endDate - the end of range
 * @returns {Boolean} the date is within the range
 * @throws {Error} startDate cannot be after endDate
 *
 * @example
 * // For the date within the range:
 * isWithinRange(
 *   new Date(2014, 0, 3), new Date(2014, 0, 1), new Date(2014, 0, 7)
 * )
 * //=> true
 *
 * @example
 * // For the date outside of the range:
 * isWithinRange(
 *   new Date(2014, 0, 10), new Date(2014, 0, 1), new Date(2014, 0, 7)
 * )
 * //=> false
 */
function isWithinRange (dirtyDate, dirtyStartDate, dirtyEndDate) {
  var time = parse$j(dirtyDate).getTime();
  var startTime = parse$j(dirtyStartDate).getTime();
  var endTime = parse$j(dirtyEndDate).getTime();

  if (startTime > endTime) {
    throw new Error('The start of the range cannot be after the end of the range')
  }

  return time >= startTime && time <= endTime
}

var is_within_range = isWithinRange;

var startOfDay$2 = start_of_day;

/**
 * @category Day Helpers
 * @summary Is the given date yesterday?
 *
 * @description
 * Is the given date yesterday?
 *
 * @param {Date|String|Number} date - the date to check
 * @returns {Boolean} the date is yesterday
 *
 * @example
 * // If today is 6 October 2014, is 5 October 14:00:00 yesterday?
 * var result = isYesterday(new Date(2014, 9, 5, 14, 0))
 * //=> true
 */
function isYesterday (dirtyDate) {
  var yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  return startOfDay$2(dirtyDate).getTime() === startOfDay$2(yesterday).getTime()
}

var is_yesterday = isYesterday;

var parse$i = parse_1;

/**
 * @category Week Helpers
 * @summary Return the last day of a week for the given date.
 *
 * @description
 * Return the last day of a week for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the last day of a week
 *
 * @example
 * // The last day of a week for 2 September 2014 11:55:00:
 * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:
 * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), {weekStartsOn: 1})
 * //=> Sun Sep 07 2014 00:00:00
 */
function lastDayOfWeek$1 (dirtyDate, dirtyOptions) {
  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0;

  var date = parse$i(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);

  date.setHours(0, 0, 0, 0);
  date.setDate(date.getDate() + diff);
  return date
}

var last_day_of_week = lastDayOfWeek$1;

var lastDayOfWeek = last_day_of_week;

/**
 * @category ISO Week Helpers
 * @summary Return the last day of an ISO week for the given date.
 *
 * @description
 * Return the last day of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the last day of an ISO week
 *
 * @example
 * // The last day of an ISO week for 2 September 2014 11:55:00:
 * var result = lastDayOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Sep 07 2014 00:00:00
 */
function lastDayOfISOWeek (dirtyDate) {
  return lastDayOfWeek(dirtyDate, {weekStartsOn: 1})
}

var last_day_of_iso_week = lastDayOfISOWeek;

var getISOYear = get_iso_year;
var startOfISOWeek = start_of_iso_week;

/**
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the last day of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the last day of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the end of an ISO week-numbering year
 *
 * @example
 * // The last day of an ISO week-numbering year for 2 July 2005:
 * var result = lastDayOfISOYear(new Date(2005, 6, 2))
 * //=> Sun Jan 01 2006 00:00:00
 */
function lastDayOfISOYear (dirtyDate) {
  var year = getISOYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setFullYear(year + 1, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  var date = startOfISOWeek(fourthOfJanuary);
  date.setDate(date.getDate() - 1);
  return date
}

var last_day_of_iso_year = lastDayOfISOYear;

var parse$h = parse_1;

/**
 * @category Month Helpers
 * @summary Return the last day of a month for the given date.
 *
 * @description
 * Return the last day of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the last day of a month
 *
 * @example
 * // The last day of a month for 2 September 2014 11:55:00:
 * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 00:00:00
 */
function lastDayOfMonth (dirtyDate) {
  var date = parse$h(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(0, 0, 0, 0);
  return date
}

var last_day_of_month = lastDayOfMonth;

var parse$g = parse_1;

/**
 * @category Quarter Helpers
 * @summary Return the last day of a year quarter for the given date.
 *
 * @description
 * Return the last day of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the last day of a quarter
 *
 * @example
 * // The last day of a quarter for 2 September 2014 11:55:00:
 * var result = lastDayOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 00:00:00
 */
function lastDayOfQuarter (dirtyDate) {
  var date = parse$g(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3 + 3;
  date.setMonth(month, 0);
  date.setHours(0, 0, 0, 0);
  return date
}

var last_day_of_quarter = lastDayOfQuarter;

var parse$f = parse_1;

/**
 * @category Year Helpers
 * @summary Return the last day of a year for the given date.
 *
 * @description
 * Return the last day of a year for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the last day of a year
 *
 * @example
 * // The last day of a year for 2 September 2014 11:55:00:
 * var result = lastDayOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Dec 31 2014 00:00:00
 */
function lastDayOfYear (dirtyDate) {
  var date = parse$f(dirtyDate);
  var year = date.getFullYear();
  date.setFullYear(year + 1, 0, 0);
  date.setHours(0, 0, 0, 0);
  return date
}

var last_day_of_year = lastDayOfYear;

var parse$e = parse_1;

/**
 * @category Common Helpers
 * @summary Return the latest of the given dates.
 *
 * @description
 * Return the latest of the given dates.
 *
 * @param {...(Date|String|Number)} dates - the dates to compare
 * @returns {Date} the latest of the dates
 *
 * @example
 * // Which of these dates is the latest?
 * var result = max(
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * )
 * //=> Sun Jul 02 1995 00:00:00
 */
function max () {
  var dirtyDates = Array.prototype.slice.call(arguments);
  var dates = dirtyDates.map(function (dirtyDate) {
    return parse$e(dirtyDate)
  });
  var latestTimestamp = Math.max.apply(null, dates);
  return new Date(latestTimestamp)
}

var max_1 = max;

var parse$d = parse_1;

/**
 * @category Common Helpers
 * @summary Return the earliest of the given dates.
 *
 * @description
 * Return the earliest of the given dates.
 *
 * @param {...(Date|String|Number)} dates - the dates to compare
 * @returns {Date} the earliest of the dates
 *
 * @example
 * // Which of these dates is the earliest?
 * var result = min(
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * )
 * //=> Wed Feb 11 1987 00:00:00
 */
function min () {
  var dirtyDates = Array.prototype.slice.call(arguments);
  var dates = dirtyDates.map(function (dirtyDate) {
    return parse$d(dirtyDate)
  });
  var earliestTimestamp = Math.min.apply(null, dates);
  return new Date(earliestTimestamp)
}

var min_1 = min;

var parse$c = parse_1;

/**
 * @category Day Helpers
 * @summary Set the day of the month to the given date.
 *
 * @description
 * Set the day of the month to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} dayOfMonth - the day of the month of the new date
 * @returns {Date} the new date with the day of the month setted
 *
 * @example
 * // Set the 30th day of the month to 1 September 2014:
 * var result = setDate(new Date(2014, 8, 1), 30)
 * //=> Tue Sep 30 2014 00:00:00
 */
function setDate (dirtyDate, dirtyDayOfMonth) {
  var date = parse$c(dirtyDate);
  var dayOfMonth = Number(dirtyDayOfMonth);
  date.setDate(dayOfMonth);
  return date
}

var set_date = setDate;

var parse$b = parse_1;
var addDays$2 = add_days;

/**
 * @category Weekday Helpers
 * @summary Set the day of the week to the given date.
 *
 * @description
 * Set the day of the week to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} day - the day of the week of the new date
 * @param {Object} [options] - the object with options
 * @param {Number} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the new date with the day of the week setted
 *
 * @example
 * // Set Sunday to 1 September 2014:
 * var result = setDay(new Date(2014, 8, 1), 0)
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If week starts with Monday, set Sunday to 1 September 2014:
 * var result = setDay(new Date(2014, 8, 1), 0, {weekStartsOn: 1})
 * //=> Sun Sep 07 2014 00:00:00
 */
function setDay (dirtyDate, dirtyDay, dirtyOptions) {
  var weekStartsOn = dirtyOptions ? (Number(dirtyOptions.weekStartsOn) || 0) : 0;
  var date = parse$b(dirtyDate);
  var day = Number(dirtyDay);
  var currentDay = date.getDay();

  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;

  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  return addDays$2(date, diff)
}

var set_day = setDay;

var parse$a = parse_1;

/**
 * @category Day Helpers
 * @summary Set the day of the year to the given date.
 *
 * @description
 * Set the day of the year to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} dayOfYear - the day of the year of the new date
 * @returns {Date} the new date with the day of the year setted
 *
 * @example
 * // Set the 2nd day of the year to 2 July 2014:
 * var result = setDayOfYear(new Date(2014, 6, 2), 2)
 * //=> Thu Jan 02 2014 00:00:00
 */
function setDayOfYear (dirtyDate, dirtyDayOfYear) {
  var date = parse$a(dirtyDate);
  var dayOfYear = Number(dirtyDayOfYear);
  date.setMonth(0);
  date.setDate(dayOfYear);
  return date
}

var set_day_of_year = setDayOfYear;

var parse$9 = parse_1;

/**
 * @category Hour Helpers
 * @summary Set the hours to the given date.
 *
 * @description
 * Set the hours to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} hours - the hours of the new date
 * @returns {Date} the new date with the hours setted
 *
 * @example
 * // Set 4 hours to 1 September 2014 11:30:00:
 * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)
 * //=> Mon Sep 01 2014 04:30:00
 */
function setHours (dirtyDate, dirtyHours) {
  var date = parse$9(dirtyDate);
  var hours = Number(dirtyHours);
  date.setHours(hours);
  return date
}

var set_hours = setHours;

var parse$8 = parse_1;
var addDays$1 = add_days;
var getISODay = get_iso_day;

/**
 * @category Weekday Helpers
 * @summary Set the day of the ISO week to the given date.
 *
 * @description
 * Set the day of the ISO week to the given date.
 * ISO week starts with Monday.
 * 7 is the index of Sunday, 1 is the index of Monday etc.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} day - the day of the ISO week of the new date
 * @returns {Date} the new date with the day of the ISO week setted
 *
 * @example
 * // Set Sunday to 1 September 2014:
 * var result = setISODay(new Date(2014, 8, 1), 7)
 * //=> Sun Sep 07 2014 00:00:00
 */
function setISODay (dirtyDate, dirtyDay) {
  var date = parse$8(dirtyDate);
  var day = Number(dirtyDay);
  var currentDay = getISODay(date);
  var diff = day - currentDay;
  return addDays$1(date, diff)
}

var set_iso_day = setISODay;

var parse$7 = parse_1;
var getISOWeek = get_iso_week;

/**
 * @category ISO Week Helpers
 * @summary Set the ISO week to the given date.
 *
 * @description
 * Set the ISO week to the given date, saving the weekday number.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} isoWeek - the ISO week of the new date
 * @returns {Date} the new date with the ISO week setted
 *
 * @example
 * // Set the 53rd ISO week to 7 August 2004:
 * var result = setISOWeek(new Date(2004, 7, 7), 53)
 * //=> Sat Jan 01 2005 00:00:00
 */
function setISOWeek (dirtyDate, dirtyISOWeek) {
  var date = parse$7(dirtyDate);
  var isoWeek = Number(dirtyISOWeek);
  var diff = getISOWeek(date) - isoWeek;
  date.setDate(date.getDate() - diff * 7);
  return date
}

var set_iso_week = setISOWeek;

var parse$6 = parse_1;

/**
 * @category Millisecond Helpers
 * @summary Set the milliseconds to the given date.
 *
 * @description
 * Set the milliseconds to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} milliseconds - the milliseconds of the new date
 * @returns {Date} the new date with the milliseconds setted
 *
 * @example
 * // Set 300 milliseconds to 1 September 2014 11:30:40.500:
 * var result = setMilliseconds(new Date(2014, 8, 1, 11, 30, 40, 500), 300)
 * //=> Mon Sep 01 2014 11:30:40.300
 */
function setMilliseconds (dirtyDate, dirtyMilliseconds) {
  var date = parse$6(dirtyDate);
  var milliseconds = Number(dirtyMilliseconds);
  date.setMilliseconds(milliseconds);
  return date
}

var set_milliseconds = setMilliseconds;

var parse$5 = parse_1;

/**
 * @category Minute Helpers
 * @summary Set the minutes to the given date.
 *
 * @description
 * Set the minutes to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} minutes - the minutes of the new date
 * @returns {Date} the new date with the minutes setted
 *
 * @example
 * // Set 45 minutes to 1 September 2014 11:30:40:
 * var result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)
 * //=> Mon Sep 01 2014 11:45:40
 */
function setMinutes (dirtyDate, dirtyMinutes) {
  var date = parse$5(dirtyDate);
  var minutes = Number(dirtyMinutes);
  date.setMinutes(minutes);
  return date
}

var set_minutes = setMinutes;

var parse$4 = parse_1;
var getDaysInMonth = get_days_in_month;

/**
 * @category Month Helpers
 * @summary Set the month to the given date.
 *
 * @description
 * Set the month to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} month - the month of the new date
 * @returns {Date} the new date with the month setted
 *
 * @example
 * // Set February to 1 September 2014:
 * var result = setMonth(new Date(2014, 8, 1), 1)
 * //=> Sat Feb 01 2014 00:00:00
 */
function setMonth$1 (dirtyDate, dirtyMonth) {
  var date = parse$4(dirtyDate);
  var month = Number(dirtyMonth);
  var year = date.getFullYear();
  var day = date.getDate();

  var dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth);
  // Set the last day of the new month
  // if the original date was the last day of the longer month
  date.setMonth(month, Math.min(day, daysInMonth));
  return date
}

var set_month = setMonth$1;

var parse$3 = parse_1;
var setMonth = set_month;

/**
 * @category Quarter Helpers
 * @summary Set the year quarter to the given date.
 *
 * @description
 * Set the year quarter to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} quarter - the quarter of the new date
 * @returns {Date} the new date with the quarter setted
 *
 * @example
 * // Set the 2nd quarter to 2 July 2014:
 * var result = setQuarter(new Date(2014, 6, 2), 2)
 * //=> Wed Apr 02 2014 00:00:00
 */
function setQuarter (dirtyDate, dirtyQuarter) {
  var date = parse$3(dirtyDate);
  var quarter = Number(dirtyQuarter);
  var oldQuarter = Math.floor(date.getMonth() / 3) + 1;
  var diff = quarter - oldQuarter;
  return setMonth(date, date.getMonth() + diff * 3)
}

var set_quarter = setQuarter;

var parse$2 = parse_1;

/**
 * @category Second Helpers
 * @summary Set the seconds to the given date.
 *
 * @description
 * Set the seconds to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} seconds - the seconds of the new date
 * @returns {Date} the new date with the seconds setted
 *
 * @example
 * // Set 45 seconds to 1 September 2014 11:30:40:
 * var result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)
 * //=> Mon Sep 01 2014 11:30:45
 */
function setSeconds (dirtyDate, dirtySeconds) {
  var date = parse$2(dirtyDate);
  var seconds = Number(dirtySeconds);
  date.setSeconds(seconds);
  return date
}

var set_seconds = setSeconds;

var parse$1 = parse_1;

/**
 * @category Year Helpers
 * @summary Set the year to the given date.
 *
 * @description
 * Set the year to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} year - the year of the new date
 * @returns {Date} the new date with the year setted
 *
 * @example
 * // Set year 2013 to 1 September 2014:
 * var result = setYear(new Date(2014, 8, 1), 2013)
 * //=> Sun Sep 01 2013 00:00:00
 */
function setYear (dirtyDate, dirtyYear) {
  var date = parse$1(dirtyDate);
  var year = Number(dirtyYear);
  date.setFullYear(year);
  return date
}

var set_year = setYear;

var parse = parse_1;

/**
 * @category Month Helpers
 * @summary Return the start of a month for the given date.
 *
 * @description
 * Return the start of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|String|Number} date - the original date
 * @returns {Date} the start of a month
 *
 * @example
 * // The start of a month for 2 September 2014 11:55:00:
 * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfMonth (dirtyDate) {
  var date = parse(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date
}

var start_of_month = startOfMonth;

var startOfDay$1 = start_of_day;

/**
 * @category Day Helpers
 * @summary Return the start of today.
 *
 * @description
 * Return the start of today.
 *
 * @returns {Date} the start of today
 *
 * @example
 * // If today is 6 October 2014:
 * var result = startOfToday()
 * //=> Mon Oct 6 2014 00:00:00
 */
function startOfToday () {
  return startOfDay$1(new Date())
}

var start_of_today = startOfToday;

/**
 * @category Day Helpers
 * @summary Return the start of tomorrow.
 *
 * @description
 * Return the start of tomorrow.
 *
 * @returns {Date} the start of tomorrow
 *
 * @example
 * // If today is 6 October 2014:
 * var result = startOfTomorrow()
 * //=> Tue Oct 7 2014 00:00:00
 */

function startOfTomorrow () {
  var now = new Date();
  var year = now.getFullYear();
  var month = now.getMonth();
  var day = now.getDate();

  var date = new Date(0);
  date.setFullYear(year, month, day + 1);
  date.setHours(0, 0, 0, 0);
  return date
}

var start_of_tomorrow = startOfTomorrow;

/**
 * @category Day Helpers
 * @summary Return the start of yesterday.
 *
 * @description
 * Return the start of yesterday.
 *
 * @returns {Date} the start of yesterday
 *
 * @example
 * // If today is 6 October 2014:
 * var result = startOfYesterday()
 * //=> Sun Oct 5 2014 00:00:00
 */

function startOfYesterday () {
  var now = new Date();
  var year = now.getFullYear();
  var month = now.getMonth();
  var day = now.getDate();

  var date = new Date(0);
  date.setFullYear(year, month, day - 1);
  date.setHours(0, 0, 0, 0);
  return date
}

var start_of_yesterday = startOfYesterday;

var addDays = add_days;

/**
 * @category Day Helpers
 * @summary Subtract the specified number of days from the given date.
 *
 * @description
 * Subtract the specified number of days from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be subtracted
 * @returns {Date} the new date with the days subtracted
 *
 * @example
 * // Subtract 10 days from 1 September 2014:
 * var result = subDays(new Date(2014, 8, 1), 10)
 * //=> Fri Aug 22 2014 00:00:00
 */
function subDays (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addDays(dirtyDate, -amount)
}

var sub_days = subDays;

var addHours = add_hours;

/**
 * @category Hour Helpers
 * @summary Subtract the specified number of hours from the given date.
 *
 * @description
 * Subtract the specified number of hours from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of hours to be subtracted
 * @returns {Date} the new date with the hours subtracted
 *
 * @example
 * // Subtract 2 hours from 11 July 2014 01:00:00:
 * var result = subHours(new Date(2014, 6, 11, 1, 0), 2)
 * //=> Thu Jul 10 2014 23:00:00
 */
function subHours (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addHours(dirtyDate, -amount)
}

var sub_hours = subHours;

var addMilliseconds = add_milliseconds;

/**
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted
 * @returns {Date} the new date with the milliseconds subtracted
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */
function subMilliseconds (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount)
}

var sub_milliseconds = subMilliseconds;

var addMinutes = add_minutes;

/**
 * @category Minute Helpers
 * @summary Subtract the specified number of minutes from the given date.
 *
 * @description
 * Subtract the specified number of minutes from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of minutes to be subtracted
 * @returns {Date} the new date with the mintues subtracted
 *
 * @example
 * // Subtract 30 minutes from 10 July 2014 12:00:00:
 * var result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)
 * //=> Thu Jul 10 2014 11:30:00
 */
function subMinutes (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addMinutes(dirtyDate, -amount)
}

var sub_minutes = subMinutes;

var addMonths = add_months;

/**
 * @category Month Helpers
 * @summary Subtract the specified number of months from the given date.
 *
 * @description
 * Subtract the specified number of months from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be subtracted
 * @returns {Date} the new date with the months subtracted
 *
 * @example
 * // Subtract 5 months from 1 February 2015:
 * var result = subMonths(new Date(2015, 1, 1), 5)
 * //=> Mon Sep 01 2014 00:00:00
 */
function subMonths (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addMonths(dirtyDate, -amount)
}

var sub_months = subMonths;

var addQuarters = add_quarters;

/**
 * @category Quarter Helpers
 * @summary Subtract the specified number of year quarters from the given date.
 *
 * @description
 * Subtract the specified number of year quarters from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of quarters to be subtracted
 * @returns {Date} the new date with the quarters subtracted
 *
 * @example
 * // Subtract 3 quarters from 1 September 2014:
 * var result = subQuarters(new Date(2014, 8, 1), 3)
 * //=> Sun Dec 01 2013 00:00:00
 */
function subQuarters (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addQuarters(dirtyDate, -amount)
}

var sub_quarters = subQuarters;

var addSeconds = add_seconds;

/**
 * @category Second Helpers
 * @summary Subtract the specified number of seconds from the given date.
 *
 * @description
 * Subtract the specified number of seconds from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of seconds to be subtracted
 * @returns {Date} the new date with the seconds subtracted
 *
 * @example
 * // Subtract 30 seconds from 10 July 2014 12:45:00:
 * var result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:44:30
 */
function subSeconds (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addSeconds(dirtyDate, -amount)
}

var sub_seconds = subSeconds;

var addWeeks = add_weeks;

/**
 * @category Week Helpers
 * @summary Subtract the specified number of weeks from the given date.
 *
 * @description
 * Subtract the specified number of weeks from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of weeks to be subtracted
 * @returns {Date} the new date with the weeks subtracted
 *
 * @example
 * // Subtract 4 weeks from 1 September 2014:
 * var result = subWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Aug 04 2014 00:00:00
 */
function subWeeks (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addWeeks(dirtyDate, -amount)
}

var sub_weeks = subWeeks;

var addYears = add_years;

/**
 * @category Year Helpers
 * @summary Subtract the specified number of years from the given date.
 *
 * @description
 * Subtract the specified number of years from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be subtracted
 * @returns {Date} the new date with the years subtracted
 *
 * @example
 * // Subtract 5 years from 1 September 2014:
 * var result = subYears(new Date(2014, 8, 1), 5)
 * //=> Tue Sep 01 2009 00:00:00
 */
function subYears (dirtyDate, dirtyAmount) {
  var amount = Number(dirtyAmount);
  return addYears(dirtyDate, -amount)
}

var sub_years = subYears;

var dateFns = {
  addDays: add_days,
  addHours: add_hours,
  addISOYears: add_iso_years,
  addMilliseconds: add_milliseconds,
  addMinutes: add_minutes,
  addMonths: add_months,
  addQuarters: add_quarters,
  addSeconds: add_seconds,
  addWeeks: add_weeks,
  addYears: add_years,
  areRangesOverlapping: are_ranges_overlapping,
  closestIndexTo: closest_index_to,
  closestTo: closest_to,
  compareAsc: compare_asc,
  compareDesc: compare_desc,
  differenceInCalendarDays: difference_in_calendar_days,
  differenceInCalendarISOWeeks: difference_in_calendar_iso_weeks,
  differenceInCalendarISOYears: difference_in_calendar_iso_years,
  differenceInCalendarMonths: difference_in_calendar_months,
  differenceInCalendarQuarters: difference_in_calendar_quarters,
  differenceInCalendarWeeks: difference_in_calendar_weeks,
  differenceInCalendarYears: difference_in_calendar_years,
  differenceInDays: difference_in_days,
  differenceInHours: difference_in_hours,
  differenceInISOYears: difference_in_iso_years,
  differenceInMilliseconds: difference_in_milliseconds,
  differenceInMinutes: difference_in_minutes,
  differenceInMonths: difference_in_months,
  differenceInQuarters: difference_in_quarters,
  differenceInSeconds: difference_in_seconds,
  differenceInWeeks: difference_in_weeks,
  differenceInYears: difference_in_years,
  distanceInWords: distance_in_words,
  distanceInWordsStrict: distance_in_words_strict,
  distanceInWordsToNow: distance_in_words_to_now,
  eachDay: each_day,
  endOfDay: end_of_day,
  endOfHour: end_of_hour,
  endOfISOWeek: end_of_iso_week,
  endOfISOYear: end_of_iso_year,
  endOfMinute: end_of_minute,
  endOfMonth: end_of_month,
  endOfQuarter: end_of_quarter,
  endOfSecond: end_of_second,
  endOfToday: end_of_today,
  endOfTomorrow: end_of_tomorrow,
  endOfWeek: end_of_week,
  endOfYear: end_of_year,
  endOfYesterday: end_of_yesterday,
  format: format_1$1,
  getDate: get_date,
  getDay: get_day,
  getDayOfYear: get_day_of_year,
  getDaysInMonth: get_days_in_month,
  getDaysInYear: get_days_in_year,
  getHours: get_hours,
  getISODay: get_iso_day,
  getISOWeek: get_iso_week,
  getISOWeeksInYear: get_iso_weeks_in_year,
  getISOYear: get_iso_year,
  getMilliseconds: get_milliseconds,
  getMinutes: get_minutes,
  getMonth: get_month,
  getOverlappingDaysInRanges: get_overlapping_days_in_ranges,
  getQuarter: get_quarter,
  getSeconds: get_seconds,
  getTime: get_time,
  getYear: get_year,
  isAfter: is_after,
  isBefore: is_before,
  isDate: is_date,
  isEqual: is_equal,
  isFirstDayOfMonth: is_first_day_of_month,
  isFriday: is_friday,
  isFuture: is_future,
  isLastDayOfMonth: is_last_day_of_month,
  isLeapYear: is_leap_year,
  isMonday: is_monday,
  isPast: is_past,
  isSameDay: is_same_day,
  isSameHour: is_same_hour,
  isSameISOWeek: is_same_iso_week,
  isSameISOYear: is_same_iso_year,
  isSameMinute: is_same_minute,
  isSameMonth: is_same_month,
  isSameQuarter: is_same_quarter,
  isSameSecond: is_same_second,
  isSameWeek: is_same_week,
  isSameYear: is_same_year,
  isSaturday: is_saturday,
  isSunday: is_sunday,
  isThisHour: is_this_hour,
  isThisISOWeek: is_this_iso_week,
  isThisISOYear: is_this_iso_year,
  isThisMinute: is_this_minute,
  isThisMonth: is_this_month,
  isThisQuarter: is_this_quarter,
  isThisSecond: is_this_second,
  isThisWeek: is_this_week,
  isThisYear: is_this_year,
  isThursday: is_thursday,
  isToday: is_today,
  isTomorrow: is_tomorrow,
  isTuesday: is_tuesday,
  isValid: is_valid,
  isWednesday: is_wednesday,
  isWeekend: is_weekend,
  isWithinRange: is_within_range,
  isYesterday: is_yesterday,
  lastDayOfISOWeek: last_day_of_iso_week,
  lastDayOfISOYear: last_day_of_iso_year,
  lastDayOfMonth: last_day_of_month,
  lastDayOfQuarter: last_day_of_quarter,
  lastDayOfWeek: last_day_of_week,
  lastDayOfYear: last_day_of_year,
  max: max_1,
  min: min_1,
  parse: parse_1,
  setDate: set_date,
  setDay: set_day,
  setDayOfYear: set_day_of_year,
  setHours: set_hours,
  setISODay: set_iso_day,
  setISOWeek: set_iso_week,
  setISOYear: set_iso_year,
  setMilliseconds: set_milliseconds,
  setMinutes: set_minutes,
  setMonth: set_month,
  setQuarter: set_quarter,
  setSeconds: set_seconds,
  setYear: set_year,
  startOfDay: start_of_day,
  startOfHour: start_of_hour,
  startOfISOWeek: start_of_iso_week,
  startOfISOYear: start_of_iso_year,
  startOfMinute: start_of_minute,
  startOfMonth: start_of_month,
  startOfQuarter: start_of_quarter,
  startOfSecond: start_of_second,
  startOfToday: start_of_today,
  startOfTomorrow: start_of_tomorrow,
  startOfWeek: start_of_week,
  startOfYear: start_of_year,
  startOfYesterday: start_of_yesterday,
  subDays: sub_days,
  subHours: sub_hours,
  subISOYears: sub_iso_years,
  subMilliseconds: sub_milliseconds,
  subMinutes: sub_minutes,
  subMonths: sub_months,
  subQuarters: sub_quarters,
  subSeconds: sub_seconds,
  subWeeks: sub_weeks,
  subYears: sub_years
};

var Field$1 = /*#__PURE__*/function (_Component) {
  _inherits$4(Field, _Component);

  var _super = _createSuper$4(Field);

  function Field(props) {
    var _this;

    _classCallCheck$4(this, Field);

    _this = _super.call(this, props);
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized$4(_this));
    _this.handleCheckboxChange = _this.handleCheckboxChange.bind(_assertThisInitialized$4(_this));
    _this.handlePropertyChange = _this.handlePropertyChange.bind(_assertThisInitialized$4(_this));
    _this.handleDateChange = _this.handleDateChange.bind(_assertThisInitialized$4(_this));
    return _this;
  }

  _createClass$7(Field, [{
    key: "handleChange",
    value: function handleChange(event) {
      this.props.onFilterChange(this.props.field.id, event.target.value);
    }
  }, {
    key: "handleCheckboxChange",
    value: function handleCheckboxChange(event) {
      this.props.onFilterChange(this.props.field.id, event);
    }
  }, {
    key: "createNumberArray",
    value: function createNumberArray(max_number) {
      return Array.apply(null, {
        length: max_number + 1
      }).map(Number.call, Number);
    }
  }, {
    key: "createPriceArray",
    value: function createPriceArray(max_price) {
      var rounded = Math.ceil(max_price / 100);
      return Array.from({
        length: rounded
      }, function (v, k) {
        return k * 100;
      });
    }
  }, {
    key: "handleDateChange",
    value: function handleDateChange(date) {
      if (date) {
        this.props.onFilterChange(this.props.field.id, dateFns.format(date, 'YYYY-MM-DD'));
      } else {
        this.props.onFilterChange(this.props.field.id, '');
      }
    }
  }, {
    key: "handlePropertyChange",
    value: function handlePropertyChange(event) {
      var value = Number(event.target.value);
      var properties = this.props.filters.properties || [];

      if (arrayIncludes(properties, value)) {
        var index = properties.indexOf(value);
        properties.splice(index, 1);
      } else {
        properties.push(value);
      }

      this.props.onFilterChange('properties', properties);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var field = this.props.field;
      var PortalSite = this.props.PortalSite;
      var options = [];

      if (arrayIncludes(['countries', 'cities', 'regions'], field.id)) {
        options = PortalSite[field.id];
      } else if (field.id === 'persons_min' || field.id === 'persons_max') {
        options = this.createNumberArray(PortalSite.max_persons);
      } else if (field.id === 'bedrooms_min') {
        options = this.createNumberArray(PortalSite.max_bedrooms);
      } else if (field.id === 'bathrooms_min') {
        options = this.createNumberArray(PortalSite.max_bathrooms);
      } else if (field.id === 'weekprice_max') {
        options = this.createPriceArray(PortalSite.max_weekprice);
      } else {
        options = this.createNumberArray(PortalSite[field.id]);
      }

      var input;
      var value = this.props.value;
      var countries = this.props.filters.countries;
      var regions = this.props.filters.regions;
      var properties = this.props.filters.properties || [];

      if (field.id === 'properties') {
        var requiredCategories = PortalSite.options.filtersForm.categories;
        input = [];
        PortalSite.categories.map(function (category) {
          if (arrayIncludes(requiredCategories, category.id)) {
            input.push( /*#__PURE__*/React__default['default'].createElement("div", {
              className: "bu-properties",
              key: category.id
            }, /*#__PURE__*/React__default['default'].createElement("strong", null, category.name), /*#__PURE__*/React__default['default'].createElement("ul", null, category.properties.map(function (property) {
              return /*#__PURE__*/React__default['default'].createElement("li", {
                key: property.id
              }, /*#__PURE__*/React__default['default'].createElement("label", {
                htmlFor: property.id
              }, /*#__PURE__*/React__default['default'].createElement("input", {
                type: "checkbox",
                id: property.id,
                value: property.id,
                checked: arrayIncludes(properties, property.id),
                onChange: _this2.handlePropertyChange
              }), property.name));
            }))));
          }
        });
      } else if (field.type === 'select') {
        if (options && arrayIncludes(['countries', 'cities', 'regions'], field.id)) {
          input = /*#__PURE__*/React__default['default'].createElement("select", {
            name: field.id,
            onBlur: this.handleChange,
            onChange: this.handleChange,
            value: value
          }, /*#__PURE__*/React__default['default'].createElement("option", {
            value: ""
          }), options.map(function (opt) {
            var hidden = false;

            if (arrayIncludes(['cities', 'regions'], field.id)) {
              if (countries && !arrayIncludes(countries, opt.country_id)) {
                hidden = true;
              }

              if (field.id === 'cities') {
                if (regions && !arrayIncludes(regions, opt.region)) {
                  hidden = true;
                }
              }
            }

            return /*#__PURE__*/React__default['default'].createElement("option", {
              key: opt.id,
              value: opt.id,
              id: opt.region,
              disabled: hidden,
              hidden: hidden
            }, opt.name);
          }));
        } else {
          input = /*#__PURE__*/React__default['default'].createElement("select", {
            name: field.id,
            onBlur: this.handleChange,
            onChange: this.handleChange,
            value: value
          }, /*#__PURE__*/React__default['default'].createElement("option", {
            value: ""
          }), options.map(function (opt) {
            var hidden = false;
            return /*#__PURE__*/React__default['default'].createElement("option", {
              key: opt,
              value: opt,
              disabled: hidden,
              hidden: hidden
            }, opt);
          }));
        }
      } else if (field.type === 'list') {
        input = /*#__PURE__*/React__default['default'].createElement(List, {
          countries: countries,
          field: field,
          options: options,
          handleCheckboxChange: this.handleCheckboxChange,
          value: value
        });
      } else if (field.type === 'radio') {
        input = /*#__PURE__*/React__default['default'].createElement("ul", {
          className: "radioList"
        }, options.map(function (opt) {
          return /*#__PURE__*/React__default['default'].createElement("li", {
            key: opt.id || opt,
            className: "bu-list-item ".concat(countries && !arrayIncludes(countries, opt.country_id) ? 'bu-disabled' : '')
          }, /*#__PURE__*/React__default['default'].createElement("input", {
            name: field.id,
            type: "radio",
            id: opt.id || opt,
            value: opt.id || opt,
            disabled: countries ? !arrayIncludes(countries, opt.country_id) : false // checked={value === opt.id || opt}
            ,
            onBlur: _this2.handleChange,
            onChange: _this2.handleChange
          }), /*#__PURE__*/React__default['default'].createElement("label", {
            htmlFor: opt.id || opt
          }, opt.name || opt));
        }));
      } else if (field.type === 'number') {
        input = /*#__PURE__*/React__default['default'].createElement("input", {
          value: value,
          type: "number",
          min: "0",
          max: field.id === 'persons_min' ? PortalSite.max_persons : PortalSite[field.id],
          onBlur: this.handleChange
        });
      } else if (field.type === 'date') {
        var tempval;

        if (value === '' || !value) {
          tempval = null;
        } else {
          tempval = new Date(value);
        }

        input = /*#__PURE__*/React__default['default'].createElement(DatePicker, {
          id: field.id,
          onChange: this.handleDateChange,
          value: tempval,
          format: "dd-MM-y"
        });
      } else {
        input = /*#__PURE__*/React__default['default'].createElement("input", {
          value: value,
          onBlur: this.handleChange
        });
      }

      return input;
    }
  }]);

  return Field;
}(React.Component);

Field$1.propTypes = {
  field: PropTypes.object.isRequired,
  PortalSite: PropTypes.object.isRequired,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),
  filters: PropTypes.object.isRequired,
  onFilterChange: PropTypes.func.isRequired
};

var Reload = function Reload() {
  return /*#__PURE__*/React__default['default'].createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    version: "1.1",
    x: "0px",
    y: "0px",
    viewBox: "0 0 100 100",
    enableBackground: "new 0 0 100 100",
    xmlSpace: "preserve",
    height: "16px"
  }, /*#__PURE__*/React__default['default'].createElement("path", {
    fill: "#000000",
    stroke: "2",
    d: "M77,53.752c0,0.012,0,0.022,0,0.034c0,14.92-12.019,27.058-26.938,27.058  c-14.92,0-26.948-12.138-26.948-27.058C23.114,38.961,35,26.889,50,26.738v4.942c0,2.84,2.54,2.913,3.947,1.647l10.354-7.714  c0,0,1.128-0.942,1.128-1.979c0-1.089-1.147-1.979-1.147-1.979L53.95,13.941C52.543,12.675,50,12.749,50,15.588v5.149  c-18,0.151-32.826,14.915-32.826,33.048c0,18.229,14.686,33.058,32.914,33.058C68.314,86.844,83,72.015,83,53.786  c0-0.012,0-0.022,0-0.034c0,0,0-3.375-3.037-3.375C77.109,50.376,77,53.752,77,53.752z"
  }));
};

var localeData = {exports: {}};

(function (module, exports) {
!function(e,t){module.exports=t();}(commonjsGlobal,function(){return [{locale:"af",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"jaar",relative:{0:"hierdie jaar",1:"volgende jaar","-1":"verlede jaar"},relativeTime:{future:{one:"oor {0} jaar",other:"oor {0} jaar"},past:{one:"{0} jaar gelede",other:"{0} jaar gelede"}}},"year-short":{displayName:"j.",relative:{0:"hierdie jaar",1:"volgende jaar","-1":"verlede jaar"},relativeTime:{future:{one:"oor {0} j.",other:"oor {0} j."},past:{one:"{0} j. gelede",other:"{0} j. gelede"}}},month:{displayName:"maand",relative:{0:"vandeesmaand",1:"volgende maand","-1":"verlede maand"},relativeTime:{future:{one:"oor {0} maand",other:"oor {0} maande"},past:{one:"{0} maand gelede",other:"{0} maande gelede"}}},"month-short":{displayName:"md.",relative:{0:"vandeesmaand",1:"volgende maand","-1":"verlede maand"},relativeTime:{future:{one:"oor {0} md.",other:"oor {0} md."},past:{one:"{0} md. gelede",other:"{0} md. gelede"}}},day:{displayName:"dag",relative:{0:"vandag",1:"môre",2:"oormôre","-2":"eergister","-1":"gister"},relativeTime:{future:{one:"oor {0} dag",other:"oor {0} dae"},past:{one:"{0} dag gelede",other:"{0} dae gelede"}}},"day-short":{displayName:"d.",relative:{0:"vandag",1:"môre",2:"oormôre","-2":"eergister","-1":"gister"},relativeTime:{future:{one:"oor {0} dag",other:"oor {0} dae"},past:{one:"{0} dag gelede",other:"{0} dae gelede"}}},hour:{displayName:"uur",relative:{0:"hierdie uur"},relativeTime:{future:{one:"oor {0} uur",other:"oor {0} uur"},past:{one:"{0} uur gelede",other:"{0} uur gelede"}}},"hour-short":{displayName:"u.",relative:{0:"hierdie uur"},relativeTime:{future:{one:"oor {0} u.",other:"oor {0} u."},past:{one:"{0} u. gelede",other:"{0} u. gelede"}}},minute:{displayName:"minuut",relative:{0:"hierdie minuut"},relativeTime:{future:{one:"oor {0} minuut",other:"oor {0} minute"},past:{one:"{0} minuut gelede",other:"{0} minute gelede"}}},"minute-short":{displayName:"min.",relative:{0:"hierdie minuut"},relativeTime:{future:{one:"oor {0} min.",other:"oor {0} min."},past:{one:"{0} min. gelede",other:"{0} min. gelede"}}},second:{displayName:"sekonde",relative:{0:"nou"},relativeTime:{future:{one:"oor {0} sekonde",other:"oor {0} sekondes"},past:{one:"{0} sekonde gelede",other:"{0} sekondes gelede"}}},"second-short":{displayName:"s.",relative:{0:"nou"},relativeTime:{future:{one:"oor {0} s.",other:"oor {0} s."},past:{one:"{0} s. gelede",other:"{0} s. gelede"}}}}},{locale:"af-NA",parentLocale:"af"},{locale:"agq",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"kɨnûm",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"kɨnûm",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"ndzɔŋ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"ndzɔŋ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"utsuʔ",relative:{0:"nɛ",1:"tsʉtsʉ","-1":"ā zūɛɛ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"utsuʔ",relative:{0:"nɛ",1:"tsʉtsʉ","-1":"ā zūɛɛ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"tàm",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"tàm",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"menè",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"menè",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"sɛkɔ̀n",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"sɛkɔ̀n",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ak",pluralRuleFunction:function(e,t){return t?"other":0==e||1==e?"one":"other"},fields:{year:{displayName:"Afe",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Afe",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Bosome",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Bosome",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Da",relative:{0:"Ndɛ",1:"Ɔkyena","-1":"Ndeda"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Da",relative:{0:"Ndɛ",1:"Ɔkyena","-1":"Ndeda"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Dɔnhwer",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Dɔnhwer",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Sema",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Sema",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sɛkɛnd",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sɛkɛnd",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"am",pluralRuleFunction:function(e,t){return t?"other":e>=0&&e<=1?"one":"other"},fields:{year:{displayName:"ዓመት",relative:{0:"በዚህ ዓመት",1:"የሚቀጥለው ዓመት","-1":"ያለፈው ዓመት"},relativeTime:{future:{one:"በ{0} ዓመታት ውስጥ",other:"በ{0} ዓመታት ውስጥ"},past:{one:"ከ{0} ዓመት በፊት",other:"ከ{0} ዓመታት በፊት"}}},"year-short":{displayName:"ዓመት",relative:{0:"በዚህ ዓመት",1:"የሚቀጥለው ዓመት","-1":"ያለፈው ዓመት"},relativeTime:{future:{one:"በ{0} ዓመታት ውስጥ",other:"በ{0} ዓመታት ውስጥ"},past:{one:"ከ{0} ዓመታት በፊት",other:"ከ{0} ዓመታት በፊት"}}},month:{displayName:"ወር",relative:{0:"በዚህ ወር",1:"የሚቀጥለው ወር","-1":"ያለፈው ወር"},relativeTime:{future:{one:"በ{0} ወር ውስጥ",other:"በ{0} ወራት ውስጥ"},past:{one:"ከ{0} ወር በፊት",other:"ከ{0} ወራት በፊት"}}},"month-short":{displayName:"ወር",relative:{0:"በዚህ ወር",1:"የሚቀጥለው ወር","-1":"ያለፈው ወር"},relativeTime:{future:{one:"በ{0} ወራት ውስጥ",other:"በ{0} ወራት ውስጥ"},past:{one:"ከ{0} ወራት በፊት",other:"ከ{0} ወራት በፊት"}}},day:{displayName:"ቀን",relative:{0:"ዛሬ",1:"ነገ",2:"ከነገ ወዲያ","-2":"ከትናንት ወዲያ","-1":"ትናንት"},relativeTime:{future:{one:"በ{0} ቀን ውስጥ",other:"በ{0} ቀናት ውስጥ"},past:{one:"ከ{0} ቀን በፊት",other:"ከ{0} ቀናት በፊት"}}},"day-short":{displayName:"ቀን",relative:{0:"ዛሬ",1:"ነገ",2:"ከነገ ወዲያ","-2":"ከትናንት ወዲያ","-1":"ትላንትና"},relativeTime:{future:{one:"በ{0} ቀን ውስጥ",other:"በ{0} ቀኖች ውስጥ"},past:{one:"ከ {0} ቀን በፊት",other:"ከ{0} ቀኖች በፊት"}}},hour:{displayName:"ሰዓት",relative:{0:"ይህ ሰዓት"},relativeTime:{future:{one:"በ{0} ሰዓት ውስጥ",other:"በ{0} ሰዓቶች ውስጥ"},past:{one:"ከ{0} ሰዓት በፊት",other:"ከ{0} ሰዓቶች በፊት"}}},"hour-short":{displayName:"ሰዓት",relative:{0:"ይህ ሰዓት"},relativeTime:{future:{one:"በ{0} ሰዓት ውስጥ",other:"በ{0} ሰዓቶች ውስጥ"},past:{one:"ከ{0} ሰዓት በፊት",other:"ከ{0} ሰዓቶች በፊት"}}},minute:{displayName:"ደቂቃ",relative:{0:"ይህ ደቂቃ"},relativeTime:{future:{one:"በ{0} ደቂቃ ውስጥ",other:"በ{0} ደቂቃዎች ውስጥ"},past:{one:"ከ{0} ደቂቃ በፊት",other:"ከ{0} ደቂቃዎች በፊት"}}},"minute-short":{displayName:"ደቂቃ",relative:{0:"ይህ ደቂቃ"},relativeTime:{future:{one:"በ{0} ደቂቃ ውስጥ",other:"በ{0} ደቂቃዎች ውስጥ"},past:{one:"ከ{0} ደቂቃ በፊት",other:"ከ{0} ደቂቃዎች በፊት"}}},second:{displayName:"ሰከንድ",relative:{0:"አሁን"},relativeTime:{future:{one:"በ{0} ሰከንድ ውስጥ",other:"በ{0} ሰከንዶች ውስጥ"},past:{one:"ከ{0} ሰከንድ በፊት",other:"ከ{0} ሰከንዶች በፊት"}}},"second-short":{displayName:"ሰከንድ",relative:{0:"አሁን"},relativeTime:{future:{one:"በ{0} ሰከንድ ውስጥ",other:"በ{0} ሰከንዶች ውስጥ"},past:{one:"ከ{0} ሰከንድ በፊት",other:"ከ{0} ሰከንዶች በፊት"}}}}},{locale:"ar",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e&&a[0].slice(-2);return t?"other":0==e?"zero":1==e?"one":2==e?"two":r>=3&&r<=10?"few":r>=11&&r<=99?"many":"other"},fields:{year:{displayName:"السنة",relative:{0:"السنة الحالية",1:"السنة القادمة","-1":"السنة الماضية"},relativeTime:{future:{zero:"خلال {0} سنة",one:"خلال سنة واحدة",two:"خلال سنتين",few:"خلال {0} سنوات",many:"خلال {0} سنة",other:"خلال {0} سنة"},past:{zero:"قبل {0} سنة",one:"قبل سنة واحدة",two:"قبل سنتين",few:"قبل {0} سنوات",many:"قبل {0} سنة",other:"قبل {0} سنة"}}},"year-short":{displayName:"السنة",relative:{0:"السنة الحالية",1:"السنة القادمة","-1":"السنة الماضية"},relativeTime:{future:{zero:"خلال {0} سنة",one:"خلال سنة واحدة",two:"خلال سنتين",few:"خلال {0} سنوات",many:"خلال {0} سنة",other:"خلال {0} سنة"},past:{zero:"قبل {0} سنة",one:"قبل سنة واحدة",two:"قبل سنتين",few:"قبل {0} سنوات",many:"قبل {0} سنة",other:"قبل {0} سنة"}}},month:{displayName:"الشهر",relative:{0:"هذا الشهر",1:"الشهر القادم","-1":"الشهر الماضي"},relativeTime:{future:{zero:"خلال {0} شهر",one:"خلال شهر واحد",two:"خلال شهرين",few:"خلال {0} أشهر",many:"خلال {0} شهرًا",other:"خلال {0} شهر"},past:{zero:"قبل {0} شهر",one:"قبل شهر واحد",two:"قبل شهرين",few:"قبل {0} أشهر",many:"قبل {0} شهرًا",other:"قبل {0} شهر"}}},"month-short":{displayName:"الشهر",relative:{0:"هذا الشهر",1:"الشهر القادم","-1":"الشهر الماضي"},relativeTime:{future:{zero:"خلال {0} شهر",one:"خلال شهر واحد",two:"خلال شهرين",few:"خلال {0} أشهر",many:"خلال {0} شهرًا",other:"خلال {0} شهر"},past:{zero:"قبل {0} شهر",one:"قبل شهر واحد",two:"قبل شهرين",few:"خلال {0} أشهر",many:"قبل {0} شهرًا",other:"قبل {0} شهر"}}},day:{displayName:"يوم",relative:{0:"اليوم",1:"غدًا",2:"بعد الغد","-2":"أول أمس","-1":"أمس"},relativeTime:{future:{zero:"خلال {0} يوم",one:"خلال يوم واحد",two:"خلال يومين",few:"خلال {0} أيام",many:"خلال {0} يومًا",other:"خلال {0} يوم"},past:{zero:"قبل {0} يوم",one:"قبل يوم واحد",two:"قبل يومين",few:"قبل {0} أيام",many:"قبل {0} يومًا",other:"قبل {0} يوم"}}},"day-short":{displayName:"يوم",relative:{0:"اليوم",1:"غدًا",2:"بعد الغد","-2":"أول أمس","-1":"أمس"},relativeTime:{future:{zero:"خلال {0} يوم",one:"خلال يوم واحد",two:"خلال يومين",few:"خلال {0} أيام",many:"خلال {0} يومًا",other:"خلال {0} يوم"},past:{zero:"قبل {0} يوم",one:"قبل يوم واحد",two:"قبل يومين",few:"قبل {0} أيام",many:"قبل {0} يومًا",other:"قبل {0} يوم"}}},hour:{displayName:"الساعات",relative:{0:"الساعة الحالية"},relativeTime:{future:{zero:"خلال {0} ساعة",one:"خلال ساعة واحدة",two:"خلال ساعتين",few:"خلال {0} ساعات",many:"خلال {0} ساعة",other:"خلال {0} ساعة"},past:{zero:"قبل {0} ساعة",one:"قبل ساعة واحدة",two:"قبل ساعتين",few:"قبل {0} ساعات",many:"قبل {0} ساعة",other:"قبل {0} ساعة"}}},"hour-short":{displayName:"الساعات",relative:{0:"الساعة الحالية"},relativeTime:{future:{zero:"خلال {0} ساعة",one:"خلال ساعة واحدة",two:"خلال ساعتين",few:"خلال {0} ساعات",many:"خلال {0} ساعة",other:"خلال {0} ساعة"},past:{zero:"قبل {0} ساعة",one:"قبل ساعة واحدة",two:"قبل ساعتين",few:"قبل {0} ساعات",many:"قبل {0} ساعة",other:"قبل {0} ساعة"}}},minute:{displayName:"الدقائق",relative:{0:"هذه الدقيقة"},relativeTime:{future:{zero:"خلال {0} دقيقة",one:"خلال دقيقة واحدة",two:"خلال دقيقتين",few:"خلال {0} دقائق",many:"خلال {0} دقيقة",other:"خلال {0} دقيقة"},past:{zero:"قبل {0} دقيقة",one:"قبل دقيقة واحدة",two:"قبل دقيقتين",few:"قبل {0} دقائق",many:"قبل {0} دقيقة",other:"قبل {0} دقيقة"}}},"minute-short":{displayName:"الدقائق",relative:{0:"هذه الدقيقة"},relativeTime:{future:{zero:"خلال {0} دقيقة",one:"خلال دقيقة واحدة",two:"خلال دقيقتين",few:"خلال {0} دقائق",many:"خلال {0} دقيقة",other:"خلال {0} دقيقة"},past:{zero:"قبل {0} دقيقة",one:"قبل دقيقة واحدة",two:"قبل دقيقتين",few:"قبل {0} دقائق",many:"قبل {0} دقيقة",other:"قبل {0} دقيقة"}}},second:{displayName:"الثواني",relative:{0:"الآن"},relativeTime:{future:{zero:"خلال {0} ثانية",one:"خلال ثانية واحدة",two:"خلال ثانيتين",few:"خلال {0} ثوانٍ",many:"خلال {0} ثانية",other:"خلال {0} ثانية"},past:{zero:"قبل {0} ثانية",one:"قبل ثانية واحدة",two:"قبل ثانيتين",few:"قبل {0} ثوانِ",many:"قبل {0} ثانية",other:"قبل {0} ثانية"}}},"second-short":{displayName:"الثواني",relative:{0:"الآن"},relativeTime:{future:{zero:"خلال {0} ثانية",one:"خلال ثانية واحدة",two:"خلال ثانيتين",few:"خلال {0} ثوانٍ",many:"خلال {0} ثانية",other:"خلال {0} ثانية"},past:{zero:"قبل {0} ثانية",one:"قبل ثانية واحدة",two:"قبل ثانيتين",few:"قبل {0} ثوانٍ",many:"قبل {0} ثانية",other:"قبل {0} ثانية"}}}}},{locale:"ar-AE",parentLocale:"ar",fields:{year:{displayName:"السنة",relative:{0:"هذه السنة",1:"السنة التالية","-1":"السنة الماضية"},relativeTime:{future:{zero:"خلال {0} سنة",one:"خلال سنة واحدة",two:"خلال سنتين",few:"خلال {0} سنوات",many:"خلال {0} سنة",other:"خلال {0} سنة"},past:{zero:"قبل {0} سنة",one:"قبل سنة واحدة",two:"قبل سنتين",few:"قبل {0} سنوات",many:"قبل {0} سنة",other:"قبل {0} سنة"}}},"year-short":{displayName:"السنة",relative:{0:"هذه السنة",1:"السنة التالية","-1":"السنة الماضية"},relativeTime:{future:{zero:"خلال {0} سنة",one:"خلال سنة واحدة",two:"خلال سنتين",few:"خلال {0} سنوات",many:"خلال {0} سنة",other:"خلال {0} سنة"},past:{zero:"قبل {0} سنة",one:"قبل سنة واحدة",two:"قبل سنتين",few:"قبل {0} سنوات",many:"قبل {0} سنة",other:"قبل {0} سنة"}}},month:{displayName:"الشهر",relative:{0:"هذا الشهر",1:"الشهر القادم","-1":"الشهر الماضي"},relativeTime:{future:{zero:"خلال {0} شهر",one:"خلال شهر واحد",two:"خلال شهرين",few:"خلال {0} أشهر",many:"خلال {0} شهرًا",other:"خلال {0} شهر"},past:{zero:"قبل {0} شهر",one:"قبل شهر واحد",two:"قبل شهرين",few:"قبل {0} أشهر",many:"قبل {0} شهرًا",other:"قبل {0} شهر"}}},"month-short":{displayName:"الشهر",relative:{0:"هذا الشهر",1:"الشهر القادم","-1":"الشهر الماضي"},relativeTime:{future:{zero:"خلال {0} شهر",one:"خلال شهر واحد",two:"خلال شهرين",few:"خلال {0} أشهر",many:"خلال {0} شهرًا",other:"خلال {0} شهر"},past:{zero:"قبل {0} شهر",one:"قبل شهر واحد",two:"قبل شهرين",few:"خلال {0} أشهر",many:"قبل {0} شهرًا",other:"قبل {0} شهر"}}},day:{displayName:"يوم",relative:{0:"اليوم",1:"غدًا",2:"بعد الغد","-2":"أول أمس","-1":"أمس"},relativeTime:{future:{zero:"خلال {0} يوم",one:"خلال يوم واحد",two:"خلال يومين",few:"خلال {0} أيام",many:"خلال {0} يومًا",other:"خلال {0} يوم"},past:{zero:"قبل {0} يوم",one:"قبل يوم واحد",two:"قبل يومين",few:"قبل {0} أيام",many:"قبل {0} يومًا",other:"قبل {0} يوم"}}},"day-short":{displayName:"يوم",relative:{0:"اليوم",1:"غدًا",2:"بعد الغد","-2":"أول أمس","-1":"أمس"},relativeTime:{future:{zero:"خلال {0} يوم",one:"خلال يوم واحد",two:"خلال يومين",few:"خلال {0} أيام",many:"خلال {0} يومًا",other:"خلال {0} يوم"},past:{zero:"قبل {0} يوم",one:"قبل يوم واحد",two:"قبل يومين",few:"قبل {0} أيام",many:"قبل {0} يومًا",other:"قبل {0} يوم"}}},hour:{displayName:"الساعات",relative:{0:"الساعة الحالية"},relativeTime:{future:{zero:"خلال {0} ساعة",one:"خلال ساعة واحدة",two:"خلال ساعتين",few:"خلال {0} ساعات",many:"خلال {0} ساعة",other:"خلال {0} ساعة"},past:{zero:"قبل {0} ساعة",one:"قبل ساعة واحدة",two:"قبل ساعتين",few:"قبل {0} ساعات",many:"قبل {0} ساعة",other:"قبل {0} ساعة"}}},"hour-short":{displayName:"الساعات",relative:{0:"الساعة الحالية"},relativeTime:{future:{zero:"خلال {0} ساعة",one:"خلال ساعة واحدة",two:"خلال ساعتين",few:"خلال {0} ساعات",many:"خلال {0} ساعة",other:"خلال {0} ساعة"},past:{zero:"قبل {0} ساعة",one:"قبل ساعة واحدة",two:"قبل ساعتين",few:"قبل {0} ساعات",many:"قبل {0} ساعة",other:"قبل {0} ساعة"}}},minute:{displayName:"الدقائق",relative:{0:"هذه الدقيقة"},relativeTime:{future:{zero:"خلال {0} دقيقة",one:"خلال دقيقة واحدة",two:"خلال دقيقتين",few:"خلال {0} دقائق",many:"خلال {0} دقيقة",other:"خلال {0} دقيقة"},past:{zero:"قبل {0} دقيقة",one:"قبل دقيقة واحدة",two:"قبل دقيقتين",few:"قبل {0} دقائق",many:"قبل {0} دقيقة",other:"قبل {0} دقيقة"}}},"minute-short":{displayName:"الدقائق",relative:{0:"هذه الدقيقة"},relativeTime:{future:{zero:"خلال {0} دقيقة",one:"خلال دقيقة واحدة",two:"خلال دقيقتين",few:"خلال {0} دقائق",many:"خلال {0} دقيقة",other:"خلال {0} دقيقة"},past:{zero:"قبل {0} دقيقة",one:"قبل دقيقة واحدة",two:"قبل دقيقتين",few:"قبل {0} دقائق",many:"قبل {0} دقيقة",other:"قبل {0} دقيقة"}}},second:{displayName:"الثواني",relative:{0:"الآن"},relativeTime:{future:{zero:"خلال {0} ثانية",one:"خلال ثانية واحدة",two:"خلال ثانيتين",few:"خلال {0} ثوانٍ",many:"خلال {0} ثانية",other:"خلال {0} ثانية"},past:{zero:"قبل {0} ثانية",one:"قبل ثانية واحدة",two:"قبل ثانيتين",few:"قبل {0} ثوانِ",many:"قبل {0} ثانية",other:"قبل {0} ثانية"}}},"second-short":{displayName:"الثواني",relative:{0:"الآن"},relativeTime:{future:{zero:"خلال {0} ثانية",one:"خلال ثانية واحدة",two:"خلال ثانيتين",few:"خلال {0} ثوانٍ",many:"خلال {0} ثانية",other:"خلال {0} ثانية"},past:{zero:"قبل {0} ثانية",one:"قبل ثانية واحدة",two:"قبل ثانيتين",few:"قبل {0} ثوانٍ",many:"قبل {0} ثانية",other:"قبل {0} ثانية"}}}}},{locale:"ar-BH",parentLocale:"ar"},{locale:"ar-DJ",parentLocale:"ar"},{locale:"ar-DZ",parentLocale:"ar"},{locale:"ar-EG",parentLocale:"ar"},{locale:"ar-EH",parentLocale:"ar"},{locale:"ar-ER",parentLocale:"ar"},{locale:"ar-IL",parentLocale:"ar"},{locale:"ar-IQ",parentLocale:"ar"},{locale:"ar-JO",parentLocale:"ar"},{locale:"ar-KM",parentLocale:"ar"},{locale:"ar-KW",parentLocale:"ar"},{locale:"ar-LB",parentLocale:"ar"},{locale:"ar-LY",parentLocale:"ar"},{locale:"ar-MA",parentLocale:"ar"},{locale:"ar-MR",parentLocale:"ar"},{locale:"ar-OM",parentLocale:"ar"},{locale:"ar-PS",parentLocale:"ar"},{locale:"ar-QA",parentLocale:"ar"},{locale:"ar-SA",parentLocale:"ar"},{locale:"ar-SD",parentLocale:"ar"},{locale:"ar-SO",parentLocale:"ar"},{locale:"ar-SS",parentLocale:"ar"},{locale:"ar-SY",parentLocale:"ar"},{locale:"ar-TD",parentLocale:"ar"},{locale:"ar-TN",parentLocale:"ar"},{locale:"ar-YE",parentLocale:"ar"},{locale:"ars",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e&&a[0].slice(-2);return t?"other":0==e?"zero":1==e?"one":2==e?"two":r>=3&&r<=10?"few":r>=11&&r<=99?"many":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"as",pluralRuleFunction:function(e,t){return t?1==e||5==e||7==e||8==e||9==e||10==e?"one":2==e||3==e?"two":4==e?"few":6==e?"many":"other":e>=0&&e<=1?"one":"other"},fields:{year:{displayName:"বছৰ",relative:{0:"এই বছৰ",1:"অহা বছৰ","-1":"যোৱা বছৰ"},relativeTime:{future:{one:"{0} বছৰত",other:"{0} বছৰত"},past:{one:"{0} বছৰৰ পূৰ্বে",other:"{0} বছৰৰ পূৰ্বে"}}},"year-short":{displayName:"বছৰ",relative:{0:"এই বছৰ",1:"অহা বছৰ","-1":"যোৱা বছৰ"},relativeTime:{future:{one:"{0} বছৰত",other:"{0} বছৰত"},past:{one:"{0} বছৰৰ পূৰ্বে",other:"{0} বছৰৰ পূৰ্বে"}}},month:{displayName:"মাহ",relative:{0:"এই মাহ",1:"অহা মাহ","-1":"যোৱা মাহ"},relativeTime:{future:{one:"{0} মাহত",other:"{0} মাহত"},past:{one:"{0} মাহ পূৰ্বে",other:"{0} মাহ পূৰ্বে"}}},"month-short":{displayName:"মাহ",relative:{0:"এই মাহ",1:"অহা মাহ","-1":"যোৱা মাহ"},relativeTime:{future:{one:"{0} মাহত",other:"{0} মাহত"},past:{one:"{0} মাহ পূৰ্বে",other:"{0} মাহ পূৰ্বে"}}},day:{displayName:"দিন",relative:{0:"আজি",1:"কাইলৈ",2:"পৰহিলৈ","-2":"পৰহি","-1":"কালি"},relativeTime:{future:{one:"{0} দিনত",other:"{0} দিনত"},past:{one:"{0} দিন পূৰ্বে",other:"{0} দিন পূৰ্বে"}}},"day-short":{displayName:"দিন",relative:{0:"আজি",1:"কাইলৈ",2:"পৰহিলৈ","-2":"পৰহি","-1":"কালি"},relativeTime:{future:{one:"{0} দিনত",other:"{0} দিনত"},past:{one:"{0} দিন পূৰ্বে",other:"{0} দিন পূৰ্বে"}}},hour:{displayName:"ঘণ্টা",relative:{0:"এইটো ঘণ্টাত"},relativeTime:{future:{one:"{0} ঘণ্টাত",other:"{0} ঘণ্টাত"},past:{one:"{0} ঘণ্টা পূৰ্বে",other:"{0} ঘণ্টা পূৰ্বে"}}},"hour-short":{displayName:"ঘণ্টা",relative:{0:"এইটো ঘণ্টাত"},relativeTime:{future:{one:"{0} ঘণ্টাত",other:"{0} ঘণ্টাত"},past:{one:"{0} ঘণ্টা পূৰ্বে",other:"{0} ঘণ্টা পূৰ্বে"}}},minute:{displayName:"মিনিট",relative:{0:"এইটো মিনিটত"},relativeTime:{future:{one:"{0} মিনিটত",other:"{0} মিনিটত"},past:{one:"{0} মিনিট পূৰ্বে",other:"{0} মিনিট পূৰ্বে"}}},"minute-short":{displayName:"মিনিট",relative:{0:"এইটো মিনিটত"},relativeTime:{future:{one:"{0} মিনিটত",other:"{0} মিনিটত"},past:{one:"{0} মিনিট পূৰ্বে",other:"{0} মিনিট পূৰ্বে"}}},second:{displayName:"ছেকেণ্ড",relative:{0:"এতিয়া"},relativeTime:{future:{one:"{0} ছেকেণ্ডত",other:"{0} ছেকেণ্ডত"},past:{one:"{0} ছেকেণ্ড পূৰ্বে",other:"{0} ছেকেণ্ড পূৰ্বে"}}},"second-short":{displayName:"ছেকেণ্ড",relative:{0:"এতিয়া"},relativeTime:{future:{one:"{0} ছেকেণ্ডত",other:"{0} ছেকেণ্ডত"},past:{one:"{0} ছেকেণ্ড পূৰ্বে",other:"{0} ছেকেণ্ড পূৰ্বে"}}}}},{locale:"asa",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mweji",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mweji",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Thiku",relative:{0:"Iyoo",1:"Yavo","-1":"Ighuo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Thiku",relative:{0:"Iyoo",1:"Yavo","-1":"Ighuo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Thaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Thaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Thekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Thekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ast",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"añu",relative:{0:"esti añu",1:"l’añu viniente","-1":"l’añu pasáu"},relativeTime:{future:{one:"en {0} añu",other:"en {0} años"},past:{one:"hai {0} añu",other:"hai {0} años"}}},"year-short":{displayName:"añu",relative:{0:"esti añu",1:"l’añu vin.","-1":"l’añu pas."},relativeTime:{future:{one:"en {0} añu",other:"en {0} años"},past:{one:"hai {0} añu",other:"hai {0} años"}}},month:{displayName:"mes",relative:{0:"esti mes",1:"el mes viniente","-1":"el mes pasáu"},relativeTime:{future:{one:"en {0} mes",other:"en {0} meses"},past:{one:"hai {0} mes",other:"hai {0} meses"}}},"month-short":{displayName:"mes",relative:{0:"esti mes",1:"mes vin.","-1":"mes pas."},relativeTime:{future:{one:"en {0} mes",other:"en {0} meses"},past:{one:"hai {0} mes",other:"hai {0} meses"}}},day:{displayName:"día",relative:{0:"güei",1:"mañana",2:"pasao mañana","-2":"antayeri","-1":"ayeri"},relativeTime:{future:{one:"en {0} día",other:"en {0} díes"},past:{one:"hai {0} día",other:"hai {0} díes"}}},"day-short":{displayName:"día",relative:{0:"güei",1:"mañana",2:"pasao mañana","-2":"antayeri","-1":"ayeri"},relativeTime:{future:{one:"en {0} día",other:"en {0} díes"},past:{one:"hai {0} día",other:"hai {0} díes"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"en {0} hora",other:"en {0} hores"},past:{one:"hai {0} hora",other:"hai {0} hores"}}},"hour-short":{displayName:"h.",relative:{0:"esta hora"},relativeTime:{future:{one:"en {0} h.",other:"en {0} h."},past:{one:"hai {0} h.",other:"hai {0} h."}}},minute:{displayName:"minutu",relative:{0:"esti minutu"},relativeTime:{future:{one:"en {0} minutu",other:"en {0} minutos"},past:{one:"hai {0} minutu",other:"hai {0} minutos"}}},"minute-short":{displayName:"min.",relative:{0:"esti min."},relativeTime:{future:{one:"en {0} min.",other:"en {0} min."},past:{one:"hai {0} min.",other:"hai {0} min."}}},second:{displayName:"segundu",relative:{0:"agora"},relativeTime:{future:{one:"en {0} segundu",other:"en {0} segundos"},past:{one:"hai {0} segundu",other:"hai {0} segundos"}}},"second-short":{displayName:"s.",relative:{0:"agora"},relativeTime:{future:{one:"en {0} seg.",other:"en {0} seg."},past:{one:"hai {0} seg.",other:"hai {0} seg."}}}}},{locale:"az",pluralRuleFunction:function(e,t){var a=String(e).split(".")[0],r=a.slice(-1),i=a.slice(-2),o=a.slice(-3);return t?1==r||2==r||5==r||7==r||8==r||20==i||50==i||70==i||80==i?"one":3==r||4==r||100==o||200==o||300==o||400==o||500==o||600==o||700==o||800==o||900==o?"few":0==a||6==r||40==i||60==i||90==i?"many":"other":1==e?"one":"other"},fields:{year:{displayName:"İl",relative:{0:"bu il",1:"gələn il","-1":"keçən il"},relativeTime:{future:{one:"{0} il ərzində",other:"{0} il ərzində"},past:{one:"{0} il öncə",other:"{0} il öncə"}}},"year-short":{displayName:"il",relative:{0:"bu il",1:"gələn il","-1":"keçən il"},relativeTime:{future:{one:"{0} il ərzində",other:"{0} il ərzində"},past:{one:"{0} il öncə",other:"{0} il öncə"}}},month:{displayName:"Ay",relative:{0:"bu ay",1:"gələn ay","-1":"keçən ay"},relativeTime:{future:{one:"{0} ay ərzində",other:"{0} ay ərzində"},past:{one:"{0} ay öncə",other:"{0} ay öncə"}}},"month-short":{displayName:"ay",relative:{0:"bu ay",1:"gələn ay","-1":"keçən ay"},relativeTime:{future:{one:"{0} ay ərzində",other:"{0} ay ərzində"},past:{one:"{0} ay öncə",other:"{0} ay öncə"}}},day:{displayName:"Gün",relative:{0:"bu gün",1:"sabah","-1":"dünən"},relativeTime:{future:{one:"{0} gün ərzində",other:"{0} gün ərzində"},past:{one:"{0} gün öncə",other:"{0} gün öncə"}}},"day-short":{displayName:"Gün",relative:{0:"bu gün",1:"sabah","-1":"dünən"},relativeTime:{future:{one:"{0} gün ərzində",other:"{0} gün ərzində"},past:{one:"{0} gün öncə",other:"{0} gün öncə"}}},hour:{displayName:"Saat",relative:{0:"bu saat"},relativeTime:{future:{one:"{0} saat ərzində",other:"{0} saat ərzində"},past:{one:"{0} saat öncə",other:"{0} saat öncə"}}},"hour-short":{displayName:"saat",relative:{0:"bu saat"},relativeTime:{future:{one:"{0} saat ərzində",other:"{0} saat ərzində"},past:{one:"{0} saat öncə",other:"{0} saat öncə"}}},minute:{displayName:"Dəqiqə",relative:{0:"bu dəqiqə"},relativeTime:{future:{one:"{0} dəqiqə ərzində",other:"{0} dəqiqə ərzində"},past:{one:"{0} dəqiqə öncə",other:"{0} dəqiqə öncə"}}},"minute-short":{displayName:"dəq.",relative:{0:"bu dəqiqə"},relativeTime:{future:{one:"{0} dəqiqə ərzində",other:"{0} dəqiqə ərzində"},past:{one:"{0} dəqiqə öncə",other:"{0} dəqiqə öncə"}}},second:{displayName:"Saniyə",relative:{0:"indi"},relativeTime:{future:{one:"{0} saniyə ərzində",other:"{0} saniyə ərzində"},past:{one:"{0} saniyə öncə",other:"{0} saniyə öncə"}}},"second-short":{displayName:"san.",relative:{0:"indi"},relativeTime:{future:{one:"{0} saniyə ərzində",other:"{0} saniyə ərzində"},past:{one:"{0} saniyə öncə",other:"{0} saniyə öncə"}}}}},{locale:"az-Arab",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"az-Cyrl",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"az-Latn",parentLocale:"az"},{locale:"bas",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"ŋwìi",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"ŋwìi",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"soŋ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"soŋ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"kɛl",relative:{0:"lɛ̀n",1:"yàni","-1":"yààni"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"kɛl",relative:{0:"lɛ̀n",1:"yàni","-1":"yààni"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"ŋgɛŋ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"ŋgɛŋ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"ŋget",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"ŋget",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"hìŋgeŋget",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"hìŋgeŋget",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"be",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e,i=r&&a[0].slice(-1),o=r&&a[0].slice(-2);return t?2!=i&&3!=i||12==o||13==o?"other":"few":1==i&&11!=o?"one":i>=2&&i<=4&&(o<12||o>14)?"few":r&&0==i||i>=5&&i<=9||o>=11&&o<=14?"many":"other"},fields:{year:{displayName:"год",relative:{0:"у гэтым годзе",1:"у наступным годзе","-1":"у мінулым годзе"},relativeTime:{future:{one:"праз {0} год",few:"праз {0} гады",many:"праз {0} гадоў",other:"праз {0} года"},past:{one:"{0} год таму",few:"{0} гады таму",many:"{0} гадоў таму",other:"{0} года таму"}}},"year-short":{displayName:"г.",relative:{0:"у гэтым годзе",1:"у наступным годзе","-1":"у мінулым годзе"},relativeTime:{future:{one:"праз {0} г.",few:"праз {0} г.",many:"праз {0} г.",other:"праз {0} г."},past:{one:"{0} г. таму",few:"{0} г. таму",many:"{0} г. таму",other:"{0} г. таму"}}},month:{displayName:"месяц",relative:{0:"у гэтым месяцы",1:"у наступным месяцы","-1":"у мінулым месяцы"},relativeTime:{future:{one:"праз {0} месяц",few:"праз {0} месяцы",many:"праз {0} месяцаў",other:"праз {0} месяца"},past:{one:"{0} месяц таму",few:"{0} месяцы таму",many:"{0} месяцаў таму",other:"{0} месяца таму"}}},"month-short":{displayName:"мес.",relative:{0:"у гэтым месяцы",1:"у наступным месяцы","-1":"у мінулым месяцы"},relativeTime:{future:{one:"праз {0} мес.",few:"праз {0} мес.",many:"праз {0} мес.",other:"праз {0} мес."},past:{one:"{0} мес. таму",few:"{0} мес. таму",many:"{0} мес. таму",other:"{0} мес. таму"}}},day:{displayName:"дзень",relative:{0:"сёння",1:"заўтра",2:"паслязаўтра","-2":"пазаўчора","-1":"учора"},relativeTime:{future:{one:"праз {0} дзень",few:"праз {0} дні",many:"праз {0} дзён",other:"праз {0} дня"},past:{one:"{0} дзень таму",few:"{0} дні таму",many:"{0} дзён таму",other:"{0} дня таму"}}},"day-short":{displayName:"дзень",relative:{0:"сёння",1:"заўтра",2:"паслязаўтра","-2":"пазаўчора","-1":"учора"},relativeTime:{future:{one:"праз {0} дзень",few:"праз {0} дні",many:"праз {0} дзён",other:"праз {0} дня"},past:{one:"{0} дзень таму",few:"{0} дні таму",many:"{0} дзён таму",other:"{0} дня таму"}}},hour:{displayName:"гадзіна",relative:{0:"у гэту гадзіну"},relativeTime:{future:{one:"праз {0} гадзіну",few:"праз {0} гадзіны",many:"праз {0} гадзін",other:"праз {0} гадзіны"},past:{one:"{0} гадзіну таму",few:"{0} гадзіны таму",many:"{0} гадзін таму",other:"{0} гадзіны таму"}}},"hour-short":{displayName:"гадз",relative:{0:"у гэту гадзіну"},relativeTime:{future:{one:"праз {0} гадз",few:"праз {0} гадз",many:"праз {0} гадз",other:"праз {0} гадз"},past:{one:"{0} гадз таму",few:"{0} гадз таму",many:"{0} гадз таму",other:"{0} гадз таму"}}},minute:{displayName:"хвіліна",relative:{0:"у гэту хвіліну"},relativeTime:{future:{one:"праз {0} хвіліну",few:"праз {0} хвіліны",many:"праз {0} хвілін",other:"праз {0} хвіліны"},past:{one:"{0} хвіліну таму",few:"{0} хвіліны таму",many:"{0} хвілін таму",other:"{0} хвіліны таму"}}},"minute-short":{displayName:"хв",relative:{0:"у гэту хвіліну"},relativeTime:{future:{one:"праз {0} хв",few:"праз {0} хв",many:"праз {0} хв",other:"праз {0} хв"},past:{one:"{0} хв таму",few:"{0} хв таму",many:"{0} хв таму",other:"{0} хв таму"}}},second:{displayName:"секунда",relative:{0:"цяпер"},relativeTime:{future:{one:"праз {0} секунду",few:"праз {0} секунды",many:"праз {0} секунд",other:"праз {0} секунды"},past:{one:"{0} секунду таму",few:"{0} секунды таму",many:"{0} секунд таму",other:"{0} секунды таму"}}},"second-short":{displayName:"с",relative:{0:"цяпер"},relativeTime:{future:{one:"праз {0} с",few:"праз {0} с",many:"праз {0} с",other:"праз {0} с"},past:{one:"{0} с таму",few:"{0} с таму",many:"{0} с таму",other:"{0} с таму"}}}}},{locale:"bem",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Umwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Umwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Umweshi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Umweshi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ubushiku",relative:{0:"Lelo",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ubushiku",relative:{0:"Lelo",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Insa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Insa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Mineti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Mineti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"bez",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Mwaha",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Mwaha",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mwedzi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mwedzi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Sihu",relative:{0:"Neng’u ni",1:"Hilawu","-1":"Igolo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Sihu",relative:{0:"Neng’u ni",1:"Hilawu","-1":"Igolo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"bg",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"година",relative:{0:"тази година",1:"следващата година","-1":"миналата година"},relativeTime:{future:{one:"след {0} година",other:"след {0} години"},past:{one:"преди {0} година",other:"преди {0} години"}}},"year-short":{displayName:"г.",relative:{0:"т. г.",1:"следв. г.","-1":"мин. г."},relativeTime:{future:{one:"след {0} г.",other:"след {0} г."},past:{one:"преди {0} г.",other:"преди {0} г."}}},month:{displayName:"месец",relative:{0:"този месец",1:"следващ месец","-1":"предходен месец"},relativeTime:{future:{one:"след {0} месец",other:"след {0} месеца"},past:{one:"преди {0} месец",other:"преди {0} месеца"}}},"month-short":{displayName:"мес.",relative:{0:"този мес.",1:"следв. мес.","-1":"мин. мес."},relativeTime:{future:{one:"след {0} м.",other:"след {0} м."},past:{one:"преди {0} м.",other:"преди {0} м."}}},day:{displayName:"ден",relative:{0:"днес",1:"утре",2:"вдругиден","-2":"онзи ден","-1":"вчера"},relativeTime:{future:{one:"след {0} ден",other:"след {0} дни"},past:{one:"преди {0} ден",other:"преди {0} дни"}}},"day-short":{displayName:"д",relative:{0:"днес",1:"утре",2:"вдругиден","-2":"онзи ден","-1":"вчера"},relativeTime:{future:{one:"след {0} ден",other:"след {0} дни"},past:{one:"преди {0} ден",other:"преди {0} дни"}}},hour:{displayName:"час",relative:{0:"в този час"},relativeTime:{future:{one:"след {0} час",other:"след {0} часа"},past:{one:"преди {0} час",other:"преди {0} часа"}}},"hour-short":{displayName:"ч",relative:{0:"в този час"},relativeTime:{future:{one:"след {0} ч",other:"след {0} ч"},past:{one:"преди {0} ч",other:"преди {0} ч"}}},minute:{displayName:"минута",relative:{0:"в тази минута"},relativeTime:{future:{one:"след {0} минута",other:"след {0} минути"},past:{one:"преди {0} минута",other:"преди {0} минути"}}},"minute-short":{displayName:"мин",relative:{0:"в тази минута"},relativeTime:{future:{one:"след {0} мин",other:"след {0} мин"},past:{one:"преди {0} мин",other:"преди {0} мин"}}},second:{displayName:"секунда",relative:{0:"сега"},relativeTime:{future:{one:"след {0} секунда",other:"след {0} секунди"},past:{one:"преди {0} секунда",other:"преди {0} секунди"}}},"second-short":{displayName:"сек",relative:{0:"сега"},relativeTime:{future:{one:"след {0} сек",other:"след {0} сек"},past:{one:"преди {0} сек",other:"преди {0} сек"}}}}},{locale:"bh",pluralRuleFunction:function(e,t){return t?"other":0==e||1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"bm",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"san",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"san",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"kalo",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"kalo",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"don",relative:{0:"bi",1:"sini","-1":"kunu"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"don",relative:{0:"bi",1:"sini","-1":"kunu"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"lɛrɛ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"lɛrɛ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"miniti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"miniti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"sekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"sekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"bm-Nkoo",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"bn",pluralRuleFunction:function(e,t){return t?1==e||5==e||7==e||8==e||9==e||10==e?"one":2==e||3==e?"two":4==e?"few":6==e?"many":"other":e>=0&&e<=1?"one":"other"},fields:{year:{displayName:"বছর",relative:{0:"এই বছর",1:"পরের বছর","-1":"গত বছর"},relativeTime:{future:{one:"{0} বছরে",other:"{0} বছরে"},past:{one:"{0} বছর পূর্বে",other:"{0} বছর পূর্বে"}}},"year-short":{displayName:"বছর",relative:{0:"এই বছর",1:"পরের বছর","-1":"গত বছর"},relativeTime:{future:{one:"{0} বছরে",other:"{0} বছরে"},past:{one:"{0} বছর পূর্বে",other:"{0} বছর পূর্বে"}}},month:{displayName:"মাস",relative:{0:"এই মাস",1:"পরের মাস","-1":"গত মাস"},relativeTime:{future:{one:"{0} মাসে",other:"{0} মাসে"},past:{one:"{0} মাস আগে",other:"{0} মাস আগে"}}},"month-short":{displayName:"মাস",relative:{0:"এই মাস",1:"পরের মাস","-1":"গত মাস"},relativeTime:{future:{one:"{0} মাসে",other:"{0} মাসে"},past:{one:"{0} মাস আগে",other:"{0} মাস আগে"}}},day:{displayName:"দিন",relative:{0:"আজ",1:"আগামীকাল",2:"আগামী পরশু","-2":"গত পরশু","-1":"গতকাল"},relativeTime:{future:{one:"{0} দিনের মধ্যে",other:"{0} দিনের মধ্যে"},past:{one:"{0} দিন আগে",other:"{0} দিন আগে"}}},"day-short":{displayName:"দিন",relative:{0:"আজ",1:"আগামীকাল",2:"আগামী পরশু","-2":"গত পরশু","-1":"গতকাল"},relativeTime:{future:{one:"{0} দিনের মধ্যে",other:"{0} দিনের মধ্যে"},past:{one:"{0} দিন আগে",other:"{0} দিন আগে"}}},hour:{displayName:"ঘণ্টা",relative:{0:"এই ঘণ্টায়"},relativeTime:{future:{one:"{0} ঘন্টায়",other:"{0} ঘন্টায়"},past:{one:"{0} ঘন্টা আগে",other:"{0} ঘন্টা আগে"}}},"hour-short":{displayName:"ঘণ্টা",relative:{0:"এই ঘণ্টায়"},relativeTime:{future:{one:"{0} ঘন্টায়",other:"{0} ঘন্টায়"},past:{one:"{0} ঘন্টা আগে",other:"{0} ঘন্টা আগে"}}},minute:{displayName:"মিনিট",relative:{0:"এই মিনিট"},relativeTime:{future:{one:"{0} মিনিটে",other:"{0} মিনিটে"},past:{one:"{0} মিনিট আগে",other:"{0} মিনিট আগে"}}},"minute-short":{displayName:"মিনিট",relative:{0:"এই মিনিট"},relativeTime:{future:{one:"{0} মিনিটে",other:"{0} মিনিটে"},past:{one:"{0} মিনিট আগে",other:"{0} মিনিট আগে"}}},second:{displayName:"সেকেন্ড",relative:{0:"এখন"},relativeTime:{future:{one:"{0} সেকেন্ডে",other:"{0} সেকেন্ডে"},past:{one:"{0} সেকেন্ড পূর্বে",other:"{0} সেকেন্ড পূর্বে"}}},"second-short":{displayName:"সেকেন্ড",relative:{0:"এখন"},relativeTime:{future:{one:"{0} সেকেন্ডে",other:"{0} সেকেন্ডে"},past:{one:"{0} সেকেন্ড পূর্বে",other:"{0} সেকেন্ড পূর্বে"}}}}},{locale:"bn-IN",parentLocale:"bn"},{locale:"bo",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"ལོ།",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"ལོ།",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"ཟླ་བ་",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"ཟླ་བ་",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"ཉིན།",relative:{0:"དེ་རིང་",1:"སང་ཉིན་",2:"གནངས་ཉིན་","-2":"ཁས་ཉིན་","-1":"ཁས་ས་"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"ཉིན།",relative:{0:"དེ་རིང་",1:"སང་ཉིན་",2:"གནངས་ཉིན་","-2":"ཁས་ཉིན་","-1":"ཁས་ས་"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"ཆུ་ཚོད་",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"ཆུ་ཚོད་",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"སྐར་མ།",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"སྐར་མ།",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"སྐར་ཆ།",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"སྐར་ཆ།",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"bo-IN",parentLocale:"bo"},{locale:"br",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e,i=r&&a[0].slice(-1),o=r&&a[0].slice(-2),n=r&&a[0].slice(-6);return t?"other":1==i&&11!=o&&71!=o&&91!=o?"one":2==i&&12!=o&&72!=o&&92!=o?"two":(3==i||4==i||9==i)&&(o<10||o>19)&&(o<70||o>79)&&(o<90||o>99)?"few":0!=e&&r&&0==n?"many":"other"},fields:{year:{displayName:"bloaz",relative:{0:"hevlene",1:"ar bloaz a zeu","-1":"warlene"},relativeTime:{future:{one:"a-benn {0} bloaz",two:"a-benn {0} vloaz",few:"a-benn {0} bloaz",many:"a-benn {0} a vloazioù",other:"a-benn {0} vloaz"},past:{one:"{0} bloaz zo",two:"{0} vloaz zo",few:"{0} bloaz zo",many:"{0} a vloazioù zo",other:"{0} vloaz zo"}}},"year-short":{displayName:"bl.",relative:{0:"hevlene",1:"ar bl. a zeu","-1":"warlene"},relativeTime:{future:{one:"a-benn {0} bl.",two:"a-benn {0} bl.",few:"a-benn {0} bl.",many:"a-benn {0} bl.",other:"a-benn {0} bl."},past:{one:"{0} bl. zo",two:"{0} bl. zo",few:"{0} bl. zo",many:"{0} bl. zo",other:"{0} bl. zo"}}},month:{displayName:"miz",relative:{0:"ar miz-mañ",1:"ar miz a zeu","-1":"ar miz diaraok"},relativeTime:{future:{one:"a-benn {0} miz",two:"a-benn {0} viz",few:"a-benn {0} miz",many:"a-benn {0} a vizioù",other:"a-benn {0} miz"},past:{one:"{0} miz zo",two:"{0} viz zo",few:"{0} miz zo",many:"{0} a vizioù zo",other:"{0} miz zo"}}},"month-short":{displayName:"miz",relative:{0:"ar miz-mañ",1:"ar miz a zeu","-1":"ar miz diaraok"},relativeTime:{future:{one:"a-benn {0} miz",two:"a-benn {0} viz",few:"a-benn {0} miz",many:"a-benn {0} a vizioù",other:"a-benn {0} miz"},past:{one:"{0} miz zo",two:"{0} viz zo",few:"{0} miz zo",many:"{0} a vizioù zo",other:"{0} miz zo"}}},day:{displayName:"deiz",relative:{0:"hiziv",1:"warcʼhoazh","-2":"dercʼhent-decʼh","-1":"decʼh"},relativeTime:{future:{one:"a-benn {0} deiz",two:"a-benn {0} zeiz",few:"a-benn {0} deiz",many:"a-benn {0} a zeizioù",other:"a-benn {0} deiz"},past:{one:"{0} deiz zo",two:"{0} zeiz zo",few:"{0} deiz zo",many:"{0} a zeizioù zo",other:"{0} deiz zo"}}},"day-short":{displayName:"d",relative:{0:"hiziv",1:"warcʼhoazh","-2":"dercʼhent-decʼh","-1":"decʼh"},relativeTime:{future:{one:"a-benn {0} d",two:"a-benn {0} d",few:"a-benn {0} d",many:"a-benn {0} d",other:"a-benn {0} d"},past:{one:"{0} d zo",two:"{0} d zo",few:"{0} d zo",many:"{0} d zo",other:"{0} d zo"}}},hour:{displayName:"eur",relative:{0:"dʼan eur-mañ"},relativeTime:{future:{one:"a-benn {0} eur",two:"a-benn {0} eur",few:"a-benn {0} eur",many:"a-benn {0} a eurioù",other:"a-benn {0} eur"},past:{one:"{0} eur zo",two:"{0} eur zo",few:"{0} eur zo",many:"{0} a eurioù zo",other:"{0} eur zo"}}},"hour-short":{displayName:"e",relative:{0:"dʼan eur-mañ"},relativeTime:{future:{one:"a-benn {0} e",two:"a-benn {0} e",few:"a-benn {0} e",many:"a-benn {0} e",other:"a-benn {0} e"},past:{one:"{0} e zo",two:"{0} e zo",few:"{0} e zo",many:"{0} e zo",other:"{0} e zo"}}},minute:{displayName:"munut",relative:{0:"this minute"},relativeTime:{future:{one:"a-benn {0} munut",two:"a-benn {0} vunut",few:"a-benn {0} munut",many:"a-benn {0} a vunutoù",other:"a-benn {0} munut"},past:{one:"{0} munut zo",two:"{0} vunut zo",few:"{0} munut zo",many:"{0} a vunutoù zo",other:"{0} munut zo"}}},"minute-short":{displayName:"min",relative:{0:"this minute"},relativeTime:{future:{one:"a-benn {0} min",two:"a-benn {0} min",few:"a-benn {0} min",many:"a-benn {0} min",other:"a-benn {0} min"},past:{one:"{0} min zo",two:"{0} min zo",few:"{0} min zo",many:"{0} min zo",other:"{0} min zo"}}},second:{displayName:"eilenn",relative:{0:"bremañ"},relativeTime:{future:{one:"a-benn {0} eilenn",two:"a-benn {0} eilenn",few:"a-benn {0} eilenn",many:"a-benn {0} a eilennoù",other:"a-benn {0} eilenn"},past:{one:"{0} eilenn zo",two:"{0} eilenn zo",few:"{0} eilenn zo",many:"{0} eilenn zo",other:"{0} eilenn zo"}}},"second-short":{displayName:"s",relative:{0:"brem."},relativeTime:{future:{one:"a-benn {0} s",two:"a-benn {0} s",few:"a-benn {0} s",many:"a-benn {0} s",other:"a-benn {0} s"},past:{one:"{0} s zo",two:"{0} s zo",few:"{0} s zo",many:"{0} s zo",other:"{0} s zo"}}}}},{locale:"brx",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"बोसोर",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"बोसोर",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"दान",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"दान",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"सान",relative:{0:"दिनै",1:"गाबोन","-1":"मैया"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"सान",relative:{0:"दिनै",1:"गाबोन","-1":"मैया"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"रिंगा",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"रिंगा",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"मिनिथ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"मिनिथ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"सेखेन्द",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"सेखेन्द",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"bs",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=a[1]||"",o=!a[1],n=r.slice(-1),s=r.slice(-2),l=i.slice(-1),h=i.slice(-2);return t?"other":o&&1==n&&11!=s||1==l&&11!=h?"one":o&&n>=2&&n<=4&&(s<12||s>14)||l>=2&&l<=4&&(h<12||h>14)?"few":"other"},fields:{year:{displayName:"godina",relative:{0:"ove godine",1:"sljedeće godine","-1":"prošle godine"},relativeTime:{future:{one:"za {0} godinu",few:"za {0} godine",other:"za {0} godina"},past:{one:"prije {0} godinu",few:"prije {0} godine",other:"prije {0} godina"}}},"year-short":{displayName:"god.",relative:{0:"ove godine",1:"sljedeće godine","-1":"prošle godine"},relativeTime:{future:{one:"za {0} god.",few:"za {0} god.",other:"za {0} god."},past:{one:"prije {0} god.",few:"prije {0} god.",other:"prije {0} god."}}},month:{displayName:"mjesec",relative:{0:"ovaj mjesec",1:"sljedeći mjesec","-1":"prošli mjesec"},relativeTime:{future:{one:"za {0} mjesec",few:"za {0} mjeseca",other:"za {0} mjeseci"},past:{one:"prije {0} mjesec",few:"prije {0} mjeseca",other:"prije {0} mjeseci"}}},"month-short":{displayName:"mj.",relative:{0:"ovaj mjesec",1:"sljedeći mjesec","-1":"prošli mjesec"},relativeTime:{future:{one:"za {0} mj.",few:"za {0} mj.",other:"za {0} mj."},past:{one:"prije {0} mj.",few:"prije {0} mj.",other:"prije {0} mj."}}},day:{displayName:"dan",relative:{0:"danas",1:"sutra",2:"prekosutra","-2":"prekjučer","-1":"jučer"},relativeTime:{future:{one:"za {0} dan",few:"za {0} dana",other:"za {0} dana"},past:{one:"prije {0} dan",few:"prije {0} dana",other:"prije {0} dana"}}},"day-short":{displayName:"dan",relative:{0:"danas",1:"sutra",2:"prekosutra","-2":"prekjučer","-1":"jučer"},relativeTime:{future:{one:"za {0} d.",few:"za {0} d.",other:"za {0} d."},past:{one:"prije {0} d.",few:"prije {0} d.",other:"prije {0} d."}}},hour:{displayName:"sat",relative:{0:"ovaj sat"},relativeTime:{future:{one:"za {0} sat",few:"za {0} sata",other:"za {0} sati"},past:{one:"prije {0} sat",few:"prije {0} sata",other:"prije {0} sati"}}},"hour-short":{displayName:"h",relative:{0:"ovaj sat"},relativeTime:{future:{one:"za {0} sat",few:"za {0} sata",other:"za {0} sati"},past:{one:"prije {0} sat",few:"prije {0} sata",other:"prije {0} sati"}}},minute:{displayName:"minuta",relative:{0:"ova minuta"},relativeTime:{future:{one:"za {0} minutu",few:"za {0} minute",other:"za {0} minuta"},past:{one:"prije {0} minutu",few:"prije {0} minute",other:"prije {0} minuta"}}},"minute-short":{displayName:"min.",relative:{0:"ova minuta"},relativeTime:{future:{one:"za {0} min.",few:"za {0} min.",other:"za {0} min."},past:{one:"prije {0} min.",few:"prije {0} min.",other:"prije {0} min."}}},second:{displayName:"sekunda",relative:{0:"sada"},relativeTime:{future:{one:"za {0} sekundu",few:"za {0} sekunde",other:"za {0} sekundi"},past:{one:"prije {0} sekundu",few:"prije {0} sekunde",other:"prije {0} sekundi"}}},"second-short":{displayName:"sek.",relative:{0:"sada"},relativeTime:{future:{one:"za {0} sek.",few:"za {0} sek.",other:"za {0} sek."},past:{one:"prije {0} sek.",few:"prije {0} sek.",other:"prije {0} sek."}}}}},{locale:"bs-Cyrl",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"година",relative:{0:"Ове године",1:"Следеће године","-1":"Прошле године"},relativeTime:{future:{one:"за {0} годину",few:"за {0} године",other:"за {0} година"},past:{one:"пре {0} годину",few:"пре {0} године",other:"пре {0} година"}}},"year-short":{displayName:"година",relative:{0:"Ове године",1:"Следеће године","-1":"Прошле године"},relativeTime:{future:{one:"за {0} годину",few:"за {0} године",other:"за {0} година"},past:{one:"пре {0} годину",few:"пре {0} године",other:"пре {0} година"}}},month:{displayName:"месец",relative:{0:"Овог месеца",1:"Следећег месеца","-1":"Прошлог месеца"},relativeTime:{future:{one:"за {0} месец",few:"за {0} месеца",other:"за {0} месеци"},past:{one:"пре {0} месец",few:"пре {0} месеца",other:"пре {0} месеци"}}},"month-short":{displayName:"месец",relative:{0:"Овог месеца",1:"Следећег месеца","-1":"Прошлог месеца"},relativeTime:{future:{one:"за {0} месец",few:"за {0} месеца",other:"за {0} месеци"},past:{one:"пре {0} месец",few:"пре {0} месеца",other:"пре {0} месеци"}}},day:{displayName:"дан",relative:{0:"данас",1:"сутра",2:"прекосутра","-2":"прекјуче","-1":"јуче"},relativeTime:{future:{one:"за {0} дан",few:"за {0} дана",other:"за {0} дана"},past:{one:"пре {0} дан",few:"пре {0} дана",other:"пре {0} дана"}}},"day-short":{displayName:"дан",relative:{0:"данас",1:"сутра",2:"прекосутра","-2":"прекјуче","-1":"јуче"},relativeTime:{future:{one:"за {0} дан",few:"за {0} дана",other:"за {0} дана"},past:{one:"пре {0} дан",few:"пре {0} дана",other:"пре {0} дана"}}},hour:{displayName:"час",relative:{0:"this hour"},relativeTime:{future:{one:"за {0} сат",few:"за {0} сата",other:"за {0} сати"},past:{one:"пре {0} сат",few:"пре {0} сата",other:"пре {0} сати"}}},"hour-short":{displayName:"час",relative:{0:"this hour"},relativeTime:{future:{one:"за {0} сат",few:"за {0} сата",other:"за {0} сати"},past:{one:"пре {0} сат",few:"пре {0} сата",other:"пре {0} сати"}}},minute:{displayName:"минут",relative:{0:"this minute"},relativeTime:{future:{one:"за {0} минут",few:"за {0} минута",other:"за {0} минута"},past:{one:"пре {0} минут",few:"пре {0} минута",other:"пре {0} минута"}}},"minute-short":{displayName:"минут",relative:{0:"this minute"},relativeTime:{future:{one:"за {0} минут",few:"за {0} минута",other:"за {0} минута"},past:{one:"пре {0} минут",few:"пре {0} минута",other:"пре {0} минута"}}},second:{displayName:"секунд",relative:{0:"now"},relativeTime:{future:{one:"за {0} секунд",few:"за {0} секунде",other:"за {0} секунди"},past:{one:"пре {0} секунд",few:"пре {0} секунде",other:"пре {0} секунди"}}},"second-short":{displayName:"секунд",relative:{0:"now"},relativeTime:{future:{one:"за {0} секунд",few:"за {0} секунде",other:"за {0} секунди"},past:{one:"пре {0} секунд",few:"пре {0} секунде",other:"пре {0} секунди"}}}}},{locale:"bs-Latn",parentLocale:"bs"},{locale:"ca",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?1==e||3==e?"one":2==e?"two":4==e?"few":"other":1==e&&a?"one":"other"},fields:{year:{displayName:"any",relative:{0:"enguany",1:"l’any que ve","-1":"l’any passat"},relativeTime:{future:{one:"d’aquí a {0} any",other:"d’aquí a {0} anys"},past:{one:"fa {0} any",other:"fa {0} anys"}}},"year-short":{displayName:"any",relative:{0:"enguany",1:"l’any que ve","-1":"l’any passat"},relativeTime:{future:{one:"d’aquí a {0} any",other:"d’aquí a {0} anys"},past:{one:"fa {0} any",other:"fa {0} anys"}}},month:{displayName:"mes",relative:{0:"aquest mes",1:"el mes que ve","-1":"el mes passat"},relativeTime:{future:{one:"d’aquí a {0} mes",other:"d’aquí a {0} mesos"},past:{one:"fa {0} mes",other:"fa {0} mesos"}}},"month-short":{displayName:"mes",relative:{0:"aquest mes",1:"el mes que ve","-1":"el mes passat"},relativeTime:{future:{one:"d’aquí a {0} mes",other:"d’aquí a {0} mesos"},past:{one:"fa {0} mes",other:"fa {0} mesos"}}},day:{displayName:"dia",relative:{0:"avui",1:"demà",2:"demà passat","-2":"abans-d’ahir","-1":"ahir"},relativeTime:{future:{one:"d’aquí a {0} dia",other:"d’aquí a {0} dies"},past:{one:"fa {0} dia",other:"fa {0} dies"}}},"day-short":{displayName:"dia",relative:{0:"avui",1:"demà",2:"demà passat","-2":"abans-d’ahir","-1":"ahir"},relativeTime:{future:{one:"d’aquí a {0} dia",other:"d’aquí a {0} dies"},past:{one:"fa {0} dia",other:"fa {0} dies"}}},hour:{displayName:"hora",relative:{0:"aquesta hora"},relativeTime:{future:{one:"d’aquí a {0} hora",other:"d’aquí a {0} hores"},past:{one:"fa {0} hora",other:"fa {0} hores"}}},"hour-short":{displayName:"h",relative:{0:"aquesta hora"},relativeTime:{future:{one:"d’aquí a {0} h",other:"d’aquí a {0} h"},past:{one:"fa {0} h",other:"fa {0} h"}}},minute:{displayName:"minut",relative:{0:"aquest minut"},relativeTime:{future:{one:"d’aquí a {0} minut",other:"d’aquí a {0} minuts"},past:{one:"fa {0} minut",other:"fa {0} minuts"}}},"minute-short":{displayName:"min",relative:{0:"aquest minut"},relativeTime:{future:{one:"d’aquí a {0} min",other:"d’aquí a {0} min"},past:{one:"fa {0} min",other:"fa {0} min"}}},second:{displayName:"segon",relative:{0:"ara"},relativeTime:{future:{one:"d’aquí a {0} segon",other:"d’aquí a {0} segons"},past:{one:"fa {0} segon",other:"fa {0} segons"}}},"second-short":{displayName:"s",relative:{0:"ara"},relativeTime:{future:{one:"d’aquí a {0} s",other:"d’aquí a {0} s"},past:{one:"fa {0} s",other:"fa {0} s"}}}}},{locale:"ca-AD",parentLocale:"ca"},{locale:"ca-ES-VALENCIA",parentLocale:"ca-ES",fields:{year:{displayName:"any",relative:{0:"enguany",1:"l’any que ve","-1":"l’any passat"},relativeTime:{future:{one:"d’aquí a {0} any",other:"d’aquí a {0} anys"},past:{one:"fa {0} any",other:"fa {0} anys"}}},"year-short":{displayName:"any",relative:{0:"enguany",1:"l’any que ve","-1":"l’any passat"},relativeTime:{future:{one:"d’aquí a {0} any",other:"d’aquí a {0} anys"},past:{one:"fa {0} any",other:"fa {0} anys"}}},month:{displayName:"mes",relative:{0:"aquest mes",1:"el mes que ve","-1":"el mes passat"},relativeTime:{future:{one:"d’aquí a {0} mes",other:"d’aquí a {0} mesos"},past:{one:"fa {0} mes",other:"fa {0} mesos"}}},"month-short":{displayName:"mes",relative:{0:"aquest mes",1:"el mes que ve","-1":"el mes passat"},relativeTime:{future:{one:"d’aquí a {0} mes",other:"d’aquí a {0} mesos"},past:{one:"fa {0} mes",other:"fa {0} mesos"}}},day:{displayName:"dia",relative:{0:"avui",1:"demà",2:"demà passat","-2":"abans-d’ahir","-1":"ahir"},relativeTime:{future:{one:"d’aquí a {0} dia",other:"d’aquí a {0} dies"},past:{one:"fa {0} dia",other:"fa {0} dies"}}},"day-short":{displayName:"dia",relative:{0:"avui",1:"demà",2:"demà passat","-2":"abans-d’ahir","-1":"ahir"},relativeTime:{future:{one:"d’aquí a {0} dia",other:"d’aquí a {0} dies"},past:{one:"fa {0} dia",other:"fa {0} dies"}}},hour:{displayName:"hora",relative:{0:"aquesta hora"},relativeTime:{future:{one:"d’aquí a {0} hora",other:"d’aquí a {0} hores"},past:{one:"fa {0} hora",other:"fa {0} hores"}}},"hour-short":{displayName:"h",relative:{0:"aquesta hora"},relativeTime:{future:{one:"d’aquí a {0} h",other:"d’aquí a {0} h"},past:{one:"fa {0} h",other:"fa {0} h"}}},minute:{displayName:"minut",relative:{0:"aquest minut"},relativeTime:{future:{one:"d’aquí a {0} minut",other:"d’aquí a {0} minuts"},past:{one:"fa {0} minut",other:"fa {0} minuts"}}},"minute-short":{displayName:"min",relative:{0:"aquest minut"},relativeTime:{future:{one:"d’aquí a {0} min",other:"d’aquí a {0} min"},past:{one:"fa {0} min",other:"fa {0} min"}}},second:{displayName:"segon",relative:{0:"ara"},relativeTime:{future:{one:"d’aquí a {0} segon",other:"d’aquí a {0} segons"},past:{one:"fa {0} segon",other:"fa {0} segons"}}},"second-short":{displayName:"s",relative:{0:"ara"},relativeTime:{future:{one:"d’aquí a {0} s",other:"d’aquí a {0} s"},past:{one:"fa {0} s",other:"fa {0} s"}}}}},{locale:"ca-ES",parentLocale:"ca"},{locale:"ca-FR",parentLocale:"ca"},{locale:"ca-IT",parentLocale:"ca"},{locale:"ccp",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"𑄝𑄧𑄏𑄧𑄢𑄴",relative:{0:"𑄃𑄬 𑄝𑄧𑄏𑄧𑄢𑄴",1:"𑄎𑄬𑄢𑄧 𑄝𑄧𑄏𑄧𑄢𑄴","-1":"𑄉𑄬𑄣𑄳𑄠𑄬 𑄝𑄧𑄏𑄧𑄢𑄴"},relativeTime:{future:{one:"{0} 𑄝𑄧𑄏𑄧𑄢𑄬",other:"{0} 𑄝𑄧𑄏𑄧𑄢𑄬"},past:{one:"{0} 𑄝𑄧𑄏𑄧𑄢𑄴 𑄃𑄉𑄬",other:"{0} 𑄝𑄧𑄏𑄧𑄢𑄴 𑄃𑄉𑄬"}}},"year-short":{displayName:"𑄝𑄧𑄏𑄧𑄢𑄴",relative:{0:"𑄃𑄳𑄆𑄬 𑄝𑄧𑄏𑄧𑄢𑄴",1:"𑄛𑄧𑄢𑄬 𑄝𑄧𑄏𑄧𑄢𑄴","-1":"𑄉𑄬𑄣𑄳𑄠𑄬 𑄝𑄧𑄏𑄧𑄢𑄴"},relativeTime:{future:{one:"{0} 𑄝𑄧𑄏𑄧𑄢𑄬",other:"{0} 𑄝𑄧𑄏𑄧𑄢𑄬"},past:{one:"{0} 𑄝𑄧𑄏𑄧𑄢𑄴 𑄃𑄉𑄬",other:"{0} 𑄝𑄧𑄏𑄧𑄢𑄴 𑄃𑄉𑄬"}}},month:{displayName:"𑄟𑄏𑄴",relative:{0:"𑄃𑄳𑄆𑄬 𑄟𑄏𑄴",1:"𑄛𑄧𑄢𑄬 𑄟𑄏𑄴","-1":"𑄉𑄬𑄣𑄧𑄘𑄬 𑄟𑄏𑄴"},relativeTime:{future:{one:"{0} 𑄟𑄏𑄬",other:"{0} 𑄟𑄏𑄬"},past:{one:"{0} 𑄟𑄏𑄧 𑄃𑄉𑄬",other:"{0} 𑄟𑄏𑄧 𑄃𑄉𑄬"}}},"month-short":{displayName:"𑄟𑄏𑄴",relative:{0:"𑄃𑄳𑄆𑄬 𑄟𑄏𑄴",1:"𑄛𑄧𑄢𑄬 𑄟𑄏𑄴","-1":"𑄉𑄬𑄣𑄧𑄉𑄬 𑄟𑄏𑄴"},relativeTime:{future:{one:"{0} 𑄟𑄏𑄬",other:"{0} 𑄟𑄏𑄬"},past:{one:"{0} 𑄇𑄏𑄧 𑄃𑄉𑄬",other:"{0} 𑄟𑄏𑄧 𑄃𑄉𑄬"}}},day:{displayName:"𑄘𑄨𑄚𑄴",relative:{0:"𑄃𑄬𑄌𑄴𑄥𑄳𑄠",1:"𑄃𑄬𑄎𑄬𑄖𑄴𑄖𑄳𑄠𑄇𑄬𑄣𑄳𑄠𑄬",2:"𑄃𑄬𑄎𑄬𑄖𑄴𑄖𑄳𑄠𑄬 𑄛𑄧𑄢𑄴𑄥𑄪","-2":"𑄉𑄬𑄣𑄧𑄘𑄬 𑄛𑄧𑄢𑄴𑄥𑄪","-1":"𑄉𑄬𑄣𑄴𑄣𑄳𑄠𑄇𑄬𑄣𑄳𑄠𑄬"},relativeTime:{future:{one:"{0} 𑄘𑄨𑄚𑄮 𑄟𑄧𑄖𑄴𑄙𑄳𑄠",other:"{0} 𑄘𑄨𑄚𑄮 𑄟𑄧𑄖𑄴𑄙𑄳𑄠"},past:{one:"{0} 𑄘𑄨𑄚𑄴 𑄃𑄉𑄬",other:"{0} 𑄘𑄨𑄚𑄴 𑄃𑄉𑄬"}}},"day-short":{displayName:"𑄘𑄨𑄚𑄴",relative:{0:"𑄃𑄬𑄌𑄴𑄥𑄳𑄠𑄬",1:"𑄃𑄬𑄎𑄬𑄖𑄴𑄖𑄳𑄠𑄇𑄬𑄣𑄴𑄣𑄳𑄠𑄬",2:"𑄃𑄬𑄎𑄬𑄖𑄴𑄖𑄳𑄠𑄇𑄬𑄣𑄴𑄣𑄳𑄠𑄬 𑄛𑄧𑄢𑄴𑄥𑄪","-2":"𑄉𑄬𑄣𑄧𑄘𑄬 𑄛𑄧𑄢𑄴𑄥𑄪","-1":"𑄉𑄬𑄣𑄴𑄣𑄳𑄠𑄇𑄬𑄣𑄴𑄣𑄳𑄠𑄬"},relativeTime:{future:{one:"{0} 𑄘𑄨𑄚𑄮 𑄟𑄧𑄖𑄴𑄙𑄳𑄠",other:"{0} 𑄘𑄨𑄚𑄮 𑄟𑄧𑄖𑄴𑄙𑄳𑄠"},past:{one:"{0} 𑄘𑄨𑄚𑄴 𑄃𑄉𑄬",other:"{0} 𑄘𑄨𑄚𑄴 𑄃𑄉𑄬"}}},hour:{displayName:"𑄊𑄮𑄚𑄴𑄓",relative:{0:"𑄃𑄳𑄆𑄬 𑄊𑄮𑄚𑄴𑄓𑄠𑄴"},relativeTime:{future:{one:"{0} 𑄊𑄮𑄚𑄴𑄓𑄠𑄴",other:"{0} 𑄊𑄮𑄚𑄴𑄓𑄠𑄴"},past:{one:"{0} 𑄊𑄮𑄚𑄴𑄓 𑄃𑄉𑄬",other:"{0} 𑄊𑄮𑄚𑄴𑄓 𑄃𑄉𑄬"}}},"hour-short":{displayName:"𑄊𑄮𑄚𑄴𑄓",relative:{0:"𑄃𑄳𑄆𑄬 𑄊𑄮𑄚𑄴𑄓𑄠𑄴"},relativeTime:{future:{one:"{0} 𑄊𑄮𑄚𑄴𑄓𑄠𑄴",other:"{0} 𑄊𑄮𑄚𑄴𑄓𑄠𑄴"},past:{one:"{0} 𑄊𑄮𑄚𑄴𑄓 𑄃𑄉𑄬",other:"{0} 𑄊𑄮𑄚𑄴𑄓 𑄃𑄉𑄬"}}},minute:{displayName:"𑄟𑄨𑄚𑄨𑄖𑄴",relative:{0:"𑄃𑄳𑄆𑄬 𑄟𑄨𑄚𑄨𑄖𑄴"},relativeTime:{future:{one:"{0} 𑄟𑄨𑄚𑄨𑄘𑄬",other:"{0} 𑄟𑄨𑄚𑄨𑄘𑄬"},past:{one:"{0} 𑄟𑄨𑄚𑄨𑄖𑄴 𑄃𑄉𑄬",other:"{0} 𑄟𑄨𑄚𑄨𑄖𑄴 𑄃𑄉𑄬"}}},"minute-short":{displayName:"𑄟𑄨𑄚𑄨𑄖𑄴",relative:{0:"𑄃𑄳𑄆𑄬 𑄟𑄨𑄚𑄨𑄖𑄴"},relativeTime:{future:{one:"{0} 𑄟𑄨𑄚𑄨𑄘𑄬",other:"{0} 𑄟𑄨𑄚𑄨𑄘𑄬"},past:{one:"{0} 𑄟𑄨𑄚𑄨𑄖𑄴 𑄃𑄉𑄬",other:"{0} 𑄟𑄨𑄚𑄨𑄖𑄴 𑄃𑄉𑄬"}}},second:{displayName:"𑄥𑄬𑄉𑄬𑄚𑄴",relative:{0:"𑄃𑄨𑄇𑄴𑄅𑄚𑄪"},relativeTime:{future:{one:"{0} 𑄥𑄬𑄉𑄬𑄚𑄴𑄘𑄬",other:"{0} 𑄥𑄬𑄉𑄬𑄚𑄴𑄘𑄬"},past:{one:"{0} 𑄥𑄬𑄉𑄬𑄚𑄴 𑄃𑄉𑄬",other:"{0} 𑄥𑄬𑄉𑄬𑄚𑄴 𑄃𑄉𑄬"}}},"second-short":{displayName:"𑄥𑄬𑄉𑄬𑄚𑄴",relative:{0:"𑄃𑄨𑄇𑄴𑄅𑄚𑄪"},relativeTime:{future:{one:"{0} 𑄥𑄬𑄉𑄬𑄚𑄴𑄘𑄬",other:"{0} 𑄥𑄬𑄉𑄬𑄚𑄴𑄘𑄬"},past:{one:"{0} 𑄥𑄬𑄉𑄬𑄚𑄴 𑄃𑄉𑄬",other:"{0} 𑄥𑄬𑄉𑄬𑄚𑄴 𑄃𑄉𑄬"}}}}},{locale:"ccp-IN",parentLocale:"ccp"},{locale:"ce",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"шо",relative:{0:"карарчу шарахь",1:"рогӀерчу шарахь","-1":"даханчу шарахь"},relativeTime:{future:{one:"{0} шо даьлча",other:"{0} шо даьлча"},past:{one:"{0} шо хьалха",other:"{0} шо хьалха"}}},"year-short":{displayName:"ш.",relative:{0:"карарчу шарахь",1:"рогӀерчу шарахь","-1":"даханчу шарахь"},relativeTime:{future:{one:"{0} ш. даьлча",other:"{0} ш. даьлча"},past:{one:"{0} ш. хьалха",other:"{0} ш. хьалха"}}},month:{displayName:"бутт",relative:{0:"карарчу баттахь",1:"рогӀерчу баттахь","-1":"баханчу баттахь"},relativeTime:{future:{one:"{0} бутт баьлча",other:"{0} бутт баьлча"},past:{one:"{0} бутт хьалха",other:"{0} бутт хьалха"}}},"month-short":{displayName:"бут.",relative:{0:"карарчу баттахь",1:"рогӀерчу баттахь","-1":"баханчу баттахь"},relativeTime:{future:{one:"{0} б. баьлча",other:"{0} б. баьлча"},past:{one:"{0} б. хьалха",other:"{0} б. хьалха"}}},day:{displayName:"де",relative:{0:"тахана",1:"кхана","-1":"селхана"},relativeTime:{future:{one:"{0} де даьлча",other:"{0} де даьлча"},past:{one:"{0} де хьалха",other:"{0} де хьалха"}}},"day-short":{displayName:"де",relative:{0:"тахана",1:"кхана","-1":"селхана"},relativeTime:{future:{one:"{0} д. даьлча",other:"{0} д. даьлча"},past:{one:"{0} д. хьалха",other:"{0} де хьалха"}}},hour:{displayName:"сахьт",relative:{0:"хӀокху сахьтехь"},relativeTime:{future:{one:"{0} сахьт даьлча",other:"{0} сахьт даьлча"},past:{one:"{0} сахьт хьалха",other:"{0} сахьт хьалха"}}},"hour-short":{displayName:"сахь.",relative:{0:"хӀокху сахьтехь"},relativeTime:{future:{one:"{0} сахь. даьлча",other:"{0} сахь. даьлча"},past:{one:"{0} сахь. хьалха",other:"{0} сахь. хьалха"}}},minute:{displayName:"минот",relative:{0:"хӀокху минотехь"},relativeTime:{future:{one:"{0} минот яьлча",other:"{0} минот яьлча"},past:{one:"{0} минот хьалха",other:"{0} минот хьалха"}}},"minute-short":{displayName:"мин.",relative:{0:"хӀокху минотехь"},relativeTime:{future:{one:"{0} мин. яьлча",other:"{0} мин. яьлча"},past:{one:"{0} мин. хьалха",other:"{0} мин. хьалха"}}},second:{displayName:"секунд",relative:{0:"хӀинца"},relativeTime:{future:{one:"{0} секунд яьлча",other:"{0} секунд яьлча"},past:{one:"{0} секунд хьалха",other:"{0} секунд хьалха"}}},"second-short":{displayName:"сек.",relative:{0:"хӀинца"},relativeTime:{future:{one:"{0} сек. яьлча",other:"{0} сек. яьлча"},past:{one:"{0} сек. хьалха",other:"{0} сек. хьалха"}}}}},{locale:"cgg",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Omwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Omwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Omwezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Omwezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Eizooba",relative:{0:"Erizooba",1:"Nyenkyakare","-1":"Nyomwabazyo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Eizooba",relative:{0:"Erizooba",1:"Nyenkyakare","-1":"Nyomwabazyo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Shaaha",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Shaaha",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Edakiika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Edakiika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Obucweka/Esekendi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Obucweka/Esekendi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"chr",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"ᎤᏕᏘᏴᏌᏗᏒᎢ",relative:{0:"ᎯᎠ ᏧᏕᏘᏴᏒᏘ",1:"ᎡᏘᏴᎢ","-1":"ᎡᏘ ᏥᎨᏒ"},relativeTime:{future:{one:"ᎾᎿ {0} ᎤᏕᏘᏴᏌᏗᏒᎢ",other:"ᎾᎿ {0} ᎢᏧᏕᏘᏴᏌᏗᏒᎢ"},past:{one:"{0} ᎤᏕᏘᏴᏌᏗᏒᎢ ᏥᎨᏒ",other:"{0} ᎢᏧᏕᏘᏴᏌᏗᏒᎢ ᏥᎨᏒ"}}},"year-short":{displayName:"ᎤᏕ.",relative:{0:"ᎯᎠ ᏧᏕᏘᏴᏒᏘ",1:"ᎡᏘᏴᎢ","-1":"ᎡᏘ ᏥᎨᏒ"},relativeTime:{future:{one:"ᎾᎿ {0} ᎤᏕ.",other:"ᎾᎿ {0} ᎤᏕ."},past:{one:"{0} ᎤᏕ. ᏥᎨᏒ",other:"{0} ᎤᏕ. ᏥᎨᏒ"}}},month:{displayName:"ᎧᎸᎢ",relative:{0:"ᎯᎠ ᎧᎸᎢ",1:"ᏔᎵᏁ ᎧᎸᎢ","-1":"ᎧᎸᎢ ᏥᎨᏒ"},relativeTime:{future:{one:"ᎾᎿ {0} ᎧᎸᎢ",other:"ᎾᎿ {0} ᏗᎧᎸᎢ"},past:{one:"{0} ᎧᎸᎢ ᏥᎨᏒ",other:"{0} ᏗᎧᎸᎢ ᏥᎨᏒ"}}},"month-short":{displayName:"ᎧᎸ.",relative:{0:"ᎯᎠ ᎧᎸᎢ",1:"ᏔᎵᏁ ᎧᎸᎢ","-1":"ᎧᎸᎢ ᏥᎨᏒ"},relativeTime:{future:{one:"ᎾᎿ {0} ᎧᎸ.",other:"ᎾᎿ {0} ᎧᎸ."},past:{one:"{0} ᎧᎸ. ᏥᎨᏒ",other:"{0} ᎧᎸ. ᏥᎨᏒ"}}},day:{displayName:"ᎢᎦ",relative:{0:"ᎪᎯ ᎢᎦ",1:"ᏌᎾᎴᎢ","-1":"ᏒᎯ"},relativeTime:{future:{one:"ᎾᎿ {0} ᎢᎦ",other:"ᎾᎿ {0} ᎯᎸᏍᎩ ᏧᏒᎯᏛ"},past:{one:"{0} ᎢᎦ ᏥᎨᏒ",other:"{0} ᎯᎸᏍᎩ ᏧᏒᎯᏛ ᏥᎨᏒ"}}},"day-short":{displayName:"ᎢᎦ",relative:{0:"ᎪᎯ ᎢᎦ",1:"ᏌᎾᎴᎢ","-1":"ᏒᎯ"},relativeTime:{future:{one:"ᎾᎿ {0} ᎢᎦ",other:"ᎾᎿ {0} ᎯᎸᏍᎩ ᏧᏒᎯᏛ"},past:{one:"{0} ᎢᎦ ᏥᎨᏒ",other:"{0} ᎯᎸᏍᎩ ᏧᏒᎯᏛ ᏥᎨᏒ"}}},hour:{displayName:"ᏑᏟᎶᏓ",relative:{0:"ᎯᎠ ᏑᏟᎶᏓ"},relativeTime:{future:{one:"ᎾᎿ {0} ᏑᏟᎶᏓ",other:"ᎾᎿ {0} ᎢᏳᏟᎶᏓ"},past:{one:"{0} ᏑᏟᎶᏓ ᏥᎨᏒ",other:"{0} ᎢᏳᏟᎶᏓ ᏥᎨᏒ"}}},"hour-short":{displayName:"ᏑᏟ.",relative:{0:"ᎯᎠ ᏑᏟᎶᏓ"},relativeTime:{future:{one:"ᎾᎿ {0} ᏑᏟ.",other:"ᎾᎿ {0} ᏑᏟ."},past:{one:"{0} ᏑᏟ. ᏥᎨᏒ",other:"{0} ᏑᏟ. ᏥᎨᏒ"}}},minute:{displayName:"ᎢᏯᏔᏬᏍᏔᏅ",relative:{0:"ᎯᎠ ᎢᏯᏔᏬᏍᏔᏅ"},relativeTime:{future:{one:"ᎾᎿ {0} ᎢᏯᏔᏬᏍᏔᏅ",other:"ᎾᎿ {0} ᎢᏯᏔᏬᏍᏔᏅ"},past:{one:"{0} ᎢᏯᏔᏬᏍᏔᏅ ᏥᎨᏒ",other:"{0} ᎢᏯᏔᏬᏍᏔᏅ ᏥᎨᏒ"}}},"minute-short":{displayName:"ᎢᏯᏔ.",relative:{0:"ᎯᎠ ᎢᏯᏔᏬᏍᏔᏅ"},relativeTime:{future:{one:"ᎾᎿ {0} ᎢᏯᏔ.",other:"ᎾᎿ {0} ᎢᏯᏔ."},past:{one:"{0} ᎢᏯᏔ. ᏥᎨᏒ",other:"{0} ᎢᏯᏔ. ᏥᎨᏒ"}}},second:{displayName:"ᎠᏎᏢ",relative:{0:"ᏃᏊ"},relativeTime:{future:{one:"ᎾᎿ {0} ᎠᏎᏢ",other:"ᎾᎿ {0} ᏓᏓᎾᏩᏍᎬ ᏥᎨᏒ"},past:{one:"{0} ᎠᏎᏢ ᏥᎨᏒ",other:"{0} ᏓᏓᎾᏩᏍᎬ ᏥᎨᏒ"}}},"second-short":{displayName:"ᎠᏎ.",relative:{0:"ᏃᏊ"},relativeTime:{future:{one:"ᎾᎿ {0} ᎠᏎ.",other:"ᎾᎿ {0} ᎠᏎ."},past:{one:"{0} ᎠᏎ. ᏥᎨᏒ",other:"{0} ᎠᏎ. ᏥᎨᏒ"}}}}},{locale:"ckb",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ckb-IR",parentLocale:"ckb"},{locale:"cs",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=!a[1];return t?"other":1==e&&i?"one":r>=2&&r<=4&&i?"few":i?"other":"many"},fields:{year:{displayName:"rok",relative:{0:"tento rok",1:"příští rok","-1":"minulý rok"},relativeTime:{future:{one:"za {0} rok",few:"za {0} roky",many:"za {0} roku",other:"za {0} let"},past:{one:"před {0} rokem",few:"před {0} lety",many:"před {0} roku",other:"před {0} lety"}}},"year-short":{displayName:"r.",relative:{0:"tento rok",1:"příští rok","-1":"minulý rok"},relativeTime:{future:{one:"za {0} r.",few:"za {0} r.",many:"za {0} r.",other:"za {0} l."},past:{one:"před {0} r.",few:"před {0} r.",many:"před {0} r.",other:"před {0} l."}}},month:{displayName:"měsíc",relative:{0:"tento měsíc",1:"příští měsíc","-1":"minulý měsíc"},relativeTime:{future:{one:"za {0} měsíc",few:"za {0} měsíce",many:"za {0} měsíce",other:"za {0} měsíců"},past:{one:"před {0} měsícem",few:"před {0} měsíci",many:"před {0} měsíce",other:"před {0} měsíci"}}},"month-short":{displayName:"měs.",relative:{0:"tento měs.",1:"příští měs.","-1":"minulý měs."},relativeTime:{future:{one:"za {0} měs.",few:"za {0} měs.",many:"za {0} měs.",other:"za {0} měs."},past:{one:"před {0} měs.",few:"před {0} měs.",many:"před {0} měs.",other:"před {0} měs."}}},day:{displayName:"den",relative:{0:"dnes",1:"zítra",2:"pozítří","-2":"předevčírem","-1":"včera"},relativeTime:{future:{one:"za {0} den",few:"za {0} dny",many:"za {0} dne",other:"za {0} dní"},past:{one:"před {0} dnem",few:"před {0} dny",many:"před {0} dne",other:"před {0} dny"}}},"day-short":{displayName:"den",relative:{0:"dnes",1:"zítra",2:"pozítří","-2":"předevčírem","-1":"včera"},relativeTime:{future:{one:"za {0} den",few:"za {0} dny",many:"za {0} dne",other:"za {0} dní"},past:{one:"před {0} dnem",few:"před {0} dny",many:"před {0} dne",other:"před {0} dny"}}},hour:{displayName:"hodina",relative:{0:"tuto hodinu"},relativeTime:{future:{one:"za {0} hodinu",few:"za {0} hodiny",many:"za {0} hodiny",other:"za {0} hodin"},past:{one:"před {0} hodinou",few:"před {0} hodinami",many:"před {0} hodiny",other:"před {0} hodinami"}}},"hour-short":{displayName:"h",relative:{0:"tuto hodinu"},relativeTime:{future:{one:"za {0} h",few:"za {0} h",many:"za {0} h",other:"za {0} h"},past:{one:"před {0} h",few:"před {0} h",many:"před {0} h",other:"před {0} h"}}},minute:{displayName:"minuta",relative:{0:"tuto minutu"},relativeTime:{future:{one:"za {0} minutu",few:"za {0} minuty",many:"za {0} minuty",other:"za {0} minut"},past:{one:"před {0} minutou",few:"před {0} minutami",many:"před {0} minuty",other:"před {0} minutami"}}},"minute-short":{displayName:"min",relative:{0:"tuto minutu"},relativeTime:{future:{one:"za {0} min",few:"za {0} min",many:"za {0} min",other:"za {0} min"},past:{one:"před {0} min",few:"před {0} min",many:"před {0} min",other:"před {0} min"}}},second:{displayName:"sekunda",relative:{0:"nyní"},relativeTime:{future:{one:"za {0} sekundu",few:"za {0} sekundy",many:"za {0} sekundy",other:"za {0} sekund"},past:{one:"před {0} sekundou",few:"před {0} sekundami",many:"před {0} sekundy",other:"před {0} sekundami"}}},"second-short":{displayName:"s",relative:{0:"nyní"},relativeTime:{future:{one:"za {0} s",few:"za {0} s",many:"za {0} s",other:"za {0} s"},past:{one:"před {0} s",few:"před {0} s",many:"před {0} s",other:"před {0} s"}}}}},{locale:"cu",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"cy",pluralRuleFunction:function(e,t){return t?0==e||7==e||8==e||9==e?"zero":1==e?"one":2==e?"two":3==e||4==e?"few":5==e||6==e?"many":"other":0==e?"zero":1==e?"one":2==e?"two":3==e?"few":6==e?"many":"other"},fields:{year:{displayName:"blwyddyn",relative:{0:"eleni",1:"blwyddyn nesaf","-1":"llynedd"},relativeTime:{future:{zero:"ymhen {0} mlynedd",one:"ymhen blwyddyn",two:"ymhen {0} flynedd",few:"ymhen {0} blynedd",many:"ymhen {0} blynedd",other:"ymhen {0} mlynedd"},past:{zero:"{0} o flynyddoedd yn ôl",one:"blwyddyn yn ôl",two:"{0} flynedd yn ôl",few:"{0} blynedd yn ôl",many:"{0} blynedd yn ôl",other:"{0} o flynyddoedd yn ôl"}}},"year-short":{displayName:"bl.",relative:{0:"eleni",1:"blwyddyn nesaf","-1":"llynedd"},relativeTime:{future:{zero:"ymhen {0} mlynedd",one:"ymhen blwyddyn",two:"ymhen {0} flynedd",few:"ymhen {0} blynedd",many:"ymhen {0} blynedd",other:"ymhen {0} mlynedd"},past:{zero:"{0} o flynyddoedd yn ôl",one:"blwyddyn yn ôl",two:"{0} flynedd yn ôl",few:"{0} blynedd yn ôl",many:"{0} blynedd yn ôl",other:"{0} o flynyddoedd yn ôl"}}},month:{displayName:"mis",relative:{0:"y mis hwn",1:"mis nesaf","-1":"mis diwethaf"},relativeTime:{future:{zero:"ymhen {0} mis",one:"ymhen mis",two:"ymhen deufis",few:"ymhen {0} mis",many:"ymhen {0} mis",other:"ymhen {0} mis"},past:{zero:"{0} mis yn ôl",one:"{0} mis yn ôl",two:"{0} fis yn ôl",few:"{0} mis yn ôl",many:"{0} mis yn ôl",other:"{0} mis yn ôl"}}},"month-short":{displayName:"mis",relative:{0:"y mis hwn",1:"mis nesaf","-1":"mis diwethaf"},relativeTime:{future:{zero:"ymhen {0} mis",one:"ymhen mis",two:"ymhen deufis",few:"ymhen {0} mis",many:"ymhen {0} mis",other:"ymhen {0} mis"},past:{zero:"{0} mis yn ôl",one:"{0} mis yn ôl",two:"deufis yn ôl",few:"{0} mis yn ôl",many:"{0} mis yn ôl",other:"{0} mis yn ôl"}}},day:{displayName:"diwrnod",relative:{0:"heddiw",1:"yfory",2:"drennydd","-2":"echdoe","-1":"ddoe"},relativeTime:{future:{zero:"ymhen {0} diwrnod",one:"ymhen diwrnod",two:"ymhen deuddydd",few:"ymhen {0} diwrnod",many:"ymhen {0} diwrnod",other:"ymhen {0} diwrnod"},past:{zero:"{0} diwrnod yn ôl",one:"{0} diwrnod yn ôl",two:"{0} ddiwrnod yn ôl",few:"{0} diwrnod yn ôl",many:"{0} diwrnod yn ôl",other:"{0} diwrnod yn ôl"}}},"day-short":{displayName:"diwrnod",relative:{0:"heddiw",1:"yfory",2:"drennydd","-2":"echdoe","-1":"ddoe"},relativeTime:{future:{zero:"ymhen {0} diwrnod",one:"ymhen diwrnod",two:"ymhen deuddydd",few:"ymhen {0} diwrnod",many:"ymhen {0} diwrnod",other:"ymhen {0} diwrnod"},past:{zero:"{0} diwrnod yn ôl",one:"{0} diwrnod yn ôl",two:"{0} ddiwrnod yn ôl",few:"{0} diwrnod yn ôl",many:"{0} diwrnod yn ôl",other:"{0} diwrnod yn ôl"}}},hour:{displayName:"awr",relative:{0:"yr awr hon"},relativeTime:{future:{zero:"ymhen {0} awr",one:"ymhen awr",two:"ymhen {0} awr",few:"ymhen {0} awr",many:"ymhen {0} awr",other:"ymhen {0} awr"},past:{zero:"{0} awr yn ôl",one:"{0} awr yn ôl",two:"{0} awr yn ôl",few:"{0} awr yn ôl",many:"{0} awr yn ôl",other:"{0} awr yn ôl"}}},"hour-short":{displayName:"awr",relative:{0:"yr awr hon"},relativeTime:{future:{zero:"ymhen {0} awr",one:"ymhen awr",two:"ymhen {0} awr",few:"ymhen {0} awr",many:"ymhen {0} awr",other:"ymhen {0} awr"},past:{zero:"{0} awr yn ôl",one:"awr yn ôl",two:"{0} awr yn ôl",few:"{0} awr yn ôl",many:"{0} awr yn ôl",other:"{0} awr yn ôl"}}},minute:{displayName:"munud",relative:{0:"y funud hon"},relativeTime:{future:{zero:"ymhen {0} munud",one:"ymhen {0} munud",two:"ymhen {0} munud",few:"ymhen {0} munud",many:"ymhen {0} munud",other:"ymhen {0} munud"},past:{zero:"{0} munud yn ôl",one:"{0} munud yn ôl",two:"{0} munud yn ôl",few:"{0} munud yn ôl",many:"{0} munud yn ôl",other:"{0} munud yn ôl"}}},"minute-short":{displayName:"mun.",relative:{0:"y funud hon"},relativeTime:{future:{zero:"ymhen {0} munud",one:"ymhen {0} mun.",two:"ymhen {0} fun.",few:"ymhen {0} munud",many:"ymhen {0} munud",other:"ymhen {0} munud"},past:{zero:"{0} munud yn ôl",one:"{0} munud yn ôl",two:"{0} fun. yn ôl",few:"{0} munud yn ôl",many:"{0} munud yn ôl",other:"{0} munud yn ôl"}}},second:{displayName:"eiliad",relative:{0:"nawr"},relativeTime:{future:{zero:"ymhen {0} eiliad",one:"ymhen {0} eiliad",two:"ymhen {0} eiliad",few:"ymhen {0} eiliad",many:"ymhen {0} eiliad",other:"ymhen {0} eiliad"},past:{zero:"{0} eiliad yn ôl",one:"{0} eiliad yn ôl",two:"{0} eiliad yn ôl",few:"{0} eiliad yn ôl",many:"{0} eiliad yn ôl",other:"{0} eiliad yn ôl"}}},"second-short":{displayName:"eiliad",relative:{0:"nawr"},relativeTime:{future:{zero:"ymhen {0} eiliad",one:"ymhen {0} eiliad",two:"ymhen {0} eiliad",few:"ymhen {0} eiliad",many:"ymhen {0} eiliad",other:"ymhen {0} eiliad"},past:{zero:"{0} eiliad yn ôl",one:"{0} eiliad yn ôl",two:"{0} eiliad yn ôl",few:"{0} eiliad yn ôl",many:"{0} eiliad yn ôl",other:"{0} eiliad yn ôl"}}}}},{locale:"da",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=Number(a[0])==e;return t?"other":1!=e&&(i||0!=r&&1!=r)?"other":"one"},fields:{year:{displayName:"år",relative:{0:"i år",1:"næste år","-1":"sidste år"},relativeTime:{future:{one:"om {0} år",other:"om {0} år"},past:{one:"for {0} år siden",other:"for {0} år siden"}}},"year-short":{displayName:"år",relative:{0:"i år",1:"næste år","-1":"sidste år"},relativeTime:{future:{one:"om {0} år",other:"om {0} år"},past:{one:"for {0} år siden",other:"for {0} år siden"}}},month:{displayName:"måned",relative:{0:"denne måned",1:"næste måned","-1":"sidste måned"},relativeTime:{future:{one:"om {0} måned",other:"om {0} måneder"},past:{one:"for {0} måned siden",other:"for {0} måneder siden"}}},"month-short":{displayName:"md.",relative:{0:"denne md.",1:"næste md.","-1":"sidste md."},relativeTime:{future:{one:"om {0} md.",other:"om {0} mdr."},past:{one:"for {0} md. siden",other:"for {0} mdr. siden"}}},day:{displayName:"dag",relative:{0:"i dag",1:"i morgen",2:"i overmorgen","-2":"i forgårs","-1":"i går"},relativeTime:{future:{one:"om {0} dag",other:"om {0} dage"},past:{one:"for {0} dag siden",other:"for {0} dage siden"}}},"day-short":{displayName:"dag",relative:{0:"i dag",1:"i morgen",2:"i overmorgen","-2":"i forgårs","-1":"i går"},relativeTime:{future:{one:"om {0} dag",other:"om {0} dage"},past:{one:"for {0} dag siden",other:"for {0} dage siden"}}},hour:{displayName:"time",relative:{0:"i den kommende time"},relativeTime:{future:{one:"om {0} time",other:"om {0} timer"},past:{one:"for {0} time siden",other:"for {0} timer siden"}}},"hour-short":{displayName:"t.",relative:{0:"i den kommende time"},relativeTime:{future:{one:"om {0} time",other:"om {0} timer"},past:{one:"for {0} time siden",other:"for {0} timer siden"}}},minute:{displayName:"minut",relative:{0:"i det kommende minut"},relativeTime:{future:{one:"om {0} minut",other:"om {0} minutter"},past:{one:"for {0} minut siden",other:"for {0} minutter siden"}}},"minute-short":{displayName:"min.",relative:{0:"i det kommende minut"},relativeTime:{future:{one:"om {0} min.",other:"om {0} min."},past:{one:"for {0} min. siden",other:"for {0} min. siden"}}},second:{displayName:"sekund",relative:{0:"nu"},relativeTime:{future:{one:"om {0} sekund",other:"om {0} sekunder"},past:{one:"for {0} sekund siden",other:"for {0} sekunder siden"}}},"second-short":{displayName:"sek.",relative:{0:"nu"},relativeTime:{future:{one:"om {0} sek.",other:"om {0} sek."},past:{one:"for {0} sek. siden",other:"for {0} sek. siden"}}}}},{locale:"da-GL",parentLocale:"da"},{locale:"dav",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mori",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mori",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ituku",relative:{0:"Idime",1:"Kesho","-1":"Iguo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ituku",relative:{0:"Idime",1:"Kesho","-1":"Iguo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"de",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"Jahr",relative:{0:"dieses Jahr",1:"nächstes Jahr","-1":"letztes Jahr"},relativeTime:{future:{one:"in {0} Jahr",other:"in {0} Jahren"},past:{one:"vor {0} Jahr",other:"vor {0} Jahren"}}},"year-short":{displayName:"Jahr",relative:{0:"dieses Jahr",1:"nächstes Jahr","-1":"letztes Jahr"},relativeTime:{future:{one:"in {0} Jahr",other:"in {0} Jahren"},past:{one:"vor {0} Jahr",other:"vor {0} Jahren"}}},month:{displayName:"Monat",relative:{0:"diesen Monat",1:"nächsten Monat","-1":"letzten Monat"},relativeTime:{future:{one:"in {0} Monat",other:"in {0} Monaten"},past:{one:"vor {0} Monat",other:"vor {0} Monaten"}}},"month-short":{displayName:"Monat",relative:{0:"diesen Monat",1:"nächsten Monat","-1":"letzten Monat"},relativeTime:{future:{one:"in {0} Monat",other:"in {0} Monaten"},past:{one:"vor {0} Monat",other:"vor {0} Monaten"}}},day:{displayName:"Tag",relative:{0:"heute",1:"morgen",2:"übermorgen","-2":"vorgestern","-1":"gestern"},relativeTime:{future:{one:"in {0} Tag",other:"in {0} Tagen"},past:{one:"vor {0} Tag",other:"vor {0} Tagen"}}},"day-short":{displayName:"Tag",relative:{0:"heute",1:"morgen",2:"übermorgen","-2":"vorgestern","-1":"gestern"},relativeTime:{future:{one:"in {0} Tag",other:"in {0} Tagen"},past:{one:"vor {0} Tag",other:"vor {0} Tagen"}}},hour:{displayName:"Stunde",relative:{0:"in dieser Stunde"},relativeTime:{future:{one:"in {0} Stunde",other:"in {0} Stunden"},past:{one:"vor {0} Stunde",other:"vor {0} Stunden"}}},"hour-short":{displayName:"Std.",relative:{0:"in dieser Stunde"},relativeTime:{future:{one:"in {0} Std.",other:"in {0} Std."},past:{one:"vor {0} Std.",other:"vor {0} Std."}}},minute:{displayName:"Minute",relative:{0:"in dieser Minute"},relativeTime:{future:{one:"in {0} Minute",other:"in {0} Minuten"},past:{one:"vor {0} Minute",other:"vor {0} Minuten"}}},"minute-short":{displayName:"Min.",relative:{0:"in dieser Minute"},relativeTime:{future:{one:"in {0} Min.",other:"in {0} Min."},past:{one:"vor {0} Min.",other:"vor {0} Min."}}},second:{displayName:"Sekunde",relative:{0:"jetzt"},relativeTime:{future:{one:"in {0} Sekunde",other:"in {0} Sekunden"},past:{one:"vor {0} Sekunde",other:"vor {0} Sekunden"}}},"second-short":{displayName:"Sek.",relative:{0:"jetzt"},relativeTime:{future:{one:"in {0} Sek.",other:"in {0} Sek."},past:{one:"vor {0} Sek.",other:"vor {0} Sek."}}}}},{locale:"de-AT",parentLocale:"de"},{locale:"de-BE",parentLocale:"de"},{locale:"de-CH",parentLocale:"de"},{locale:"de-IT",parentLocale:"de"},{locale:"de-LI",parentLocale:"de"},{locale:"de-LU",parentLocale:"de"},{locale:"dje",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Jiiri",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Jiiri",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Handu",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Handu",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Zaari",relative:{0:"Hõo",1:"Suba","-1":"Bi"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Zaari",relative:{0:"Hõo",1:"Suba","-1":"Bi"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Guuru",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Guuru",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Miniti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Miniti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Miti",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Miti",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"dsb",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=a[1]||"",o=!a[1],n=r.slice(-2),s=i.slice(-2);return t?"other":o&&1==n||1==s?"one":o&&2==n||2==s?"two":o&&(3==n||4==n)||3==s||4==s?"few":"other"},fields:{year:{displayName:"lěto",relative:{0:"lětosa",1:"znowa","-1":"łoni"},relativeTime:{future:{one:"za {0} lěto",two:"za {0} lěśe",few:"za {0} lěta",other:"za {0} lět"},past:{one:"pśed {0} lětom",two:"pśed {0} lětoma",few:"pśed {0} lětami",other:"pśed {0} lětami"}}},"year-short":{displayName:"l.",relative:{0:"lětosa",1:"znowa","-1":"łoni"},relativeTime:{future:{one:"za {0} l.",two:"za {0} l.",few:"za {0} l.",other:"za {0} l."},past:{one:"pśed {0} l.",two:"pśed {0} l.",few:"pśed {0} l.",other:"pśed {0} l."}}},month:{displayName:"mjasec",relative:{0:"ten mjasec",1:"pśiducy mjasec","-1":"slědny mjasec"},relativeTime:{future:{one:"za {0} mjasec",two:"za {0} mjaseca",few:"za {0} mjasecy",other:"za {0} mjasecow"},past:{one:"pśed {0} mjasecom",two:"pśed {0} mjasecoma",few:"pśed {0} mjasecami",other:"pśed {0} mjasecami"}}},"month-short":{displayName:"mjas.",relative:{0:"ten mjasec",1:"pśiducy mjasec","-1":"slědny mjasec"},relativeTime:{future:{one:"za {0} mjas.",two:"za {0} mjas.",few:"za {0} mjas.",other:"za {0} mjas."},past:{one:"pśed {0} mjas.",two:"pśed {0} mjas.",few:"pśed {0} mjas.",other:"pśed {0} mjas."}}},day:{displayName:"źeń",relative:{0:"źinsa",1:"witśe","-1":"cora"},relativeTime:{future:{one:"za {0} źeń",two:"za {0} dnja",few:"za {0} dny",other:"za {0} dnjow"},past:{one:"pśed {0} dnjom",two:"pśed {0} dnjoma",few:"pśed {0} dnjami",other:"pśed {0} dnjami"}}},"day-short":{displayName:"źeń",relative:{0:"źinsa",1:"witśe","-1":"cora"},relativeTime:{future:{one:"za {0} źeń",two:"za {0} dnj.",few:"za {0} dny",other:"za {0} dnj."},past:{one:"pśed {0} dnj.",two:"pśed {0} dnj.",few:"pśed {0} dnj.",other:"pśed {0} dnj."}}},hour:{displayName:"góźina",relative:{0:"this hour"},relativeTime:{future:{one:"za {0} góźinu",two:"za {0} góźinje",few:"za {0} góźiny",other:"za {0} góźin"},past:{one:"pśed {0} góźinu",two:"pśed {0} góźinoma",few:"pśed {0} góźinami",other:"pśed {0} góźinami"}}},"hour-short":{displayName:"góź.",relative:{0:"this hour"},relativeTime:{future:{one:"za {0} góź.",two:"za {0} góź.",few:"za {0} góź.",other:"za {0} góź."},past:{one:"pśed {0} góź.",two:"pśed {0} góź.",few:"pśed {0} góź.",other:"pśed {0} góź."}}},minute:{displayName:"minuta",relative:{0:"this minute"},relativeTime:{future:{one:"za {0} minutu",two:"za {0} minuśe",few:"za {0} minuty",other:"za {0} minutow"},past:{one:"pśed {0} minutu",two:"pśed {0} minutoma",few:"pśed {0} minutami",other:"pśed {0} minutami"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{one:"za {0} min.",two:"za {0} min.",few:"za {0} min.",other:"za {0} min."},past:{one:"pśed {0} min.",two:"pśed {0} min.",few:"pśed {0} min.",other:"pśed {0} min."}}},second:{displayName:"sekunda",relative:{0:"now"},relativeTime:{future:{one:"za {0} sekundu",two:"za {0} sekunźe",few:"za {0} sekundy",other:"za {0} sekundow"},past:{one:"pśed {0} sekundu",two:"pśed {0} sekundoma",few:"pśed {0} sekundami",other:"pśed {0} sekundami"}}},"second-short":{displayName:"sek.",relative:{0:"now"},relativeTime:{future:{one:"za {0} sek.",two:"za {0} sek.",few:"za {0} sek.",other:"za {0} sek."},past:{one:"pśed {0} sek.",two:"pśed {0} sek.",few:"pśed {0} sek.",other:"pśed {0} sek."}}}}},{locale:"dua",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"mbú",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"mbú",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"mɔ́di",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"mɔ́di",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"búnyá",relative:{0:"wɛ́ŋgɛ̄",1:"kíɛlɛ","-1":"kíɛlɛ nítómb́í"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"búnyá",relative:{0:"wɛ́ŋgɛ̄",1:"kíɛlɛ","-1":"kíɛlɛ nítómb́í"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"ŋgandɛ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"ŋgandɛ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"ndɔkɔ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"ndɔkɔ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"píndí",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"píndí",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"dv",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"dyo",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Emit",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Emit",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Fuleeŋ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Fuleeŋ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Funak",relative:{0:"Jaat",1:"Kajom","-1":"Fucen"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Funak",relative:{0:"Jaat",1:"Kajom","-1":"Fucen"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"dz",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"ལོ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"ལོ་འཁོར་ {0} ནང་"},past:{other:"ལོ་འཁོར་ {0} ཧེ་མ་"}}},"year-short":{displayName:"ལོ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"ལོ་འཁོར་ {0} ནང་"},past:{other:"ལོ་འཁོར་ {0} ཧེ་མ་"}}},month:{displayName:"ཟླ་ཝ་",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"ཟླཝ་ {0} ནང་"},past:{other:"ཟླཝ་ {0} ཧེ་མ་"}}},"month-short":{displayName:"ཟླ་ཝ་",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"ཟླཝ་ {0} ནང་"},past:{other:"ཟླཝ་ {0} ཧེ་མ་"}}},day:{displayName:"ཚེས་",relative:{0:"ད་རིས་",1:"ནངས་པ་",2:"གནངས་ཚེ","-2":"ཁ་ཉིམ","-1":"ཁ་ཙ་"},relativeTime:{future:{other:"ཉིནམ་ {0} ནང་"},past:{other:"ཉིནམ་ {0} ཧེ་མ་"}}},"day-short":{displayName:"ཚེས་",relative:{0:"ད་རིས་",1:"ནངས་པ་",2:"གནངས་ཚེ","-2":"ཁ་ཉིམ","-1":"ཁ་ཙ་"},relativeTime:{future:{other:"ཉིནམ་ {0} ནང་"},past:{other:"ཉིནམ་ {0} ཧེ་མ་"}}},hour:{displayName:"ཆུ་ཚོད",relative:{0:"this hour"},relativeTime:{future:{other:"ཆུ་ཚོད་ {0} ནང་"},past:{other:"ཆུ་ཚོད་ {0} ཧེ་མ་"}}},"hour-short":{displayName:"ཆུ་ཚོད",relative:{0:"this hour"},relativeTime:{future:{other:"ཆུ་ཚོད་ {0} ནང་"},past:{other:"ཆུ་ཚོད་ {0} ཧེ་མ་"}}},minute:{displayName:"སྐར་མ",relative:{0:"this minute"},relativeTime:{future:{other:"སྐར་མ་ {0} ནང་"},past:{other:"སྐར་མ་ {0} ཧེ་མ་"}}},"minute-short":{displayName:"སྐར་མ",relative:{0:"this minute"},relativeTime:{future:{other:"སྐར་མ་ {0} ནང་"},past:{other:"སྐར་མ་ {0} ཧེ་མ་"}}},second:{displayName:"སྐར་ཆཱ་",relative:{0:"now"},relativeTime:{future:{other:"སྐར་ཆ་ {0} ནང་"},past:{other:"སྐར་ཆ་ {0} ཧེ་མ་"}}},"second-short":{displayName:"སྐར་ཆཱ་",relative:{0:"now"},relativeTime:{future:{other:"སྐར་ཆ་ {0} ནང་"},past:{other:"སྐར་ཆ་ {0} ཧེ་མ་"}}}}},{locale:"ebu",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mweri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mweri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Mũthenya",relative:{0:"Ũmũnthĩ",1:"Rũciũ","-1":"Ĩgoro"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Mũthenya",relative:{0:"Ũmũnthĩ",1:"Rũciũ","-1":"Ĩgoro"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Ithaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Ithaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Ndagĩka",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Ndagĩka",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ee",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"ƒe",relative:{0:"ƒe sia",1:"ƒe si gbɔ na","-1":"ƒe si va yi"},relativeTime:{future:{one:"le ƒe {0} me",other:"le ƒe {0} me"},past:{one:"ƒe {0} si va yi",other:"ƒe {0} si wo va yi"}}},"year-short":{displayName:"ƒe",relative:{0:"ƒe sia",1:"ƒe si gbɔ na","-1":"ƒe si va yi"},relativeTime:{future:{one:"le ƒe {0} me",other:"le ƒe {0} me"},past:{one:"le ƒe {0} si va yi me",other:"le ƒe {0} si va yi me"}}},month:{displayName:"ɣleti",relative:{0:"ɣleti sia",1:"ɣleti si gbɔ na","-1":"ɣleti si va yi"},relativeTime:{future:{one:"le ɣleti {0} me",other:"le ɣleti {0} wo me"},past:{one:"ɣleti {0} si va yi",other:"ɣleti {0} si wo va yi"}}},"month-short":{displayName:"ɣleti",relative:{0:"ɣleti sia",1:"ɣleti si gbɔ na","-1":"ɣleti si va yi"},relativeTime:{future:{one:"le ɣleti {0} me",other:"le ɣleti {0} wo me"},past:{one:"ɣleti {0} si va yi",other:"ɣleti {0} si wo va yi"}}},day:{displayName:"ŋkeke",relative:{0:"egbe",1:"etsɔ si gbɔna",2:"nyitsɔ si gbɔna","-2":"nyitsɔ si va yi","-1":"etsɔ si va yi"},relativeTime:{future:{one:"le ŋkeke {0} me",other:"le ŋkeke {0} wo me"},past:{one:"ŋkeke {0} si va yi",other:"ŋkeke {0} si wo va yi"}}},"day-short":{displayName:"ŋkeke",relative:{0:"egbe",1:"etsɔ si gbɔna",2:"nyitsɔ si gbɔna","-2":"nyitsɔ si va yi","-1":"etsɔ si va yi"},relativeTime:{future:{one:"le ŋkeke {0} me",other:"le ŋkeke {0} wo me"},past:{one:"ŋkeke {0} si va yi",other:"ŋkeke {0} si wo va yi"}}},hour:{displayName:"gaƒoƒo",relative:{0:"this hour"},relativeTime:{future:{one:"le gaƒoƒo {0} me",other:"le gaƒoƒo {0} wo me"},past:{one:"gaƒoƒo {0} si va yi",other:"gaƒoƒo {0} si wo va yi"}}},"hour-short":{displayName:"gaƒoƒo",relative:{0:"this hour"},relativeTime:{future:{one:"le gaƒoƒo {0} me",other:"le gaƒoƒo {0} wo me"},past:{one:"gaƒoƒo {0} si va yi",other:"gaƒoƒo {0} si wo va yi"}}},minute:{displayName:"aɖabaƒoƒo",relative:{0:"this minute"},relativeTime:{future:{one:"le aɖabaƒoƒo {0} me",other:"le aɖabaƒoƒo {0} wo me"},past:{one:"aɖabaƒoƒo {0} si va yi",other:"aɖabaƒoƒo {0} si wo va yi"}}},"minute-short":{displayName:"aɖabaƒoƒo",relative:{0:"this minute"},relativeTime:{future:{one:"le aɖabaƒoƒo {0} me",other:"le aɖabaƒoƒo {0} wo me"},past:{one:"aɖabaƒoƒo {0} si va yi",other:"aɖabaƒoƒo {0} si wo va yi"}}},second:{displayName:"sekend",relative:{0:"fifi"},relativeTime:{future:{one:"le sekend {0} me",other:"le sekend {0} wo me"},past:{one:"sekend {0} si va yi",other:"sekend {0} si wo va yi"}}},"second-short":{displayName:"sekend",relative:{0:"fifi"},relativeTime:{future:{one:"le sekend {0} me",other:"le sekend {0} wo me"},past:{one:"sekend {0} si va yi",other:"sekend {0} si wo va yi"}}}}},{locale:"ee-TG",parentLocale:"ee"},{locale:"el",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"έτος",relative:{0:"φέτος",1:"επόμενο έτος","-1":"πέρσι"},relativeTime:{future:{one:"σε {0} έτος",other:"σε {0} έτη"},past:{one:"πριν από {0} έτος",other:"πριν από {0} έτη"}}},"year-short":{displayName:"έτ.",relative:{0:"φέτος",1:"επόμενο έτος","-1":"πέρσι"},relativeTime:{future:{one:"σε {0} έτος",other:"σε {0} έτη"},past:{one:"πριν από {0} έτος",other:"πριν από {0} έτη"}}},month:{displayName:"μήνας",relative:{0:"τρέχων μήνας",1:"επόμενος μήνας","-1":"προηγούμενος μήνας"},relativeTime:{future:{one:"σε {0} μήνα",other:"σε {0} μήνες"},past:{one:"πριν από {0} μήνα",other:"πριν από {0} μήνες"}}},"month-short":{displayName:"μήν.",relative:{0:"τρέχων μήνας",1:"επόμενος μήνας","-1":"προηγούμενος μήνας"},relativeTime:{future:{one:"σε {0} μήνα",other:"σε {0} μήνες"},past:{one:"πριν από {0} μήνα",other:"πριν από {0} μήνες"}}},day:{displayName:"ημέρα",relative:{0:"σήμερα",1:"αύριο",2:"μεθαύριο","-2":"προχθές","-1":"χθες"},relativeTime:{future:{one:"σε {0} ημέρα",other:"σε {0} ημέρες"},past:{one:"πριν από {0} ημέρα",other:"πριν από {0} ημέρες"}}},"day-short":{displayName:"ημ.",relative:{0:"σήμερα",1:"αύριο",2:"μεθαύριο","-2":"προχθές","-1":"χθες"},relativeTime:{future:{one:"σε {0} ημ.",other:"σε {0} ημ."},past:{one:"πριν από {0} ημ.",other:"πριν από {0} ημ."}}},hour:{displayName:"ώρα",relative:{0:"τρέχουσα ώρα"},relativeTime:{future:{one:"σε {0} ώρα",other:"σε {0} ώρες"},past:{one:"πριν από {0} ώρα",other:"πριν από {0} ώρες"}}},"hour-short":{displayName:"ώ.",relative:{0:"τρέχουσα ώρα"},relativeTime:{future:{one:"σε {0} ώ.",other:"σε {0} ώ."},past:{one:"πριν από {0} ώ.",other:"πριν από {0} ώ."}}},minute:{displayName:"λεπτό",relative:{0:"τρέχον λεπτό"},relativeTime:{future:{one:"σε {0} λεπτό",other:"σε {0} λεπτά"},past:{one:"πριν από {0} λεπτό",other:"πριν από {0} λεπτά"}}},"minute-short":{displayName:"λεπ.",relative:{0:"τρέχον λεπτό"},relativeTime:{future:{one:"σε {0} λεπ.",other:"σε {0} λεπ."},past:{one:"πριν από {0} λεπ.",other:"πριν από {0} λεπ."}}},second:{displayName:"δευτερόλεπτο",relative:{0:"τώρα"},relativeTime:{future:{one:"σε {0} δευτερόλεπτο",other:"σε {0} δευτερόλεπτα"},past:{one:"πριν από {0} δευτερόλεπτο",other:"πριν από {0} δευτερόλεπτα"}}},"second-short":{displayName:"δευτ.",relative:{0:"τώρα"},relativeTime:{future:{one:"σε {0} δευτ.",other:"σε {0} δευτ."},past:{one:"πριν από {0} δευτ.",other:"πριν από {0} δευτ."}}}}},{locale:"el-CY",parentLocale:"el"},{locale:"en",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=!a[1],i=Number(a[0])==e,o=i&&a[0].slice(-1),n=i&&a[0].slice(-2);return t?1==o&&11!=n?"one":2==o&&12!=n?"two":3==o&&13!=n?"few":"other":1==e&&r?"one":"other"},fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr.",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr.",other:"in {0} yr."},past:{one:"{0} yr. ago",other:"{0} yr. ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo.",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo.",other:"in {0} mo."},past:{one:"{0} mo. ago",other:"{0} mo. ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr.",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr.",other:"in {0} hr."},past:{one:"{0} hr. ago",other:"{0} hr. ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min.",other:"in {0} min."},past:{one:"{0} min. ago",other:"{0} min. ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec.",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec.",other:"in {0} sec."},past:{one:"{0} sec. ago",other:"{0} sec. ago"}}}}},{locale:"en-001",parentLocale:"en",fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr",other:"in {0} yr"},past:{one:"{0} yr ago",other:"{0} yr ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo",other:"in {0} mo"},past:{one:"{0} mo ago",other:"{0} mo ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr",other:"in {0} hr"},past:{one:"{0} hr ago",other:"{0} hr ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min",other:"in {0} min"},past:{one:"{0} min ago",other:"{0} min ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec",other:"in {0} sec"},past:{one:"{0} sec ago",other:"{0} sec ago"}}}}},{locale:"en-150",parentLocale:"en-001"},{locale:"en-AG",parentLocale:"en-001"},{locale:"en-AI",parentLocale:"en-001"},{locale:"en-AS",parentLocale:"en"},{locale:"en-AT",parentLocale:"en-150"},{locale:"en-AU",parentLocale:"en-001",fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr",other:"in {0} yrs"},past:{one:"{0} yr ago",other:"{0} yrs ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo.",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo.",other:"in {0} mo."},past:{one:"{0} mo. ago",other:"{0} mo. ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"h",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr",other:"in {0} hrs"},past:{one:"{0} hr ago",other:"{0} hrs ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min.",other:"in {0} mins"},past:{one:"{0} min. ago",other:"{0} mins ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec.",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec.",other:"in {0} secs"},past:{one:"{0} sec. ago",other:"{0} secs ago"}}}}},{locale:"en-BB",parentLocale:"en-001"},{locale:"en-BE",parentLocale:"en-001"},{locale:"en-BI",parentLocale:"en"},{locale:"en-BM",parentLocale:"en-001"},{locale:"en-BS",parentLocale:"en-001"},{locale:"en-BW",parentLocale:"en-001"},{locale:"en-BZ",parentLocale:"en-001"},{locale:"en-CA",parentLocale:"en-001",fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr.",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr.",other:"in {0} yrs."},past:{one:"{0} yr. ago",other:"{0} yrs. ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo.",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo.",other:"in {0} mos."},past:{one:"{0} mo. ago",other:"{0} mos. ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr.",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr.",other:"in {0} hrs."},past:{one:"{0} hr. ago",other:"{0} hrs. ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min.",other:"in {0} mins."},past:{one:"{0} min. ago",other:"{0} mins. ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec.",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec.",other:"in {0} secs."},past:{one:"{0} sec. ago",other:"{0} secs. ago"}}}}},{locale:"en-CC",parentLocale:"en-001"},{locale:"en-CH",parentLocale:"en-150"},{locale:"en-CK",parentLocale:"en-001"},{locale:"en-CM",parentLocale:"en-001"},{locale:"en-CX",parentLocale:"en-001"},{locale:"en-CY",parentLocale:"en-001"},{locale:"en-DE",parentLocale:"en-150"},{locale:"en-DG",parentLocale:"en-001"},{locale:"en-DK",parentLocale:"en-150"},{locale:"en-DM",parentLocale:"en-001"},{locale:"en-Dsrt",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"en-ER",parentLocale:"en-001"},{locale:"en-FI",parentLocale:"en-150"},{locale:"en-FJ",parentLocale:"en-001"},{locale:"en-FK",parentLocale:"en-001"},{locale:"en-FM",parentLocale:"en-001"},{locale:"en-GB",parentLocale:"en-001"},{locale:"en-GD",parentLocale:"en-001"},{locale:"en-GG",parentLocale:"en-001"},{locale:"en-GH",parentLocale:"en-001"},{locale:"en-GI",parentLocale:"en-001"},{locale:"en-GM",parentLocale:"en-001"},{locale:"en-GU",parentLocale:"en"},{locale:"en-GY",parentLocale:"en-001"},{locale:"en-HK",parentLocale:"en-001"},{locale:"en-IE",parentLocale:"en-001"},{locale:"en-IL",parentLocale:"en-001"},{locale:"en-IM",parentLocale:"en-001"},{locale:"en-IN",parentLocale:"en-001"},{locale:"en-IO",parentLocale:"en-001"},{locale:"en-JE",parentLocale:"en-001"},{locale:"en-JM",parentLocale:"en-001"},{locale:"en-KE",parentLocale:"en-001"},{locale:"en-KI",parentLocale:"en-001"},{locale:"en-KN",parentLocale:"en-001"},{locale:"en-KY",parentLocale:"en-001"},{locale:"en-LC",parentLocale:"en-001"},{locale:"en-LR",parentLocale:"en-001"},{locale:"en-LS",parentLocale:"en-001"},{locale:"en-MG",parentLocale:"en-001"},{locale:"en-MH",parentLocale:"en"},{locale:"en-MO",parentLocale:"en-001"},{locale:"en-MP",parentLocale:"en"},{locale:"en-MS",parentLocale:"en-001"},{locale:"en-MT",parentLocale:"en-001"},{locale:"en-MU",parentLocale:"en-001"},{locale:"en-MW",parentLocale:"en-001"},{locale:"en-MY",parentLocale:"en-001"},{locale:"en-NA",parentLocale:"en-001"},{locale:"en-NF",parentLocale:"en-001"},{locale:"en-NG",parentLocale:"en-001"},{locale:"en-NL",parentLocale:"en-150"},{locale:"en-NR",parentLocale:"en-001"},{locale:"en-NU",parentLocale:"en-001"},{locale:"en-NZ",parentLocale:"en-001"},{locale:"en-PG",parentLocale:"en-001"},{locale:"en-PH",parentLocale:"en-001"},{locale:"en-PK",parentLocale:"en-001"},{locale:"en-PN",parentLocale:"en-001"},{locale:"en-PR",parentLocale:"en"},{locale:"en-PW",parentLocale:"en-001"},{locale:"en-RW",parentLocale:"en-001"},{locale:"en-SB",parentLocale:"en-001"},{locale:"en-SC",parentLocale:"en-001"},{locale:"en-SD",parentLocale:"en-001"},{locale:"en-SE",parentLocale:"en-150"},{locale:"en-SG",parentLocale:"en-001",fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr",relative:{0:"this yr",1:"next yr","-1":"last yr"},relativeTime:{future:{one:"in {0} yr",other:"in {0} yr"},past:{one:"{0} yr ago",other:"{0} yr ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mth",relative:{0:"this mth",1:"next mth","-1":"last mth"},relativeTime:{future:{one:"in {0} mth",other:"in {0} mth"},past:{one:"{0} mth ago",other:"{0} mth ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr",other:"in {0} hr"},past:{one:"{0} hr ago",other:"{0} hr ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min",other:"in {0} min"},past:{one:"{0} min ago",other:"{0} min ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec",other:"in {0} sec"},past:{one:"{0} sec ago",other:"{0} sec ago"}}}}},{locale:"en-SH",parentLocale:"en-001"},{locale:"en-SI",parentLocale:"en-150"},{locale:"en-SL",parentLocale:"en-001"},{locale:"en-SS",parentLocale:"en-001"},{locale:"en-SX",parentLocale:"en-001"},{locale:"en-SZ",parentLocale:"en-001"},{locale:"en-Shaw",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"en-TC",parentLocale:"en-001"},{locale:"en-TK",parentLocale:"en-001"},{locale:"en-TO",parentLocale:"en-001"},{locale:"en-TT",parentLocale:"en-001"},{locale:"en-TV",parentLocale:"en-001"},{locale:"en-TZ",parentLocale:"en-001"},{locale:"en-UG",parentLocale:"en-001"},{locale:"en-UM",parentLocale:"en"},{locale:"en-US",parentLocale:"en"},{locale:"en-VC",parentLocale:"en-001"},{locale:"en-VG",parentLocale:"en-001"},{locale:"en-VI",parentLocale:"en"},{locale:"en-VU",parentLocale:"en-001"},{locale:"en-WS",parentLocale:"en-001"},{locale:"en-ZA",parentLocale:"en-001"},{locale:"en-ZM",parentLocale:"en-001"},{locale:"en-ZW",parentLocale:"en-001"},{locale:"eo",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"es",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-419",parentLocale:"es"},{locale:"es-AR",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} días",other:"dentro de {0} días"},past:{one:"hace {0} días",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"seg.",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} seg.",other:"dentro de {0} seg."},past:{one:"hace {0} seg.",other:"hace {0} seg."}}}}},{locale:"es-BO",parentLocale:"es-419"},{locale:"es-BR",parentLocale:"es-419"},{locale:"es-BZ",parentLocale:"es-419"},{locale:"es-CL",parentLocale:"es-419"},{locale:"es-CO",parentLocale:"es-419"},{locale:"es-CR",parentLocale:"es-419"},{locale:"es-CU",parentLocale:"es-419"},{locale:"es-DO",parentLocale:"es-419",fields:{year:{displayName:"Año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"Mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"Día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"Minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"Segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-EA",parentLocale:"es"},{locale:"es-EC",parentLocale:"es-419"},{locale:"es-GQ",parentLocale:"es"},{locale:"es-GT",parentLocale:"es-419"},{locale:"es-HN",parentLocale:"es-419"},{locale:"es-IC",parentLocale:"es"},{locale:"es-MX",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el año próximo","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"en {0} a",other:"en {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el mes próximo","-1":"el mes pasado"},relativeTime:{future:{one:"en {0} mes",other:"en {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"en {0} m",other:"en {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"en {0} día",other:"en {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"en {0} h",other:"en {0} n"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"en {0} min",other:"en {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"en {0} s",other:"en {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-NI",parentLocale:"es-419"},{locale:"es-PA",parentLocale:"es-419"},{locale:"es-PE",parentLocale:"es-419"},{locale:"es-PH",parentLocale:"es"},{locale:"es-PR",parentLocale:"es-419"},{locale:"es-PY",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"seg.",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} seg.",other:"dentro de {0} seg."},past:{one:"hace {0} seg.",other:"hace {0} seg."}}}}},{locale:"es-SV",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"antier","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-US",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el año próximo","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el mes próximo","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-UY",parentLocale:"es-419"},{locale:"es-VE",parentLocale:"es-419"},{locale:"et",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"aasta",relative:{0:"käesolev aasta",1:"järgmine aasta","-1":"eelmine aasta"},relativeTime:{future:{one:"{0} aasta pärast",other:"{0} aasta pärast"},past:{one:"{0} aasta eest",other:"{0} aasta eest"}}},"year-short":{displayName:"a",relative:{0:"käesolev aasta",1:"järgmine aasta","-1":"eelmine aasta"},relativeTime:{future:{one:"{0} a pärast",other:"{0} a pärast"},past:{one:"{0} a eest",other:"{0} a eest"}}},month:{displayName:"kuu",relative:{0:"käesolev kuu",1:"järgmine kuu","-1":"eelmine kuu"},relativeTime:{future:{one:"{0} kuu pärast",other:"{0} kuu pärast"},past:{one:"{0} kuu eest",other:"{0} kuu eest"}}},"month-short":{displayName:"k",relative:{0:"käesolev kuu",1:"järgmine kuu","-1":"eelmine kuu"},relativeTime:{future:{one:"{0} kuu pärast",other:"{0} kuu pärast"},past:{one:"{0} kuu eest",other:"{0} kuu eest"}}},day:{displayName:"päev",relative:{0:"täna",1:"homme",2:"ülehomme","-2":"üleeile","-1":"eile"},relativeTime:{future:{one:"{0} päeva pärast",other:"{0} päeva pärast"},past:{one:"{0} päeva eest",other:"{0} päeva eest"}}},"day-short":{displayName:"p",relative:{0:"täna",1:"homme",2:"ülehomme","-2":"üleeile","-1":"eile"},relativeTime:{future:{one:"{0} p pärast",other:"{0} p pärast"},past:{one:"{0} p eest",other:"{0} p eest"}}},hour:{displayName:"tund",relative:{0:"praegusel tunnil"},relativeTime:{future:{one:"{0} tunni pärast",other:"{0} tunni pärast"},past:{one:"{0} tunni eest",other:"{0} tunni eest"}}},"hour-short":{displayName:"t",relative:{0:"praegusel tunnil"},relativeTime:{future:{one:"{0} t pärast",other:"{0} t pärast"},past:{one:"{0} t eest",other:"{0} t eest"}}},minute:{displayName:"minut",relative:{0:"praegusel minutil"},relativeTime:{future:{one:"{0} minuti pärast",other:"{0} minuti pärast"},past:{one:"{0} minuti eest",other:"{0} minuti eest"}}},"minute-short":{displayName:"min",relative:{0:"praegusel minutil"},relativeTime:{future:{one:"{0} min pärast",other:"{0} min pärast"},past:{one:"{0} min eest",other:"{0} min eest"}}},second:{displayName:"sekund",relative:{0:"nüüd"},relativeTime:{future:{one:"{0} sekundi pärast",other:"{0} sekundi pärast"},past:{one:"{0} sekundi eest",other:"{0} sekundi eest"}}},"second-short":{displayName:"sek",relative:{0:"nüüd"},relativeTime:{future:{one:"{0} sek pärast",other:"{0} sek pärast"},past:{one:"{0} sek eest",other:"{0} sek eest"}}}}},{locale:"eu",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"urtea",relative:{0:"aurten",1:"hurrengo urtean","-1":"iaz"},relativeTime:{future:{one:"{0} urte barru",other:"{0} urte barru"},past:{one:"Duela {0} urte",other:"Duela {0} urte"}}},"year-short":{displayName:"urtea",relative:{0:"aurten",1:"hurrengo urtea","-1":"aurreko urtea"},relativeTime:{future:{one:"{0} urte barru",other:"{0} urte barru"},past:{one:"Duela {0} urte",other:"Duela {0} urte"}}},month:{displayName:"hilabetea",relative:{0:"hilabete honetan",1:"hurrengo hilabetean","-1":"aurreko hilabetean"},relativeTime:{future:{one:"{0} hilabete barru",other:"{0} hilabete barru"},past:{one:"Duela {0} hilabete",other:"Duela {0} hilabete"}}},"month-short":{displayName:"hil.",relative:{0:"hilabete honetan",1:"hurrengo hilabetean","-1":"aurreko hilabetean"},relativeTime:{future:{one:"{0} hilabete barru",other:"{0} hilabete barru"},past:{one:"Duela {0} hilabete",other:"Duela {0} hilabete"}}},day:{displayName:"eguna",relative:{0:"gaur",1:"bihar",2:"etzi","-2":"herenegun","-1":"atzo"},relativeTime:{future:{one:"{0} egun barru",other:"{0} egun barru"},past:{one:"Duela {0} egun",other:"Duela {0} egun"}}},"day-short":{displayName:"eg.",relative:{0:"gaur",1:"bihar",2:"etzi","-2":"herenegun","-1":"atzo"},relativeTime:{future:{one:"{0} egun barru",other:"{0} egun barru"},past:{one:"Duela {0} egun",other:"Duela {0} egun"}}},hour:{displayName:"ordua",relative:{0:"ordu honetan"},relativeTime:{future:{one:"{0} ordu barru",other:"{0} ordu barru"},past:{one:"Duela {0} ordu",other:"Duela {0} ordu"}}},"hour-short":{displayName:"h",relative:{0:"ordu honetan"},relativeTime:{future:{one:"{0} ordu barru",other:"{0} ordu barru"},past:{one:"Duela {0} ordu",other:"Duela {0} ordu"}}},minute:{displayName:"minutua",relative:{0:"minutu honetan"},relativeTime:{future:{one:"{0} minutu barru",other:"{0} minutu barru"},past:{one:"Duela {0} minutu",other:"Duela {0} minutu"}}},"minute-short":{displayName:"min",relative:{0:"minutu honetan"},relativeTime:{future:{one:"{0} minutu barru",other:"{0} minutu barru"},past:{one:"Duela {0} minutu",other:"Duela {0} minutu"}}},second:{displayName:"segundoa",relative:{0:"orain"},relativeTime:{future:{one:"{0} segundo barru",other:"{0} segundo barru"},past:{one:"Duela {0} segundo",other:"Duela {0} segundo"}}},"second-short":{displayName:"s",relative:{0:"orain"},relativeTime:{future:{one:"{0} segundo barru",other:"{0} segundo barru"},past:{one:"Duela {0} segundo",other:"Duela {0} segundo"}}}}},{locale:"ewo",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"M̀bú",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"M̀bú",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Ngɔn",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Ngɔn",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Amǒs",relative:{0:"Aná",1:"Okírí","-1":"Angogé"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Amǒs",relative:{0:"Aná",1:"Okírí","-1":"Angogé"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Awola",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Awola",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Enútɛn",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Enútɛn",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Akábəga",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Akábəga",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"fa",pluralRuleFunction:function(e,t){return t?"other":e>=0&&e<=1?"one":"other"},fields:{year:{displayName:"سال",relative:{0:"امسال",1:"سال آینده","-1":"سال گذشته"},relativeTime:{future:{one:"{0} سال بعد",other:"{0} سال بعد"},past:{one:"{0} سال پیش",other:"{0} سال پیش"}}},"year-short":{displayName:"سال",relative:{0:"امسال",1:"سال آینده","-1":"سال گذشته"},relativeTime:{future:{one:"{0} سال بعد",other:"{0} سال بعد"},past:{one:"{0} سال پیش",other:"{0} سال پیش"}}},month:{displayName:"ماه",relative:{0:"این ماه",1:"ماه آینده","-1":"ماه گذشته"},relativeTime:{future:{one:"{0} ماه بعد",other:"{0} ماه بعد"},past:{one:"{0} ماه پیش",other:"{0} ماه پیش"}}},"month-short":{displayName:"ماه",relative:{0:"این ماه",1:"ماه آینده","-1":"ماه پیش"},relativeTime:{future:{one:"{0} ماه بعد",other:"{0} ماه بعد"},past:{one:"{0} ماه پیش",other:"{0} ماه پیش"}}},day:{displayName:"روز",relative:{0:"امروز",1:"فردا",2:"پس‌فردا","-2":"پریروز","-1":"دیروز"},relativeTime:{future:{one:"{0} روز بعد",other:"{0} روز بعد"},past:{one:"{0} روز پیش",other:"{0} روز پیش"}}},"day-short":{displayName:"روز",relative:{0:"امروز",1:"فردا",2:"پس‌فردا","-2":"پریروز","-1":"دیروز"},relativeTime:{future:{one:"{0} روز بعد",other:"{0} روز بعد"},past:{one:"{0} روز پیش",other:"{0} روز پیش"}}},hour:{displayName:"ساعت",relative:{0:"همین ساعت"},relativeTime:{future:{one:"{0} ساعت بعد",other:"{0} ساعت بعد"},past:{one:"{0} ساعت پیش",other:"{0} ساعت پیش"}}},"hour-short":{displayName:"ساعت",relative:{0:"همین ساعت"},relativeTime:{future:{one:"{0} ساعت بعد",other:"{0} ساعت بعد"},past:{one:"{0} ساعت پیش",other:"{0} ساعت پیش"}}},minute:{displayName:"دقیقه",relative:{0:"همین دقیقه"},relativeTime:{future:{one:"{0} دقیقه بعد",other:"{0} دقیقه بعد"},past:{one:"{0} دقیقه پیش",other:"{0} دقیقه پیش"}}},"minute-short":{displayName:"دقیقه",relative:{0:"همین دقیقه"},relativeTime:{future:{one:"{0} دقیقه بعد",other:"{0} دقیقه بعد"},past:{one:"{0} دقیقه پیش",other:"{0} دقیقه پیش"}}},second:{displayName:"ثانیه",relative:{0:"اکنون"},relativeTime:{future:{one:"{0} ثانیه بعد",other:"{0} ثانیه بعد"},past:{one:"{0} ثانیه پیش",other:"{0} ثانیه پیش"}}},"second-short":{displayName:"ثانیه",relative:{0:"اکنون"},relativeTime:{future:{one:"{0} ثانیه بعد",other:"{0} ثانیه بعد"},past:{one:"{0} ثانیه پیش",other:"{0} ثانیه پیش"}}}}},{locale:"fa-AF",parentLocale:"fa"},{locale:"ff",pluralRuleFunction:function(e,t){return t?"other":e>=0&&e<2?"one":"other"},fields:{year:{displayName:"Hitaande",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Hitaande",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Lewru",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Lewru",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ñalnde",relative:{0:"Hannde",1:"Jaŋngo","-1":"Haŋki"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ñalnde",relative:{0:"Hannde",1:"Jaŋngo","-1":"Haŋki"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Waktu",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Waktu",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Hoƴom",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Hoƴom",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Majaango",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Majaango",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ff-Adlm",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ff-Latn",parentLocale:"ff"},{locale:"ff-Latn-BF",parentLocale:"ff-Latn"},{locale:"ff-Latn-CM",parentLocale:"ff-Latn"},{locale:"ff-Latn-GH",parentLocale:"ff-Latn"},{locale:"ff-Latn-GM",parentLocale:"ff-Latn"},{locale:"ff-Latn-GN",parentLocale:"ff-Latn"},{locale:"ff-Latn-GW",parentLocale:"ff-Latn"},{locale:"ff-Latn-LR",parentLocale:"ff-Latn"},{locale:"ff-Latn-MR",parentLocale:"ff-Latn"},{locale:"ff-Latn-NE",parentLocale:"ff-Latn"},{locale:"ff-Latn-NG",parentLocale:"ff-Latn"},{locale:"ff-Latn-SL",parentLocale:"ff-Latn"},{locale:"fi",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"vuosi",relative:{0:"tänä vuonna",1:"ensi vuonna","-1":"viime vuonna"},relativeTime:{future:{one:"{0} vuoden päästä",other:"{0} vuoden päästä"},past:{one:"{0} vuosi sitten",other:"{0} vuotta sitten"}}},"year-short":{displayName:"v",relative:{0:"tänä v",1:"ensi v","-1":"viime v"},relativeTime:{future:{one:"{0} v päästä",other:"{0} v päästä"},past:{one:"{0} v sitten",other:"{0} v sitten"}}},month:{displayName:"kuukausi",relative:{0:"tässä kuussa",1:"ensi kuussa","-1":"viime kuussa"},relativeTime:{future:{one:"{0} kuukauden päästä",other:"{0} kuukauden päästä"},past:{one:"{0} kuukausi sitten",other:"{0} kuukautta sitten"}}},"month-short":{displayName:"kk",relative:{0:"tässä kk",1:"ensi kk","-1":"viime kk"},relativeTime:{future:{one:"{0} kk päästä",other:"{0} kk päästä"},past:{one:"{0} kk sitten",other:"{0} kk sitten"}}},day:{displayName:"päivä",relative:{0:"tänään",1:"huomenna",2:"ylihuomenna","-2":"toissa päivänä","-1":"eilen"},relativeTime:{future:{one:"{0} päivän päästä",other:"{0} päivän päästä"},past:{one:"{0} päivä sitten",other:"{0} päivää sitten"}}},"day-short":{displayName:"pv",relative:{0:"tänään",1:"huom.",2:"ylihuom.","-2":"toissap.","-1":"eilen"},relativeTime:{future:{one:"{0} pv päästä",other:"{0} pv päästä"},past:{one:"{0} pv sitten",other:"{0} pv sitten"}}},hour:{displayName:"tunti",relative:{0:"tämän tunnin aikana"},relativeTime:{future:{one:"{0} tunnin päästä",other:"{0} tunnin päästä"},past:{one:"{0} tunti sitten",other:"{0} tuntia sitten"}}},"hour-short":{displayName:"t",relative:{0:"tunnin sisällä"},relativeTime:{future:{one:"{0} t päästä",other:"{0} t päästä"},past:{one:"{0} t sitten",other:"{0} t sitten"}}},minute:{displayName:"minuutti",relative:{0:"tämän minuutin aikana"},relativeTime:{future:{one:"{0} minuutin päästä",other:"{0} minuutin päästä"},past:{one:"{0} minuutti sitten",other:"{0} minuuttia sitten"}}},"minute-short":{displayName:"min",relative:{0:"minuutin sisällä"},relativeTime:{future:{one:"{0} min päästä",other:"{0} min päästä"},past:{one:"{0} min sitten",other:"{0} min sitten"}}},second:{displayName:"sekunti",relative:{0:"nyt"},relativeTime:{future:{one:"{0} sekunnin päästä",other:"{0} sekunnin päästä"},past:{one:"{0} sekunti sitten",other:"{0} sekuntia sitten"}}},"second-short":{displayName:"s",relative:{0:"nyt"},relativeTime:{future:{one:"{0} s päästä",other:"{0} s päästä"},past:{one:"{0} s sitten",other:"{0} s sitten"}}}}},{locale:"fil",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=a[1]||"",o=!a[1],n=r.slice(-1),s=i.slice(-1);return t?1==e?"one":"other":o&&(1==r||2==r||3==r)||o&&4!=n&&6!=n&&9!=n||!o&&4!=s&&6!=s&&9!=s?"one":"other"},fields:{year:{displayName:"taon",relative:{0:"ngayong taon",1:"susunod na taon","-1":"nakaraang taon"},relativeTime:{future:{one:"sa {0} taon",other:"sa {0} (na) taon"},past:{one:"{0} taon ang nakalipas",other:"{0} (na) taon ang nakalipas"}}},"year-short":{displayName:"taon",relative:{0:"ngayong taon",1:"susunod na taon","-1":"nakaraang taon"},relativeTime:{future:{one:"sa {0} taon",other:"sa {0} (na) taon"},past:{one:"{0} taon ang nakalipas",other:"{0} (na) taon ang nakalipas"}}},month:{displayName:"buwan",relative:{0:"ngayong buwan",1:"susunod na buwan","-1":"nakaraang buwan"},relativeTime:{future:{one:"sa {0} buwan",other:"sa {0} (na) buwan"},past:{one:"{0} buwan ang nakalipas",other:"{0} (na) buwan ang nakalipas"}}},"month-short":{displayName:"buwan",relative:{0:"ngayong buwan",1:"susunod na buwan","-1":"nakaraang buwan"},relativeTime:{future:{one:"sa {0} buwan",other:"sa {0} (na) buwan"},past:{one:"{0} buwan ang nakalipas",other:"{0} (na) buwan ang nakalipas"}}},day:{displayName:"araw",relative:{0:"ngayong araw",1:"bukas",2:"Samakalawa","-2":"Araw bago ang kahapon","-1":"kahapon"},relativeTime:{future:{one:"sa {0} araw",other:"sa {0} (na) araw"},past:{one:"{0} araw ang nakalipas",other:"{0} (na) araw ang nakalipas"}}},"day-short":{displayName:"araw",relative:{0:"ngayong araw",1:"bukas",2:"Samakalawa","-2":"Araw bago ang kahapon","-1":"kahapon"},relativeTime:{future:{one:"sa {0} (na) araw",other:"sa {0} (na) araw"},past:{one:"{0} (na) araw ang nakalipas",other:"{0} (na) araw ang nakalipas"}}},hour:{displayName:"oras",relative:{0:"ngayong oras"},relativeTime:{future:{one:"sa {0} oras",other:"sa {0} (na) oras"},past:{one:"{0} oras ang nakalipas",other:"{0} (na) oras ang nakalipas"}}},"hour-short":{displayName:"oras",relative:{0:"ngayong oras"},relativeTime:{future:{one:"sa {0} oras",other:"sa {0} (na) oras"},past:{one:"{0} oras ang nakalipas",other:"{0} (na) oras ang nakalipas"}}},minute:{displayName:"minuto",relative:{0:"sa minutong ito"},relativeTime:{future:{one:"sa {0} minuto",other:"sa {0} (na) minuto"},past:{one:"{0} minuto ang nakalipas",other:"{0} (na) minuto ang nakalipas"}}},"minute-short":{displayName:"min.",relative:{0:"sa minutong ito"},relativeTime:{future:{one:"sa {0} min.",other:"sa {0} (na) min."},past:{one:"{0} min. ang nakalipas",other:"{0} (na) min. ang nakalipas"}}},second:{displayName:"segundo",relative:{0:"ngayon"},relativeTime:{future:{one:"sa {0} segundo",other:"sa {0} (na) segundo"},past:{one:"{0} segundo ang nakalipas",other:"{0} (na) segundo ang nakalipas"}}},"second-short":{displayName:"seg.",relative:{0:"ngayon"},relativeTime:{future:{one:"sa {0} seg.",other:"sa {0} (na) seg."},past:{one:"{0} seg. ang nakalipas",other:"{0} (na) seg. nakalipas"}}}}},{locale:"fo",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"ár",relative:{0:"í ár",1:"næsta ár","-1":"í fjør"},relativeTime:{future:{one:"um {0} ár",other:"um {0} ár"},past:{one:"{0} ár síðan",other:"{0} ár síðan"}}},"year-short":{displayName:"ár",relative:{0:"í ár",1:"næsta ár","-1":"í fjør"},relativeTime:{future:{one:"um {0} ár",other:"um {0} ár"},past:{one:"{0} ár síðan",other:"{0} ár síðan"}}},month:{displayName:"mánaður",relative:{0:"henda mánaðin",1:"næsta mánað","-1":"seinasta mánað"},relativeTime:{future:{one:"um {0} mánað",other:"um {0} mánaðir"},past:{one:"{0} mánað síðan",other:"{0} mánaðir síðan"}}},"month-short":{displayName:"mnð.",relative:{0:"henda mánaðin",1:"næsta mánað","-1":"seinasta mánað"},relativeTime:{future:{one:"um {0} mnð.",other:"um {0} mnð."},past:{one:"{0} mnð. síðan",other:"{0} mnð. síðan"}}},day:{displayName:"dagur",relative:{0:"í dag",1:"í morgin",2:"í ovurmorgin","-2":"fyrradagin","-1":"í gjár"},relativeTime:{future:{one:"um {0} dag",other:"um {0} dagar"},past:{one:"{0} dagur síðan",other:"{0} dagar síðan"}}},"day-short":{displayName:"da.",relative:{0:"í dag",1:"í morgin",2:"í ovurmorgin","-2":"fyrradagin","-1":"í gjár"},relativeTime:{future:{one:"um {0} da.",other:"um {0} da."},past:{one:"{0} da. síðan",other:"{0} da. síðan"}}},hour:{displayName:"tími",relative:{0:"hendan tíman"},relativeTime:{future:{one:"um {0} tíma",other:"um {0} tímar"},past:{one:"{0} tími síðan",other:"{0} tímar síðan"}}},"hour-short":{displayName:"t.",relative:{0:"hendan tíman"},relativeTime:{future:{one:"um {0} t.",other:"um {0} t."},past:{one:"{0} t. síðan",other:"{0} t. síðan"}}},minute:{displayName:"minuttur",relative:{0:"hendan minuttin"},relativeTime:{future:{one:"um {0} minutt",other:"um {0} minuttir"},past:{one:"{0} minutt síðan",other:"{0} minuttir síðan"}}},"minute-short":{displayName:"min.",relative:{0:"hendan minuttin"},relativeTime:{future:{one:"um {0} min.",other:"um {0} min."},past:{one:"{0} min. síðan",other:"{0} min. síðan"}}},second:{displayName:"sekund",relative:{0:"nú"},relativeTime:{future:{one:"um {0} sekund",other:"um {0} sekund"},past:{one:"{0} sekund síðan",other:"{0} sekund síðan"}}},"second-short":{displayName:"sek.",relative:{0:"nú"},relativeTime:{future:{one:"um {0} sek.",other:"um {0} sek."},past:{one:"{0} sek. síðan",other:"{0} sek. síðan"}}}}},{locale:"fo-DK",parentLocale:"fo"},{locale:"fr",pluralRuleFunction:function(e,t){return t?1==e?"one":"other":e>=0&&e<2?"one":"other"},fields:{year:{displayName:"année",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"dans {0} an",other:"dans {0} ans"},past:{one:"il y a {0} an",other:"il y a {0} ans"}}},"year-short":{displayName:"an",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"dans {0} a",other:"dans {0} a"},past:{one:"il y a {0} a",other:"il y a {0} a"}}},month:{displayName:"mois",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} mois",other:"dans {0} mois"},past:{one:"il y a {0} mois",other:"il y a {0} mois"}}},"month-short":{displayName:"m.",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} m.",other:"dans {0} m."},past:{one:"il y a {0} m.",other:"il y a {0} m."}}},day:{displayName:"jour",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} jour",other:"dans {0} jours"},past:{one:"il y a {0} jour",other:"il y a {0} jours"}}},"day-short":{displayName:"j",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} j",other:"dans {0} j"},past:{one:"il y a {0} j",other:"il y a {0} j"}}},hour:{displayName:"heure",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} heure",other:"dans {0} heures"},past:{one:"il y a {0} heure",other:"il y a {0} heures"}}},"hour-short":{displayName:"h",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} h",other:"dans {0} h"},past:{one:"il y a {0} h",other:"il y a {0} h"}}},minute:{displayName:"minute",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} minute",other:"dans {0} minutes"},past:{one:"il y a {0} minute",other:"il y a {0} minutes"}}},"minute-short":{displayName:"min",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} min",other:"dans {0} min"},past:{one:"il y a {0} min",other:"il y a {0} min"}}},second:{displayName:"seconde",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} seconde",other:"dans {0} secondes"},past:{one:"il y a {0} seconde",other:"il y a {0} secondes"}}},"second-short":{displayName:"s",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} s",other:"dans {0} s"},past:{one:"il y a {0} s",other:"il y a {0} s"}}}}},{locale:"fr-BE",parentLocale:"fr"},{locale:"fr-BF",parentLocale:"fr"},{locale:"fr-BI",parentLocale:"fr"},{locale:"fr-BJ",parentLocale:"fr"},{locale:"fr-BL",parentLocale:"fr"},{locale:"fr-CA",parentLocale:"fr",fields:{year:{displayName:"année",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"Dans {0} an",other:"Dans {0} ans"},past:{one:"Il y a {0} an",other:"Il y a {0} ans"}}},"year-short":{displayName:"a",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"dans {0} a",other:"dans {0} a"},past:{one:"il y a {0} a",other:"il y a {0} a"}}},month:{displayName:"mois",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} mois",other:"dans {0} mois"},past:{one:"il y a {0} mois",other:"il y a {0} mois"}}},"month-short":{displayName:"m.",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} m.",other:"dans {0} m."},past:{one:"il y a {0} m.",other:"il y a {0} m."}}},day:{displayName:"jour",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} jour",other:"dans {0} jours"},past:{one:"il y a {0} jour",other:"il y a {0} jours"}}},"day-short":{displayName:"j",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} j",other:"dans {0} j"},past:{one:"il y a {0} j",other:"il y a {0} j"}}},hour:{displayName:"heure",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} heure",other:"dans {0} heures"},past:{one:"il y a {0} heure",other:"il y a {0} heures"}}},"hour-short":{displayName:"h",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} h",other:"dans {0} h"},past:{one:"il y a {0} h",other:"il y a {0} h"}}},minute:{displayName:"minute",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} minute",other:"dans {0} minutes"},past:{one:"il y a {0} minute",other:"il y a {0} minutes"}}},"minute-short":{displayName:"min",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} min",other:"dans {0} min"},past:{one:"il y a {0} min",other:"il y a {0} min"}}},second:{displayName:"seconde",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} seconde",other:"dans {0} secondes"},past:{one:"il y a {0} seconde",other:"il y a {0} secondes"}}},"second-short":{displayName:"s",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} s",other:"dans {0} s"},past:{one:"il y a {0} s",other:"il y a {0} s"}}}}},{locale:"fr-CD",parentLocale:"fr"},{locale:"fr-CF",parentLocale:"fr"},{locale:"fr-CG",parentLocale:"fr"},{locale:"fr-CH",parentLocale:"fr"},{locale:"fr-CI",parentLocale:"fr"},{locale:"fr-CM",parentLocale:"fr"},{locale:"fr-DJ",parentLocale:"fr"},{locale:"fr-DZ",parentLocale:"fr"},{locale:"fr-GA",parentLocale:"fr"},{locale:"fr-GF",parentLocale:"fr"},{locale:"fr-GN",parentLocale:"fr"},{locale:"fr-GP",parentLocale:"fr"},{locale:"fr-GQ",parentLocale:"fr"},{locale:"fr-HT",parentLocale:"fr",fields:{year:{displayName:"année",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"dans {0} an",other:"dans {0} ans"},past:{one:"il y a {0} an",other:"il y a {0} ans"}}},"year-short":{displayName:"an",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"dans {0} a",other:"dans {0} a"},past:{one:"il y a {0} a",other:"il y a {0} a"}}},month:{displayName:"mois",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} mois",other:"dans {0} mois"},past:{one:"il y a {0} mois",other:"il y a {0} mois"}}},"month-short":{displayName:"m.",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} m.",other:"dans {0} m."},past:{one:"il y a {0} m.",other:"il y a {0} m."}}},day:{displayName:"jour",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} jour",other:"dans {0} jours"},past:{one:"il y a {0} jour",other:"il y a {0} jours"}}},"day-short":{displayName:"jr.",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} j",other:"dans {0} j"},past:{one:"il y a {0} j",other:"il y a {0} j"}}},hour:{displayName:"heure",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} heure",other:"dans {0} heures"},past:{one:"il y a {0} heure",other:"il y a {0} heures"}}},"hour-short":{displayName:"hr",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} h",other:"dans {0} h"},past:{one:"il y a {0} h",other:"il y a {0} h"}}},minute:{displayName:"minute",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} minute",other:"dans {0} minutes"},past:{one:"il y a {0} minute",other:"il y a {0} minutes"}}},"minute-short":{displayName:"min.",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} min",other:"dans {0} min"},past:{one:"il y a {0} min",other:"il y a {0} min"}}},second:{displayName:"seconde",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} seconde",other:"dans {0} secondes"},past:{one:"il y a {0} seconde",other:"il y a {0} secondes"}}},"second-short":{displayName:"s",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} s",other:"dans {0} s"},past:{one:"il y a {0} s",other:"il y a {0} s"}}}}},{locale:"fr-KM",parentLocale:"fr"},{locale:"fr-LU",parentLocale:"fr"},{locale:"fr-MA",parentLocale:"fr"},{locale:"fr-MC",parentLocale:"fr"},{locale:"fr-MF",parentLocale:"fr"},{locale:"fr-MG",parentLocale:"fr"},{locale:"fr-ML",parentLocale:"fr"},{locale:"fr-MQ",parentLocale:"fr"},{locale:"fr-MR",parentLocale:"fr"},{locale:"fr-MU",parentLocale:"fr"},{locale:"fr-NC",parentLocale:"fr"},{locale:"fr-NE",parentLocale:"fr"},{locale:"fr-PF",parentLocale:"fr"},{locale:"fr-PM",parentLocale:"fr"},{locale:"fr-RE",parentLocale:"fr"},{locale:"fr-RW",parentLocale:"fr"},{locale:"fr-SC",parentLocale:"fr"},{locale:"fr-SN",parentLocale:"fr"},{locale:"fr-SY",parentLocale:"fr"},{locale:"fr-TD",parentLocale:"fr"},{locale:"fr-TG",parentLocale:"fr"},{locale:"fr-TN",parentLocale:"fr"},{locale:"fr-VU",parentLocale:"fr"},{locale:"fr-WF",parentLocale:"fr"},{locale:"fr-YT",parentLocale:"fr"},{locale:"fur",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"an",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"ca di {0} an",other:"ca di {0} agns"},past:{one:"{0} an indaûr",other:"{0} agns indaûr"}}},"year-short":{displayName:"an",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"ca di {0} an",other:"ca di {0} agns"},past:{one:"{0} an indaûr",other:"{0} agns indaûr"}}},month:{displayName:"mês",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"ca di {0} mês",other:"ca di {0} mês"},past:{one:"{0} mês indaûr",other:"{0} mês indaûr"}}},"month-short":{displayName:"mês",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"ca di {0} mês",other:"ca di {0} mês"},past:{one:"{0} mês indaûr",other:"{0} mês indaûr"}}},day:{displayName:"dì",relative:{0:"vuê",1:"doman",2:"passantdoman","-2":"îr l’altri","-1":"îr"},relativeTime:{future:{one:"ca di {0} zornade",other:"ca di {0} zornadis"},past:{one:"{0} zornade indaûr",other:"{0} zornadis indaûr"}}},"day-short":{displayName:"dì",relative:{0:"vuê",1:"doman",2:"passantdoman","-2":"îr l’altri","-1":"îr"},relativeTime:{future:{one:"ca di {0} zornade",other:"ca di {0} zornadis"},past:{one:"{0} zornade indaûr",other:"{0} zornadis indaûr"}}},hour:{displayName:"ore",relative:{0:"this hour"},relativeTime:{future:{one:"ca di {0} ore",other:"ca di {0} oris"},past:{one:"{0} ore indaûr",other:"{0} oris indaûr"}}},"hour-short":{displayName:"ore",relative:{0:"this hour"},relativeTime:{future:{one:"ca di {0} ore",other:"ca di {0} oris"},past:{one:"{0} ore indaûr",other:"{0} oris indaûr"}}},minute:{displayName:"minût",relative:{0:"this minute"},relativeTime:{future:{one:"ca di {0} minût",other:"ca di {0} minûts"},past:{one:"{0} minût indaûr",other:"{0} minûts indaûr"}}},"minute-short":{displayName:"minût",relative:{0:"this minute"},relativeTime:{future:{one:"ca di {0} minût",other:"ca di {0} minûts"},past:{one:"{0} minût indaûr",other:"{0} minûts indaûr"}}},second:{displayName:"secont",relative:{0:"now"},relativeTime:{future:{one:"ca di {0} secont",other:"ca di {0} seconts"},past:{one:"{0} secont indaûr",other:"{0} seconts indaûr"}}},"second-short":{displayName:"secont",relative:{0:"now"},relativeTime:{future:{one:"ca di {0} secont",other:"ca di {0} seconts"},past:{one:"{0} secont indaûr",other:"{0} seconts indaûr"}}}}},{locale:"fy",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"Jier",relative:{0:"dit jier",1:"folgjend jier","-1":"foarich jier"},relativeTime:{future:{one:"Oer {0} jier",other:"Oer {0} jier"},past:{one:"{0} jier lyn",other:"{0} jier lyn"}}},"year-short":{displayName:"Jier",relative:{0:"dit jier",1:"folgjend jier","-1":"foarich jier"},relativeTime:{future:{one:"Oer {0} jier",other:"Oer {0} jier"},past:{one:"{0} jier lyn",other:"{0} jier lyn"}}},month:{displayName:"Moanne",relative:{0:"dizze moanne",1:"folgjende moanne","-1":"foarige moanne"},relativeTime:{future:{one:"Oer {0} moanne",other:"Oer {0} moannen"},past:{one:"{0} moanne lyn",other:"{0} moannen lyn"}}},"month-short":{displayName:"Moanne",relative:{0:"dizze moanne",1:"folgjende moanne","-1":"foarige moanne"},relativeTime:{future:{one:"Oer {0} moanne",other:"Oer {0} moannen"},past:{one:"{0} moanne lyn",other:"{0} moannen lyn"}}},day:{displayName:"dei",relative:{0:"vandaag",1:"morgen",2:"Oermorgen","-2":"eergisteren","-1":"gisteren"},relativeTime:{future:{one:"Oer {0} dei",other:"Oer {0} deien"},past:{one:"{0} dei lyn",other:"{0} deien lyn"}}},"day-short":{displayName:"dei",relative:{0:"vandaag",1:"morgen",2:"Oermorgen","-2":"eergisteren","-1":"gisteren"},relativeTime:{future:{one:"Oer {0} dei",other:"Oer {0} deien"},past:{one:"{0} dei lyn",other:"{0} deien lyn"}}},hour:{displayName:"oere",relative:{0:"this hour"},relativeTime:{future:{one:"Oer {0} oere",other:"Oer {0} oere"},past:{one:"{0} oere lyn",other:"{0} oere lyn"}}},"hour-short":{displayName:"oere",relative:{0:"this hour"},relativeTime:{future:{one:"Oer {0} oere",other:"Oer {0} oere"},past:{one:"{0} oere lyn",other:"{0} oere lyn"}}},minute:{displayName:"Minút",relative:{0:"this minute"},relativeTime:{future:{one:"Oer {0} minút",other:"Oer {0} minuten"},past:{one:"{0} minút lyn",other:"{0} minuten lyn"}}},"minute-short":{displayName:"Minút",relative:{0:"this minute"},relativeTime:{future:{one:"Oer {0} minút",other:"Oer {0} minuten"},past:{one:"{0} minút lyn",other:"{0} minuten lyn"}}},second:{displayName:"Sekonde",relative:{0:"nu"},relativeTime:{future:{one:"Oer {0} sekonde",other:"Oer {0} sekonden"},past:{one:"{0} sekonde lyn",other:"{0} sekonden lyn"}}},"second-short":{displayName:"Sekonde",relative:{0:"nu"},relativeTime:{future:{one:"Oer {0} sekonde",other:"Oer {0} sekonden"},past:{one:"{0} sekonde lyn",other:"{0} sekonden lyn"}}}}},{locale:"ga",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e;return t?1==e?"one":"other":1==e?"one":2==e?"two":r&&e>=3&&e<=6?"few":r&&e>=7&&e<=10?"many":"other"},fields:{year:{displayName:"Bliain",relative:{0:"an bhliain seo",1:"an bhliain seo chugainn","-1":"anuraidh"},relativeTime:{future:{one:"i gceann {0} bhliain",two:"i gceann {0} bhliain",few:"i gceann {0} bliana",many:"i gceann {0} mbliana",other:"i gceann {0} bliain"},past:{one:"{0} bhliain ó shin",two:"{0} bhliain ó shin",few:"{0} bliana ó shin",many:"{0} mbliana ó shin",other:"{0} bliain ó shin"}}},"year-short":{displayName:"bl.",relative:{0:"an bhl. seo",1:"an bhl. seo chugainn","-1":"anuraidh"},relativeTime:{future:{one:"i gceann {0} bl.",two:"i gceann {0} bhl.",few:"i gceann {0} bl.",many:"i gceann {0} mbl.",other:"i gceann {0} bl."},past:{one:"{0} bhl. ó shin",two:"{0} bhl. ó shin",few:"{0} bl. ó shin",many:"{0} mbl. ó shin",other:"{0} bl. ó shin"}}},month:{displayName:"Mí",relative:{0:"an mhí seo",1:"an mhí seo chugainn","-1":"an mhí seo caite"},relativeTime:{future:{one:"i gceann {0} mhí",two:"i gceann {0} mhí",few:"i gceann {0} mhí",many:"i gceann {0} mí",other:"i gceann {0} mí"},past:{one:"{0} mhí ó shin",two:"{0} mhí ó shin",few:"{0} mhí ó shin",many:"{0} mí ó shin",other:"{0} mí ó shin"}}},"month-short":{displayName:"mí",relative:{0:"an mhí seo",1:"an mhí seo chugainn","-1":"an mhí seo caite"},relativeTime:{future:{one:"i gceann {0} mhí",two:"i gceann {0} mhí",few:"i gceann {0} mhí",many:"i gceann {0} mí",other:"i gceann {0} mí"},past:{one:"{0} mhí ó shin",two:"{0} mhí ó shin",few:"{0} mhí ó shin",many:"{0} mí ó shin",other:"{0} mí ó shin"}}},day:{displayName:"Lá",relative:{0:"inniu",1:"amárach",2:"arú amárach","-2":"arú inné","-1":"inné"},relativeTime:{future:{one:"i gceann {0} lá",two:"i gceann {0} lá",few:"i gceann {0} lá",many:"i gceann {0} lá",other:"i gceann {0} lá"},past:{one:"{0} lá ó shin",two:"{0} lá ó shin",few:"{0} lá ó shin",many:"{0} lá ó shin",other:"{0} lá ó shin"}}},"day-short":{displayName:"Lá",relative:{0:"inniu",1:"amárach",2:"arú amárach","-2":"arú inné","-1":"inné"},relativeTime:{future:{one:"i gceann {0} lá",two:"i gceann {0} lá",few:"i gceann {0} lá",many:"i gceann {0} lá",other:"i gceann {0} lá"},past:{one:"{0} lá ó shin",two:"{0} lá ó shin",few:"{0} lá ó shin",many:"{0} lá ó shin",other:"{0} lá ó shin"}}},hour:{displayName:"Uair",relative:{0:"an uair seo"},relativeTime:{future:{one:"i gceann {0} uair an chloig",two:"i gceann {0} uair an chloig",few:"i gceann {0} huaire an chloig",many:"i gceann {0} n-uaire an chloig",other:"i gceann {0} uair an chloig"},past:{one:"{0} uair an chloig ó shin",two:"{0} uair an chloig ó shin",few:"{0} huaire an chloig ó shin",many:"{0} n-uaire an chloig ó shin",other:"{0} uair an chloig ó shin"}}},"hour-short":{displayName:"uair",relative:{0:"an uair seo"},relativeTime:{future:{one:"i gceann {0} uair",two:"i gceann {0} uair",few:"i gceann {0} huaire",many:"i gceann {0} n-uaire",other:"i gceann {0} uair"},past:{one:"{0} uair ó shin",two:"{0} uair ó shin",few:"{0} huaire ó shin",many:"{0} n-uaire ó shin",other:"{0} uair ó shin"}}},minute:{displayName:"Nóiméad",relative:{0:"an nóiméad seo"},relativeTime:{future:{one:"i gceann {0} nóiméad",two:"i gceann {0} nóiméad",few:"i gceann {0} nóiméad",many:"i gceann {0} nóiméad",other:"i gceann {0} nóiméad"},past:{one:"{0} nóiméad ó shin",two:"{0} nóiméad ó shin",few:"{0} nóiméad ó shin",many:"{0} nóiméad ó shin",other:"{0} nóiméad ó shin"}}},"minute-short":{displayName:"nóim.",relative:{0:"an nóiméad seo"},relativeTime:{future:{one:"i gceann {0} nóim.",two:"i gceann {0} nóim.",few:"i gceann {0} nóim.",many:"i gceann {0} nóim.",other:"i gceann {0} nóim."},past:{one:"{0} nóim. ó shin",two:"{0} nóim. ó shin",few:"{0} nóim. ó shin",many:"{0} nóim. ó shin",other:"{0} nóim. ó shin"}}},second:{displayName:"Soicind",relative:{0:"anois"},relativeTime:{future:{one:"i gceann {0} soicind",two:"i gceann {0} shoicind",few:"i gceann {0} shoicind",many:"i gceann {0} soicind",other:"i gceann {0} soicind"},past:{one:"{0} soicind ó shin",two:"{0} shoicind ó shin",few:"{0} shoicind ó shin",many:"{0} soicind ó shin",other:"{0} soicind ó shin"}}},"second-short":{displayName:"soic.",relative:{0:"anois"},relativeTime:{future:{one:"i gceann {0} soic.",two:"i gceann {0} shoic.",few:"i gceann {0} shoic.",many:"i gceann {0} soic.",other:"i gceann {0} soic."},past:{one:"{0} soic. ó shin",two:"{0} shoic. ó shin",few:"{0} shoic. ó shin",many:"{0} soic. ó shin",other:"{0} soic. ó shin"}}}}},{locale:"gd",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e;return t?1==e||11==e?"one":2==e||12==e?"two":3==e||13==e?"few":"other":1==e||11==e?"one":2==e||12==e?"two":r&&e>=3&&e<=10||r&&e>=13&&e<=19?"few":"other"},fields:{year:{displayName:"bliadhna",relative:{0:"am bliadhna",1:"an ath-bhliadhna","-2":"a-bhòn-uiridh","-1":"an-uiridh"},relativeTime:{future:{one:"an ceann {0} bhliadhna",two:"an ceann {0} bhliadhna",few:"an ceann {0} bliadhnaichean",other:"an ceann {0} bliadhna"},past:{one:"{0} bhliadhna air ais",two:"{0} bhliadhna air ais",few:"{0} bhliadhnaichean air ais",other:"{0} bliadhna air ais"}}},"year-short":{displayName:"blia.",relative:{0:"am bliadhna",1:"an ath-bhliadhna","-2":"a-bhòn-uiridh","-1":"an-uiridh"},relativeTime:{future:{one:"an {0} bhlia.",two:"an {0} bhlia.",few:"an {0} blia.",other:"an {0} blia."},past:{one:"o {0} bhlia.",two:"o {0} bhlia.",few:"o {0} blia.",other:"o {0} blia."}}},month:{displayName:"mìos",relative:{0:"am mìos seo",1:"an ath-mhìos","-1":"am mìos seo chaidh"},relativeTime:{future:{one:"an ceann {0} mhìosa",two:"an ceann {0} mhìosa",few:"an ceann {0} mìosan",other:"an ceann {0} mìosa"},past:{one:"{0} mhìos air ais",two:"{0} mhìos air ais",few:"{0} mìosan air ais",other:"{0} mìos air ais"}}},"month-short":{displayName:"mìos",relative:{0:"am mìos seo",1:"an ath-mhìos","-1":"am mìos sa chaidh"},relativeTime:{future:{one:"an {0} mhìos.",two:"an {0} mhìos.",few:"an {0} mìos.",other:"an {0} mìos."},past:{one:"o {0} mhìos.",two:"o {0} mhìos.",few:"o {0} mìos.",other:"o {0} mìos."}}},day:{displayName:"latha",relative:{0:"an-diugh",1:"a-màireach",2:"an-earar",3:"an-eararais","-2":"a-bhòin-dè","-1":"an-dè"},relativeTime:{future:{one:"an ceann {0} latha",two:"an ceann {0} latha",few:"an ceann {0} làithean",other:"an ceann {0} latha"},past:{one:"{0} latha air ais",two:"{0} latha air ais",few:"{0} làithean air ais",other:"{0} latha air ais"}}},"day-short":{displayName:"là",relative:{0:"an-diugh",1:"a-màireach",2:"an-earar",3:"an-eararais","-2":"a-bhòin-dè","-1":"an-dè"},relativeTime:{future:{one:"an {0} là",two:"an {0} là",few:"an {0} là.",other:"an {0} là"},past:{one:"o {0} là",two:"o {0} là",few:"o {0} là.",other:"o {0} là"}}},hour:{displayName:"uair a thìde",relative:{0:"am broinn uair a thìde"},relativeTime:{future:{one:"an ceann {0} uair a thìde",two:"an ceann {0} uair a thìde",few:"an ceann {0} uairean a thìde",other:"an ceann {0} uair a thìde"},past:{one:"{0} uair a thìde air ais",two:"{0} uair a thìde air ais",few:"{0} uairean a thìde air ais",other:"{0} uair a thìde air ais"}}},"hour-short":{displayName:"uair",relative:{0:"am broinn uair"},relativeTime:{future:{one:"an {0} uair",two:"an {0} uair",few:"an {0} uair.",other:"an {0} uair"},past:{one:"o {0} uair",two:"o {0} uair",few:"o {0} uair.",other:"o {0} uair"}}},minute:{displayName:"mionaid",relative:{0:"am broinn mionaid"},relativeTime:{future:{one:"an ceann {0} mhionaid",two:"an ceann {0} mhionaid",few:"an ceann {0} mionaidean",other:"an ceann {0} mionaid"},past:{one:"{0} mhionaid air ais",two:"{0} mhionaid air ais",few:"{0} mionaidean air ais",other:"{0} mionaid air ais"}}},"minute-short":{displayName:"mion.",relative:{0:"am broinn mion."},relativeTime:{future:{one:"an {0} mhion.",two:"an {0} mhion.",few:"an {0} mion.",other:"an {0} mion."},past:{one:"o {0} mhion.",two:"o {0} mhion.",few:"o {0} mion.",other:"o {0} mion."}}},second:{displayName:"diog",relative:{0:"an-dràsta"},relativeTime:{future:{one:"an ceann {0} diog",two:"an ceann {0} dhiog",few:"an ceann {0} diogan",other:"an ceann {0} diog"},past:{one:"{0} diog air ais",two:"{0} dhiog air ais",few:"{0} diogan air ais",other:"{0} diog air ais"}}},"second-short":{displayName:"diog",relative:{0:"an-dràsta"},relativeTime:{future:{one:"an {0} diog",two:"an {0} dhiog",few:"an {0} diog.",other:"an {0} diog"},past:{one:"o {0} diog",two:"o {0} dhiog",few:"o {0} diog.",other:"o {0} diog"}}}}},{locale:"gl",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"ano",relative:{0:"este ano",1:"o próximo ano","-1":"o ano pasado"},relativeTime:{future:{one:"en {0} ano",other:"en {0} anos"},past:{one:"hai {0} ano",other:"hai {0} anos"}}},"year-short":{displayName:"ano",relative:{0:"este ano",1:"seguinte ano","-1":"ano pasado"},relativeTime:{future:{one:"en {0} ano",other:"en {0} anos"},past:{one:"hai {0} ano",other:"hai {0} anos"}}},month:{displayName:"mes",relative:{0:"este mes",1:"o próximo mes","-1":"o mes pasado"},relativeTime:{future:{one:"en {0} mes",other:"en {0} meses"},past:{one:"hai {0} mes",other:"hai {0} meses"}}},"month-short":{displayName:"mes",relative:{0:"este m.",1:"m. seguinte","-1":"m. pasado"},relativeTime:{future:{one:"en {0} mes",other:"en {0} meses"},past:{one:"hai {0} mes",other:"hai {0} meses"}}},day:{displayName:"día",relative:{0:"hoxe",1:"mañá",2:"pasadomañá","-2":"antonte","-1":"onte"},relativeTime:{future:{one:"en {0} día",other:"en {0} días"},past:{one:"hai {0} día",other:"hai {0} días"}}},"day-short":{displayName:"día",relative:{0:"hoxe",1:"mañá",2:"pasadomañá","-2":"antonte","-1":"onte"},relativeTime:{future:{one:"en {0} día",other:"en {0} días"},past:{one:"hai {0} día",other:"hai {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"en {0} hora",other:"en {0} horas"},past:{one:"hai {0} hora",other:"hai {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"en {0} h",other:"en {0} h"},past:{one:"hai {0} h",other:"hai {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"en {0} minuto",other:"en {0} minutos"},past:{one:"hai {0} minuto",other:"hai {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"en {0} min",other:"en {0} min"},past:{one:"hai {0} min",other:"hai {0} min"}}},second:{displayName:"segundo",relative:{0:"agora"},relativeTime:{future:{one:"en {0} segundo",other:"en {0} segundos"},past:{one:"hai {0} segundo",other:"hai {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"agora"},relativeTime:{future:{one:"en {0} s",other:"en {0} s"},past:{one:"hai {0} s",other:"hai {0} s"}}}}},{locale:"gsw",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Jaar",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Jaar",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Monet",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Monet",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Tag",relative:{0:"hüt",1:"moorn",2:"übermoorn","-2":"vorgeschter","-1":"geschter"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Tag",relative:{0:"hüt",1:"moorn",2:"übermoorn","-2":"vorgeschter","-1":"geschter"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Schtund",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Schtund",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minuute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minuute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"gsw-FR",parentLocale:"gsw"},{locale:"gsw-LI",parentLocale:"gsw"},{locale:"gu",pluralRuleFunction:function(e,t){return t?1==e?"one":2==e||3==e?"two":4==e?"few":6==e?"many":"other":e>=0&&e<=1?"one":"other"},fields:{year:{displayName:"વર્ષ",relative:{0:"આ વર્ષે",1:"આવતા વર્ષે","-1":"ગયા વર્ષે"},relativeTime:{future:{one:"{0} વર્ષમાં",other:"{0} વર્ષમાં"},past:{one:"{0} વર્ષ પહેલાં",other:"{0} વર્ષ પહેલાં"}}},"year-short":{displayName:"વ.",relative:{0:"આ વર્ષે",1:"આવતા વર્ષે","-1":"ગયા વર્ષે"},relativeTime:{future:{one:"{0} વર્ષમાં",other:"{0} વર્ષમાં"},past:{one:"{0} વર્ષ પહેલાં",other:"{0} વર્ષ પહેલાં"}}},month:{displayName:"મહિનો",relative:{0:"આ મહિને",1:"આવતા મહિને","-1":"ગયા મહિને"},relativeTime:{future:{one:"{0} મહિનામાં",other:"{0} મહિનામાં"},past:{one:"{0} મહિના પહેલાં",other:"{0} મહિના પહેલાં"}}},"month-short":{displayName:"મ.",relative:{0:"આ મહિને",1:"આવતા મહિને","-1":"ગયા મહિને"},relativeTime:{future:{one:"{0} મહિનામાં",other:"{0} મહિનામાં"},past:{one:"{0} મહિના પહેલાં",other:"{0} મહિના પહેલાં"}}},day:{displayName:"દિવસ",relative:{0:"આજે",1:"આવતીકાલે",2:"પરમદિવસે","-2":"ગયા પરમદિવસે","-1":"ગઈકાલે"},relativeTime:{future:{one:"{0} દિવસમાં",other:"{0} દિવસમાં"},past:{one:"{0} દિવસ પહેલાં",other:"{0} દિવસ પહેલાં"}}},"day-short":{displayName:"દિવસ",relative:{0:"આજે",1:"આવતીકાલે",2:"પરમદિવસે","-2":"ગયા પરમદિવસે","-1":"ગઈકાલે"},relativeTime:{future:{one:"{0} દિવસમાં",other:"{0} દિવસમાં"},past:{one:"{0} દિવસ પહેલાં",other:"{0} દિવસ પહેલાં"}}},hour:{displayName:"કલાક",relative:{0:"આ કલાક"},relativeTime:{future:{one:"{0} કલાકમાં",other:"{0} કલાકમાં"},past:{one:"{0} કલાક પહેલાં",other:"{0} કલાક પહેલાં"}}},"hour-short":{displayName:"ક.",relative:{0:"આ કલાક"},relativeTime:{future:{one:"{0} કલાકમાં",other:"{0} કલાકમાં"},past:{one:"{0} કલાક પહેલાં",other:"{0} કલાક પહેલાં"}}},minute:{displayName:"મિનિટ",relative:{0:"આ મિનિટ"},relativeTime:{future:{one:"{0} મિનિટમાં",other:"{0} મિનિટમાં"},past:{one:"{0} મિનિટ પહેલાં",other:"{0} મિનિટ પહેલાં"}}},"minute-short":{displayName:"મિ.",relative:{0:"આ મિનિટ"},relativeTime:{future:{one:"{0} મિનિટમાં",other:"{0} મિનિટમાં"},past:{one:"{0} મિનિટ પહેલાં",other:"{0} મિનિટ પહેલાં"}}},second:{displayName:"સેકન્ડ",relative:{0:"હમણાં"},relativeTime:{future:{one:"{0} સેકંડમાં",other:"{0} સેકંડમાં"},past:{one:"{0} સેકંડ પહેલાં",other:"{0} સેકંડ પહેલાં"}}},"second-short":{displayName:"સે.",relative:{0:"હમણાં"},relativeTime:{future:{one:"{0} સેકંડમાં",other:"{0} સેકંડમાં"},past:{one:"{0} સેકંડ પહેલાં",other:"{0} સેકંડ પહેલાં"}}}}},{locale:"guw",pluralRuleFunction:function(e,t){return t?"other":0==e||1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"guz",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Omwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Omwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Omotienyi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Omotienyi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Rituko",relative:{0:"Rero",1:"Mambia","-1":"Igoro"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Rituko",relative:{0:"Rero",1:"Mambia","-1":"Igoro"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Ensa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Ensa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Edakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Edakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Esekendi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Esekendi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"gv",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=!a[1],o=r.slice(-1),n=r.slice(-2);return t?"other":i&&1==o?"one":i&&2==o?"two":!i||0!=n&&20!=n&&40!=n&&60!=n&&80!=n?i?"other":"many":"few"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ha",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Shekara",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Shekara",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Wata",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Wata",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Kwana",relative:{0:"Yau",1:"Gobe","-1":"Jiya"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Kwana",relative:{0:"Yau",1:"Gobe","-1":"Jiya"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Awa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Awa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Daƙiƙa",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Daƙiƙa",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ha-Arab",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ha-GH",parentLocale:"ha"},{locale:"ha-NE",parentLocale:"ha"},{locale:"haw",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"he",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=!a[1],o=Number(a[0])==e,n=o&&a[0].slice(-1);return t?"other":1==e&&i?"one":2==r&&i?"two":i&&(e<0||e>10)&&o&&0==n?"many":"other"},fields:{year:{displayName:"שנה",relative:{0:"השנה",1:"השנה הבאה","-1":"השנה שעברה"},relativeTime:{future:{one:"בעוד שנה",two:"בעוד שנתיים",many:"בעוד {0} שנה",other:"בעוד {0} שנים"},past:{one:"לפני שנה",two:"לפני שנתיים",many:"לפני {0} שנה",other:"לפני {0} שנים"}}},"year-short":{displayName:"שנ׳",relative:{0:"השנה",1:"השנה הבאה","-1":"השנה שעברה"},relativeTime:{future:{one:"בעוד שנה",two:"בעוד שנתיים",many:"בעוד {0} שנה",other:"בעוד {0} שנים"},past:{one:"לפני שנה",two:"לפני שנתיים",many:"לפני {0} שנה",other:"לפני {0} שנים"}}},month:{displayName:"חודש",relative:{0:"החודש",1:"החודש הבא","-1":"החודש שעבר"},relativeTime:{future:{one:"בעוד חודש",two:"בעוד חודשיים",many:"בעוד {0} חודשים",other:"בעוד {0} חודשים"},past:{one:"לפני חודש",two:"לפני חודשיים",many:"לפני {0} חודשים",other:"לפני {0} חודשים"}}},"month-short":{displayName:"חו׳",relative:{0:"החודש",1:"החודש הבא","-1":"החודש שעבר"},relativeTime:{future:{one:"בעוד חודש",two:"בעוד חודשיים",many:"בעוד {0} חודשים",other:"בעוד {0} חודשים"},past:{one:"לפני חודש",two:"לפני חודשיים",many:"לפני {0} חודשים",other:"לפני {0} חודשים"}}},day:{displayName:"יום",relative:{0:"היום",1:"מחר",2:"מחרתיים","-2":"שלשום","-1":"אתמול"},relativeTime:{future:{one:"בעוד יום {0}",two:"בעוד יומיים",many:"בעוד {0} ימים",other:"בעוד {0} ימים"},past:{one:"לפני יום {0}",two:"לפני יומיים",many:"לפני {0} ימים",other:"לפני {0} ימים"}}},"day-short":{displayName:"יום",relative:{0:"היום",1:"מחר",2:"מחרתיים","-2":"שלשום","-1":"אתמול"},relativeTime:{future:{one:"מחר",two:"בעוד יומיים",many:"בעוד {0} ימים",other:"בעוד {0} ימים"},past:{one:"אתמול",two:"לפני יומיים",many:"לפני {0} ימים",other:"לפני {0} ימים"}}},hour:{displayName:"שעה",relative:{0:"בשעה זו"},relativeTime:{future:{one:"בעוד שעה",two:"בעוד שעתיים",many:"בעוד {0} שעות",other:"בעוד {0} שעות"},past:{one:"לפני שעה",two:"לפני שעתיים",many:"לפני {0} שעות",other:"לפני {0} שעות"}}},"hour-short":{displayName:"שעה",relative:{0:"בשעה זו"},relativeTime:{future:{one:"בעוד שעה",two:"בעוד שעתיים",many:"בעוד {0} שע׳",other:"בעוד {0} שע׳"},past:{one:"לפני שעה",two:"לפני שעתיים",many:"לפני {0} שע׳",other:"לפני {0} שע׳"}}},minute:{displayName:"דקה",relative:{0:"בדקה זו"},relativeTime:{future:{one:"בעוד דקה",two:"בעוד שתי דקות",many:"בעוד {0} דקות",other:"בעוד {0} דקות"},past:{one:"לפני דקה",two:"לפני שתי דקות",many:"לפני {0} דקות",other:"לפני {0} דקות"}}},"minute-short":{displayName:"דק׳",relative:{0:"בדקה זו"},relativeTime:{future:{one:"בעוד דקה",two:"בעוד שתי דק׳",many:"בעוד {0} דק׳",other:"בעוד {0} דק׳"},past:{one:"לפני דקה",two:"לפני {0} דק׳",many:"לפני {0} דק׳",other:"לפני {0} דק׳"}}},second:{displayName:"שנייה",relative:{0:"עכשיו"},relativeTime:{future:{one:"בעוד שנייה",two:"בעוד שתי שניות",many:"בעוד {0} שניות",other:"בעוד {0} שניות"},past:{one:"לפני שנייה",two:"לפני שתי שניות",many:"לפני {0} שניות",other:"לפני {0} שניות"}}},"second-short":{displayName:"שנ׳",relative:{0:"עכשיו"},relativeTime:{future:{one:"בעוד שנ׳",two:"בעוד שתי שנ׳",many:"בעוד {0} שנ׳",other:"בעוד {0} שנ׳"},past:{one:"לפני שנ׳",two:"לפני שתי שנ׳",many:"לפני {0} שנ׳",other:"לפני {0} שנ׳"}}}}},{locale:"hi",pluralRuleFunction:function(e,t){return t?1==e?"one":2==e||3==e?"two":4==e?"few":6==e?"many":"other":e>=0&&e<=1?"one":"other"},fields:{year:{displayName:"वर्ष",relative:{0:"इस वर्ष",1:"अगला वर्ष","-1":"पिछला वर्ष"},relativeTime:{future:{one:"{0} वर्ष में",other:"{0} वर्ष में"},past:{one:"{0} वर्ष पहले",other:"{0} वर्ष पहले"}}},"year-short":{displayName:"वर्ष",relative:{0:"इस वर्ष",1:"अगला वर्ष","-1":"पिछला वर्ष"},relativeTime:{future:{one:"{0} वर्ष में",other:"{0} वर्ष में"},past:{one:"{0} वर्ष पहले",other:"{0} वर्ष पहले"}}},month:{displayName:"माह",relative:{0:"इस माह",1:"अगला माह","-1":"पिछला माह"},relativeTime:{future:{one:"{0} माह में",other:"{0} माह में"},past:{one:"{0} माह पहले",other:"{0} माह पहले"}}},"month-short":{displayName:"माह",relative:{0:"इस माह",1:"अगला माह","-1":"पिछला माह"},relativeTime:{future:{one:"{0} माह में",other:"{0} माह में"},past:{one:"{0} माह पहले",other:"{0} माह पहले"}}},day:{displayName:"दिन",relative:{0:"आज",1:"कल",2:"परसों","-2":"परसों","-1":"कल"},relativeTime:{future:{one:"{0} दिन में",other:"{0} दिन में"},past:{one:"{0} दिन पहले",other:"{0} दिन पहले"}}},"day-short":{displayName:"दिन",relative:{0:"आज",1:"कल",2:"परसों","-2":"परसों","-1":"कल"},relativeTime:{future:{one:"{0} दिन में",other:"{0} दिन में"},past:{one:"{0} दिन पहले",other:"{0} दिन पहले"}}},hour:{displayName:"घंटा",relative:{0:"यह घंटा"},relativeTime:{future:{one:"{0} घंटे में",other:"{0} घंटे में"},past:{one:"{0} घंटे पहले",other:"{0} घंटे पहले"}}},"hour-short":{displayName:"घं॰",relative:{0:"यह घंटा"},relativeTime:{future:{one:"{0} घं॰ में",other:"{0} घं॰ में"},past:{one:"{0} घं॰ पहले",other:"{0} घं॰ पहले"}}},minute:{displayName:"मिनट",relative:{0:"यह मिनट"},relativeTime:{future:{one:"{0} मिनट में",other:"{0} मिनट में"},past:{one:"{0} मिनट पहले",other:"{0} मिनट पहले"}}},"minute-short":{displayName:"मि॰",relative:{0:"यह मिनट"},relativeTime:{future:{one:"{0} मि॰ में",other:"{0} मि॰ में"},past:{one:"{0} मि॰ पहले",other:"{0} मि॰ पहले"}}},second:{displayName:"सेकंड",relative:{0:"अब"},relativeTime:{future:{one:"{0} सेकंड में",other:"{0} सेकंड में"},past:{one:"{0} सेकंड पहले",other:"{0} सेकंड पहले"}}},"second-short":{displayName:"से॰",relative:{0:"अब"},relativeTime:{future:{one:"{0} से॰ में",other:"{0} से॰ में"},past:{one:"{0} से॰ पहले",other:"{0} से॰ पहले"}}}}},{locale:"hr",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=a[1]||"",o=!a[1],n=r.slice(-1),s=r.slice(-2),l=i.slice(-1),h=i.slice(-2);return t?"other":o&&1==n&&11!=s||1==l&&11!=h?"one":o&&n>=2&&n<=4&&(s<12||s>14)||l>=2&&l<=4&&(h<12||h>14)?"few":"other"},fields:{year:{displayName:"godina",relative:{0:"ove godine",1:"sljedeće godine","-1":"prošle godine"},relativeTime:{future:{one:"za {0} godinu",few:"za {0} godine",other:"za {0} godina"},past:{one:"prije {0} godinu",few:"prije {0} godine",other:"prije {0} godina"}}},"year-short":{displayName:"g.",relative:{0:"ove god.",1:"sljedeće god.","-1":"prošle god."},relativeTime:{future:{one:"za {0} g.",few:"za {0} g.",other:"za {0} g."},past:{one:"prije {0} g.",few:"prije {0} g.",other:"prije {0} g."}}},month:{displayName:"mjesec",relative:{0:"ovaj mjesec",1:"sljedeći mjesec","-1":"prošli mjesec"},relativeTime:{future:{one:"za {0} mjesec",few:"za {0} mjeseca",other:"za {0} mjeseci"},past:{one:"prije {0} mjesec",few:"prije {0} mjeseca",other:"prije {0} mjeseci"}}},"month-short":{displayName:"mj.",relative:{0:"ovaj mj.",1:"sljedeći mj.","-1":"prošli mj."},relativeTime:{future:{one:"za {0} mj.",few:"za {0} mj.",other:"za {0} mj."},past:{one:"prije {0} mj.",few:"prije {0} mj.",other:"prije {0} mj."}}},day:{displayName:"dan",relative:{0:"danas",1:"sutra",2:"prekosutra","-2":"prekjučer","-1":"jučer"},relativeTime:{future:{one:"za {0} dan",few:"za {0} dana",other:"za {0} dana"},past:{one:"prije {0} dan",few:"prije {0} dana",other:"prije {0} dana"}}},"day-short":{displayName:"d.",relative:{0:"danas",1:"sutra",2:"prekosutra","-2":"prekjučer","-1":"jučer"},relativeTime:{future:{one:"za {0} dan",few:"za {0} dana",other:"za {0} dana"},past:{one:"prije {0} dan",few:"prije {0} dana",other:"prije {0} dana"}}},hour:{displayName:"sat",relative:{0:"ovaj sat"},relativeTime:{future:{one:"za {0} sat",few:"za {0} sata",other:"za {0} sati"},past:{one:"prije {0} sat",few:"prije {0} sata",other:"prije {0} sati"}}},"hour-short":{displayName:"h",relative:{0:"ovaj sat"},relativeTime:{future:{one:"za {0} h",few:"za {0} h",other:"za {0} h"},past:{one:"prije {0} h",few:"prije {0} h",other:"prije {0} h"}}},minute:{displayName:"minuta",relative:{0:"ova minuta"},relativeTime:{future:{one:"za {0} minutu",few:"za {0} minute",other:"za {0} minuta"},past:{one:"prije {0} minutu",few:"prije {0} minute",other:"prije {0} minuta"}}},"minute-short":{displayName:"min",relative:{0:"ova minuta"},relativeTime:{future:{one:"za {0} min",few:"za {0} min",other:"za {0} min"},past:{one:"prije {0} min",few:"prije {0} min",other:"prije {0} min"}}},second:{displayName:"sekunda",relative:{0:"sad"},relativeTime:{future:{one:"za {0} sekundu",few:"za {0} sekunde",other:"za {0} sekundi"},past:{one:"prije {0} sekundu",few:"prije {0} sekunde",other:"prije {0} sekundi"}}},"second-short":{displayName:"s",relative:{0:"sad"},relativeTime:{future:{one:"za {0} s",few:"za {0} s",other:"za {0} s"},past:{one:"prije {0} s",few:"prije {0} s",other:"prije {0} s"}}}}},{locale:"hr-BA",parentLocale:"hr"},{locale:"hsb",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=a[1]||"",o=!a[1],n=r.slice(-2),s=i.slice(-2);return t?"other":o&&1==n||1==s?"one":o&&2==n||2==s?"two":o&&(3==n||4==n)||3==s||4==s?"few":"other"},fields:{year:{displayName:"lěto",relative:{0:"lětsa",1:"klětu","-1":"loni"},relativeTime:{future:{one:"za {0} lěto",two:"za {0} lěće",few:"za {0} lěta",other:"za {0} lět"},past:{one:"před {0} lětom",two:"před {0} lětomaj",few:"před {0} lětami",other:"před {0} lětami"}}},"year-short":{displayName:"l.",relative:{0:"lětsa",1:"klětu","-1":"loni"},relativeTime:{future:{one:"za {0} l.",two:"za {0} l.",few:"za {0} l.",other:"za {0} l."},past:{one:"před {0} l.",two:"před {0} l.",few:"před {0} l.",other:"před {0} l."}}},month:{displayName:"měsac",relative:{0:"tutón měsac",1:"přichodny měsac","-1":"zašły měsac"},relativeTime:{future:{one:"za {0} měsac",two:"za {0} měsacaj",few:"za {0} měsacy",other:"za {0} měsacow"},past:{one:"před {0} měsacom",two:"před {0} měsacomaj",few:"před {0} měsacami",other:"před {0} měsacami"}}},"month-short":{displayName:"měs.",relative:{0:"tutón měsac",1:"přichodny měsac","-1":"zašły měsac"},relativeTime:{future:{one:"za {0} měs.",two:"za {0} měs.",few:"za {0} měs.",other:"za {0} měs."},past:{one:"před {0} měs.",two:"před {0} měs.",few:"před {0} měs.",other:"před {0} měs."}}},day:{displayName:"dźeń",relative:{0:"dźensa",1:"jutře","-1":"wčera"},relativeTime:{future:{one:"za {0} dźeń",two:"za {0} dnjej",few:"za {0} dny",other:"za {0} dnjow"},past:{one:"před {0} dnjom",two:"před {0} dnjomaj",few:"před {0} dnjemi",other:"před {0} dnjemi"}}},"day-short":{displayName:"dźeń",relative:{0:"dźensa",1:"jutře","-1":"wčera"},relativeTime:{future:{one:"za {0} dźeń",two:"za {0} dnj.",few:"za {0} dny",other:"za {0} dnj."},past:{one:"před {0} dnj.",two:"před {0} dnj.",few:"před {0} dnj.",other:"před {0} dnj."}}},hour:{displayName:"hodźina",relative:{0:"this hour"},relativeTime:{future:{one:"za {0} hodźinu",two:"za {0} hodźinje",few:"za {0} hodźiny",other:"za {0} hodźin"},past:{one:"před {0} hodźinu",two:"před {0} hodźinomaj",few:"před {0} hodźinami",other:"před {0} hodźinami"}}},"hour-short":{displayName:"hodź.",relative:{0:"this hour"},relativeTime:{future:{one:"za {0} hodź.",two:"za {0} hodź.",few:"za {0} hodź.",other:"za {0} hodź."},past:{one:"před {0} hodź.",two:"před {0} hodź.",few:"před {0} hodź.",other:"před {0} hodź."}}},minute:{displayName:"minuta",relative:{0:"this minute"},relativeTime:{future:{one:"za {0} minutu",two:"za {0} minuće",few:"za {0} minuty",other:"za {0} minutow"},past:{one:"před {0} minutu",two:"před {0} minutomaj",few:"před {0} minutami",other:"před {0} minutami"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{one:"za {0} min.",two:"za {0} min.",few:"za {0} min.",other:"za {0} min."},past:{one:"před {0} min.",two:"před {0} min.",few:"před {0} min.",other:"před {0} min."}}},second:{displayName:"sekunda",relative:{0:"now"},relativeTime:{future:{one:"za {0} sekundu",two:"za {0} sekundźe",few:"za {0} sekundy",other:"za {0} sekundow"},past:{one:"před {0} sekundu",two:"před {0} sekundomaj",few:"před {0} sekundami",other:"před {0} sekundami"}}},"second-short":{displayName:"sek.",relative:{0:"now"},relativeTime:{future:{one:"za {0} sek.",two:"za {0} sek.",few:"za {0} sek.",other:"za {0} sek."},past:{one:"před {0} sek.",two:"před {0} sek.",few:"před {0} sek.",other:"před {0} sek."}}}}},{locale:"hu",pluralRuleFunction:function(e,t){return t?1==e||5==e?"one":"other":1==e?"one":"other"},fields:{year:{displayName:"év",relative:{0:"ez az év",1:"következő év","-1":"előző év"},relativeTime:{future:{one:"{0} év múlva",other:"{0} év múlva"},past:{one:"{0} évvel ezelőtt",other:"{0} évvel ezelőtt"}}},"year-short":{displayName:"év",relative:{0:"ez az év",1:"következő év","-1":"előző év"},relativeTime:{future:{one:"{0} év múlva",other:"{0} év múlva"},past:{one:"{0} évvel ezelőtt",other:"{0} évvel ezelőtt"}}},month:{displayName:"hónap",relative:{0:"ez a hónap",1:"következő hónap","-1":"előző hónap"},relativeTime:{future:{one:"{0} hónap múlva",other:"{0} hónap múlva"},past:{one:"{0} hónappal ezelőtt",other:"{0} hónappal ezelőtt"}}},"month-short":{displayName:"hónap",relative:{0:"ez a hónap",1:"következő hónap","-1":"előző hónap"},relativeTime:{future:{one:"{0} hónap múlva",other:"{0} hónap múlva"},past:{one:"{0} hónappal ezelőtt",other:"{0} hónappal ezelőtt"}}},day:{displayName:"nap",relative:{0:"ma",1:"holnap",2:"holnapután","-2":"tegnapelőtt","-1":"tegnap"},relativeTime:{future:{one:"{0} nap múlva",other:"{0} nap múlva"},past:{one:"{0} nappal ezelőtt",other:"{0} nappal ezelőtt"}}},"day-short":{displayName:"nap",relative:{0:"ma",1:"holnap",2:"holnapután","-2":"tegnapelőtt","-1":"tegnap"},relativeTime:{future:{one:"{0} nap múlva",other:"{0} nap múlva"},past:{one:"{0} napja",other:"{0} napja"}}},hour:{displayName:"óra",relative:{0:"ebben az órában"},relativeTime:{future:{one:"{0} óra múlva",other:"{0} óra múlva"},past:{one:"{0} órával ezelőtt",other:"{0} órával ezelőtt"}}},"hour-short":{displayName:"óra",relative:{0:"ebben az órában"},relativeTime:{future:{one:"{0} óra múlva",other:"{0} óra múlva"},past:{one:"{0} órával ezelőtt",other:"{0} órával ezelőtt"}}},minute:{displayName:"perc",relative:{0:"ebben a percben"},relativeTime:{future:{one:"{0} perc múlva",other:"{0} perc múlva"},past:{one:"{0} perccel ezelőtt",other:"{0} perccel ezelőtt"}}},"minute-short":{displayName:"perc",relative:{0:"ebben a percben"},relativeTime:{future:{one:"{0} perc múlva",other:"{0} perc múlva"},past:{one:"{0} perccel ezelőtt",other:"{0} perccel ezelőtt"}}},second:{displayName:"másodperc",relative:{0:"most"},relativeTime:{future:{one:"{0} másodperc múlva",other:"{0} másodperc múlva"},past:{one:"{0} másodperccel ezelőtt",other:"{0} másodperccel ezelőtt"}}},"second-short":{displayName:"másodperc",relative:{0:"most"},relativeTime:{future:{one:"{0} másodperc múlva",other:"{0} másodperc múlva"},past:{one:"{0} másodperccel ezelőtt",other:"{0} másodperccel ezelőtt"}}}}},{locale:"hy",pluralRuleFunction:function(e,t){return t?1==e?"one":"other":e>=0&&e<2?"one":"other"},fields:{year:{displayName:"տարի",relative:{0:"այս տարի",1:"հաջորդ տարի","-1":"նախորդ տարի"},relativeTime:{future:{one:"{0} տարուց",other:"{0} տարուց"},past:{one:"{0} տարի առաջ",other:"{0} տարի առաջ"}}},"year-short":{displayName:"տ",relative:{0:"այս տարի",1:"հաջորդ տարի","-1":"նախորդ տարի"},relativeTime:{future:{one:"{0} տարուց",other:"{0} տարուց"},past:{one:"{0} տ առաջ",other:"{0} տ առաջ"}}},month:{displayName:"ամիս",relative:{0:"այս ամիս",1:"հաջորդ ամիս","-1":"նախորդ ամիս"},relativeTime:{future:{one:"{0} ամսից",other:"{0} ամսից"},past:{one:"{0} ամիս առաջ",other:"{0} ամիս առաջ"}}},"month-short":{displayName:"ամս",relative:{0:"այս ամիս",1:"հաջորդ ամիս","-1":"անցյալ ամիս"},relativeTime:{future:{one:"{0} ամսից",other:"{0} ամսից"},past:{one:"{0} ամիս առաջ",other:"{0} ամիս առաջ"}}},day:{displayName:"օր",relative:{0:"այսօր",1:"վաղը",2:"վաղը չէ մյուս օրը","-2":"երեկ չէ առաջի օրը","-1":"երեկ"},relativeTime:{future:{one:"{0} օրից",other:"{0} օրից"},past:{one:"{0} օր առաջ",other:"{0} օր առաջ"}}},"day-short":{displayName:"օր",relative:{0:"այսօր",1:"վաղը",2:"վաղը չէ մյուս օրը","-2":"երեկ չէ առաջի օրը","-1":"երեկ"},relativeTime:{future:{one:"{0} օրից",other:"{0} օրից"},past:{one:"{0} օր առաջ",other:"{0} օր առաջ"}}},hour:{displayName:"ժամ",relative:{0:"այս ժամին"},relativeTime:{future:{one:"{0} ժամից",other:"{0} ժամից"},past:{one:"{0} ժամ առաջ",other:"{0} ժամ առաջ"}}},"hour-short":{displayName:"ժ",relative:{0:"այս ժամին"},relativeTime:{future:{one:"{0} ժ-ից",other:"{0} ժ-ից"},past:{one:"{0} ժ առաջ",other:"{0} ժ առաջ"}}},minute:{displayName:"րոպե",relative:{0:"այս րոպեին"},relativeTime:{future:{one:"{0} րոպեից",other:"{0} րոպեից"},past:{one:"{0} րոպե առաջ",other:"{0} րոպե առաջ"}}},"minute-short":{displayName:"ր",relative:{0:"այս րոպեին"},relativeTime:{future:{one:"{0} ր-ից",other:"{0} ր-ից"},past:{one:"{0} ր առաջ",other:"{0} ր առաջ"}}},second:{displayName:"վայրկյան",relative:{0:"հիմա"},relativeTime:{future:{one:"{0} վայրկյանից",other:"{0} վայրկյանից"},past:{one:"{0} վայրկյան առաջ",other:"{0} վայրկյան առաջ"}}},"second-short":{displayName:"վ",relative:{0:"հիմա"},relativeTime:{future:{one:"{0} վրկ-ից",other:"{0} վրկ-ից"},past:{one:"{0} վրկ առաջ",other:"{0} վրկ առաջ"}}}}},{locale:"ia",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"anno",relative:{0:"iste anno",1:"le anno proxime","-1":"le anno passate"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"an.",relative:{0:"iste anno",1:"le anno proxime","-1":"le anno passate"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"mense",relative:{0:"iste mense",1:"le mense proxime","-1":"le mense passate"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"mns.",relative:{0:"iste mense",1:"le mense proxime","-1":"le mense passate"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"die",relative:{0:"hodie",1:"deman","-1":"heri"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"die",relative:{0:"hodie",1:"deman","-1":"heri"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"hora",relative:{0:"iste hora"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"hr.",relative:{0:"iste hora"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"minuta",relative:{0:"iste minuta"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"min.",relative:{0:"iste minuta"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"secunda",relative:{0:"ora"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"sec.",relative:{0:"ora"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"id",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"tahun",relative:{0:"tahun ini",1:"tahun depan","-1":"tahun lalu"},relativeTime:{future:{other:"dalam {0} tahun"},past:{other:"{0} tahun yang lalu"}}},"year-short":{displayName:"thn.",relative:{0:"tahun ini",1:"tahun depan","-1":"tahun lalu"},relativeTime:{future:{other:"dlm {0} thn"},past:{other:"{0} thn lalu"}}},month:{displayName:"bulan",relative:{0:"bulan ini",1:"bulan berikutnya","-1":"bulan lalu"},relativeTime:{future:{other:"dalam {0} bulan"},past:{other:"{0} bulan yang lalu"}}},"month-short":{displayName:"bln.",relative:{0:"bulan ini",1:"bulan berikutnya","-1":"bulan lalu"},relativeTime:{future:{other:"dlm {0} bln"},past:{other:"{0} bln lalu"}}},day:{displayName:"hari",relative:{0:"hari ini",1:"besok",2:"lusa","-2":"kemarin dulu","-1":"kemarin"},relativeTime:{future:{other:"dalam {0} hari"},past:{other:"{0} hari yang lalu"}}},"day-short":{displayName:"h",relative:{0:"hari ini",1:"besok",2:"lusa","-2":"kemarin dulu","-1":"kemarin"},relativeTime:{future:{other:"dalam {0} h"},past:{other:"{0} h lalu"}}},hour:{displayName:"Jam",relative:{0:"jam ini"},relativeTime:{future:{other:"dalam {0} jam"},past:{other:"{0} jam yang lalu"}}},"hour-short":{displayName:"jam",relative:{0:"jam ini"},relativeTime:{future:{other:"dalam {0} jam"},past:{other:"{0} jam lalu"}}},minute:{displayName:"menit",relative:{0:"menit ini"},relativeTime:{future:{other:"dalam {0} menit"},past:{other:"{0} menit yang lalu"}}},"minute-short":{displayName:"mnt.",relative:{0:"menit ini"},relativeTime:{future:{other:"dlm {0} mnt"},past:{other:"{0} mnt lalu"}}},second:{displayName:"detik",relative:{0:"sekarang"},relativeTime:{future:{other:"dalam {0} detik"},past:{other:"{0} detik yang lalu"}}},"second-short":{displayName:"dtk.",relative:{0:"sekarang"},relativeTime:{future:{other:"dlm {0} dtk"},past:{other:"{0} dtk lalu"}}}}},{locale:"ig",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Afọ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Afọ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Ọnwa",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Ọnwa",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ụbọchị",relative:{0:"Taata",1:"Echi","-1":"Nnyaafụ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ụbọchị",relative:{0:"Taata",1:"Echi","-1":"Nnyaafụ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Elekere",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Elekere",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Nkeji",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Nkeji",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Nkejinta",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Nkejinta",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ii",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"ꈎ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"ꈎ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"ꆪ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"ꆪ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"ꑍ",relative:{0:"ꀃꑍ",1:"ꃆꏂꑍ",2:"ꌕꀿꑍ","-2":"ꎴꂿꋍꑍ","-1":"ꀋꅔꉈ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"ꑍ",relative:{0:"ꀃꑍ",1:"ꃆꏂꑍ",2:"ꌕꀿꑍ","-2":"ꎴꂿꋍꑍ","-1":"ꀋꅔꉈ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"ꄮꈉ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"ꄮꈉ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"ꃏ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"ꃏ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"ꇙ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"ꇙ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"in",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"io",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"is",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=Number(a[0])==e,o=r.slice(-1),n=r.slice(-2);return t?"other":i&&1==o&&11!=n||!i?"one":"other"},fields:{year:{displayName:"ár",relative:{0:"á þessu ári",1:"á næsta ári","-1":"á síðasta ári"},relativeTime:{future:{one:"eftir {0} ár",other:"eftir {0} ár"},past:{one:"fyrir {0} ári",other:"fyrir {0} árum"}}},"year-short":{displayName:"ár",relative:{0:"á þessu ári",1:"á næsta ári","-1":"á síðasta ári"},relativeTime:{future:{one:"eftir {0} ár",other:"eftir {0} ár"},past:{one:"fyrir {0} ári",other:"fyrir {0} árum"}}},month:{displayName:"mánuður",relative:{0:"í þessum mánuði",1:"í næsta mánuði","-1":"í síðasta mánuði"},relativeTime:{future:{one:"eftir {0} mánuð",other:"eftir {0} mánuði"},past:{one:"fyrir {0} mánuði",other:"fyrir {0} mánuðum"}}},"month-short":{displayName:"mán.",relative:{0:"í þessum mán.",1:"í næsta mán.","-1":"í síðasta mán."},relativeTime:{future:{one:"eftir {0} mán.",other:"eftir {0} mán."},past:{one:"fyrir {0} mán.",other:"fyrir {0} mán."}}},day:{displayName:"dagur",relative:{0:"í dag",1:"á morgun",2:"eftir tvo daga","-2":"í fyrradag","-1":"í gær"},relativeTime:{future:{one:"eftir {0} dag",other:"eftir {0} daga"},past:{one:"fyrir {0} degi",other:"fyrir {0} dögum"}}},"day-short":{displayName:"dagur",relative:{0:"í dag",1:"á morgun",2:"eftir tvo daga","-2":"í fyrradag","-1":"í gær"},relativeTime:{future:{one:"eftir {0} dag",other:"eftir {0} daga"},past:{one:"fyrir {0} degi",other:"fyrir {0} dögum"}}},hour:{displayName:"klukkustund",relative:{0:"þessa stundina"},relativeTime:{future:{one:"eftir {0} klukkustund",other:"eftir {0} klukkustundir"},past:{one:"fyrir {0} klukkustund",other:"fyrir {0} klukkustundum"}}},"hour-short":{displayName:"klst.",relative:{0:"þessa stundina"},relativeTime:{future:{one:"eftir {0} klst.",other:"eftir {0} klst."},past:{one:"fyrir {0} klst.",other:"fyrir {0} klst."}}},minute:{displayName:"mínúta",relative:{0:"á þessari mínútu"},relativeTime:{future:{one:"eftir {0} mínútu",other:"eftir {0} mínútur"},past:{one:"fyrir {0} mínútu",other:"fyrir {0} mínútum"}}},"minute-short":{displayName:"mín.",relative:{0:"á þessari mínútu"},relativeTime:{future:{one:"eftir {0} mín.",other:"eftir {0} mín."},past:{one:"fyrir {0} mín.",other:"fyrir {0} mín."}}},second:{displayName:"sekúnda",relative:{0:"núna"},relativeTime:{future:{one:"eftir {0} sekúndu",other:"eftir {0} sekúndur"},past:{one:"fyrir {0} sekúndu",other:"fyrir {0} sekúndum"}}},"second-short":{displayName:"sek.",relative:{0:"núna"},relativeTime:{future:{one:"eftir {0} sek.",other:"eftir {0} sek."},past:{one:"fyrir {0} sek.",other:"fyrir {0} sek."}}}}},{locale:"it",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?11==e||8==e||80==e||800==e?"many":"other":1==e&&a?"one":"other"},fields:{year:{displayName:"anno",relative:{0:"quest’anno",1:"anno prossimo","-1":"anno scorso"},relativeTime:{future:{one:"tra {0} anno",other:"tra {0} anni"},past:{one:"{0} anno fa",other:"{0} anni fa"}}},"year-short":{displayName:"anno",relative:{0:"quest’anno",1:"anno prossimo","-1":"anno scorso"},relativeTime:{future:{one:"tra {0} anno",other:"tra {0} anni"},past:{one:"{0} anno fa",other:"{0} anni fa"}}},month:{displayName:"mese",relative:{0:"questo mese",1:"mese prossimo","-1":"mese scorso"},relativeTime:{future:{one:"tra {0} mese",other:"tra {0} mesi"},past:{one:"{0} mese fa",other:"{0} mesi fa"}}},"month-short":{displayName:"mese",relative:{0:"questo mese",1:"mese prossimo","-1":"mese scorso"},relativeTime:{future:{one:"tra {0} mese",other:"tra {0} mesi"},past:{one:"{0} mese fa",other:"{0} mesi fa"}}},day:{displayName:"giorno",relative:{0:"oggi",1:"domani",2:"dopodomani","-2":"l’altro ieri","-1":"ieri"},relativeTime:{future:{one:"tra {0} giorno",other:"tra {0} giorni"},past:{one:"{0} giorno fa",other:"{0} giorni fa"}}},"day-short":{displayName:"g",relative:{0:"oggi",1:"domani",2:"dopodomani","-2":"l’altro ieri","-1":"ieri"},relativeTime:{future:{one:"tra {0} g",other:"tra {0} gg"},past:{one:"{0} g fa",other:"{0} gg fa"}}},hour:{displayName:"ora",relative:{0:"quest’ora"},relativeTime:{future:{one:"tra {0} ora",other:"tra {0} ore"},past:{one:"{0} ora fa",other:"{0} ore fa"}}},"hour-short":{displayName:"h.",relative:{0:"quest’ora"},relativeTime:{future:{one:"tra {0} h",other:"tra {0} h"},past:{one:"{0} h fa",other:"{0} h fa"}}},minute:{displayName:"minuto",relative:{0:"questo minuto"},relativeTime:{future:{one:"tra {0} minuto",other:"tra {0} minuti"},past:{one:"{0} minuto fa",other:"{0} minuti fa"}}},"minute-short":{displayName:"min",relative:{0:"questo minuto"},relativeTime:{future:{one:"tra {0} min",other:"tra {0} min"},past:{one:"{0} min fa",other:"{0} min fa"}}},second:{displayName:"secondo",relative:{0:"ora"},relativeTime:{future:{one:"tra {0} secondo",other:"tra {0} secondi"},past:{one:"{0} secondo fa",other:"{0} secondi fa"}}},"second-short":{displayName:"s",relative:{0:"ora"},relativeTime:{future:{one:"tra {0} s",other:"tra {0} sec."},past:{one:"{0} s fa",other:"{0} sec. fa"}}}}},{locale:"it-CH",parentLocale:"it"},{locale:"it-SM",parentLocale:"it"},{locale:"it-VA",parentLocale:"it"},{locale:"iu",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":2==e?"two":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"iu-Latn",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"iw",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=!a[1],o=Number(a[0])==e,n=o&&a[0].slice(-1);return t?"other":1==e&&i?"one":2==r&&i?"two":i&&(e<0||e>10)&&o&&0==n?"many":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ja",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"年",relative:{0:"今年",1:"翌年","-1":"昨年"},relativeTime:{future:{other:"{0} 年後"},past:{other:"{0} 年前"}}},"year-short":{displayName:"年",relative:{0:"今年",1:"翌年","-1":"昨年"},relativeTime:{future:{other:"{0} 年後"},past:{other:"{0} 年前"}}},month:{displayName:"月",relative:{0:"今月",1:"翌月","-1":"先月"},relativeTime:{future:{other:"{0} か月後"},past:{other:"{0} か月前"}}},"month-short":{displayName:"月",relative:{0:"今月",1:"翌月","-1":"先月"},relativeTime:{future:{other:"{0} か月後"},past:{other:"{0} か月前"}}},day:{displayName:"日",relative:{0:"今日",1:"明日",2:"明後日","-2":"一昨日","-1":"昨日"},relativeTime:{future:{other:"{0} 日後"},past:{other:"{0} 日前"}}},"day-short":{displayName:"日",relative:{0:"今日",1:"明日",2:"明後日","-2":"一昨日","-1":"昨日"},relativeTime:{future:{other:"{0} 日後"},past:{other:"{0} 日前"}}},hour:{displayName:"時",relative:{0:"1 時間以内"},relativeTime:{future:{other:"{0} 時間後"},past:{other:"{0} 時間前"}}},"hour-short":{displayName:"時",relative:{0:"1 時間以内"},relativeTime:{future:{other:"{0} 時間後"},past:{other:"{0} 時間前"}}},minute:{displayName:"分",relative:{0:"1 分以内"},relativeTime:{future:{other:"{0} 分後"},past:{other:"{0} 分前"}}},"minute-short":{displayName:"分",relative:{0:"1 分以内"},relativeTime:{future:{other:"{0} 分後"},past:{other:"{0} 分前"}}},second:{displayName:"秒",relative:{0:"今"},relativeTime:{future:{other:"{0} 秒後"},past:{other:"{0} 秒前"}}},"second-short":{displayName:"秒",relative:{0:"今"},relativeTime:{future:{other:"{0} 秒後"},past:{other:"{0} 秒前"}}}}},{locale:"jbo",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"jgo",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"Nǔu ŋguꞋ {0}",other:"Nǔu ŋguꞋ {0}"},past:{one:"Ɛ́gɛ́ mɔ́ ŋguꞋ {0}",other:"Ɛ́gɛ́ mɔ́ ŋguꞋ {0}"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"Nǔu ŋguꞋ {0}",other:"Nǔu ŋguꞋ {0}"},past:{one:"Ɛ́gɛ́ mɔ́ ŋguꞋ {0}",other:"Ɛ́gɛ́ mɔ́ ŋguꞋ {0}"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"Nǔu {0} saŋ",other:"Nǔu {0} saŋ"},past:{one:"ɛ́ gɛ́ mɔ́ pɛsaŋ {0}",other:"ɛ́ gɛ́ mɔ́ pɛsaŋ {0}"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"Nǔu {0} saŋ",other:"Nǔu {0} saŋ"},past:{one:"ɛ́ gɛ́ mɔ́ pɛsaŋ {0}",other:"ɛ́ gɛ́ mɔ́ pɛsaŋ {0}"}}},day:{displayName:"Day",relative:{0:"lɔꞋɔ",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"Nǔu lɛ́Ꞌ {0}",other:"Nǔu lɛ́Ꞌ {0}"},past:{one:"Ɛ́ gɛ́ mɔ́ lɛ́Ꞌ {0}",other:"Ɛ́ gɛ́ mɔ́ lɛ́Ꞌ {0}"}}},"day-short":{displayName:"Day",relative:{0:"lɔꞋɔ",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"Nǔu lɛ́Ꞌ {0}",other:"Nǔu lɛ́Ꞌ {0}"},past:{one:"Ɛ́ gɛ́ mɔ́ lɛ́Ꞌ {0}",other:"Ɛ́ gɛ́ mɔ́ lɛ́Ꞌ {0}"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{one:"nǔu háwa {0}",other:"nǔu háwa {0}"},past:{one:"ɛ́ gɛ mɔ́ {0} háwa",other:"ɛ́ gɛ mɔ́ {0} háwa"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{one:"nǔu háwa {0}",other:"nǔu háwa {0}"},past:{one:"ɛ́ gɛ mɔ́ {0} háwa",other:"ɛ́ gɛ mɔ́ {0} háwa"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{one:"nǔu {0} minút",other:"nǔu {0} minút"},past:{one:"ɛ́ gɛ́ mɔ́ minút {0}",other:"ɛ́ gɛ́ mɔ́ minút {0}"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{one:"nǔu {0} minút",other:"nǔu {0} minút"},past:{one:"ɛ́ gɛ́ mɔ́ minút {0}",other:"ɛ́ gɛ́ mɔ́ minút {0}"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ji",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"jmc",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Maka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Maka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mori",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mori",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Mfiri",relative:{0:"Inu",1:"Ngama","-1":"Ukou"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Mfiri",relative:{0:"Inu",1:"Ngama","-1":"Ukou"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Dakyika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Dakyika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"jv",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"taun",relative:{0:"taun iki",1:"taun ngarep","-1":"taun wingi"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"taun",relative:{0:"taun iki",1:"taun ngarep","-1":"taun wingi"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"sasi",relative:{0:"sasi iki",1:"sasi ngarep","-1":"sasi wingi"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"sasi",relative:{0:"sasi iki",1:"sasi ngarep","-1":"sasi wingi"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"dino",relative:{0:"saiki",1:"sesuk","-1":"wingi"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"dino",relative:{0:"saiki",1:"sesuk","-1":"wingi"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"jam",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"jam",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"menit",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"menit",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"detik",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"detik",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"jw",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ka",pluralRuleFunction:function(e,t){var a=String(e).split(".")[0],r=a.slice(-2);return t?1==a?"one":0==a||r>=2&&r<=20||40==r||60==r||80==r?"many":"other":1==e?"one":"other"},fields:{year:{displayName:"წელი",relative:{0:"ამ წელს",1:"მომავალ წელს","-1":"გასულ წელს"},relativeTime:{future:{one:"{0} წელიწადში",other:"{0} წელიწადში"},past:{one:"{0} წლის წინ",other:"{0} წლის წინ"}}},"year-short":{displayName:"წ.",relative:{0:"ამ წელს",1:"მომავალ წელს","-1":"გასულ წელს"},relativeTime:{future:{one:"{0} წელში",other:"{0} წელში"},past:{one:"{0} წლის წინ",other:"{0} წლის წინ"}}},month:{displayName:"თვე",relative:{0:"ამ თვეში",1:"მომავალ თვეს","-1":"გასულ თვეს"},relativeTime:{future:{one:"{0} თვეში",other:"{0} თვეში"},past:{one:"{0} თვის წინ",other:"{0} თვის წინ"}}},"month-short":{displayName:"თვე",relative:{0:"ამ თვეში",1:"მომავალ თვეს","-1":"გასულ თვეს"},relativeTime:{future:{one:"{0} თვეში",other:"{0} თვეში"},past:{one:"{0} თვის წინ",other:"{0} თვის წინ"}}},day:{displayName:"დღე",relative:{0:"დღეს",1:"ხვალ",2:"ზეგ","-2":"გუშინწინ","-1":"გუშინ"},relativeTime:{future:{one:"{0} დღეში",other:"{0} დღეში"},past:{one:"{0} დღის წინ",other:"{0} დღის წინ"}}},"day-short":{displayName:"დღე",relative:{0:"დღეს",1:"ხვალ",2:"ზეგ","-2":"გუშინწინ","-1":"გუშინ"},relativeTime:{future:{one:"{0} დღეში",other:"{0} დღეში"},past:{one:"{0} დღის წინ",other:"{0} დღის წინ"}}},hour:{displayName:"საათი",relative:{0:"ამ საათში"},relativeTime:{future:{one:"{0} საათში",other:"{0} საათში"},past:{one:"{0} საათის წინ",other:"{0} საათის წინ"}}},"hour-short":{displayName:"სთ.",relative:{0:"ამ საათში"},relativeTime:{future:{one:"{0} საათში",other:"{0} საათში"},past:{one:"{0} სთ წინ",other:"{0} სთ წინ"}}},minute:{displayName:"წუთი",relative:{0:"ამ წუთში"},relativeTime:{future:{one:"{0} წუთში",other:"{0} წუთში"},past:{one:"{0} წუთის წინ",other:"{0} წუთის წინ"}}},"minute-short":{displayName:"წთ.",relative:{0:"ამ წუთში"},relativeTime:{future:{one:"{0} წუთში",other:"{0} წუთში"},past:{one:"{0} წთ წინ",other:"{0} წთ წინ"}}},second:{displayName:"წამი",relative:{0:"ახლა"},relativeTime:{future:{one:"{0} წამში",other:"{0} წამში"},past:{one:"{0} წამის წინ",other:"{0} წამის წინ"}}},"second-short":{displayName:"წმ.",relative:{0:"ახლა"},relativeTime:{future:{one:"{0} წამში",other:"{0} წამში"},past:{one:"{0} წმ წინ",other:"{0} წმ წინ"}}}}},{locale:"kab",pluralRuleFunction:function(e,t){return t?"other":e>=0&&e<2?"one":"other"},fields:{year:{displayName:"Aseggas",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Aseggas",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Aggur",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Aggur",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ass",relative:{0:"Ass-a",1:"Azekka","-1":"Iḍelli"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ass",relative:{0:"Ass-a",1:"Azekka","-1":"Iḍelli"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Tamert",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Tamert",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Tamrect",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Tamrect",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Tasint",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Tasint",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"kaj",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"kam",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mwai",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mwai",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Mũthenya",relative:{0:"Ũmũnthĩ",1:"Ũnĩ","-1":"Ĩyoo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Mũthenya",relative:{0:"Ũmũnthĩ",1:"Ũnĩ","-1":"Ĩyoo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Ndatĩka",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Ndatĩka",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"sekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"sekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"kcg",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"kde",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mwedi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mwedi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Lihiku",relative:{0:"Nelo",1:"Nundu","-1":"Lido"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Lihiku",relative:{0:"Nelo",1:"Nundu","-1":"Lido"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"kea",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Anu",relative:{0:"es anu li",1:"prósimu anu","-1":"anu pasadu"},relativeTime:{future:{other:"di li {0} anu"},past:{other:"a ten {0} anu"}}},"year-short":{displayName:"anu",relative:{0:"es anu li",1:"prósimu anu","-1":"anu pasadu"},relativeTime:{future:{other:"di li {0} anu"},past:{other:"a ten {0} anu"}}},month:{displayName:"Mes",relative:{0:"es mes li",1:"prósimu mes","-1":"mes pasadu"},relativeTime:{future:{other:"di li {0} mes"},past:{other:"a ten {0} mes"}}},"month-short":{displayName:"mes",relative:{0:"es mes li",1:"prósimu mes","-1":"mes pasadu"},relativeTime:{future:{other:"di li {0} mes"},past:{other:"a ten {0} mes"}}},day:{displayName:"Dia",relative:{0:"oji",1:"manha","-1":"onti"},relativeTime:{future:{other:"di li {0} dia"},past:{other:"a ten {0} dia"}}},"day-short":{displayName:"dia",relative:{0:"oji",1:"manha","-1":"onti"},relativeTime:{future:{other:"di li {0} dia"},past:{other:"a ten {0} dia"}}},hour:{displayName:"Ora",relative:{0:"this hour"},relativeTime:{future:{other:"di li {0} ora"},past:{other:"a ten {0} ora"}}},"hour-short":{displayName:"ora",relative:{0:"this hour"},relativeTime:{future:{other:"di li {0} ora"},past:{other:"a ten {0} ora"}}},minute:{displayName:"Minutu",relative:{0:"this minute"},relativeTime:{future:{other:"di li {0} minutu"},past:{other:"a ten {0} minutu"}}},"minute-short":{displayName:"min",relative:{0:"this minute"},relativeTime:{future:{other:"di li {0} min"},past:{other:"a ten {0} min"}}},second:{displayName:"Sigundu",relative:{0:"now"},relativeTime:{future:{other:"di li {0} sigundu"},past:{other:"a ten {0} sigundu"}}},"second-short":{displayName:"sig",relative:{0:"now"},relativeTime:{future:{other:"di li {0} sig"},past:{other:"a ten {0} sig"}}}}},{locale:"khq",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Jiiri",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Jiiri",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Handu",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Handu",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Jaari",relative:{0:"Hõo",1:"Suba","-1":"Bi"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Jaari",relative:{0:"Hõo",1:"Suba","-1":"Bi"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Guuru",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Guuru",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Miniti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Miniti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Miti",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Miti",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ki",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mweri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mweri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Mũthenya",relative:{0:"Ũmũthĩ",1:"Rũciũ","-1":"Ira"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Mũthenya",relative:{0:"Ũmũthĩ",1:"Rũciũ","-1":"Ira"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Ithaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Ithaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Ndagĩka",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Ndagĩka",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"kk",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e,i=r&&a[0].slice(-1);return t?6==i||9==i||r&&0==i&&0!=e?"many":"other":1==e?"one":"other"},fields:{year:{displayName:"жыл",relative:{0:"биылғы жыл",1:"келесі жыл","-1":"былтырғы жыл"},relativeTime:{future:{one:"{0} жылдан кейін",other:"{0} жылдан кейін"},past:{one:"{0} жыл бұрын",other:"{0} жыл бұрын"}}},"year-short":{displayName:"ж.",relative:{0:"биылғы жыл",1:"келесі жыл","-1":"былтырғы жыл"},relativeTime:{future:{one:"{0} ж. кейін",other:"{0} ж. кейін"},past:{one:"{0} ж. бұрын",other:"{0} ж. бұрын"}}},month:{displayName:"ай",relative:{0:"осы ай",1:"келесі ай","-1":"өткен ай"},relativeTime:{future:{one:"{0} айдан кейін",other:"{0} айдан кейін"},past:{one:"{0} ай бұрын",other:"{0} ай бұрын"}}},"month-short":{displayName:"ай",relative:{0:"осы ай",1:"келесі ай","-1":"өткен ай"},relativeTime:{future:{one:"{0} айдан кейін",other:"{0} айдан кейін"},past:{one:"{0} ай бұрын",other:"{0} ай бұрын"}}},day:{displayName:"күн",relative:{0:"бүгін",1:"ертең",2:"бүрсігүні","-2":"алдыңгүні","-1":"кеше"},relativeTime:{future:{one:"{0} күннен кейін",other:"{0} күннен кейін"},past:{one:"{0} күн бұрын",other:"{0} күн бұрын"}}},"day-short":{displayName:"күн",relative:{0:"бүгін",1:"ертең",2:"бүрсігүні","-2":"алдыңғы күні","-1":"кеше"},relativeTime:{future:{one:"{0} күннен кейін",other:"{0} күннен кейін"},past:{one:"{0} күн бұрын",other:"{0} күн бұрын"}}},hour:{displayName:"сағат",relative:{0:"осы сағат"},relativeTime:{future:{one:"{0} сағаттан кейін",other:"{0} сағаттан кейін"},past:{one:"{0} сағат бұрын",other:"{0} сағат бұрын"}}},"hour-short":{displayName:"сағ",relative:{0:"осы сағат"},relativeTime:{future:{one:"{0} сағ. кейін",other:"{0} сағ. кейін"},past:{one:"{0} сағ. бұрын",other:"{0} сағ. бұрын"}}},minute:{displayName:"минут",relative:{0:"осы минут"},relativeTime:{future:{one:"{0} минуттан кейін",other:"{0} минуттан кейін"},past:{one:"{0} минут бұрын",other:"{0} минут бұрын"}}},"minute-short":{displayName:"мин",relative:{0:"осы минут"},relativeTime:{future:{one:"{0} мин. кейін",other:"{0} мин. кейін"},past:{one:"{0} мин. бұрын",other:"{0} мин. бұрын"}}},second:{displayName:"секунд",relative:{0:"қазір"},relativeTime:{future:{one:"{0} секундтан кейін",other:"{0} секундтан кейін"},past:{one:"{0} секунд бұрын",other:"{0} секунд бұрын"}}},"second-short":{displayName:"с",relative:{0:"қазір"},relativeTime:{future:{one:"{0} сек. кейін",other:"{0} сек. кейін"},past:{one:"{0} сек. бұрын",other:"{0} сек. бұрын"}}}}},{locale:"kkj",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"muka",1:"nɛmɛnɔ","-1":"kwey"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"muka",1:"nɛmɛnɔ","-1":"kwey"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"kl",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"om {0} ukioq",other:"om {0} ukioq"},past:{one:"for {0} ukioq siden",other:"for {0} ukioq siden"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"om {0} ukioq",other:"om {0} ukioq"},past:{one:"for {0} ukioq siden",other:"for {0} ukioq siden"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"om {0} qaammat",other:"om {0} qaammat"},past:{one:"for {0} qaammat siden",other:"for {0} qaammat siden"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"om {0} qaammat",other:"om {0} qaammat"},past:{one:"for {0} qaammat siden",other:"for {0} qaammat siden"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"om {0} ulloq unnuarlu",other:"om {0} ulloq unnuarlu"},past:{one:"for {0} ulloq unnuarlu siden",other:"for {0} ulloq unnuarlu siden"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"om {0} ulloq unnuarlu",other:"om {0} ulloq unnuarlu"},past:{one:"for {0} ulloq unnuarlu siden",other:"for {0} ulloq unnuarlu siden"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{one:"om {0} nalunaaquttap-akunnera",other:"om {0} nalunaaquttap-akunnera"},past:{one:"for {0} nalunaaquttap-akunnera siden",other:"for {0} nalunaaquttap-akunnera siden"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{one:"om {0} nalunaaquttap-akunnera",other:"om {0} nalunaaquttap-akunnera"},past:{one:"for {0} nalunaaquttap-akunnera siden",other:"for {0} nalunaaquttap-akunnera siden"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{one:"om {0} minutsi",other:"om {0} minutsi"},past:{one:"for {0} minutsi siden",other:"for {0} minutsi siden"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{one:"om {0} minutsi",other:"om {0} minutsi"},past:{one:"for {0} minutsi siden",other:"for {0} minutsi siden"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{one:"om {0} sekundi",other:"om {0} sekundi"},past:{one:"for {0} sekundi siden",other:"for {0} sekundi siden"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{one:"om {0} sekundi",other:"om {0} sekundi"},past:{one:"for {0} sekundi siden",other:"for {0} sekundi siden"}}}}},{locale:"kln",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Kenyit",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Kenyit",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Arawet",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Arawet",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Betut",relative:{0:"Raini",1:"Mutai","-1":"Amut"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Betut",relative:{0:"Raini",1:"Mutai","-1":"Amut"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Sait",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Sait",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minitit",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minitit",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekondit",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekondit",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"km",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"ឆ្នាំ",relative:{0:"ឆ្នាំ​នេះ",1:"ឆ្នាំ​ក្រោយ","-1":"ឆ្នាំ​មុន"},relativeTime:{future:{other:"{0} ឆ្នាំទៀត"},past:{other:"{0} ឆ្នាំ​មុន"}}},"year-short":{displayName:"ឆ្នាំ",relative:{0:"ឆ្នាំ​នេះ",1:"ឆ្នាំ​ក្រោយ","-1":"ឆ្នាំ​មុន"},relativeTime:{future:{other:"{0} ឆ្នាំទៀត"},past:{other:"{0} ឆ្នាំ​មុន"}}},month:{displayName:"ខែ",relative:{0:"ខែ​នេះ",1:"ខែ​ក្រោយ","-1":"ខែ​មុន"},relativeTime:{future:{other:"{0} ខែទៀត"},past:{other:"{0} ខែមុន"}}},"month-short":{displayName:"ខែ",relative:{0:"ខែ​នេះ",1:"ខែ​ក្រោយ","-1":"ខែ​មុន"},relativeTime:{future:{other:"{0} ខែទៀត"},past:{other:"{0} ខែមុន"}}},day:{displayName:"ថ្ងៃ",relative:{0:"ថ្ងៃ​នេះ",1:"ថ្ងៃ​ស្អែក",2:"​ខាន​ស្អែក","-2":"ម្សិល​ម៉្ងៃ","-1":"ម្សិលមិញ"},relativeTime:{future:{other:"{0} ថ្ងៃទៀត"},past:{other:"{0} ថ្ងៃ​មុន"}}},"day-short":{displayName:"ថ្ងៃ",relative:{0:"ថ្ងៃ​នេះ",1:"ថ្ងៃស្អែក",2:"​ខាន​ស្អែក","-2":"ម្សិល​ម៉្ងៃ","-1":"ម្សិលមិញ"},relativeTime:{future:{other:"{0} ថ្ងៃទៀត"},past:{other:"{0} ថ្ងៃ​​មុន"}}},hour:{displayName:"ម៉ោង",relative:{0:"ម៉ោងនេះ"},relativeTime:{future:{other:"ក្នុង​រយៈ​ពេល {0} ម៉ោង"},past:{other:"{0} ម៉ោង​មុន"}}},"hour-short":{displayName:"ម៉ោង",relative:{0:"ម៉ោងនេះ"},relativeTime:{future:{other:"{0} ម៉ោងទៀត"},past:{other:"{0} ម៉ោង​មុន"}}},minute:{displayName:"នាទី",relative:{0:"នាទីនេះ"},relativeTime:{future:{other:"{0} នាទីទៀត"},past:{other:"{0} នាទី​មុន"}}},"minute-short":{displayName:"នាទី",relative:{0:"នាទីនេះ"},relativeTime:{future:{other:"{0} នាទីទៀត"},past:{other:"{0} នាទី​​មុន"}}},second:{displayName:"វិនាទី",relative:{0:"ឥឡូវ"},relativeTime:{future:{other:"{0} វិនាទីទៀត"},past:{other:"{0} វិនាទី​មុន"}}},"second-short":{displayName:"វិនាទី",relative:{0:"ឥឡូវ"},relativeTime:{future:{other:"{0} វិនាទីទៀត"},past:{other:"{0} វិនាទី​មុន"}}}}},{locale:"kn",pluralRuleFunction:function(e,t){return t?"other":e>=0&&e<=1?"one":"other"},fields:{year:{displayName:"ವರ್ಷ",relative:{0:"ಈ ವರ್ಷ",1:"ಮುಂದಿನ ವರ್ಷ","-1":"ಹಿಂದಿನ ವರ್ಷ"},relativeTime:{future:{one:"{0} ವರ್ಷದಲ್ಲಿ",other:"{0} ವರ್ಷಗಳಲ್ಲಿ"},past:{one:"{0} ವರ್ಷದ ಹಿಂದೆ",other:"{0} ವರ್ಷಗಳ ಹಿಂದೆ"}}},"year-short":{displayName:"ವರ್ಷ",relative:{0:"ಈ ವರ್ಷ",1:"ಮುಂದಿನ ವರ್ಷ","-1":"ಕಳೆದ ವರ್ಷ"},relativeTime:{future:{one:"{0} ವರ್ಷದಲ್ಲಿ",other:"{0} ವರ್ಷಗಳಲ್ಲಿ"},past:{one:"{0} ವರ್ಷದ ಹಿಂದೆ",other:"{0} ವರ್ಷಗಳ ಹಿಂದೆ"}}},month:{displayName:"ತಿಂಗಳು",relative:{0:"ಈ ತಿಂಗಳು",1:"ಮುಂದಿನ ತಿಂಗಳು","-1":"ಕಳೆದ ತಿಂಗಳು"},relativeTime:{future:{one:"{0} ತಿಂಗಳಲ್ಲಿ",other:"{0} ತಿಂಗಳುಗಳಲ್ಲಿ"},past:{one:"{0} ತಿಂಗಳ ಹಿಂದೆ",other:"{0} ತಿಂಗಳುಗಳ ಹಿಂದೆ"}}},"month-short":{displayName:"ತಿಂಗಳು",relative:{0:"ಈ ತಿಂಗಳು",1:"ಮುಂದಿನ ತಿಂಗಳು","-1":"ಕಳೆದ ತಿಂಗಳು"},relativeTime:{future:{one:"{0} ತಿಂಗಳಲ್ಲಿ",other:"{0} ತಿಂಗಳುಗಳಲ್ಲಿ"},past:{one:"{0} ತಿಂಗಳು ಹಿಂದೆ",other:"{0} ತಿಂಗಳುಗಳ ಹಿಂದೆ"}}},day:{displayName:"ದಿನ",relative:{0:"ಇಂದು",1:"ನಾಳೆ",2:"ನಾಡಿದ್ದು","-2":"ಮೊನ್ನೆ","-1":"ನಿನ್ನೆ"},relativeTime:{future:{one:"{0} ದಿನದಲ್ಲಿ",other:"{0} ದಿನಗಳಲ್ಲಿ"},past:{one:"{0} ದಿನದ ಹಿಂದೆ",other:"{0} ದಿನಗಳ ಹಿಂದೆ"}}},"day-short":{displayName:"ದಿನ",relative:{0:"ಇಂದು",1:"ನಾಳೆ",2:"ನಾಡಿದ್ದು","-2":"ಮೊನ್ನೆ","-1":"ನಿನ್ನೆ"},relativeTime:{future:{one:"{0} ದಿನದಲ್ಲಿ",other:"{0} ದಿನಗಳಲ್ಲಿ"},past:{one:"{0} ದಿನದ ಹಿಂದೆ",other:"{0} ದಿನಗಳ ಹಿಂದೆ"}}},hour:{displayName:"ಗಂಟೆ",relative:{0:"ಈ ಗಂಟೆ"},relativeTime:{future:{one:"{0} ಗಂಟೆಯಲ್ಲಿ",other:"{0} ಗಂಟೆಗಳಲ್ಲಿ"},past:{one:"{0} ಗಂಟೆ ಹಿಂದೆ",other:"{0} ಗಂಟೆಗಳ ಹಿಂದೆ"}}},"hour-short":{displayName:"ಗಂಟೆ",relative:{0:"ಈ ಗಂಟೆ"},relativeTime:{future:{one:"{0} ಗಂಟೆಯಲ್ಲಿ",other:"{0} ಗಂಟೆಗಳಲ್ಲಿ"},past:{one:"{0} ಗಂಟೆ ಹಿಂದೆ",other:"{0} ಗಂಟೆಗಳ ಹಿಂದೆ"}}},minute:{displayName:"ನಿಮಿಷ",relative:{0:"ಈ ನಿಮಿಷ"},relativeTime:{future:{one:"{0} ನಿಮಿಷದಲ್ಲಿ",other:"{0} ನಿಮಿಷಗಳಲ್ಲಿ"},past:{one:"{0} ನಿಮಿಷದ ಹಿಂದೆ",other:"{0} ನಿಮಿಷಗಳ ಹಿಂದೆ"}}},"minute-short":{displayName:"ನಿಮಿಷ",relative:{0:"ಈ ನಿಮಿಷ"},relativeTime:{future:{one:"{0} ನಿಮಿಷದಲ್ಲಿ",other:"{0} ನಿಮಿಷಗಳಲ್ಲಿ"},past:{one:"{0} ನಿಮಿಷದ ಹಿಂದೆ",other:"{0} ನಿಮಿಷಗಳ ಹಿಂದೆ"}}},second:{displayName:"ಸೆಕೆಂಡ್",relative:{0:"ಈಗ"},relativeTime:{future:{one:"{0} ಸೆಕೆಂಡ್‌ನಲ್ಲಿ",other:"{0} ಸೆಕೆಂಡ್‌ಗಳಲ್ಲಿ"},past:{one:"{0} ಸೆಕೆಂಡ್ ಹಿಂದೆ",other:"{0} ಸೆಕೆಂಡುಗಳ ಹಿಂದೆ"}}},"second-short":{displayName:"ಸೆಕೆಂಡ್",relative:{0:"ಈಗ"},relativeTime:{future:{one:"{0} ಸೆಕೆಂಡ್‌ನಲ್ಲಿ",other:"{0} ಸೆಕೆಂಡ್‌ಗಳಲ್ಲಿ"},past:{one:"{0} ಸೆಕೆಂಡ್ ಹಿಂದೆ",other:"{0} ಸೆಕೆಂಡುಗಳ ಹಿಂದೆ"}}}}},{locale:"ko",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"년",relative:{0:"올해",1:"내년","-1":"작년"},relativeTime:{future:{other:"{0}년 후"},past:{other:"{0}년 전"}}},"year-short":{displayName:"년",relative:{0:"올해",1:"내년","-1":"작년"},relativeTime:{future:{other:"{0}년 후"},past:{other:"{0}년 전"}}},month:{displayName:"월",relative:{0:"이번 달",1:"다음 달","-1":"지난달"},relativeTime:{future:{other:"{0}개월 후"},past:{other:"{0}개월 전"}}},"month-short":{displayName:"월",relative:{0:"이번 달",1:"다음 달","-1":"지난달"},relativeTime:{future:{other:"{0}개월 후"},past:{other:"{0}개월 전"}}},day:{displayName:"일",relative:{0:"오늘",1:"내일",2:"모레","-2":"그저께","-1":"어제"},relativeTime:{future:{other:"{0}일 후"},past:{other:"{0}일 전"}}},"day-short":{displayName:"일",relative:{0:"오늘",1:"내일",2:"모레","-2":"그저께","-1":"어제"},relativeTime:{future:{other:"{0}일 후"},past:{other:"{0}일 전"}}},hour:{displayName:"시",relative:{0:"현재 시간"},relativeTime:{future:{other:"{0}시간 후"},past:{other:"{0}시간 전"}}},"hour-short":{displayName:"시",relative:{0:"현재 시간"},relativeTime:{future:{other:"{0}시간 후"},past:{other:"{0}시간 전"}}},minute:{displayName:"분",relative:{0:"현재 분"},relativeTime:{future:{other:"{0}분 후"},past:{other:"{0}분 전"}}},"minute-short":{displayName:"분",relative:{0:"현재 분"},relativeTime:{future:{other:"{0}분 후"},past:{other:"{0}분 전"}}},second:{displayName:"초",relative:{0:"지금"},relativeTime:{future:{other:"{0}초 후"},past:{other:"{0}초 전"}}},"second-short":{displayName:"초",relative:{0:"지금"},relativeTime:{future:{other:"{0}초 후"},past:{other:"{0}초 전"}}}}},{locale:"ko-KP",parentLocale:"ko"},{locale:"kok",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"वर्स",relative:{0:"हें वर्स",1:"फुडलें वर्स","-1":"फाटलें वर्स"},relativeTime:{future:{other:"{0} वर्सांनीं"},past:{other:"{0} वर्सां आदीं"}}},"year-short":{displayName:"वर्स",relative:{0:"हें वर्स",1:"फुडलें वर्स","-1":"फाटलें वर्स"},relativeTime:{future:{other:"{0} वर्सांनीं"},past:{other:"{0} वर्स आदीं"}}},month:{displayName:"म्हयनो",relative:{0:"हो म्हयनो",1:"फुडलो म्हयनो","-1":"फाटलो म्हयनो"},relativeTime:{future:{other:"{0} म्हयन्यानीं"},past:{other:"{0} म्हयन्यां आदीं"}}},"month-short":{displayName:"म्हयनो",relative:{0:"हो म्हयनो",1:"फुडलो म्हयनो","-1":"फाटलो म्हयनो"},relativeTime:{future:{other:"{0} म्हयन्यानीं"},past:{other:"{0} म्हयन्यां आदीं"}}},day:{displayName:"दीस",relative:{0:"आयज",1:"फाल्यां","-1":"काल"},relativeTime:{future:{other:"{0} दिसानीं"},past:{other:"{0} दीस आदीं"}}},"day-short":{displayName:"दीस",relative:{0:"आयज",1:"फाल्यां","-1":"काल"},relativeTime:{future:{other:"{0} दिसानीं"},past:{other:"{0} दीस आदीं"}}},hour:{displayName:"वर",relative:{0:"हें वर"},relativeTime:{future:{other:"{0} वरांनीं"},past:{other:"{0} वरा आदीं"}}},"hour-short":{displayName:"वर",relative:{0:"हें वर"},relativeTime:{future:{other:"{0} वरांनीं"},past:{other:"{0} वरा आदीं"}}},minute:{displayName:"मिनीट",relative:{0:"हें मिनीट"},relativeTime:{future:{other:"{0} मिन्टां"},past:{other:"{0} मिन्टां आदीं"}}},"minute-short":{displayName:"मिनीट",relative:{0:"हें मिनीट"},relativeTime:{future:{other:"{0} मिन्टां"},past:{other:"{0} मिन्टां आदीं"}}},second:{displayName:"सेकंद",relative:{0:"आतां"},relativeTime:{future:{other:"{0} सेकंदानीं"},past:{other:"{0} सेकंद आदीं"}}},"second-short":{displayName:"सेकंद",relative:{0:"आतां"},relativeTime:{future:{other:"{0} सेकंदानीं"},past:{other:"{0} से. आदीं"}}}}},{locale:"ks",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"ؤری",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"ؤری",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"رٮ۪تھ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"رٮ۪تھ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"دۄہ",relative:{0:"اَز",1:"پگاہ","-1":"راتھ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"دۄہ",relative:{0:"اَز",1:"پگاہ","-1":"راتھ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"گٲنٛٹہٕ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"گٲنٛٹہٕ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"مِنَٹ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"مِنَٹ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"سٮ۪کَنڑ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"سٮ۪کَنڑ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ksb",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Ng’waka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Ng’waka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Ng’ezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Ng’ezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Siku",relative:{0:"Evi eo",1:"Keloi","-1":"Ghuo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Siku",relative:{0:"Evi eo",1:"Keloi","-1":"Ghuo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ksf",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Bǝk",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Bǝk",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Ŋwíí",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Ŋwíí",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ŋwós",relative:{0:"Gɛ́ɛnǝ",1:"Ridúrǝ́","-1":"Rinkɔɔ́"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ŋwós",relative:{0:"Gɛ́ɛnǝ",1:"Ridúrǝ́","-1":"Rinkɔɔ́"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Cámɛɛn",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Cámɛɛn",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Mǝnít",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Mǝnít",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Háu",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Háu",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ksh",pluralRuleFunction:function(e,t){return t?"other":0==e?"zero":1==e?"one":"other"},fields:{year:{displayName:"Johr",relative:{0:"diß Johr",1:"näx Johr","-1":"läz Johr"},relativeTime:{future:{zero:"en keinem Johr",one:"en {0} Johr",other:"en {0} Johre"},past:{zero:"vör keijnem Johr",one:"vör {0} Johr",other:"vör {0} Johre"}}},"year-short":{displayName:"J.",relative:{0:"diß Johr",1:"näx Johr","-1":"läz Johr"},relativeTime:{future:{zero:"en keinem Johr",one:"en {0} Johr",other:"en {0} Johre"},past:{zero:"vör keijnem Johr",one:"vör {0} Johr",other:"vör {0} Johre"}}},month:{displayName:"Mohnd",relative:{0:"diese Mohnd",1:"nächste Mohnd","-1":"lätzde Mohnd"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mohnd",relative:{0:"diese Mohnd",1:"nächste Mohnd","-1":"lätzde Mohnd"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Daach",relative:{0:"hück",1:"morje",2:"övvermorje","-2":"vörjestere","-1":"jestere"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"D.",relative:{0:"hück",1:"morje",2:"övvermorje","-2":"vörjestere","-1":"jestere"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Schtund",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Std.",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Menutt",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekond",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"sek.",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ku",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"sal",relative:{0:"îsal",1:"sala piştî","-1":"par"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"sal",relative:{0:"îsal",1:"sala piştî","-1":"par"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"meh",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"m.",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"roj",relative:{0:"îro",1:"sibe","-1":"duh"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"r.",relative:{0:"îro",1:"sibe","-1":"duh"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"saet",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"st.",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"deqîqe",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"d.",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"saniye",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"s.",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"kw",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":2==e?"two":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ky",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"жыл",relative:{0:"быйыл",1:"эмдиги жылы","-1":"былтыр"},relativeTime:{future:{one:"{0} жылдан кийин",other:"{0} жылдан кийин"},past:{one:"{0} жыл мурун",other:"{0} жыл мурун"}}},"year-short":{displayName:"ж.",relative:{0:"быйыл",1:"эмдиги жылы","-1":"былтыр"},relativeTime:{future:{one:"{0} жыл. кийин",other:"{0} жыл. кийин"},past:{one:"{0} жыл мурун",other:"{0} жыл мурун"}}},month:{displayName:"ай",relative:{0:"бул айда",1:"эмдиги айда","-1":"өткөн айда"},relativeTime:{future:{one:"{0} айдан кийин",other:"{0} айдан кийин"},past:{one:"{0} ай мурун",other:"{0} ай мурун"}}},"month-short":{displayName:"ай",relative:{0:"бул айда",1:"эмдиги айда","-1":"өткөн айда"},relativeTime:{future:{one:"{0} айд. кийин",other:"{0} айд. кийин"},past:{one:"{0} ай мурун",other:"{0} ай мурун"}}},day:{displayName:"күн",relative:{0:"бүгүн",1:"эртең",2:"бүрсүгүнү","-2":"мурдагы күнү","-1":"кечээ"},relativeTime:{future:{one:"{0} күндөн кийин",other:"{0} күндөн кийин"},past:{one:"{0} күн мурун",other:"{0} күн мурун"}}},"day-short":{displayName:"күн",relative:{0:"бүгүн",1:"эртең",2:"бүрсүгүнү","-2":"мурдагы күнү","-1":"кечээ"},relativeTime:{future:{one:"{0} күн. кийин",other:"{0} күн. кийин"},past:{one:"{0} күн мурун",other:"{0} күн мурун"}}},hour:{displayName:"саат",relative:{0:"ушул саатта"},relativeTime:{future:{one:"{0} сааттан кийин",other:"{0} сааттан кийин"},past:{one:"{0} саат мурун",other:"{0} саат мурун"}}},"hour-short":{displayName:"ст",relative:{0:"ушул саатта"},relativeTime:{future:{one:"{0} саат. кийин",other:"{0} саат. кийин"},past:{one:"{0} саат. мурун",other:"{0} саат. мурун"}}},minute:{displayName:"мүнөт",relative:{0:"ушул мүнөттө"},relativeTime:{future:{one:"{0} мүнөттөн кийин",other:"{0} мүнөттөн кийин"},past:{one:"{0} мүнөт мурун",other:"{0} мүнөт мурун"}}},"minute-short":{displayName:"мүн.",relative:{0:"ушул мүнөттө"},relativeTime:{future:{one:"{0} мүн. кийин",other:"{0} мүн. кийин"},past:{one:"{0} мүн. мурун",other:"{0} мүн. мурун"}}},second:{displayName:"секунд",relative:{0:"азыр"},relativeTime:{future:{one:"{0} секунддан кийин",other:"{0} секунддан кийин"},past:{one:"{0} секунд мурун",other:"{0} секунд мурун"}}},"second-short":{displayName:"сек.",relative:{0:"азыр"},relativeTime:{future:{one:"{0} сек. кийин",other:"{0} сек. кийин"},past:{one:"{0} сек. мурун",other:"{0} сек. мурун"}}}}},{locale:"lag",pluralRuleFunction:function(e,t){var a=String(e).split(".")[0];return t?"other":0==e?"zero":0!=a&&1!=a||0==e?"other":"one"},fields:{year:{displayName:"Mwaáka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Mwaáka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mweéri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mweéri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Sikʉ",relative:{0:"Isikʉ",1:"Lamʉtoondo","-1":"Niijo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Sikʉ",relative:{0:"Isikʉ",1:"Lamʉtoondo","-1":"Niijo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Sáa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Sáa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Dakíka",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Dakíka",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekúunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekúunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"lb",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Joer",relative:{0:"dëst Joer",1:"nächst Joer","-1":"lescht Joer"},relativeTime:{future:{one:"an {0} Joer",other:"a(n) {0} Joer"},past:{one:"virun {0} Joer",other:"viru(n) {0} Joer"}}},"year-short":{displayName:"J.",relative:{0:"dëst Joer",1:"nächst Joer","-1":"lescht Joer"},relativeTime:{future:{one:"an {0} J.",other:"a(n) {0} J."},past:{one:"virun {0} J.",other:"viru(n) {0} J."}}},month:{displayName:"Mount",relative:{0:"dëse Mount",1:"nächste Mount","-1":"leschte Mount"},relativeTime:{future:{one:"an {0} Mount",other:"a(n) {0} Méint"},past:{one:"virun {0} Mount",other:"viru(n) {0} Méint"}}},"month-short":{displayName:"M.",relative:{0:"dëse Mount",1:"nächste Mount","-1":"leschte Mount"},relativeTime:{future:{one:"an {0} M.",other:"a(n) {0} M."},past:{one:"virun {0} M.",other:"viru(n) {0} M."}}},day:{displayName:"Dag",relative:{0:"haut",1:"muer","-1":"gëschter"},relativeTime:{future:{one:"an {0} Dag",other:"a(n) {0} Deeg"},past:{one:"virun {0} Dag",other:"viru(n) {0} Deeg"}}},"day-short":{displayName:"D.",relative:{0:"haut",1:"muer","-1":"gëschter"},relativeTime:{future:{one:"an {0} D.",other:"a(n) {0} D."},past:{one:"virun {0} D.",other:"viru(n) {0} D."}}},hour:{displayName:"Stonn",relative:{0:"this hour"},relativeTime:{future:{one:"an {0} Stonn",other:"a(n) {0} Stonnen"},past:{one:"virun {0} Stonn",other:"viru(n) {0} Stonnen"}}},"hour-short":{displayName:"St.",relative:{0:"this hour"},relativeTime:{future:{one:"an {0} St.",other:"a(n) {0} St."},past:{one:"virun {0} St.",other:"viru(n) {0} St."}}},minute:{displayName:"Minutt",relative:{0:"this minute"},relativeTime:{future:{one:"an {0} Minutt",other:"a(n) {0} Minutten"},past:{one:"virun {0} Minutt",other:"viru(n) {0} Minutten"}}},"minute-short":{displayName:"Min.",relative:{0:"this minute"},relativeTime:{future:{one:"an {0} Min.",other:"a(n) {0} Min."},past:{one:"virun {0} Min.",other:"viru(n) {0} Min."}}},second:{displayName:"Sekonn",relative:{0:"now"},relativeTime:{future:{one:"an {0} Sekonn",other:"a(n) {0} Sekonnen"},past:{one:"virun {0} Sekonn",other:"viru(n) {0} Sekonnen"}}},"second-short":{displayName:"Sek.",relative:{0:"now"},relativeTime:{future:{one:"an {0} Sek.",other:"a(n) {0} Sek."},past:{one:"virun {0} Sek.",other:"viru(n) {0} Sek."}}}}},{locale:"lg",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mwezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mwezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Lunaku",relative:{0:"Lwaleero",1:"Nkya","-1":"Ggulo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Lunaku",relative:{0:"Lwaleero",1:"Nkya","-1":"Ggulo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Saawa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Saawa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Dakiika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Dakiika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Kasikonda",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Kasikonda",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"lkt",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Ómakȟa",relative:{0:"Lé ómakȟa kiŋ",1:"Tȟokáta ómakȟa kiŋháŋ","-1":"Ómakȟa kʼuŋ héhaŋ"},relativeTime:{future:{other:"Letáŋhaŋ ómakȟa {0} kiŋháŋ"},past:{other:"Hékta ómakȟa {0} kʼuŋ héhaŋ"}}},"year-short":{displayName:"Ómakȟa",relative:{0:"Lé ómakȟa kiŋ",1:"Tȟokáta ómakȟa kiŋháŋ","-1":"Ómakȟa kʼuŋ héhaŋ"},relativeTime:{future:{other:"Letáŋhaŋ ómakȟa {0} kiŋháŋ"},past:{other:"Hékta ómakȟa {0} kʼuŋ héhaŋ"}}},month:{displayName:"Wí",relative:{0:"Lé wí kiŋ",1:"Tȟokáta wí kiŋháŋ","-1":"Wí kʼuŋ héhaŋ"},relativeTime:{future:{other:"Letáŋhaŋ wíyawapi {0} kiŋháŋ"},past:{other:"Hékta wíyawapi {0} kʼuŋ héhaŋ"}}},"month-short":{displayName:"Wí",relative:{0:"Lé wí kiŋ",1:"Tȟokáta wí kiŋháŋ","-1":"Wí kʼuŋ héhaŋ"},relativeTime:{future:{other:"Letáŋhaŋ wíyawapi {0} kiŋháŋ"},past:{other:"Hékta wíyawapi {0} kʼuŋ héhaŋ"}}},day:{displayName:"Aŋpétu",relative:{0:"Lé aŋpétu kiŋ",1:"Híŋhaŋni kiŋháŋ","-1":"Ȟtálehaŋ"},relativeTime:{future:{other:"Letáŋhaŋ {0}-čháŋ kiŋháŋ"},past:{other:"Hékta {0}-čháŋ k’uŋ héhaŋ"}}},"day-short":{displayName:"Aŋpétu",relative:{0:"Lé aŋpétu kiŋ",1:"Híŋhaŋni kiŋháŋ","-1":"Ȟtálehaŋ"},relativeTime:{future:{other:"Letáŋhaŋ {0}-čháŋ kiŋháŋ"},past:{other:"Hékta {0}-čháŋ k’uŋ héhaŋ"}}},hour:{displayName:"Owápȟe",relative:{0:"this hour"},relativeTime:{future:{other:"Letáŋhaŋ owápȟe {0} kiŋháŋ"},past:{other:"Hékta owápȟe {0} kʼuŋ héhaŋ"}}},"hour-short":{displayName:"Owápȟe",relative:{0:"this hour"},relativeTime:{future:{other:"Letáŋhaŋ owápȟe {0} kiŋháŋ"},past:{other:"Hékta owápȟe {0} kʼuŋ héhaŋ"}}},minute:{displayName:"Owápȟe oȟʼáŋkȟo",relative:{0:"this minute"},relativeTime:{future:{other:"Letáŋhaŋ oȟ’áŋkȟo {0} kiŋháŋ"},past:{other:"Hékta oȟ’áŋkȟo {0} k’uŋ héhaŋ"}}},"minute-short":{displayName:"Owápȟe oȟʼáŋkȟo",relative:{0:"this minute"},relativeTime:{future:{other:"Letáŋhaŋ oȟ’áŋkȟo {0} kiŋháŋ"},past:{other:"Hékta oȟ’áŋkȟo {0} k’uŋ héhaŋ"}}},second:{displayName:"Okpí",relative:{0:"now"},relativeTime:{future:{other:"Letáŋhaŋ okpí {0} kiŋháŋ"},past:{other:"Hékta okpí {0} k’uŋ héhaŋ"}}},"second-short":{displayName:"Okpí",relative:{0:"now"},relativeTime:{future:{other:"Letáŋhaŋ okpí {0} kiŋháŋ"},past:{other:"Hékta okpí {0} k’uŋ héhaŋ"}}}}},{locale:"ln",pluralRuleFunction:function(e,t){return t?"other":0==e||1==e?"one":"other"},fields:{year:{displayName:"Mobú",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Mobú",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Sánzá",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Sánzá",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Mokɔlɔ",relative:{0:"Lɛlɔ́",1:"Lóbi ekoyâ","-1":"Lóbi elékí"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Mokɔlɔ",relative:{0:"Lɛlɔ́",1:"Lóbi ekoyâ","-1":"Lóbi elékí"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Ngonga",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Ngonga",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Monúti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Monúti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sɛkɔ́ndɛ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sɛkɔ́ndɛ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ln-AO",parentLocale:"ln"},{locale:"ln-CF",parentLocale:"ln"},{locale:"ln-CG",parentLocale:"ln"},{locale:"lo",pluralRuleFunction:function(e,t){return t&&1==e?"one":"other"},fields:{year:{displayName:"ປີ",relative:{0:"ປີນີ້",1:"ປີໜ້າ","-1":"ປີກາຍ"},relativeTime:{future:{other:"ໃນອີກ {0} ປີ"},past:{other:"{0} ປີກ່ອນ"}}},"year-short":{displayName:"ປີ",relative:{0:"ປີນີ້",1:"ປີໜ້າ","-1":"ປີກາຍ"},relativeTime:{future:{other:"ໃນອີກ {0} ປີ"},past:{other:"{0} ປີກ່ອນ"}}},month:{displayName:"ເດືອນ",relative:{0:"ເດືອນນີ້",1:"ເດືອນໜ້າ","-1":"ເດືອນແລ້ວ"},relativeTime:{future:{other:"ໃນອີກ {0} ເດືອນ"},past:{other:"{0} ເດືອນກ່ອນ"}}},"month-short":{displayName:"ດ.",relative:{0:"ເດືອນນີ້",1:"ເດືອນໜ້າ","-1":"ເດືອນແລ້ວ"},relativeTime:{future:{other:"ໃນອີກ {0} ດ."},past:{other:"{0} ດ. ກ່ອນ"}}},day:{displayName:"ມື້",relative:{0:"ມື້ນີ້",1:"ມື້ອື່ນ",2:"ມື້ຮື","-2":"ມື້ກ່ອນ","-1":"ມື້ວານ"},relativeTime:{future:{other:"ໃນອີກ {0} ມື້"},past:{other:"{0} ມື້ກ່ອນ"}}},"day-short":{displayName:"ມື້",relative:{0:"ມື້ນີ້",1:"ມື້ອື່ນ",2:"ມື້ຮື","-2":"ມື້ກ່ອນ","-1":"ມື້ວານ"},relativeTime:{future:{other:"ໃນອີກ {0} ມື້"},past:{other:"{0} ມື້ກ່ອນ"}}},hour:{displayName:"ຊົ່ວໂມງ",relative:{0:"ຊົ່ວໂມງນີ້"},relativeTime:{future:{other:"ໃນອີກ {0} ຊົ່ວໂມງ"},past:{other:"{0} ຊົ່ວໂມງກ່ອນ"}}},"hour-short":{displayName:"ຊມ.",relative:{0:"ຊົ່ວໂມງນີ້"},relativeTime:{future:{other:"ໃນອີກ {0} ຊມ."},past:{other:"{0} ຊມ. ກ່ອນ"}}},minute:{displayName:"ນາທີ",relative:{0:"ນາທີນີ້"},relativeTime:{future:{other:"{0} ໃນອີກ 0 ນາທີ"},past:{other:"{0} ນາທີກ່ອນ"}}},"minute-short":{displayName:"ນທ.",relative:{0:"ນາທີນີ້"},relativeTime:{future:{other:"ໃນ {0} ນທ."},past:{other:"{0} ນທ. ກ່ອນ"}}},second:{displayName:"ວິນາທີ",relative:{0:"ຕອນນີ້"},relativeTime:{future:{other:"ໃນອີກ {0} ວິນາທີ"},past:{other:"{0} ວິນາທີກ່ອນ"}}},"second-short":{displayName:"ວິ.",relative:{0:"ຕອນນີ້"},relativeTime:{future:{other:"ໃນ {0} ວິ."},past:{other:"{0} ວິ. ກ່ອນ"}}}}},{locale:"lrc",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"سال",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"سال",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"ما",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"ما",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"روٙز",relative:{0:"أمروٙ",1:"شوٙصوٙ","-1":"دیروٙز"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"روٙز",relative:{0:"أمروٙ",1:"شوٙصوٙ","-1":"دیروٙز"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"ساأت",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"ساأت",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"دئیقە",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"دئیقە",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"ثانیە",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"ثانیە",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"lrc-IQ",parentLocale:"lrc"},{locale:"lt",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[1]||"",i=Number(a[0])==e,o=i&&a[0].slice(-1),n=i&&a[0].slice(-2);return t?"other":1==o&&(n<11||n>19)?"one":o>=2&&o<=9&&(n<11||n>19)?"few":0!=r?"many":"other"},fields:{year:{displayName:"metai",relative:{0:"šiais metais",1:"kitais metais","-1":"praėjusiais metais"},relativeTime:{future:{one:"po {0} metų",few:"po {0} metų",many:"po {0} metų",other:"po {0} metų"},past:{one:"prieš {0} metus",few:"prieš {0} metus",many:"prieš {0} metų",other:"prieš {0} metų"}}},"year-short":{displayName:"m.",relative:{0:"šiais metais",1:"kitais metais","-1":"praėjusiais metais"},relativeTime:{future:{one:"po {0} m.",few:"po {0} m.",many:"po {0} m.",other:"po {0} m."},past:{one:"prieš {0} m.",few:"prieš {0} m.",many:"prieš {0} m.",other:"prieš {0} m."}}},month:{displayName:"mėnuo",relative:{0:"šį mėnesį",1:"kitą mėnesį","-1":"praėjusį mėnesį"},relativeTime:{future:{one:"po {0} mėnesio",few:"po {0} mėnesių",many:"po {0} mėnesio",other:"po {0} mėnesių"},past:{one:"prieš {0} mėnesį",few:"prieš {0} mėnesius",many:"prieš {0} mėnesio",other:"prieš {0} mėnesių"}}},"month-short":{displayName:"mėn.",relative:{0:"šį mėnesį",1:"kitą mėnesį","-1":"praėjusį mėnesį"},relativeTime:{future:{one:"po {0} mėn.",few:"po {0} mėn.",many:"po {0} mėn.",other:"po {0} mėn."},past:{one:"prieš {0} mėn.",few:"prieš {0} mėn.",many:"prieš {0} mėn.",other:"prieš {0} mėn."}}},day:{displayName:"diena",relative:{0:"šiandien",1:"rytoj",2:"poryt","-2":"užvakar","-1":"vakar"},relativeTime:{future:{one:"po {0} dienos",few:"po {0} dienų",many:"po {0} dienos",other:"po {0} dienų"},past:{one:"prieš {0} dieną",few:"prieš {0} dienas",many:"prieš {0} dienos",other:"prieš {0} dienų"}}},"day-short":{displayName:"d.",relative:{0:"šiandien",1:"rytoj",2:"poryt","-2":"užvakar","-1":"vakar"},relativeTime:{future:{one:"po {0} d.",few:"po {0} d.",many:"po {0} d.",other:"po {0} d."},past:{one:"prieš {0} d.",few:"prieš {0} d.",many:"prieš {0} d.",other:"prieš {0} d."}}},hour:{displayName:"valanda",relative:{0:"šią valandą"},relativeTime:{future:{one:"po {0} valandos",few:"po {0} valandų",many:"po {0} valandos",other:"po {0} valandų"},past:{one:"prieš {0} valandą",few:"prieš {0} valandas",many:"prieš {0} valandos",other:"prieš {0} valandų"}}},"hour-short":{displayName:"val.",relative:{0:"šią valandą"},relativeTime:{future:{one:"po {0} val.",few:"po {0} val.",many:"po {0} val.",other:"po {0} val."},past:{one:"prieš {0} val.",few:"prieš {0} val.",many:"prieš {0} val.",other:"prieš {0} val."}}},minute:{displayName:"minutė",relative:{0:"šią minutę"},relativeTime:{future:{one:"po {0} minutės",few:"po {0} minučių",many:"po {0} minutės",other:"po {0} minučių"},past:{one:"prieš {0} minutę",few:"prieš {0} minutes",many:"prieš {0} minutės",other:"prieš {0} minučių"}}},"minute-short":{displayName:"min.",relative:{0:"šią minutę"},relativeTime:{future:{one:"po {0} min.",few:"po {0} min.",many:"po {0} min.",other:"po {0} min."},past:{one:"prieš {0} min.",few:"prieš {0} min.",many:"prieš {0} min.",other:"prieš {0} min."}}},second:{displayName:"sekundė",relative:{0:"dabar"},relativeTime:{future:{one:"po {0} sekundės",few:"po {0} sekundžių",many:"po {0} sekundės",other:"po {0} sekundžių"},past:{one:"prieš {0} sekundę",few:"prieš {0} sekundes",many:"prieš {0} sekundės",other:"prieš {0} sekundžių"}}},"second-short":{displayName:"sek.",relative:{0:"dabar"},relativeTime:{future:{one:"po {0} sek.",few:"po {0} sek.",many:"po {0} sek.",other:"po {0} sek."},past:{one:"prieš {0} sek.",few:"prieš {0} sek.",many:"prieš {0} sek.",other:"prieš {0} sek."}}}}},{locale:"lu",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Tshidimu",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Tshidimu",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Ngondo",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Ngondo",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Dituku",relative:{0:"Lelu",1:"Malaba","-1":"Makelela"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Dituku",relative:{0:"Lelu",1:"Malaba","-1":"Makelela"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Diba",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Diba",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Kasunsu",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Kasunsu",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Kasunsukusu",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Kasunsukusu",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"luo",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"higa",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"higa",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"dwe",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"dwe",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"chieng’",relative:{0:"kawuono",1:"kiny","-1":"nyoro"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"chieng’",relative:{0:"kawuono",1:"kiny","-1":"nyoro"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"nyiriri mar saa",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"nyiriri mar saa",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"luy",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Muhiga",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Muhiga",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mweri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mweri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ridiku",relative:{0:"Lero",1:"Mgamba","-1":"Mgorova"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ridiku",relative:{0:"Lero",1:"Mgamba","-1":"Mgorova"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Isaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Isaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Idagika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Idagika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"lv",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[1]||"",i=r.length,o=Number(a[0])==e,n=o&&a[0].slice(-1),s=o&&a[0].slice(-2),l=r.slice(-2),h=r.slice(-1);return t?"other":o&&0==n||s>=11&&s<=19||2==i&&l>=11&&l<=19?"zero":1==n&&11!=s||2==i&&1==h&&11!=l||2!=i&&1==h?"one":"other"},fields:{year:{displayName:"gads",relative:{0:"šajā gadā",1:"nākamajā gadā","-1":"pagājušajā gadā"},relativeTime:{future:{zero:"pēc {0} gadiem",one:"pēc {0} gada",other:"pēc {0} gadiem"},past:{zero:"pirms {0} gadiem",one:"pirms {0} gada",other:"pirms {0} gadiem"}}},"year-short":{displayName:"g.",relative:{0:"šajā gadā",1:"nākamajā gadā","-1":"pagājušajā gadā"},relativeTime:{future:{zero:"pēc {0} g.",one:"pēc {0} g.",other:"pēc {0} g."},past:{zero:"pirms {0} g.",one:"pirms {0} g.",other:"pirms {0} g."}}},month:{displayName:"mēnesis",relative:{0:"šajā mēnesī",1:"nākamajā mēnesī","-1":"pagājušajā mēnesī"},relativeTime:{future:{zero:"pēc {0} mēnešiem",one:"pēc {0} mēneša",other:"pēc {0} mēnešiem"},past:{zero:"pirms {0} mēnešiem",one:"pirms {0} mēneša",other:"pirms {0} mēnešiem"}}},"month-short":{displayName:"mēn.",relative:{0:"šajā mēnesī",1:"nākamajā mēnesī","-1":"pagājušajā mēnesī"},relativeTime:{future:{zero:"pēc {0} mēn.",one:"pēc {0} mēn.",other:"pēc {0} mēn."},past:{zero:"pirms {0} mēn.",one:"pirms {0} mēn.",other:"pirms {0} mēn."}}},day:{displayName:"diena",relative:{0:"šodien",1:"rīt",2:"parīt","-2":"aizvakar","-1":"vakar"},relativeTime:{future:{zero:"pēc {0} dienām",one:"pēc {0} dienas",other:"pēc {0} dienām"},past:{zero:"pirms {0} dienām",one:"pirms {0} dienas",other:"pirms {0} dienām"}}},"day-short":{displayName:"d.",relative:{0:"šodien",1:"rīt",2:"parīt","-2":"aizvakar","-1":"vakar"},relativeTime:{future:{zero:"pēc {0} d.",one:"pēc {0} d.",other:"pēc {0} d."},past:{zero:"pirms {0} d.",one:"pirms {0} d.",other:"pirms {0} d."}}},hour:{displayName:"stundas",relative:{0:"šajā stundā"},relativeTime:{future:{zero:"pēc {0} stundām",one:"pēc {0} stundas",other:"pēc {0} stundām"},past:{zero:"pirms {0} stundām",one:"pirms {0} stundas",other:"pirms {0} stundām"}}},"hour-short":{displayName:"st.",relative:{0:"šajā stundā"},relativeTime:{future:{zero:"pēc {0} st.",one:"pēc {0} st.",other:"pēc {0} st."},past:{zero:"pirms {0} st.",one:"pirms {0} st.",other:"pirms {0} st."}}},minute:{displayName:"minūtes",relative:{0:"šajā minūtē"},relativeTime:{future:{zero:"pēc {0} minūtēm",one:"pēc {0} minūtes",other:"pēc {0} minūtēm"},past:{zero:"pirms {0} minūtēm",one:"pirms {0} minūtes",other:"pirms {0} minūtēm"}}},"minute-short":{displayName:"min.",relative:{0:"šajā minūtē"},relativeTime:{future:{zero:"pēc {0} min.",one:"pēc {0} min.",other:"pēc {0} min."},past:{zero:"pirms {0} min.",one:"pirms {0} min.",other:"pirms {0} min."}}},second:{displayName:"sekundes",relative:{0:"tagad"},relativeTime:{future:{zero:"pēc {0} sekundēm",one:"pēc {0} sekundes",other:"pēc {0} sekundēm"},past:{zero:"pirms {0} sekundēm",one:"pirms {0} sekundes",other:"pirms {0} sekundēm"}}},"second-short":{displayName:"sek.",relative:{0:"tagad"},relativeTime:{future:{zero:"pēc {0} sek.",one:"pēc {0} sek.",other:"pēc {0} sek."},past:{zero:"pirms {0} sek.",one:"pirms {0} sek.",other:"pirms {0} sek."}}}}},{locale:"mas",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Ɔlárì",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Ɔlárì",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Ɔlápà",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Ɔlápà",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ɛnkɔlɔ́ŋ",relative:{0:"Táatá",1:"Tááisérè","-1":"Ŋolé"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ɛnkɔlɔ́ŋ",relative:{0:"Táatá",1:"Tááisérè","-1":"Ŋolé"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Ɛ́sáâ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Ɛ́sáâ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Oldákikaè",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Oldákikaè",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"mas-TZ",parentLocale:"mas"},{locale:"mer",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Mwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mweri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mweri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ntukũ",relative:{0:"Narua",1:"Rũjũ","-1":"Ĩgoro"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ntukũ",relative:{0:"Narua",1:"Rũjũ","-1":"Ĩgoro"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Ĩthaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Ĩthaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Ndagika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Ndagika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"mfe",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Lane",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Lane",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mwa",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mwa",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Zour",relative:{0:"Zordi",1:"Demin","-1":"Yer"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Zour",relative:{0:"Zordi",1:"Demin","-1":"Yer"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Ler",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Ler",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minit",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minit",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Segonn",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Segonn",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"mg",pluralRuleFunction:function(e,t){return t?"other":0==e||1==e?"one":"other"},fields:{year:{displayName:"Taona",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Taona",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Volana",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Volana",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Andro",relative:{0:"Anio",1:"Rahampitso","-1":"Omaly"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Andro",relative:{0:"Anio",1:"Rahampitso","-1":"Omaly"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Ora",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Ora",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minitra",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minitra",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Segondra",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Segondra",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"mgh",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"yaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"yaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"mweri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"mweri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"nihuku",relative:{0:"lel’lo",1:"me’llo","-1":"n’chana"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"nihuku",relative:{0:"lel’lo",1:"me’llo","-1":"n’chana"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"isaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"isaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"idakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"idakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"isekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"isekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"mgo",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"fituʼ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"fituʼ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"iməg",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"+{0} m",other:"+{0} m"},past:{one:"-{0} m",other:"-{0} m"}}},"month-short":{displayName:"iməg",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"+{0} m",other:"+{0} m"},past:{one:"-{0} m",other:"-{0} m"}}},day:{displayName:"anəg",relative:{0:"tèchɔ̀ŋ",1:"isu",2:"isu ywi","-1":"ikwiri"},relativeTime:{future:{one:"+{0} d",other:"+{0} d"},past:{one:"-{0} d",other:"-{0} d"}}},"day-short":{displayName:"anəg",relative:{0:"tèchɔ̀ŋ",1:"isu",2:"isu ywi","-1":"ikwiri"},relativeTime:{future:{one:"+{0} d",other:"+{0} d"},past:{one:"-{0} d",other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{one:"+{0} h",other:"+{0} h"},past:{one:"-{0} h",other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{one:"+{0} h",other:"+{0} h"},past:{one:"-{0} h",other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{one:"+{0} min",other:"+{0} min"},past:{one:"-{0} min",other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{one:"+{0} min",other:"+{0} min"},past:{one:"-{0} min",other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{one:"+{0} s",other:"+{0} s"},past:{one:"-{0} s",other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{one:"+{0} s",other:"+{0} s"},past:{one:"-{0} s",other:"-{0} s"}}}}},{locale:"mi",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"tau",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"t",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"marama",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"m",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"rā",relative:{0:"āianei",1:"āpōpō","-1":"inanahi"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"rā",relative:{0:"āianei",1:"āpōpō","-1":"inanahi"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"hāora",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"hr",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"meneti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"men",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"hēkona",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"hēk",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"mk",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=a[1]||"",o=!a[1],n=r.slice(-1),s=r.slice(-2),l=i.slice(-1),h=i.slice(-2);return t?1==n&&11!=s?"one":2==n&&12!=s?"two":7!=n&&8!=n||17==s||18==s?"other":"many":o&&1==n&&11!=s||1==l&&11!=h?"one":"other"},fields:{year:{displayName:"година",relative:{0:"оваа година",1:"следната година","-1":"минатата година"},relativeTime:{future:{one:"за {0} година",other:"за {0} години"},past:{one:"пред {0} година",other:"пред {0} години"}}},"year-short":{displayName:"год.",relative:{0:"оваа година",1:"следната година","-1":"минатата година"},relativeTime:{future:{one:"за {0} год.",other:"за {0} год."},past:{one:"пред {0} год.",other:"пред {0} год."}}},month:{displayName:"месец",relative:{0:"овој месец",1:"следниот месец","-1":"минатиот месец"},relativeTime:{future:{one:"за {0} месец",other:"за {0} месеци"},past:{one:"пред {0} месец",other:"пред {0} месеци"}}},"month-short":{displayName:"мес.",relative:{0:"овој месец",1:"следниот месец","-1":"минатиот месец"},relativeTime:{future:{one:"за {0} месец",other:"за {0} месеци"},past:{one:"пред {0} месец",other:"пред {0} месеци"}}},day:{displayName:"ден",relative:{0:"денес",1:"утре",2:"задутре","-2":"завчера","-1":"вчера"},relativeTime:{future:{one:"за {0} ден",other:"за {0} дена"},past:{one:"пред {0} ден",other:"пред {0} дена"}}},"day-short":{displayName:"ден",relative:{0:"денес",1:"утре",2:"задутре","-2":"завчера","-1":"вчера"},relativeTime:{future:{one:"за {0} ден",other:"за {0} дена"},past:{one:"пред {0} ден",other:"пред {0} дена"}}},hour:{displayName:"час",relative:{0:"часов"},relativeTime:{future:{one:"за {0} час",other:"за {0} часа"},past:{one:"пред {0} час",other:"пред {0} часа"}}},"hour-short":{displayName:"ч.",relative:{0:"часов"},relativeTime:{future:{one:"за {0} час",other:"за {0} часа"},past:{one:"пред {0} час",other:"пред {0} часа"}}},minute:{displayName:"минута",relative:{0:"оваа минута"},relativeTime:{future:{one:"за {0} минута",other:"за {0} минути"},past:{one:"пред {0} минута",other:"пред {0} минути"}}},"minute-short":{displayName:"мин.",relative:{0:"оваа минута"},relativeTime:{future:{one:"за {0} мин.",other:"за {0} мин."},past:{one:"пред {0} мин.",other:"пред {0} мин."}}},second:{displayName:"секунда",relative:{0:"сега"},relativeTime:{future:{one:"за {0} секунда",other:"за {0} секунди"},past:{one:"пред {0} секунда",other:"пред {0} секунди"}}},"second-short":{displayName:"сек.",relative:{0:"сега"},relativeTime:{future:{one:"за {0} сек.",other:"за {0} сек."},past:{one:"пред {0} сек.",other:"пред {0} сек."}}}}},{locale:"ml",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"വർഷം",relative:{0:"ഈ വർ‌ഷം",1:"അടുത്തവർഷം","-1":"കഴിഞ്ഞ വർഷം"},relativeTime:{future:{one:"{0} വർഷത്തിൽ",other:"{0} വർഷത്തിൽ"},past:{one:"{0} വർഷം മുമ്പ്",other:"{0} വർഷം മുമ്പ്"}}},"year-short":{displayName:"വ.",relative:{0:"ഈ വർ‌ഷം",1:"അടുത്തവർഷം","-1":"കഴിഞ്ഞ വർഷം"},relativeTime:{future:{one:"{0} വർഷത്തിൽ",other:"{0} വർഷത്തിൽ"},past:{one:"{0} വർഷം മുമ്പ്",other:"{0} വർഷം മുമ്പ്"}}},month:{displayName:"മാസം",relative:{0:"ഈ മാസം",1:"അടുത്ത മാസം","-1":"കഴിഞ്ഞ മാസം"},relativeTime:{future:{one:"{0} മാസത്തിൽ",other:"{0} മാസത്തിൽ"},past:{one:"{0} മാസം മുമ്പ്",other:"{0} മാസം മുമ്പ്"}}},"month-short":{displayName:"മാ.",relative:{0:"ഈ മാസം",1:"അടുത്ത മാസം","-1":"കഴിഞ്ഞ മാസം"},relativeTime:{future:{one:"{0} മാസത്തിൽ",other:"{0} മാസത്തിൽ"},past:{one:"{0} മാസം മുമ്പ്",other:"{0} മാസം മുമ്പ്"}}},day:{displayName:"ദിവസം",relative:{0:"ഇന്ന്",1:"നാളെ",2:"മറ്റന്നാൾ","-2":"മിനിഞ്ഞാന്ന്","-1":"ഇന്നലെ"},relativeTime:{future:{one:"{0} ദിവസത്തിൽ",other:"{0} ദിവസത്തിൽ"},past:{one:"{0} ദിവസം മുമ്പ്",other:"{0} ദിവസം മുമ്പ്"}}},"day-short":{displayName:"ദിവസം",relative:{0:"ഇന്ന്",1:"നാളെ",2:"മറ്റന്നാൾ","-2":"മിനിഞ്ഞാന്ന്","-1":"ഇന്നലെ"},relativeTime:{future:{one:"{0} ദിവസത്തിൽ",other:"{0} ദിവസത്തിൽ"},past:{one:"{0} ദിവസം മുമ്പ്",other:"{0} ദിവസം മുമ്പ്"}}},hour:{displayName:"മണിക്കൂർ",relative:{0:"ഈ മണിക്കൂറിൽ"},relativeTime:{future:{one:"{0} മണിക്കൂറിൽ",other:"{0} മണിക്കൂറിൽ"},past:{one:"{0} മണിക്കൂർ മുമ്പ്",other:"{0} മണിക്കൂർ മുമ്പ്"}}},"hour-short":{displayName:"മ.",relative:{0:"ഈ മണിക്കൂറിൽ"},relativeTime:{future:{one:"{0} മണിക്കൂറിൽ",other:"{0} മണിക്കൂറിൽ"},past:{one:"{0} മണിക്കൂർ മുമ്പ്",other:"{0} മണിക്കൂർ മുമ്പ്"}}},minute:{displayName:"മിനിറ്റ്",relative:{0:"ഈ മിനിറ്റിൽ"},relativeTime:{future:{one:"{0} മിനിറ്റിൽ",other:"{0} മിനിറ്റിൽ"},past:{one:"{0} മിനിറ്റ് മുമ്പ്",other:"{0} മിനിറ്റ് മുമ്പ്"}}},"minute-short":{displayName:"മി.",relative:{0:"ഈ മിനിറ്റിൽ"},relativeTime:{future:{one:"{0} മിനിറ്റിൽ",other:"{0} മിനിറ്റിൽ"},past:{one:"{0} മിനിറ്റ് മുമ്പ്",other:"{0} മിനിറ്റ് മുമ്പ്"}}},second:{displayName:"സെക്കൻഡ്",relative:{0:"ഇപ്പോൾ"},relativeTime:{future:{one:"{0} സെക്കൻഡിൽ",other:"{0} സെക്കൻഡിൽ"},past:{one:"{0} സെക്കൻഡ് മുമ്പ്",other:"{0} സെക്കൻഡ് മുമ്പ്"}}},"second-short":{displayName:"സെ.",relative:{0:"ഇപ്പോൾ"},relativeTime:{future:{one:"{0} സെക്കൻഡിൽ",other:"{0} സെക്കൻഡിൽ"},past:{one:"{0} സെക്കൻഡ് മുമ്പ്",other:"{0} സെക്കൻഡ് മുമ്പ്"}}}}},{locale:"mn",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"жил",relative:{0:"энэ жил",1:"ирэх жил","-1":"өнгөрсөн жил"},relativeTime:{future:{one:"{0} жилийн дараа",other:"{0} жилийн дараа"},past:{one:"{0} жилийн өмнө",other:"{0} жилийн өмнө"}}},"year-short":{displayName:"жил",relative:{0:"энэ жил",1:"ирэх жил","-1":"өнгөрсөн жил"},relativeTime:{future:{one:"{0} жилийн дараа",other:"{0} жилийн дараа"},past:{one:"{0} жилийн өмнө",other:"{0} жилийн өмнө"}}},month:{displayName:"сар",relative:{0:"энэ сар",1:"ирэх сар","-1":"өнгөрсөн сар"},relativeTime:{future:{one:"{0} сарын дараа",other:"{0} сарын дараа"},past:{one:"{0} сарын өмнө",other:"{0} сарын өмнө"}}},"month-short":{displayName:"сар",relative:{0:"энэ сар",1:"ирэх сар","-1":"өнгөрсөн сар"},relativeTime:{future:{one:"{0} сарын дараа",other:"{0} сарын дараа"},past:{one:"{0} сарын өмнө",other:"{0} сарын өмнө"}}},day:{displayName:"өдөр",relative:{0:"өнөөдөр",1:"маргааш",2:"нөгөөдөр","-2":"уржигдар","-1":"өчигдөр"},relativeTime:{future:{one:"{0} өдрийн дараа",other:"{0} өдрийн дараа"},past:{one:"{0} өдрийн өмнө",other:"{0} өдрийн өмнө"}}},"day-short":{displayName:"өдөр",relative:{0:"өнөөдөр",1:"маргааш",2:"нөгөөдөр","-2":"уржигдар","-1":"өчигдөр"},relativeTime:{future:{one:"{0} өдрийн дараа",other:"{0} өдрийн дараа"},past:{one:"{0} өдрийн өмнө",other:"{0} өдрийн өмнө"}}},hour:{displayName:"цаг",relative:{0:"энэ цаг"},relativeTime:{future:{one:"{0} цагийн дараа",other:"{0} цагийн дараа"},past:{one:"{0} цагийн өмнө",other:"{0} цагийн өмнө"}}},"hour-short":{displayName:"ц",relative:{0:"энэ цаг"},relativeTime:{future:{one:"{0} ц дараа",other:"{0} ц дараа"},past:{one:"{0} ц өмнө",other:"{0} ц өмнө"}}},minute:{displayName:"минут",relative:{0:"энэ минут"},relativeTime:{future:{one:"{0} минутын дараа",other:"{0} минутын дараа"},past:{one:"{0} минутын өмнө",other:"{0} минутын өмнө"}}},"minute-short":{displayName:"мин",relative:{0:"энэ минут"},relativeTime:{future:{one:"{0} мин дараа",other:"{0} мин дараа"},past:{one:"{0} мин өмнө",other:"{0} мин өмнө"}}},second:{displayName:"секунд",relative:{0:"одоо"},relativeTime:{future:{one:"{0} секундын дараа",other:"{0} секундын дараа"},past:{one:"{0} секундын өмнө",other:"{0} секундын өмнө"}}},"second-short":{displayName:"сек",relative:{0:"одоо"},relativeTime:{future:{one:"{0} сек дараа",other:"{0} сек дараа"},past:{one:"{0} сек өмнө",other:"{0} сек өмнө"}}}}},{locale:"mn-Mong",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"mo",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=!a[1],i=Number(a[0])==e&&a[0].slice(-2);return t?1==e?"one":"other":1==e&&r?"one":!r||0==e||1!=e&&i>=1&&i<=19?"few":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"mr",pluralRuleFunction:function(e,t){return t?1==e?"one":2==e||3==e?"two":4==e?"few":"other":e>=0&&e<=1?"one":"other"},fields:{year:{displayName:"वर्ष",relative:{0:"हे वर्ष",1:"पुढील वर्ष","-1":"मागील वर्ष"},relativeTime:{future:{one:"येत्या {0} वर्षामध्ये",other:"येत्या {0} वर्षांमध्ये"},past:{one:"{0} वर्षापूर्वी",other:"{0} वर्षांपूर्वी"}}},"year-short":{displayName:"वर्ष",relative:{0:"हे वर्ष",1:"पुढील वर्ष","-1":"मागील वर्ष"},relativeTime:{future:{one:"{0} वर्षामध्ये",other:"{0} वर्षांमध्ये"},past:{one:"{0} वर्षापूर्वी",other:"{0} वर्षांपूर्वी"}}},month:{displayName:"महिना",relative:{0:"हा महिना",1:"पुढील महिना","-1":"मागील महिना"},relativeTime:{future:{one:"येत्या {0} महिन्यामध्ये",other:"येत्या {0} महिन्यांमध्ये"},past:{one:"{0} महिन्यापूर्वी",other:"{0} महिन्यांपूर्वी"}}},"month-short":{displayName:"महिना",relative:{0:"हा महिना",1:"पुढील महिना","-1":"मागील महिना"},relativeTime:{future:{one:"{0} महिन्यामध्ये",other:"{0} महिन्यामध्ये"},past:{one:"{0} महिन्यापूर्वी",other:"{0} महिन्यांपूर्वी"}}},day:{displayName:"दिवस",relative:{0:"आज",1:"उद्या","-1":"काल"},relativeTime:{future:{one:"येत्या {0} दिवसामध्ये",other:"येत्या {0} दिवसांमध्ये"},past:{one:"{0} दिवसापूर्वी",other:"{0} दिवसांपूर्वी"}}},"day-short":{displayName:"दिवस",relative:{0:"आज",1:"उद्या","-1":"काल"},relativeTime:{future:{one:"{0} दिवसामध्ये",other:"येत्या {0} दिवसांमध्ये"},past:{one:"{0} दिवसापूर्वी",other:"{0} दिवसांपूर्वी"}}},hour:{displayName:"तास",relative:{0:"तासात"},relativeTime:{future:{one:"{0} तासामध्ये",other:"{0} तासांमध्ये"},past:{one:"{0} तासापूर्वी",other:"{0} तासांपूर्वी"}}},"hour-short":{displayName:"तास",relative:{0:"तासात"},relativeTime:{future:{one:"{0} तासामध्ये",other:"{0} तासांमध्ये"},past:{one:"{0} तासापूर्वी",other:"{0} तासांपूर्वी"}}},minute:{displayName:"मिनिट",relative:{0:"या मिनिटात"},relativeTime:{future:{one:"{0} मिनिटामध्ये",other:"{0} मिनिटांमध्ये"},past:{one:"{0} मिनिटापूर्वी",other:"{0} मिनिटांपूर्वी"}}},"minute-short":{displayName:"मि.",relative:{0:"या मिनिटात"},relativeTime:{future:{one:"{0} मिनि. मध्ये",other:"{0} मिनि. मध्ये"},past:{one:"{0} मिनि. पूर्वी",other:"{0} मिनि. पूर्वी"}}},second:{displayName:"सेकंद",relative:{0:"आत्ता"},relativeTime:{future:{one:"{0} सेकंदामध्ये",other:"{0} सेकंदांमध्ये"},past:{one:"{0} सेकंदापूर्वी",other:"{0} सेकंदांपूर्वी"}}},"second-short":{displayName:"से.",relative:{0:"आत्ता"},relativeTime:{future:{one:"{0} से. मध्ये",other:"{0} से. मध्ये"},past:{one:"{0} से. पूर्वी",other:"{0} से. पूर्वी"}}}}},{locale:"ms",pluralRuleFunction:function(e,t){return t&&1==e?"one":"other"},fields:{year:{displayName:"tahun",relative:{0:"tahun ini",1:"tahun depan","-1":"tahun lalu"},relativeTime:{future:{other:"dalam {0} tahun"},past:{other:"{0} tahun lalu"}}},"year-short":{displayName:"thn",relative:{0:"thn ini",1:"thn depan","-1":"thn lepas"},relativeTime:{future:{other:"dalam {0} thn"},past:{other:"{0} thn lalu"}}},month:{displayName:"bulan",relative:{0:"bulan ini",1:"bulan depan","-1":"bulan lalu"},relativeTime:{future:{other:"dalam {0} bulan"},past:{other:"{0} bulan lalu"}}},"month-short":{displayName:"bln",relative:{0:"bln ini",1:"bln depan","-1":"bln lalu"},relativeTime:{future:{other:"dlm {0} bln"},past:{other:"{0} bln lalu"}}},day:{displayName:"hari",relative:{0:"hari ini",1:"esok",2:"lusa","-2":"kelmarin","-1":"semalam"},relativeTime:{future:{other:"dalam {0} hari"},past:{other:"{0} hari lalu"}}},"day-short":{displayName:"hari",relative:{0:"hari ini",1:"esok",2:"lusa","-2":"kelmarin","-1":"semlm"},relativeTime:{future:{other:"dlm {0} hari"},past:{other:"{0} hari lalu"}}},hour:{displayName:"jam",relative:{0:"jam ini"},relativeTime:{future:{other:"dalam {0} jam"},past:{other:"{0} jam lalu"}}},"hour-short":{displayName:"jam",relative:{0:"jam ini"},relativeTime:{future:{other:"dlm {0} jam"},past:{other:"{0} jam lalu"}}},minute:{displayName:"minit",relative:{0:"pada minit ini"},relativeTime:{future:{other:"dalam {0} minit"},past:{other:"{0} minit lalu"}}},"minute-short":{displayName:"min",relative:{0:"pada minit ini"},relativeTime:{future:{other:"dlm {0} min"},past:{other:"{0} min lalu"}}},second:{displayName:"saat",relative:{0:"sekarang"},relativeTime:{future:{other:"dalam {0} saat"},past:{other:"{0} saat lalu"}}},"second-short":{displayName:"saat",relative:{0:"sekarang"},relativeTime:{future:{other:"dlm {0} saat"},past:{other:"{0} saat lalu"}}}}},{locale:"ms-Arab",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ms-BN",parentLocale:"ms"},{locale:"ms-SG",parentLocale:"ms"},{locale:"mt",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e&&a[0].slice(-2);return t?"other":1==e?"one":0==e||r>=2&&r<=10?"few":r>=11&&r<=19?"many":"other"},fields:{year:{displayName:"Sena",relative:{0:"din is-sena",1:"is-sena d-dieħla","-1":"is-sena l-oħra"},relativeTime:{future:{one:"fi żmien sena",few:"fi żmien {0} snin oħra",many:"fi żmien {0} snin oħra",other:"fi żmien {0} snin oħra"},past:{one:"sena ilu",few:"{0} snin ilu",many:"{0} snin ilu",other:"{0} snin ilu"}}},"year-short":{displayName:"Sena",relative:{0:"din is-sena",1:"is-sena d-dieħla","-1":"is-sena l-oħra"},relativeTime:{future:{one:"fi żmien sena",few:"fi żmien {0} snin oħra",many:"fi żmien {0} snin oħra",other:"fi żmien {0} snin oħra"},past:{one:"sa sena ilu",few:"{0} snin ilu",many:"{0} snin ilu",other:"{0} snin ilu"}}},month:{displayName:"xahar",relative:{0:"Dan ix-xahar",1:"Ix-xahar id-dieħel","-1":"Ix-xahar li għadda"},relativeTime:{future:{one:"sa xahar ieħor",few:"fi {0} xhur oħra",many:"fi {0} xhur oħra",other:"fi {0} xhur oħra"},past:{one:"xahar ilu",few:"{0} xhur ilu",many:"{0} xhur ilu",other:"{0} xhur ilu"}}},"month-short":{displayName:"Xahar",relative:{0:"Dan ix-xahar",1:"Ix-xahar id-dieħel","-1":"Ix-xahar li għadda"},relativeTime:{future:{one:"sa xahar ieħor",few:"sa {0} xhur oħra",many:"sa {0} xhur oħra",other:"sa {0} xhur oħra"},past:{one:"{0} xahar ilu",few:"{0} xhur ilu",many:"{0} xhur ilu",other:"{0} xhur ilu"}}},day:{displayName:"jum",relative:{0:"illum",1:"għada","-1":"lbieraħ"},relativeTime:{future:{one:"fi żmien ġurnata",few:"fi żmien {0} ġurnata oħra",many:"fi żmien {0} ġurnata oħra",other:"fi żmien {0} ġurnata oħra"},past:{one:"ġurnata ilu",few:"{0} ġranet ilu",many:"{0}-il ġurnata ilu",other:"{0}-il ġurnata ilu"}}},"day-short":{displayName:"Jum",relative:{0:"illum",1:"għada","-1":"lbieraħ"},relativeTime:{future:{one:"fi żmien ġurnata",few:"fi żmien {0} ġurnata oħra",many:"fi żmien {0} ġurnata oħra",other:"fi żmien {0} ġurnata oħra"},past:{one:"ġurnata ilu",few:"{0} ġranet ilu",many:"{0}-il ġurnata ilu",other:"{0}-il ġurnata ilu"}}},hour:{displayName:"siegħa",relative:{0:"din is-siegħa"},relativeTime:{future:{one:"fi żmien siegħa oħra",few:"fi żmien {0} sigħat",many:"fi żmien{0} sigħat",other:"fi żmien {0} sigħat"},past:{one:"siegħa ilu",few:"{0} sigħat ilu",many:"{0} sigħat ilu",other:"{0} sigħat ilu"}}},"hour-short":{displayName:"siegħa",relative:{0:"din is-siegħa"},relativeTime:{future:{one:"fi żmien siegħa oħra",few:"fi żmien {0} sigħat",many:"+{0} h",other:"fi żmien {0} sigħat"},past:{one:"siegħa ilu",few:"{0} sigħat ilu",many:"{0} sigħat ilu",other:"{0} sigħat ilu"}}},minute:{displayName:"minuta",relative:{0:"din il-minuta"},relativeTime:{future:{one:"sa minuta oħra",few:"sa {0} minuti oħra",many:"sa {0} minuti oħra",other:"sa {0} minuti oħra"},past:{one:"minuta ilu",few:"{0} minuti ilu",many:"{0} minuti ilu",other:"{0} minuti ilu"}}},"minute-short":{displayName:"min.",relative:{0:"din il-minuta"},relativeTime:{future:{one:"sa min. oħra",few:"sa {0} min. oħra",many:"sa {0} min. oħra",other:"sa {0} min. oħra"},past:{one:"min. ilu",few:"{0} min. ilu",many:"{0} minuti ilu",other:"{0} min. ilu"}}},second:{displayName:"sekonda",relative:{0:"issa"},relativeTime:{future:{one:"sa {0} sekondi oħra",few:"sa {0} sekondi oħra",many:"sa {0} sekondi oħra",other:"sa {0} sekondi oħra"},past:{one:"sekonda ilu",few:"{0} sekondi ilu",many:"{0} sekondi ilu",other:"{0} sekondi ilu"}}},"second-short":{displayName:"sek.",relative:{0:"issa"},relativeTime:{future:{one:"sa {0} sekondi oħra",few:"sa {0} sek. oħra",many:"sa {0} sek. oħra",other:"sa {0} sekondi oħra"},past:{one:"sek. ilu",few:"{0} sek. ilu",many:"{0} sek. ilu",other:"{0} sek. ilu"}}}}},{locale:"mua",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Syii",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Syii",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Fĩi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Fĩi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Zah’nane/ Comme",relative:{0:"Tǝ’nahko",1:"Tǝ’nane","-1":"Tǝsoo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Zah’nane/ Comme",relative:{0:"Tǝ’nahko",1:"Tǝ’nane","-1":"Tǝsoo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Cok comme",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Cok comme",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Cok comme ma laŋne",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Cok comme ma laŋne",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Cok comme ma laŋ tǝ biŋ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Cok comme ma laŋ tǝ biŋ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"my",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"နှစ်",relative:{0:"ယခုနှစ်",1:"လာမည့်နှစ်","-1":"ယမန်နှစ်"},relativeTime:{future:{other:"{0} နှစ်အတွင်း"},past:{other:"ပြီးခဲ့သည့် {0} နှစ်"}}},"year-short":{displayName:"နှစ်",relative:{0:"ယခုနှစ်",1:"လာမည့်နှစ်","-1":"ယမန်နှစ်"},relativeTime:{future:{other:"{0} နှစ်အတွင်း"},past:{other:"ပြီးခဲ့သည့် {0} နှစ်"}}},month:{displayName:"လ",relative:{0:"ယခုလ",1:"လာမည့်လ","-1":"ပြီးခဲ့သည့်လ"},relativeTime:{future:{other:"{0} လအတွင်း"},past:{other:"ပြီးခဲ့သည့် {0} လ"}}},"month-short":{displayName:"လ",relative:{0:"ယခုလ",1:"လာမည့်လ","-1":"ပြီးခဲ့သည့်လ"},relativeTime:{future:{other:"{0} လအတွင်း"},past:{other:"ပြီးခဲ့သည့် {0} လ"}}},day:{displayName:"ရက်",relative:{0:"ယနေ့",1:"မနက်ဖြန်",2:"သန်ဘက်ခါ","-2":"တစ်နေ့က","-1":"မနေ့က"},relativeTime:{future:{other:"{0} ရက်အတွင်း"},past:{other:"ပြီးခဲ့သည့် {0} ရက်"}}},"day-short":{displayName:"ရက်",relative:{0:"ယနေ့",1:"မနက်ဖြန်",2:"သန်ဘက်ခါ","-2":"တစ်နေ့က","-1":"မနေ့က"},relativeTime:{future:{other:"{0} ရက်အတွင်း"},past:{other:"ပြီးခဲ့သည့် {0} ရက်"}}},hour:{displayName:"နာရီ",relative:{0:"ဤအချိန်"},relativeTime:{future:{other:"{0} နာရီအတွင်း"},past:{other:"ပြီးခဲ့သည့် {0} နာရီ"}}},"hour-short":{displayName:"နာရီ",relative:{0:"ဤအချိန်"},relativeTime:{future:{other:"{0} နာရီအတွင်း"},past:{other:"ပြီးခဲ့သည့် {0} နာရီ"}}},minute:{displayName:"မိနစ်",relative:{0:"ဤမိနစ်"},relativeTime:{future:{other:"{0} မိနစ်အတွင်း"},past:{other:"ပြီးခဲ့သည့် {0} မိနစ်"}}},"minute-short":{displayName:"မိနစ်",relative:{0:"ဤမိနစ်"},relativeTime:{future:{other:"{0} မိနစ်အတွင်း"},past:{other:"ပြီးခဲ့သည့် {0} မိနစ်"}}},second:{displayName:"စက္ကန့်",relative:{0:"ယခု"},relativeTime:{future:{other:"{0} စက္ကန့်အတွင်း"},past:{other:"ပြီးခဲ့သည့် {0} စက္ကန့်"}}},"second-short":{displayName:"စက္ကန့်",relative:{0:"ယခု"},relativeTime:{future:{other:"{0} စက္ကန့်အတွင်း"},past:{other:"ပြီးခဲ့သည့် {0} စက္ကန့်"}}}}},{locale:"mzn",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"سال",relative:{0:"امسال",1:"سال دیگه","-1":"پارسال"},relativeTime:{future:{other:"{0} سال دله"},past:{other:"{0} سال پیش"}}},"year-short":{displayName:"سال",relative:{0:"امسال",1:"سال دیگه","-1":"پارسال"},relativeTime:{future:{other:"{0} سال دله"},past:{other:"{0} سال پیش"}}},month:{displayName:"ماه",relative:{0:"این ماه",1:"ماه ِبعد","-1":"ماه قبل"},relativeTime:{future:{other:"{0} ماه دله"},past:{other:"{0} ماه پیش"}}},"month-short":{displayName:"ماه",relative:{0:"این ماه",1:"ماه ِبعد","-1":"ماه قبل"},relativeTime:{future:{other:"{0} ماه دله"},past:{other:"{0} ماه پیش"}}},day:{displayName:"روز",relative:{0:"اَمروز",1:"فِردا","-1":"دیروز"},relativeTime:{future:{other:"{0} روز دله"},past:{other:"{0} روز پیش"}}},"day-short":{displayName:"روز",relative:{0:"اَمروز",1:"فِردا","-1":"دیروز"},relativeTime:{future:{other:"{0} روز دله"},past:{other:"{0} روز پیش"}}},hour:{displayName:"ساعِت",relative:{0:"this hour"},relativeTime:{future:{other:"{0} ساعِت دله"},past:{other:"{0} ساعِت پیش"}}},"hour-short":{displayName:"ساعت",relative:{0:"this hour"},relativeTime:{future:{other:"{0} ساعت دله"},past:{other:"{0} ساعت پیش"}}},minute:{displayName:"دقیقه",relative:{0:"this minute"},relativeTime:{future:{other:"{0} دقیقه دله"},past:{other:"{0} دَقه پیش"}}},"minute-short":{displayName:"دَقه",relative:{0:"this minute"},relativeTime:{future:{other:"{0} دَقه دله"},past:{other:"{0} دَقه پیش"}}},second:{displayName:"ثانیه",relative:{0:"now"},relativeTime:{future:{other:"{0} ثانیه دله"},past:{other:"{0} ثانیه پیش"}}},"second-short":{displayName:"ثانیه",relative:{0:"now"},relativeTime:{future:{other:"{0} ثانیه دله"},past:{other:"{0} ثانیه پیش"}}}}},{locale:"nah",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"naq",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":2==e?"two":"other"},fields:{year:{displayName:"Kurib",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Kurib",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"ǁKhâb",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"ǁKhâb",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Tsees",relative:{0:"Neetsee",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Tsees",relative:{0:"Neetsee",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Iiri",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Iiri",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Haib",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Haib",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"ǀGâub",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"ǀGâub",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"nb",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"år",relative:{0:"i år",1:"neste år","-1":"i fjor"},relativeTime:{future:{one:"om {0} år",other:"om {0} år"},past:{one:"for {0} år siden",other:"for {0} år siden"}}},"year-short":{displayName:"år",relative:{0:"i år",1:"neste år","-1":"i fjor"},relativeTime:{future:{one:"om {0} år",other:"om {0} år"},past:{one:"for {0} år siden",other:"for {0} år siden"}}},month:{displayName:"måned",relative:{0:"denne måneden",1:"neste måned","-1":"forrige måned"},relativeTime:{future:{one:"om {0} måned",other:"om {0} måneder"},past:{one:"for {0} måned siden",other:"for {0} måneder siden"}}},"month-short":{displayName:"mnd.",relative:{0:"denne md.",1:"neste md.","-1":"forrige md."},relativeTime:{future:{one:"om {0} md.",other:"om {0} md."},past:{one:"for {0} md. siden",other:"for {0} md. siden"}}},day:{displayName:"dag",relative:{0:"i dag",1:"i morgen",2:"i overmorgen","-2":"i forgårs","-1":"i går"},relativeTime:{future:{one:"om {0} døgn",other:"om {0} døgn"},past:{one:"for {0} døgn siden",other:"for {0} døgn siden"}}},"day-short":{displayName:"dag",relative:{0:"i dag",1:"i morgen",2:"i overmorgen","-2":"i forgårs","-1":"i går"},relativeTime:{future:{one:"om {0} d.",other:"om {0} d."},past:{one:"for {0} d. siden",other:"for {0} d. siden"}}},hour:{displayName:"time",relative:{0:"denne timen"},relativeTime:{future:{one:"om {0} time",other:"om {0} timer"},past:{one:"for {0} time siden",other:"for {0} timer siden"}}},"hour-short":{displayName:"t",relative:{0:"denne timen"},relativeTime:{future:{one:"om {0} t",other:"om {0} t"},past:{one:"for {0} t siden",other:"for {0} t siden"}}},minute:{displayName:"minutt",relative:{0:"dette minuttet"},relativeTime:{future:{one:"om {0} minutt",other:"om {0} minutter"},past:{one:"for {0} minutt siden",other:"for {0} minutter siden"}}},"minute-short":{displayName:"min",relative:{0:"dette minuttet"},relativeTime:{future:{one:"om {0} min",other:"om {0} min"},past:{one:"for {0} min siden",other:"for {0} min siden"}}},second:{displayName:"sekund",relative:{0:"nå"},relativeTime:{future:{one:"om {0} sekund",other:"om {0} sekunder"},past:{one:"for {0} sekund siden",other:"for {0} sekunder siden"}}},"second-short":{displayName:"sek",relative:{0:"nå"},relativeTime:{future:{one:"om {0} sek",other:"om {0} sek"},past:{one:"for {0} sek siden",other:"for {0} sek siden"}}}}},{locale:"nb-SJ",parentLocale:"nb"},{locale:"nd",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Umnyaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Umnyaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Inyangacale",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Inyangacale",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ilanga",relative:{0:"Lamuhla",1:"Kusasa","-1":"Izolo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ilanga",relative:{0:"Lamuhla",1:"Kusasa","-1":"Izolo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Ihola",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Ihola",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Umuzuzu",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Umuzuzu",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Isekendi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Isekendi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"nds",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"nds-NL",parentLocale:"nds"},{locale:"ne",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e;return t?r&&e>=1&&e<=4?"one":"other":1==e?"one":"other"},fields:{year:{displayName:"वर्ष",relative:{0:"यो वर्ष",1:"आगामी वर्ष","-1":"गत वर्ष"},relativeTime:{future:{one:"{0} वर्षमा",other:"{0} वर्षमा"},past:{one:"{0} वर्ष अघि",other:"{0} वर्ष अघि"}}},"year-short":{displayName:"वर्ष",relative:{0:"यो वर्ष",1:"आगामी वर्ष","-1":"गत वर्ष"},relativeTime:{future:{one:"{0} वर्षमा",other:"{0} वर्षमा"},past:{one:"{0} वर्ष अघि",other:"{0} वर्ष अघि"}}},month:{displayName:"महिना",relative:{0:"यो महिना",1:"अर्को महिना","-1":"गत महिना"},relativeTime:{future:{one:"{0} महिनामा",other:"{0} महिनामा"},past:{one:"{0} महिना पहिले",other:"{0} महिना पहिले"}}},"month-short":{displayName:"महिना",relative:{0:"यो महिना",1:"अर्को महिना","-1":"गत महिना"},relativeTime:{future:{one:"{0} महिनामा",other:"{0} महिनामा"},past:{one:"{0} महिना पहिले",other:"{0} महिना पहिले"}}},day:{displayName:"बार",relative:{0:"आज",1:"भोलि",2:"पर्सि","-2":"अस्ति","-1":"हिजो"},relativeTime:{future:{one:"{0} दिनमा",other:"{0} दिनमा"},past:{one:"{0} दिन पहिले",other:"{0} दिन पहिले"}}},"day-short":{displayName:"बार",relative:{0:"आज",1:"भोलि",2:"पर्सि","-2":"अस्ति","-1":"हिजो"},relativeTime:{future:{one:"{0} दिनमा",other:"{0} दिनमा"},past:{one:"{0} दिन पहिले",other:"{0} दिन पहिले"}}},hour:{displayName:"घण्टा",relative:{0:"यस घडीमा"},relativeTime:{future:{one:"{0} घण्टामा",other:"{0} घण्टामा"},past:{one:"{0} घण्टा पहिले",other:"{0} घण्टा पहिले"}}},"hour-short":{displayName:"घण्टा",relative:{0:"यस घडीमा"},relativeTime:{future:{one:"{0} घण्टामा",other:"{0} घण्टामा"},past:{one:"{0} घण्टा पहिले",other:"{0} घण्टा पहिले"}}},minute:{displayName:"मिनेट",relative:{0:"यही मिनेटमा"},relativeTime:{future:{one:"{0} मिनेटमा",other:"{0} मिनेटमा"},past:{one:"{0} मिनेट पहिले",other:"{0} मिनेट पहिले"}}},"minute-short":{displayName:"मिनेट",relative:{0:"यही मिनेटमा"},relativeTime:{future:{one:"{0} मिनेटमा",other:"{0} मिनेटमा"},past:{one:"{0} मिनेट पहिले",other:"{0} मिनेट पहिले"}}},second:{displayName:"सेकेन्ड",relative:{0:"अहिले"},relativeTime:{future:{one:"{0} सेकेन्डमा",other:"{0} सेकेन्डमा"},past:{one:"{0} सेकेन्ड पहिले",other:"{0} सेकेन्ड पहिले"}}},"second-short":{displayName:"सेकेन्ड",relative:{0:"अहिले"},relativeTime:{future:{one:"{0} सेकेन्डमा",other:"{0} सेकेन्डमा"},past:{one:"{0} सेकेन्ड पहिले",other:"{0} सेकेन्ड पहिले"}}}}},{locale:"ne-IN",parentLocale:"ne"},{locale:"nl",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"jaar",relative:{0:"dit jaar",1:"volgend jaar","-1":"vorig jaar"},relativeTime:{future:{one:"over {0} jaar",other:"over {0} jaar"},past:{one:"{0} jaar geleden",other:"{0} jaar geleden"}}},"year-short":{displayName:"jr",relative:{0:"dit jaar",1:"volgend jaar","-1":"vorig jaar"},relativeTime:{future:{one:"over {0} jaar",other:"over {0} jaar"},past:{one:"{0} jaar geleden",other:"{0} jaar geleden"}}},month:{displayName:"maand",relative:{0:"deze maand",1:"volgende maand","-1":"vorige maand"},relativeTime:{future:{one:"over {0} maand",other:"over {0} maanden"},past:{one:"{0} maand geleden",other:"{0} maanden geleden"}}},"month-short":{displayName:"mnd",relative:{0:"deze maand",1:"volgende maand","-1":"vorige maand"},relativeTime:{future:{one:"over {0} maand",other:"over {0} maanden"},past:{one:"{0} maand geleden",other:"{0} maanden geleden"}}},day:{displayName:"dag",relative:{0:"vandaag",1:"morgen",2:"overmorgen","-2":"eergisteren","-1":"gisteren"},relativeTime:{future:{one:"over {0} dag",other:"over {0} dagen"},past:{one:"{0} dag geleden",other:"{0} dagen geleden"}}},"day-short":{displayName:"dag",relative:{0:"vandaag",1:"morgen",2:"overmorgen","-2":"eergisteren","-1":"gisteren"},relativeTime:{future:{one:"over {0} dag",other:"over {0} dgn"},past:{one:"{0} dag geleden",other:"{0} dgn geleden"}}},hour:{displayName:"uur",relative:{0:"binnen een uur"},relativeTime:{future:{one:"over {0} uur",other:"over {0} uur"},past:{one:"{0} uur geleden",other:"{0} uur geleden"}}},"hour-short":{displayName:"uur",relative:{0:"binnen een uur"},relativeTime:{future:{one:"over {0} uur",other:"over {0} uur"},past:{one:"{0} uur geleden",other:"{0} uur geleden"}}},minute:{displayName:"minuut",relative:{0:"binnen een minuut"},relativeTime:{future:{one:"over {0} minuut",other:"over {0} minuten"},past:{one:"{0} minuut geleden",other:"{0} minuten geleden"}}},"minute-short":{displayName:"min",relative:{0:"binnen een minuut"},relativeTime:{future:{one:"over {0} min.",other:"over {0} min."},past:{one:"{0} min. geleden",other:"{0} min. geleden"}}},second:{displayName:"seconde",relative:{0:"nu"},relativeTime:{future:{one:"over {0} seconde",other:"over {0} seconden"},past:{one:"{0} seconde geleden",other:"{0} seconden geleden"}}},"second-short":{displayName:"sec",relative:{0:"nu"},relativeTime:{future:{one:"over {0} sec.",other:"over {0} sec."},past:{one:"{0} sec. geleden",other:"{0} sec. geleden"}}}}},{locale:"nl-AW",parentLocale:"nl"},{locale:"nl-BE",parentLocale:"nl"},{locale:"nl-BQ",parentLocale:"nl"},{locale:"nl-CW",parentLocale:"nl"},{locale:"nl-SR",parentLocale:"nl"},{locale:"nl-SX",parentLocale:"nl"},{locale:"nmg",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Mbvu",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Mbvu",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Ngwɛn",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Ngwɛn",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Duö",relative:{0:"Dɔl",1:"Namáná","-1":"Nakugú"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Duö",relative:{0:"Dɔl",1:"Namáná","-1":"Nakugú"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Wulā",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Wulā",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Mpálâ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Mpálâ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Nyiɛl",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Nyiɛl",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"nn",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"år",relative:{0:"i år",1:"neste år","-1":"i fjor"},relativeTime:{future:{one:"om {0} år",other:"om {0} år"},past:{one:"for {0} år sidan",other:"for {0} år sidan"}}},"year-short":{displayName:"år",relative:{0:"i år",1:"neste år","-1":"i fjor"},relativeTime:{future:{one:"om {0} år",other:"om {0} år"},past:{one:"for {0} år sidan",other:"for {0} år sidan"}}},month:{displayName:"månad",relative:{0:"denne månaden",1:"neste månad","-1":"førre månad"},relativeTime:{future:{one:"om {0} månad",other:"om {0} månadar"},past:{one:"for {0} månad sidan",other:"for {0} månadar sidan"}}},"month-short":{displayName:"mnd.",relative:{0:"denne månaden",1:"neste månad","-1":"førre månad"},relativeTime:{future:{one:"om {0} md.",other:"om {0} md."},past:{one:"for {0} md. sidan",other:"for {0} md. sidan"}}},day:{displayName:"dag",relative:{0:"i dag",1:"i morgon",2:"i overmorgon","-2":"i førgår","-1":"i går"},relativeTime:{future:{one:"om {0} døgn",other:"om {0} døgn"},past:{one:"for {0} døgn sidan",other:"for {0} døgn sidan"}}},"day-short":{displayName:"dag",relative:{0:"i dag",1:"i morgon",2:"i overmorgon","-2":"i førgår","-1":"i går"},relativeTime:{future:{one:"om {0} d.",other:"om {0} d."},past:{one:"for {0} d. sidan",other:"for {0} d. sidan"}}},hour:{displayName:"time",relative:{0:"denne timen"},relativeTime:{future:{one:"om {0} time",other:"om {0} timar"},past:{one:"for {0} time sidan",other:"for {0} timar sidan"}}},"hour-short":{displayName:"t",relative:{0:"denne timen"},relativeTime:{future:{one:"om {0} t",other:"om {0} t"},past:{one:"for {0} t sidan",other:"for {0} t sidan"}}},minute:{displayName:"minutt",relative:{0:"dette minuttet"},relativeTime:{future:{one:"om {0} minutt",other:"om {0} minutt"},past:{one:"for {0} minutt sidan",other:"for {0} minutt sidan"}}},"minute-short":{displayName:"min",relative:{0:"dette minuttet"},relativeTime:{future:{one:"om {0} min",other:"om {0} min"},past:{one:"for {0} min sidan",other:"for {0} min sidan"}}},second:{displayName:"sekund",relative:{0:"no"},relativeTime:{future:{one:"om {0} sekund",other:"om {0} sekund"},past:{one:"for {0} sekund sidan",other:"for {0} sekund sidan"}}},"second-short":{displayName:"sek",relative:{0:"no"},relativeTime:{future:{one:"om {0} sek",other:"om {0} sek"},past:{one:"for {0} sek sidan",other:"for {0} sek sidan"}}}}},{locale:"nnh",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"ngùʼ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"ngùʼ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"lyɛ̌ʼ",relative:{0:"lyɛ̌ʼɔɔn",1:"jǔɔ gẅie à ne ntóo","-1":"jǔɔ gẅie à ka tɔ̌g"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"lyɛ̌ʼ",relative:{0:"lyɛ̌ʼɔɔn",1:"jǔɔ gẅie à ne ntóo","-1":"jǔɔ gẅie à ka tɔ̌g"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"fʉ̀ʼ nèm",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"fʉ̀ʼ nèm",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"no",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"nqo",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"nr",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"nso",pluralRuleFunction:function(e,t){return t?"other":0==e||1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"nus",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Ruɔ̱n",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Ruɔ̱n",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Pay",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Pay",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Cäŋ",relative:{0:"Walɛ",1:"Ruun","-1":"Pan"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Cäŋ",relative:{0:"Walɛ",1:"Ruun","-1":"Pan"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Thaak",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Thaak",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minit",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minit",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Thɛkɛni",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Thɛkɛni",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ny",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"nyn",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Omwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Omwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Omwezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Omwezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Eizooba",relative:{0:"Erizooba",1:"Nyenkyakare","-1":"Nyomwabazyo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Eizooba",relative:{0:"Erizooba",1:"Nyenkyakare","-1":"Nyomwabazyo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Shaaha",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Shaaha",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Edakiika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Edakiika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Obucweka/Esekendi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Obucweka/Esekendi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"om",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"om-KE",parentLocale:"om"},{locale:"or",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e;return t?1==e||5==e||r&&e>=7&&e<=9?"one":2==e||3==e?"two":4==e?"few":6==e?"many":"other":1==e?"one":"other"},fields:{year:{displayName:"ବର୍ଷ",relative:{0:"ଏହି ବର୍ଷ",1:"ଆଗାମୀ ବର୍ଷ","-1":"ଗତ ବର୍ଷ"},relativeTime:{future:{one:"{0} ବର୍ଷରେ",other:"{0} ବର୍ଷରେ"},past:{one:"{0} ବର୍ଷ ପୂର୍ବେ",other:"{0} ବର୍ଷ ପୂର୍ବେ"}}},"year-short":{displayName:"ବ.",relative:{0:"ଏହି ବର୍ଷ",1:"ଆଗାମୀ ବର୍ଷ","-1":"ଗତ ବର୍ଷ"},relativeTime:{future:{one:"{0} ବ. ରେ",other:"{0} ବ. ରେ"},past:{one:"{0} ବ. ପୂର୍ବେ",other:"{0} ବ. ପୂର୍ବେ"}}},month:{displayName:"ମାସ",relative:{0:"ଏହି ମାସ",1:"ଆଗାମୀ ମାସ","-1":"ଗତ ମାସ"},relativeTime:{future:{one:"{0} ମାସରେ",other:"{0} ମାସରେ"},past:{one:"{0} ମାସ ପୂର୍ବେ",other:"{0} ମାସ ପୂର୍ବେ"}}},"month-short":{displayName:"ମା.",relative:{0:"ଏହି ମାସ",1:"ଆଗାମୀ ମାସ","-1":"ଗତ ମାସ"},relativeTime:{future:{one:"{0} ମା. ରେ",other:"{0} ମା. ରେ"},past:{one:"{0} ମା. ପୂର୍ବେ",other:"{0} ମା. ପୂର୍ବେ"}}},day:{displayName:"ଦିନ",relative:{0:"ଆଜି",1:"ଆସନ୍ତାକାଲି","-1":"ଗତକାଲି"},relativeTime:{future:{one:"{0} ଦିନରେ",other:"{0} ଦିନରେ"},past:{one:"{0} ଦିନ ପୂର୍ବେ",other:"{0} ଦିନ ପୂର୍ବେ"}}},"day-short":{displayName:"ଦିନ",relative:{0:"ଆଜି",1:"ଆସନ୍ତାକାଲି","-1":"ଗତକାଲି"},relativeTime:{future:{one:"{0} ଦିନରେ",other:"{0} ଦିନରେ"},past:{one:"{0} ଦିନ ପୂର୍ବେ",other:"{0} ଦିନ ପୂର୍ବେ"}}},hour:{displayName:"ଘଣ୍ଟା",relative:{0:"ଏହି ଘଣ୍ଟା"},relativeTime:{future:{one:"{0} ଘଣ୍ଟାରେ",other:"{0} ଘଣ୍ଟାରେ"},past:{one:"{0} ଘଣ୍ଟା ପୂର୍ବେ",other:"{0} ଘଣ୍ଟା ପୂର୍ବେ"}}},"hour-short":{displayName:"ଘ.",relative:{0:"ଏହି ଘଣ୍ଟା"},relativeTime:{future:{one:"{0} ଘ. ରେ",other:"{0} ଘ. ରେ"},past:{one:"{0} ଘ. ପୂର୍ବେ",other:"{0} ଘ. ପୂର୍ବେ"}}},minute:{displayName:"ମିନିଟ୍",relative:{0:"ଏହି ମିନିଟ୍"},relativeTime:{future:{one:"{0} ମିନିଟ୍‌‌ରେ",other:"{0} ମିନିଟ୍‌‌ରେ"},past:{one:"{0} ମିନିଟ୍ ପୂର୍ବେ",other:"{0} ମିନିଟ୍ ପୂର୍ବେ"}}},"minute-short":{displayName:"ମି.",relative:{0:"ଏହି ମିନିଟ୍"},relativeTime:{future:{one:"{0} ମି. ରେ",other:"{0} ମି. ରେ"},past:{one:"{0} ମି. ପୂର୍ବେ",other:"{0} ମି. ପୂର୍ବେ"}}},second:{displayName:"ସେକେଣ୍ଡ୍",relative:{0:"ବର୍ତ୍ତମାନ"},relativeTime:{future:{one:"{0} ସେକେଣ୍ଡରେ",other:"{0} ସେକେଣ୍ଡରେ"},past:{one:"{0} ସେକେଣ୍ଡ ପୂର୍ବେ",other:"{0} ସେକେଣ୍ଡ ପୂର୍ବେ"}}},"second-short":{displayName:"ସେକେଣ୍ଡ୍",relative:{0:"ବର୍ତ୍ତମାନ"},relativeTime:{future:{one:"{0} ସେ. ରେ",other:"{0} ସେ. ରେ"},past:{one:"{0} ସେ. ପୂର୍ବେ",other:"{0} ସେ. ପୂର୍ବେ"}}}}},{locale:"os",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Аз",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Аз",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Мӕй",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Мӕй",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Бон",relative:{0:"Абон",1:"Сом",2:"Иннӕбон","-2":"Ӕндӕрӕбон","-1":"Знон"},relativeTime:{future:{one:"{0} боны фӕстӕ",other:"{0} боны фӕстӕ"},past:{one:"{0} бон раздӕр",other:"{0} боны размӕ"}}},"day-short":{displayName:"Бон",relative:{0:"Абон",1:"Сом",2:"Иннӕбон","-2":"Ӕндӕрӕбон","-1":"Знон"},relativeTime:{future:{one:"{0} боны фӕстӕ",other:"{0} боны фӕстӕ"},past:{one:"{0} бон раздӕр",other:"{0} боны размӕ"}}},hour:{displayName:"Сахат",relative:{0:"this hour"},relativeTime:{future:{one:"{0} сахаты фӕстӕ",other:"{0} сахаты фӕстӕ"},past:{one:"{0} сахаты размӕ",other:"{0} сахаты размӕ"}}},"hour-short":{displayName:"Сахат",relative:{0:"this hour"},relativeTime:{future:{one:"{0} сахаты фӕстӕ",other:"{0} сахаты фӕстӕ"},past:{one:"{0} сахаты размӕ",other:"{0} сахаты размӕ"}}},minute:{displayName:"Минут",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Минут",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Секунд",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Секунд",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"os-RU",parentLocale:"os"},{locale:"pa",pluralRuleFunction:function(e,t){return t?"other":0==e||1==e?"one":"other"},fields:{year:{displayName:"ਸਾਲ",relative:{0:"ਇਹ ਸਾਲ",1:"ਅਗਲਾ ਸਾਲ","-1":"ਪਿਛਲਾ ਸਾਲ"},relativeTime:{future:{one:"{0} ਸਾਲ ਵਿੱਚ",other:"{0} ਸਾਲਾਂ ਵਿੱਚ"},past:{one:"{0} ਸਾਲ ਪਹਿਲਾਂ",other:"{0} ਸਾਲ ਪਹਿਲਾਂ"}}},"year-short":{displayName:"ਸਾਲ",relative:{0:"ਇਹ ਸਾਲ",1:"ਅਗਲਾ ਸਾਲ","-1":"ਪਿਛਲਾ ਸਾਲ"},relativeTime:{future:{one:"{0} ਸਾਲ ਵਿੱਚ",other:"{0} ਸਾਲਾਂ ਵਿੱਚ"},past:{one:"{0} ਸਾਲ ਪਹਿਲਾਂ",other:"{0} ਸਾਲ ਪਹਿਲਾਂ"}}},month:{displayName:"ਮਹੀਨਾ",relative:{0:"ਇਹ ਮਹੀਨਾ",1:"ਅਗਲਾ ਮਹੀਨਾ","-1":"ਪਿਛਲਾ ਮਹੀਨਾ"},relativeTime:{future:{one:"{0} ਮਹੀਨੇ ਵਿੱਚ",other:"{0} ਮਹੀਨਿਆਂ ਵਿੱਚ"},past:{one:"{0} ਮਹੀਨਾ ਪਹਿਲਾਂ",other:"{0} ਮਹੀਨੇ ਪਹਿਲਾਂ"}}},"month-short":{displayName:"ਮਹੀਨਾ",relative:{0:"ਇਹ ਮਹੀਨਾ",1:"ਅਗਲਾ ਮਹੀਨਾ","-1":"ਪਿਛਲਾ ਮਹੀਨਾ"},relativeTime:{future:{one:"{0} ਮਹੀਨੇ ਵਿੱਚ",other:"{0} ਮਹੀਨਿਆਂ ਵਿੱਚ"},past:{one:"{0} ਮਹੀਨਾ ਪਹਿਲਾਂ",other:"{0} ਮਹੀਨੇ ਪਹਿਲਾਂ"}}},day:{displayName:"ਦਿਨ",relative:{0:"ਅੱਜ",1:"ਭਲਕੇ","-1":"ਬੀਤਿਆ ਕੱਲ੍ਹ"},relativeTime:{future:{one:"{0} ਦਿਨ ਵਿੱਚ",other:"{0} ਦਿਨਾਂ ਵਿੱਚ"},past:{one:"{0} ਦਿਨ ਪਹਿਲਾਂ",other:"{0} ਦਿਨ ਪਹਿਲਾਂ"}}},"day-short":{displayName:"ਦਿਨ",relative:{0:"ਅੱਜ",1:"ਭਲਕੇ","-1":"ਬੀਤਿਆ ਕੱਲ੍ਹ"},relativeTime:{future:{one:"{0} ਦਿਨ ਵਿੱਚ",other:"{0} ਦਿਨਾਂ ਵਿੱਚ"},past:{one:"{0} ਦਿਨ ਪਹਿਲਾਂ",other:"{0} ਦਿਨ ਪਹਿਲਾਂ"}}},hour:{displayName:"ਘੰਟਾ",relative:{0:"ਇਸ ਘੰਟੇ"},relativeTime:{future:{one:"{0} ਘੰਟੇ ਵਿੱਚ",other:"{0} ਘੰਟਿਆਂ ਵਿੱਚ"},past:{one:"{0} ਘੰਟਾ ਪਹਿਲਾਂ",other:"{0} ਘੰਟੇ ਪਹਿਲਾਂ"}}},"hour-short":{displayName:"ਘੰਟਾ",relative:{0:"ਇਸ ਘੰਟੇ"},relativeTime:{future:{one:"{0} ਘੰਟੇ ਵਿੱਚ",other:"{0} ਘੰਟਿਆਂ ਵਿੱਚ"},past:{one:"{0} ਘੰਟਾ ਪਹਿਲਾਂ",other:"{0} ਘੰਟੇ ਪਹਿਲਾਂ"}}},minute:{displayName:"ਮਿੰਟ",relative:{0:"ਇਸ ਮਿੰਟ"},relativeTime:{future:{one:"{0} ਮਿੰਟ ਵਿੱਚ",other:"{0} ਮਿੰਟਾਂ ਵਿੱਚ"},past:{one:"{0} ਮਿੰਟ ਪਹਿਲਾਂ",other:"{0} ਮਿੰਟ ਪਹਿਲਾਂ"}}},"minute-short":{displayName:"ਮਿੰਟ",relative:{0:"ਇਸ ਮਿੰਟ"},relativeTime:{future:{one:"{0} ਮਿੰਟ ਵਿੱਚ",other:"{0} ਮਿੰਟਾਂ ਵਿੱਚ"},past:{one:"{0} ਮਿੰਟ ਪਹਿਲਾਂ",other:"{0} ਮਿੰਟ ਪਹਿਲਾਂ"}}},second:{displayName:"ਸਕਿੰਟ",relative:{0:"ਹੁਣ"},relativeTime:{future:{one:"{0} ਸਕਿੰਟ ਵਿੱਚ",other:"{0} ਸਕਿੰਟਾਂ ਵਿੱਚ"},past:{one:"{0} ਸਕਿੰਟ ਪਹਿਲਾਂ",other:"{0} ਸਕਿੰਟ ਪਹਿਲਾਂ"}}},"second-short":{displayName:"ਸਕਿੰਟ",relative:{0:"ਹੁਣ"},relativeTime:{future:{one:"{0} ਸਕਿੰਟ ਵਿੱਚ",other:"{0} ਸਕਿੰਟਾਂ ਵਿੱਚ"},past:{one:"{0} ਸਕਿੰਟ ਪਹਿਲਾਂ",other:"{0} ਸਕਿੰਟ ਪਹਿਲਾਂ"}}}}},{locale:"pa-Arab",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"ورھا",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"ورھا",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"مہينا",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"مہينا",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"دئن",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"دئن",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"گھنٹا",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"گھنٹا",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"منٹ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"منٹ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"pa-Guru",parentLocale:"pa"},{locale:"pap",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"pl",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=!a[1],o=r.slice(-1),n=r.slice(-2);return t?"other":1==e&&i?"one":i&&o>=2&&o<=4&&(n<12||n>14)?"few":i&&1!=r&&(0==o||1==o)||i&&o>=5&&o<=9||i&&n>=12&&n<=14?"many":"other"},fields:{year:{displayName:"rok",relative:{0:"w tym roku",1:"w przyszłym roku","-1":"w zeszłym roku"},relativeTime:{future:{one:"za {0} rok",few:"za {0} lata",many:"za {0} lat",other:"za {0} roku"},past:{one:"{0} rok temu",few:"{0} lata temu",many:"{0} lat temu",other:"{0} roku temu"}}},"year-short":{displayName:"r.",relative:{0:"w tym roku",1:"w przyszłym roku","-1":"w zeszłym roku"},relativeTime:{future:{one:"za {0} rok",few:"za {0} lata",many:"za {0} lat",other:"za {0} roku"},past:{one:"{0} rok temu",few:"{0} lata temu",many:"{0} lat temu",other:"{0} roku temu"}}},month:{displayName:"miesiąc",relative:{0:"w tym miesiącu",1:"w przyszłym miesiącu","-1":"w zeszłym miesiącu"},relativeTime:{future:{one:"za {0} miesiąc",few:"za {0} miesiące",many:"za {0} miesięcy",other:"za {0} miesiąca"},past:{one:"{0} miesiąc temu",few:"{0} miesiące temu",many:"{0} miesięcy temu",other:"{0} miesiąca temu"}}},"month-short":{displayName:"mies.",relative:{0:"w tym miesiącu",1:"w przyszłym miesiącu","-1":"w zeszłym miesiącu"},relativeTime:{future:{one:"za {0} mies.",few:"za {0} mies.",many:"za {0} mies.",other:"za {0} mies."},past:{one:"{0} mies. temu",few:"{0} mies. temu",many:"{0} mies. temu",other:"{0} mies. temu"}}},day:{displayName:"dzień",relative:{0:"dzisiaj",1:"jutro",2:"pojutrze","-2":"przedwczoraj","-1":"wczoraj"},relativeTime:{future:{one:"za {0} dzień",few:"za {0} dni",many:"za {0} dni",other:"za {0} dnia"},past:{one:"{0} dzień temu",few:"{0} dni temu",many:"{0} dni temu",other:"{0} dnia temu"}}},"day-short":{displayName:"dzień",relative:{0:"dzisiaj",1:"jutro",2:"pojutrze","-2":"przedwczoraj","-1":"wczoraj"},relativeTime:{future:{one:"za {0} dzień",few:"za {0} dni",many:"za {0} dni",other:"za {0} dnia"},past:{one:"{0} dzień temu",few:"{0} dni temu",many:"{0} dni temu",other:"{0} dnia temu"}}},hour:{displayName:"godzina",relative:{0:"ta godzina"},relativeTime:{future:{one:"za {0} godzinę",few:"za {0} godziny",many:"za {0} godzin",other:"za {0} godziny"},past:{one:"{0} godzinę temu",few:"{0} godziny temu",many:"{0} godzin temu",other:"{0} godziny temu"}}},"hour-short":{displayName:"godz.",relative:{0:"ta godzina"},relativeTime:{future:{one:"za {0} godz.",few:"za {0} godz.",many:"za {0} godz.",other:"za {0} godz."},past:{one:"{0} godz. temu",few:"{0} godz. temu",many:"{0} godz. temu",other:"{0} godz. temu"}}},minute:{displayName:"minuta",relative:{0:"ta minuta"},relativeTime:{future:{one:"za {0} minutę",few:"za {0} minuty",many:"za {0} minut",other:"za {0} minuty"},past:{one:"{0} minutę temu",few:"{0} minuty temu",many:"{0} minut temu",other:"{0} minuty temu"}}},"minute-short":{displayName:"min",relative:{0:"ta minuta"},relativeTime:{future:{one:"za {0} min",few:"za {0} min",many:"za {0} min",other:"za {0} min"},past:{one:"{0} min temu",few:"{0} min temu",many:"{0} min temu",other:"{0} min temu"}}},second:{displayName:"sekunda",relative:{0:"teraz"},relativeTime:{future:{one:"za {0} sekundę",few:"za {0} sekundy",many:"za {0} sekund",other:"za {0} sekundy"},past:{one:"{0} sekundę temu",few:"{0} sekundy temu",many:"{0} sekund temu",other:"{0} sekundy temu"}}},"second-short":{displayName:"sek.",relative:{0:"teraz"},relativeTime:{future:{one:"za {0} sek.",few:"za {0} sek.",many:"za {0} sek.",other:"za {0} sek."},past:{one:"{0} sek. temu",few:"{0} sek. temu",many:"{0} sek. temu",other:"{0} sek. temu"}}}}},{locale:"prg",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[1]||"",i=r.length,o=Number(a[0])==e,n=o&&a[0].slice(-1),s=o&&a[0].slice(-2),l=r.slice(-2),h=r.slice(-1);return t?"other":o&&0==n||s>=11&&s<=19||2==i&&l>=11&&l<=19?"zero":1==n&&11!=s||2==i&&1==h&&11!=l||2!=i&&1==h?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ps",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"کال",relative:{0:"سږکال",1:"بل کال","-1":"پروسږکال"},relativeTime:{future:{one:"په {0} کال کې",other:"په {0} کالونو کې"},past:{one:"{0} کال مخکې",other:"{0} کاله مخکې"}}},"year-short":{displayName:"کال",relative:{0:"سږکال",1:"بل کال","-1":"پروسږکال"},relativeTime:{future:{one:"په {0} کال کې",other:"په {0} کالونو کې"},past:{one:"{0} کال مخکې",other:"{0} کاله مخکې"}}},month:{displayName:"مياشت",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"+{0} m",other:"+{0} m"},past:{one:"-{0} m",other:"-{0} m"}}},"month-short":{displayName:"مياشت",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"+{0} m",other:"+{0} m"},past:{one:"-{0} m",other:"-{0} m"}}},day:{displayName:"ورځ",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"+{0} d",other:"+{0} d"},past:{one:"-{0} d",other:"-{0} d"}}},"day-short":{displayName:"ورځ",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"+{0} d",other:"+{0} d"},past:{one:"-{0} d",other:"-{0} d"}}},hour:{displayName:"ساعت",relative:{0:"this hour"},relativeTime:{future:{one:"+{0} h",other:"+{0} h"},past:{one:"-{0} h",other:"-{0} h"}}},"hour-short":{displayName:"ساعت",relative:{0:"this hour"},relativeTime:{future:{one:"+{0} h",other:"+{0} h"},past:{one:"-{0} h",other:"-{0} h"}}},minute:{displayName:"دقيقه",relative:{0:"this minute"},relativeTime:{future:{one:"+{0} min",other:"+{0} min"},past:{one:"-{0} min",other:"-{0} min"}}},"minute-short":{displayName:"دقيقه",relative:{0:"this minute"},relativeTime:{future:{one:"+{0} min",other:"+{0} min"},past:{one:"-{0} min",other:"-{0} min"}}},second:{displayName:"ثانيه",relative:{0:"now"},relativeTime:{future:{one:"+{0} s",other:"+{0} s"},past:{one:"-{0} s",other:"-{0} s"}}},"second-short":{displayName:"ثانيه",relative:{0:"now"},relativeTime:{future:{one:"+{0} s",other:"+{0} s"},past:{one:"-{0} s",other:"-{0} s"}}}}},{locale:"pt",pluralRuleFunction:function(e,t){var a=String(e).split(".")[0];return t?"other":0==a||1==a?"one":"other"},fields:{year:{displayName:"ano",relative:{0:"este ano",1:"próximo ano","-1":"ano passado"},relativeTime:{future:{one:"em {0} ano",other:"em {0} anos"},past:{one:"há {0} ano",other:"há {0} anos"}}},"year-short":{displayName:"ano",relative:{0:"este ano",1:"próximo ano","-1":"ano passado"},relativeTime:{future:{one:"em {0} ano",other:"em {0} anos"},past:{one:"há {0} ano",other:"há {0} anos"}}},month:{displayName:"mês",relative:{0:"este mês",1:"próximo mês","-1":"mês passado"},relativeTime:{future:{one:"em {0} mês",other:"em {0} meses"},past:{one:"há {0} mês",other:"há {0} meses"}}},"month-short":{displayName:"mês",relative:{0:"este mês",1:"próximo mês","-1":"mês passado"},relativeTime:{future:{one:"em {0} mês",other:"em {0} meses"},past:{one:"há {0} mês",other:"há {0} meses"}}},day:{displayName:"dia",relative:{0:"hoje",1:"amanhã",2:"depois de amanhã","-2":"anteontem","-1":"ontem"},relativeTime:{future:{one:"em {0} dia",other:"em {0} dias"},past:{one:"há {0} dia",other:"há {0} dias"}}},"day-short":{displayName:"dia",relative:{0:"hoje",1:"amanhã",2:"depois de amanhã","-2":"anteontem","-1":"ontem"},relativeTime:{future:{one:"em {0} dia",other:"em {0} dias"},past:{one:"há {0} dia",other:"há {0} dias"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"em {0} hora",other:"em {0} horas"},past:{one:"há {0} hora",other:"há {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"em {0} h",other:"em {0} h"},past:{one:"há {0} h",other:"há {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"em {0} minuto",other:"em {0} minutos"},past:{one:"há {0} minuto",other:"há {0} minutos"}}},"minute-short":{displayName:"min.",relative:{0:"este minuto"},relativeTime:{future:{one:"em {0} min.",other:"em {0} min."},past:{one:"há {0} min.",other:"há {0} min."}}},second:{displayName:"segundo",relative:{0:"agora"},relativeTime:{future:{one:"em {0} segundo",other:"em {0} segundos"},past:{one:"há {0} segundo",other:"há {0} segundos"}}},"second-short":{displayName:"seg.",relative:{0:"agora"},relativeTime:{future:{one:"em {0} seg.",other:"em {0} seg."},past:{one:"há {0} seg.",other:"há {0} seg."}}}}},{locale:"pt-AO",parentLocale:"pt-PT"},{locale:"pt-PT",parentLocale:"pt",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"ano",relative:{0:"este ano",1:"próximo ano","-1":"ano passado"},relativeTime:{future:{one:"dentro de {0} ano",other:"dentro de {0} anos"},past:{one:"há {0} ano",other:"há {0} anos"}}},"year-short":{displayName:"ano",relative:{0:"este ano",1:"próximo ano","-1":"ano passado"},relativeTime:{future:{one:"dentro de {0} ano",other:"dentro de {0} anos"},past:{one:"há {0} ano",other:"há {0} anos"}}},month:{displayName:"mês",relative:{0:"este mês",1:"próximo mês","-1":"mês passado"},relativeTime:{future:{one:"dentro de {0} mês",other:"dentro de {0} meses"},past:{one:"há {0} mês",other:"há {0} meses"}}},"month-short":{displayName:"mês",relative:{0:"este mês",1:"próximo mês","-1":"mês passado"},relativeTime:{future:{one:"dentro de {0} mês",other:"dentro de {0} meses"},past:{one:"há {0} mês",other:"há {0} meses"}}},day:{displayName:"dia",relative:{0:"hoje",1:"amanhã",2:"depois de amanhã","-2":"anteontem","-1":"ontem"},relativeTime:{future:{one:"dentro de {0} dia",other:"dentro de {0} dias"},past:{one:"há {0} dia",other:"há {0} dias"}}},"day-short":{displayName:"dia",relative:{0:"hoje",1:"amanhã",2:"depois de amanhã","-2":"anteontem","-1":"ontem"},relativeTime:{future:{one:"dentro de {0} dia",other:"dentro de {0} dias"},past:{one:"há {0} dia",other:"há {0} dias"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"há {0} hora",other:"há {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"há {0} h",other:"há {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"há {0} minuto",other:"há {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"há {0} min",other:"há {0} min"}}},second:{displayName:"segundo",relative:{0:"agora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"há {0} segundo",other:"há {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"agora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"há {0} s",other:"há {0} s"}}}}},{locale:"pt-CH",parentLocale:"pt-PT"},{locale:"pt-CV",parentLocale:"pt-PT"},{locale:"pt-GQ",parentLocale:"pt-PT"},{locale:"pt-GW",parentLocale:"pt-PT"},{locale:"pt-LU",parentLocale:"pt-PT"},{locale:"pt-MO",parentLocale:"pt-PT"},{locale:"pt-MZ",parentLocale:"pt-PT"},{locale:"pt-ST",parentLocale:"pt-PT"},{locale:"pt-TL",parentLocale:"pt-PT"},{locale:"qu",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"kunan wata",1:"hamuq wata","-1":"qayna wata"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"kunan wata",1:"hamuq wata","-1":"qayna wata"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"kunan killa",1:"hamuq killa","-1":"qayna killa"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"kunan killa",1:"hamuq killa","-1":"qayna killa"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"kunan punchaw",1:"paqarin","-1":"qayna punchaw"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"kunan punchaw",1:"paqarin","-1":"qayna punchaw"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"kay hora"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"kay hora"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"kay minuto"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"kay minuto"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"qu-BO",parentLocale:"qu"},{locale:"qu-EC",parentLocale:"qu"},{locale:"rm",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"onn",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"onn",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"mais",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"mais",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Tag",relative:{0:"oz",1:"damaun",2:"puschmaun","-2":"stersas","-1":"ier"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Tag",relative:{0:"oz",1:"damaun",2:"puschmaun","-2":"stersas","-1":"ier"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"ura",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"ura",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"minuta",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"minuta",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"secunda",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"secunda",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"rn",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Umwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Umwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Ukwezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Ukwezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Umusi",relative:{0:"Uyu musi",1:"Ejo (hazoza)","-1":"Ejo (haheze)"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Umusi",relative:{0:"Uyu musi",1:"Ejo (hazoza)","-1":"Ejo (haheze)"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Isaha",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Isaha",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Umunota",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Umunota",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Isegonda",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Isegonda",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ro",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=!a[1],i=Number(a[0])==e&&a[0].slice(-2);return t?1==e?"one":"other":1==e&&r?"one":!r||0==e||1!=e&&i>=1&&i<=19?"few":"other"},fields:{year:{displayName:"an",relative:{0:"anul acesta",1:"anul viitor","-1":"anul trecut"},relativeTime:{future:{one:"peste {0} an",few:"peste {0} ani",other:"peste {0} de ani"},past:{one:"acum {0} an",few:"acum {0} ani",other:"acum {0} de ani"}}},"year-short":{displayName:"an",relative:{0:"anul acesta",1:"anul viitor","-1":"anul trecut"},relativeTime:{future:{one:"peste {0} an",few:"peste {0} ani",other:"peste {0} de ani"},past:{one:"acum {0} an",few:"acum {0} ani",other:"acum {0} de ani"}}},month:{displayName:"lună",relative:{0:"luna aceasta",1:"luna viitoare","-1":"luna trecută"},relativeTime:{future:{one:"peste {0} lună",few:"peste {0} luni",other:"peste {0} de luni"},past:{one:"acum {0} lună",few:"acum {0} luni",other:"acum {0} de luni"}}},"month-short":{displayName:"lună",relative:{0:"luna aceasta",1:"luna viitoare","-1":"luna trecută"},relativeTime:{future:{one:"peste {0} lună",few:"peste {0} luni",other:"peste {0} luni"},past:{one:"acum {0} lună",few:"acum {0} luni",other:"acum {0} luni"}}},day:{displayName:"zi",relative:{0:"azi",1:"mâine",2:"poimâine","-2":"alaltăieri","-1":"ieri"},relativeTime:{future:{one:"peste {0} zi",few:"peste {0} zile",other:"peste {0} de zile"},past:{one:"acum {0} zi",few:"acum {0} zile",other:"acum {0} de zile"}}},"day-short":{displayName:"zi",relative:{0:"azi",1:"mâine",2:"poimâine","-2":"alaltăieri","-1":"ieri"},relativeTime:{future:{one:"peste {0} zi",few:"peste {0} zile",other:"peste {0} de zile"},past:{one:"acum {0} zi",few:"acum {0} zile",other:"acum {0} de zile"}}},hour:{displayName:"oră",relative:{0:"ora aceasta"},relativeTime:{future:{one:"peste {0} oră",few:"peste {0} ore",other:"peste {0} de ore"},past:{one:"acum {0} oră",few:"acum {0} ore",other:"acum {0} de ore"}}},"hour-short":{displayName:"h",relative:{0:"ora aceasta"},relativeTime:{future:{one:"peste {0} h",few:"peste {0} h",other:"peste {0} h"},past:{one:"acum {0} h",few:"acum {0} h",other:"acum {0} h"}}},minute:{displayName:"minut",relative:{0:"minutul acesta"},relativeTime:{future:{one:"peste {0} minut",few:"peste {0} minute",other:"peste {0} de minute"},past:{one:"acum {0} minut",few:"acum {0} minute",other:"acum {0} de minute"}}},"minute-short":{displayName:"min.",relative:{0:"minutul acesta"},relativeTime:{future:{one:"peste {0} min.",few:"peste {0} min.",other:"peste {0} min."},past:{one:"acum {0} min.",few:"acum {0} min.",other:"acum {0} min."}}},second:{displayName:"secundă",relative:{0:"acum"},relativeTime:{future:{one:"peste {0} secundă",few:"peste {0} secunde",other:"peste {0} de secunde"},past:{one:"acum {0} secundă",few:"acum {0} secunde",other:"acum {0} de secunde"}}},"second-short":{displayName:"sec.",relative:{0:"acum"},relativeTime:{future:{one:"peste {0} sec.",few:"peste {0} sec.",other:"peste {0} sec."},past:{one:"acum {0} sec.",few:"acum {0} sec.",other:"acum {0} sec."}}}}},{locale:"ro-MD",parentLocale:"ro"},{locale:"rof",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Muaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Muaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mweri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mweri",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Mfiri",relative:{0:"Linu",1:"Ng’ama","-1":"Hiyo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Mfiri",relative:{0:"Linu",1:"Ng’ama","-1":"Hiyo"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Isaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Isaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Dakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ru",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=!a[1],o=r.slice(-1),n=r.slice(-2);return t?"other":i&&1==o&&11!=n?"one":i&&o>=2&&o<=4&&(n<12||n>14)?"few":i&&0==o||i&&o>=5&&o<=9||i&&n>=11&&n<=14?"many":"other"},fields:{year:{displayName:"год",relative:{0:"в этом году",1:"в следующем году","-1":"в прошлом году"},relativeTime:{future:{one:"через {0} год",few:"через {0} года",many:"через {0} лет",other:"через {0} года"},past:{one:"{0} год назад",few:"{0} года назад",many:"{0} лет назад",other:"{0} года назад"}}},"year-short":{displayName:"г.",relative:{0:"в этом г.",1:"в след. г.","-1":"в прошлом г."},relativeTime:{future:{one:"через {0} г.",few:"через {0} г.",many:"через {0} л.",other:"через {0} г."},past:{one:"{0} г. назад",few:"{0} г. назад",many:"{0} л. назад",other:"{0} г. назад"}}},month:{displayName:"месяц",relative:{0:"в этом месяце",1:"в следующем месяце","-1":"в прошлом месяце"},relativeTime:{future:{one:"через {0} месяц",few:"через {0} месяца",many:"через {0} месяцев",other:"через {0} месяца"},past:{one:"{0} месяц назад",few:"{0} месяца назад",many:"{0} месяцев назад",other:"{0} месяца назад"}}},"month-short":{displayName:"мес.",relative:{0:"в этом мес.",1:"в следующем мес.","-1":"в прошлом мес."},relativeTime:{future:{one:"через {0} мес.",few:"через {0} мес.",many:"через {0} мес.",other:"через {0} мес."},past:{one:"{0} мес. назад",few:"{0} мес. назад",many:"{0} мес. назад",other:"{0} мес. назад"}}},day:{displayName:"день",relative:{0:"сегодня",1:"завтра",2:"послезавтра","-2":"позавчера","-1":"вчера"},relativeTime:{future:{one:"через {0} день",few:"через {0} дня",many:"через {0} дней",other:"через {0} дня"},past:{one:"{0} день назад",few:"{0} дня назад",many:"{0} дней назад",other:"{0} дня назад"}}},"day-short":{displayName:"дн.",relative:{0:"сегодня",1:"завтра",2:"послезавтра","-2":"позавчера","-1":"вчера"},relativeTime:{future:{one:"через {0} дн.",few:"через {0} дн.",many:"через {0} дн.",other:"через {0} дн."},past:{one:"{0} дн. назад",few:"{0} дн. назад",many:"{0} дн. назад",other:"{0} дн. назад"}}},hour:{displayName:"час",relative:{0:"в этот час"},relativeTime:{future:{one:"через {0} час",few:"через {0} часа",many:"через {0} часов",other:"через {0} часа"},past:{one:"{0} час назад",few:"{0} часа назад",many:"{0} часов назад",other:"{0} часа назад"}}},"hour-short":{displayName:"ч",relative:{0:"в этот час"},relativeTime:{future:{one:"через {0} ч.",few:"через {0} ч.",many:"через {0} ч.",other:"через {0} ч."},past:{one:"{0} ч. назад",few:"{0} ч. назад",many:"{0} ч. назад",other:"{0} ч. назад"}}},minute:{displayName:"минута",relative:{0:"в эту минуту"},relativeTime:{future:{one:"через {0} минуту",few:"через {0} минуты",many:"через {0} минут",other:"через {0} минуты"},past:{one:"{0} минуту назад",few:"{0} минуты назад",many:"{0} минут назад",other:"{0} минуты назад"}}},"minute-short":{displayName:"мин.",relative:{0:"в эту минуту"},relativeTime:{future:{one:"через {0} мин.",few:"через {0} мин.",many:"через {0} мин.",other:"через {0} мин."},past:{one:"{0} мин. назад",few:"{0} мин. назад",many:"{0} мин. назад",other:"{0} мин. назад"}}},second:{displayName:"секунда",relative:{0:"сейчас"},relativeTime:{future:{one:"через {0} секунду",few:"через {0} секунды",many:"через {0} секунд",other:"через {0} секунды"},past:{one:"{0} секунду назад",few:"{0} секунды назад",many:"{0} секунд назад",other:"{0} секунды назад"}}},"second-short":{displayName:"сек.",relative:{0:"сейчас"},relativeTime:{future:{one:"через {0} сек.",few:"через {0} сек.",many:"через {0} сек.",other:"через {0} сек."},past:{one:"{0} сек. назад",few:"{0} сек. назад",many:"{0} сек. назад",other:"{0} сек. назад"}}}}},{locale:"ru-BY",parentLocale:"ru"},{locale:"ru-KG",parentLocale:"ru"},{locale:"ru-KZ",parentLocale:"ru"},{locale:"ru-MD",parentLocale:"ru"},{locale:"ru-UA",parentLocale:"ru"},{locale:"rw",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"rwk",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Maka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Maka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mori",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mori",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Mfiri",relative:{0:"Inu",1:"Ngama","-1":"Ukou"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Mfiri",relative:{0:"Inu",1:"Ngama","-1":"Ukou"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Dakyika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Dakyika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"sah",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Сыл",relative:{0:"быйыл",1:"эһиил","-1":"Былырыын"},relativeTime:{future:{other:"{0} сылынан"},past:{other:"{0} сыл ынараа өттүгэр"}}},"year-short":{displayName:"Сыл",relative:{0:"быйыл",1:"эһиил","-1":"Былырыын"},relativeTime:{future:{other:"{0} сылынан"},past:{other:"{0} сыл ынараа өттүгэр"}}},month:{displayName:"Ый",relative:{0:"бу ый",1:"аныгыскы ый","-1":"ааспыт ый"},relativeTime:{future:{other:"{0} ыйынан"},past:{other:"{0} ый ынараа өттүгэр"}}},"month-short":{displayName:"Ый",relative:{0:"бу ый",1:"аныгыскы ый","-1":"ааспыт ый"},relativeTime:{future:{other:"{0} ыйынан"},past:{other:"{0} ый ынараа өттүгэр"}}},day:{displayName:"Күн",relative:{0:"Бүгүн",1:"Сарсын",2:"Өйүүн","-2":"Иллэрээ күн","-1":"Бэҕэһээ"},relativeTime:{future:{other:"{0} күнүнэн"},past:{other:"{0} күн ынараа өттүгэр"}}},"day-short":{displayName:"Күн",relative:{0:"Бүгүн",1:"Сарсын",2:"Өйүүн","-2":"Иллэрээ күн","-1":"Бэҕэһээ"},relativeTime:{future:{other:"{0} күнүнэн"},past:{other:"{0} күн ынараа өттүгэр"}}},hour:{displayName:"Чаас",relative:{0:"this hour"},relativeTime:{future:{other:"{0} чааһынан"},past:{other:"{0} чаас ынараа өттүгэр"}}},"hour-short":{displayName:"Чаас",relative:{0:"this hour"},relativeTime:{future:{other:"{0} чааһынан"},past:{other:"{0} чаас ынараа өттүгэр"}}},minute:{displayName:"Мүнүүтэ",relative:{0:"this minute"},relativeTime:{future:{other:"{0} мүнүүтэннэн"},past:{other:"{0} мүнүүтэ ынараа өттүгэр"}}},"minute-short":{displayName:"Мүнүүтэ",relative:{0:"this minute"},relativeTime:{future:{other:"{0} мүнүүтэннэн"},past:{other:"{0} мүнүүтэ ынараа өттүгэр"}}},second:{displayName:"Сөкүүндэ",relative:{0:"билигин"},relativeTime:{future:{other:"{0} сөкүүндэннэн"},past:{other:"{0} сөкүүндэ ынараа өттүгэр"}}},"second-short":{displayName:"Сөкүүндэ",relative:{0:"билигин"},relativeTime:{future:{other:"{0} сөкүүндэннэн"},past:{other:"{0} сөк. анараа өттүгэр"}}}}},{locale:"saq",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Lari",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Lari",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Lapa",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Lapa",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Mpari",relative:{0:"Duo",1:"Taisere","-1":"Ng’ole"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Mpari",relative:{0:"Duo",1:"Taisere","-1":"Ng’ole"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Saai",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Saai",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Idakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Idakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Isekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Isekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"sbp",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Mwakha",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Mwakha",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mwesi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mwesi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Lusiku",relative:{0:"Ineng’uni",1:"Pamulaawu","-1":"Imehe"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Lusiku",relative:{0:"Ineng’uni",1:"Pamulaawu","-1":"Imehe"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Ilisala",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Ilisala",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Idakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Idakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Isekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Isekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"sc",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?11==e||8==e||80==e||800==e?"many":"other":1==e&&a?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"scn",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?11==e||8==e||80==e||800==e?"many":"other":1==e&&a?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"sd",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"سال",relative:{0:"پويون سال",1:"پويون سال","-1":"پويون سال"},relativeTime:{future:{one:"{0} سالن ۾",other:"{0} سالن ۾"},past:{one:"{0} سال پهرين",other:"{0} سال پهرين"}}},"year-short":{displayName:"سال",relative:{0:"پويون سال",1:"پويون سال","-1":"پويون سال"},relativeTime:{future:{one:"{0} سالن ۾",other:"{0} سالن ۾"},past:{one:"{0} سال پهرين",other:"{0} سال پهرين"}}},month:{displayName:"مهينو",relative:{0:"هن مهيني",1:"اڳين مهيني","-1":"پوئين مهيني"},relativeTime:{future:{one:"{0} مهينن ۾",other:"{0} مهينن ۾"},past:{one:"{0} مهينا پهرين",other:"{0} مهينا پهرين"}}},"month-short":{displayName:"مهينو",relative:{0:"هن مهيني",1:"اڳين مهيني","-1":"پوئين مهيني"},relativeTime:{future:{one:"{0} مهينن ۾",other:"{0} مهينن ۾"},past:{one:"{0} مهينا پهرين",other:"{0} مهينا پهرين"}}},day:{displayName:"ڏينهن",relative:{0:"اڄ",1:"سڀاڻي","-1":"ڪل"},relativeTime:{future:{one:"{0} ڏينهن ۾",other:"{0} ڏينهن ۾"},past:{one:"{0} ڏينهن پهرين",other:"{0} ڏينهن پهرين"}}},"day-short":{displayName:"ڏينهن",relative:{0:"اڄ",1:"سڀاڻي","-1":"ڪل"},relativeTime:{future:{one:"{0} ڏينهن ۾",other:"{0} ڏينهن ۾"},past:{one:"{0} ڏينهن پهرين",other:"{0} ڏينهن پهرين"}}},hour:{displayName:"ڪلاڪ",relative:{0:"هن ڪلڪ"},relativeTime:{future:{one:"{0} ڪلاڪ ۾",other:"{0} ڪلاڪ ۾"},past:{one:"{0} ڪلاڪ پهرين",other:"{0} ڪلاڪ پهرين"}}},"hour-short":{displayName:"ڪلاڪ",relative:{0:"هن ڪلڪ"},relativeTime:{future:{one:"{0} ڪلاڪ ۾",other:"{0} ڪلاڪ ۾"},past:{one:"{0} ڪلاڪ پهرين",other:"{0} ڪلاڪ پهرين"}}},minute:{displayName:"منٽ",relative:{0:"هن منٽ"},relativeTime:{future:{one:"{0} منٽن ۾",other:"+{0} min"},past:{one:"{0} منٽ پهرين",other:"{0} منٽ پهرين"}}},"minute-short":{displayName:"منٽ",relative:{0:"هن منٽ"},relativeTime:{future:{one:"{0} منٽن ۾",other:"{0} منٽن ۾"},past:{one:"{0} منٽ پهرين",other:"{0} منٽ پهرين"}}},second:{displayName:"سيڪنڊ",relative:{0:"هاڻي"},relativeTime:{future:{one:"{0} سيڪنڊن ۾",other:"{0} سيڪنڊن ۾"},past:{one:"{0} سيڪنڊ پهرين",other:"{0} سيڪنڊ پهرين"}}},"second-short":{displayName:"سيڪنڊ",relative:{0:"هاڻي"},relativeTime:{future:{one:"{0} سيڪنڊن ۾",other:"{0} سيڪنڊن ۾"},past:{one:"{0} سيڪنڊ پهرين",other:"{0} سيڪنڊ پهرين"}}}}},{locale:"sdh",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"se",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":2==e?"two":"other"},fields:{year:{displayName:"jáhki",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"{0} jahki maŋŋilit",two:"{0} jahkki maŋŋilit",other:"{0} jahkki maŋŋilit"},past:{one:"{0} jahki árat",two:"{0} jahkki árat",other:"{0} jahkki árat"}}},"year-short":{displayName:"jáhki",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"{0} jahki maŋŋilit",two:"{0} jahkki maŋŋilit",other:"{0} jahkki maŋŋilit"},past:{one:"{0} jahki árat",two:"{0} jahkki árat",other:"{0} jahkki árat"}}},month:{displayName:"mánnu",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"{0} mánotbadji maŋŋilit",two:"{0} mánotbadji maŋŋilit",other:"{0} mánotbadji maŋŋilit"},past:{one:"{0} mánotbadji árat",two:"{0} mánotbadji árat",other:"{0} mánotbadji árat"}}},"month-short":{displayName:"mánnu",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"{0} mánotbadji maŋŋilit",two:"{0} mánotbadji maŋŋilit",other:"{0} mánotbadji maŋŋilit"},past:{one:"{0} mánotbadji árat",two:"{0} mánotbadji árat",other:"{0} mánotbadji árat"}}},day:{displayName:"beaivi",relative:{0:"odne",1:"ihttin",2:"paijeelittáá","-2":"oovdebpeivvi","-1":"ikte"},relativeTime:{future:{one:"{0} jándor maŋŋilit",two:"{0} jándor amaŋŋilit",other:"{0} jándora maŋŋilit"},past:{one:"{0} jándor árat",two:"{0} jándora árat",other:"{0} jándora árat"}}},"day-short":{displayName:"beaivi",relative:{0:"odne",1:"ihttin",2:"paijeelittáá","-2":"oovdebpeivvi","-1":"ikte"},relativeTime:{future:{one:"{0} jándor maŋŋilit",two:"{0} jándor amaŋŋilit",other:"{0} jándora maŋŋilit"},past:{one:"{0} jándor árat",two:"{0} jándora árat",other:"{0} jándora árat"}}},hour:{displayName:"diibmu",relative:{0:"this hour"},relativeTime:{future:{one:"{0} diibmu maŋŋilit",two:"{0} diibmur maŋŋilit",other:"{0} diibmur maŋŋilit"},past:{one:"{0} diibmu árat",two:"{0} diibmur árat",other:"{0} diibmur árat"}}},"hour-short":{displayName:"diibmu",relative:{0:"this hour"},relativeTime:{future:{one:"{0} diibmu maŋŋilit",two:"{0} diibmur maŋŋilit",other:"{0} diibmur maŋŋilit"},past:{one:"{0} diibmu árat",two:"{0} diibmur árat",other:"{0} diibmur árat"}}},minute:{displayName:"minuhtta",relative:{0:"this minute"},relativeTime:{future:{one:"{0} minuhta maŋŋilit",two:"{0} minuhtta maŋŋilit",other:"{0} minuhtta maŋŋilit"},past:{one:"{0} minuhta árat",two:"{0} minuhtta árat",other:"{0} minuhtta árat"}}},"minute-short":{displayName:"minuhtta",relative:{0:"this minute"},relativeTime:{future:{one:"{0} minuhta maŋŋilit",two:"{0} minuhtta maŋŋilit",other:"{0} minuhtta maŋŋilit"},past:{one:"{0} minuhta árat",two:"{0} minuhtta árat",other:"{0} minuhtta árat"}}},second:{displayName:"sekunda",relative:{0:"now"},relativeTime:{future:{one:"{0} sekunda maŋŋilit",two:"{0} sekundda maŋŋilit",other:"{0} sekundda maŋŋilit"},past:{one:"{0} sekunda árat",two:"{0} sekundda árat",other:"{0} sekundda árat"}}},"second-short":{displayName:"sekunda",relative:{0:"now"},relativeTime:{future:{one:"{0} sekunda maŋŋilit",two:"{0} sekundda maŋŋilit",other:"{0} sekundda maŋŋilit"},past:{one:"{0} sekunda árat",two:"{0} sekundda árat",other:"{0} sekundda árat"}}}}},{locale:"se-FI",parentLocale:"se",fields:{year:{displayName:"jahki",relative:{0:"dán jagi",1:"boahtte jagi","-1":"diibmá"},relativeTime:{future:{one:"{0} jagi siste",two:"{0} jagi siste",other:"{0} jagi siste"},past:{one:"diibmá",two:"ovddet jagi",other:"{0} jagi dás ovdal"}}},"year-short":{displayName:"j.",relative:{0:"dán jagi",1:"boahtte jagi","-1":"diibmá"},relativeTime:{future:{one:"{0} j. siste",two:"{0} jagi siste",other:"{0} j. siste"},past:{one:"diibmá",two:"ovddet jagi",other:"{0} j. dás ovdal"}}},month:{displayName:"mánnu",relative:{0:"dán mánu",1:"boahtte mánu","-1":"mannan mánu"},relativeTime:{future:{one:"{0} mánu siste",two:"{0} mánu siste",other:"{0} mánu siste"},past:{one:"{0} mánnu dás ovdal",two:"{0} mánu dás ovdal",other:"{0} mánu dás ovdal"}}},"month-short":{displayName:"m.",relative:{0:"dán mánu",1:"boahtte mánu","-1":"mannan mánu"},relativeTime:{future:{one:"{0} mánu siste",two:"{0} mánu siste",other:"{0} mánu siste"},past:{one:"{0} mánnu dás ovdal",two:"{0} mánu dás ovdal",other:"{0} mánu dás ovdal"}}},day:{displayName:"beaivi",relative:{0:"odne",1:"ihttin",2:"don beaivve","-2":"ovddet beaivvi","-1":"ikte"},relativeTime:{future:{one:"{0} beaivve siste",two:"{0} beaivve siste",other:"{0} beaivve siste"},past:{one:"ikte",two:"ovddet beaivve",other:"{0} beaivve dás ovdal"}}},"day-short":{displayName:"b.",relative:{0:"odne",1:"ihttin",2:"don beaivve","-2":"ovddet beaivvi","-1":"ikte"},relativeTime:{future:{one:"{0} beaivve siste",two:"{0} beaivve siste",other:"{0} beaivve siste"},past:{one:"ikte",two:"ovddet beaivve",other:"{0} beaivve dás ovdal"}}},hour:{displayName:"diibmu",relative:{0:"dán diimmu"},relativeTime:{future:{one:"{0} diimmu siste",two:"{0} diimmu siste",other:"{0} diimmu siste"},past:{one:"{0} diibmu áigi",two:"{0} diimmu áigi",other:"{0} diimmu áigi"}}},"hour-short":{displayName:"dmu",relative:{0:"dán diimmu"},relativeTime:{future:{one:"{0} dmu siste",two:"{0} diimmu siste",other:"{0} dmu siste"},past:{one:"{0} dmu áigi",two:"{0} diimmu áigi",other:"{0} dmu áigi"}}},minute:{displayName:"minuhtta",relative:{0:"dán minuhta"},relativeTime:{future:{one:"{0} minuhta siste",two:"{0} minuhta siste",other:"{0} minuhta siste"},past:{one:"{0} minuhtta áigi",two:"{0} minuhta áigi",other:"{0} minuhta áigi"}}},"minute-short":{displayName:"min.",relative:{0:"dán minuhta"},relativeTime:{future:{one:"{0} min. siste",two:"{0} minuhta siste",other:"{0} min. siste"},past:{one:"{0} min. áigi",two:"{0} minuhta áigi",other:"{0} min. áigi"}}},second:{displayName:"sekunda",relative:{0:"dál"},relativeTime:{future:{one:"{0} sekundda siste",two:"{0} sekundda siste",other:"{0} sekundda siste"},past:{one:"{0} sekunda áigi",two:"{0} sekundda áigi",other:"{0} sekundda áigi"}}},"second-short":{displayName:"sek.",relative:{0:"dál"},relativeTime:{future:{one:"{0} sek. siste",two:"{0} sekundda siste",other:"{0} sek. siste"},past:{one:"{0} sek. áigi",two:"{0} sekundda áigi",other:"{0} sek. áigi"}}}}},{locale:"se-SE",parentLocale:"se"},{locale:"seh",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Chaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Chaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mwezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mwezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ntsiku",relative:{0:"Lero",1:"Manguana","-1":"Zuro"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ntsiku",relative:{0:"Lero",1:"Manguana","-1":"Zuro"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hora",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hora",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minuto",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minuto",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Segundo",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Segundo",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ses",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Jiiri",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Jiiri",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Handu",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Handu",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Zaari",relative:{0:"Hõo",1:"Suba","-1":"Bi"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Zaari",relative:{0:"Hõo",1:"Suba","-1":"Bi"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Guuru",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Guuru",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Miniti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Miniti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Miti",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Miti",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"sg",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Ngû",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Ngû",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Nze",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Nze",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Lâ",relative:{0:"Lâsô",1:"Kêkerêke","-1":"Bîrï"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Lâ",relative:{0:"Lâsô",1:"Kêkerêke","-1":"Bîrï"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Ngbonga",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Ngbonga",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Ndurü ngbonga",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Ndurü ngbonga",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Nzîna ngbonga",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Nzîna ngbonga",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"sh",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=a[1]||"",o=!a[1],n=r.slice(-1),s=r.slice(-2),l=i.slice(-1),h=i.slice(-2);return t?"other":o&&1==n&&11!=s||1==l&&11!=h?"one":o&&n>=2&&n<=4&&(s<12||s>14)||l>=2&&l<=4&&(h<12||h>14)?"few":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"shi",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e;return t?"other":e>=0&&e<=1?"one":r&&e>=2&&e<=10?"few":"other"},fields:{year:{displayName:"ⴰⵙⴳⴳⵯⴰⵙ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"ⴰⵙⴳⴳⵯⴰⵙ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"ⴰⵢⵢⵓⵔ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"ⴰⵢⵢⵓⵔ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"ⴰⵙⵙ",relative:{0:"ⴰⵙⵙⴰ",1:"ⴰⵙⴽⴽⴰ","-1":"ⵉⴹⵍⵍⵉ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"ⴰⵙⵙ",relative:{0:"ⴰⵙⵙⴰ",1:"ⴰⵙⴽⴽⴰ","-1":"ⵉⴹⵍⵍⵉ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"ⵜⴰⵙⵔⴰⴳⵜ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"ⵜⴰⵙⵔⴰⴳⵜ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"ⵜⵓⵙⴷⵉⴷⵜ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"ⵜⵓⵙⴷⵉⴷⵜ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"ⵜⴰⵙⵉⵏⵜ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"ⵜⴰⵙⵉⵏⵜ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"shi-Latn",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"asggʷas",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"asggʷas",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"ayyur",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"ayyur",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"ass",relative:{0:"assa",1:"askka","-1":"iḍlli"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"ass",relative:{0:"assa",1:"askka","-1":"iḍlli"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"tasragt",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"tasragt",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"tusdidt",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"tusdidt",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"tasint",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"tasint",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"shi-Tfng",parentLocale:"shi"},{locale:"si",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=a[1]||"";return t?"other":0==e||1==e||0==r&&1==i?"one":"other"},fields:{year:{displayName:"වර්ෂය",relative:{0:"මෙම වසර",1:"ඊළඟ වසර","-1":"පසුගිය වසර"},relativeTime:{future:{one:"වසර {0}කින්",other:"වසර {0}කින්"},past:{one:"වසර {0}කට පෙර",other:"වසර {0}කට පෙර"}}},"year-short":{displayName:"වර්.",relative:{0:"මෙම වසර",1:"ඊළඟ වසර","-1":"පසුගිය වසර"},relativeTime:{future:{one:"වසර {0}කින්",other:"වසර {0}කින්"},past:{one:"වසර {0}කට පෙර",other:"වසර {0}කට පෙර"}}},month:{displayName:"මාසය",relative:{0:"මෙම මාසය",1:"ඊළඟ මාසය","-1":"පසුගිය මාසය"},relativeTime:{future:{one:"මාස {0}කින්",other:"මාස {0}කින්"},past:{one:"මාස {0}කට පෙර",other:"මාස {0}කට පෙර"}}},"month-short":{displayName:"මාස.",relative:{0:"මෙම මාස.",1:"ඊළඟ මාස.","-1":"පසුගිය මාස."},relativeTime:{future:{one:"මාස {0}කින්",other:"මාස {0}කින්"},past:{one:"මාස {0}කට පෙර",other:"මාස {0}කට පෙර"}}},day:{displayName:"දිනය",relative:{0:"අද",1:"හෙට",2:"අනිද්දා","-2":"පෙරේදා","-1":"ඊයේ"},relativeTime:{future:{one:"දින {0}න්",other:"දින {0}න්"},past:{one:"දින {0}කට පෙර",other:"දින {0}කට පෙර"}}},"day-short":{displayName:"දිනය",relative:{0:"අද",1:"හෙට",2:"අනිද්දා","-2":"පෙරේදා","-1":"ඊයේ"},relativeTime:{future:{one:"දින {0}න්",other:"දින {0}න්"},past:{one:"දින {0}කට පෙර",other:"දින {0}කට පෙර"}}},hour:{displayName:"පැය",relative:{0:"මෙම පැය"},relativeTime:{future:{one:"පැය {0}කින්",other:"පැය {0}කින්"},past:{one:"පැය {0}කට පෙර",other:"පැය {0}කට පෙර"}}},"hour-short":{displayName:"පැය",relative:{0:"මෙම පැය"},relativeTime:{future:{one:"පැය {0}කින්",other:"පැය {0}කින්"},past:{one:"පැය {0}කට පෙර",other:"පැය {0}කට පෙර"}}},minute:{displayName:"මිනිත්තුව",relative:{0:"මෙම මිනිත්තුව"},relativeTime:{future:{one:"මිනිත්තු {0}කින්",other:"මිනිත්තු {0}කින්"},past:{one:"මිනිත්තු {0}කට පෙර",other:"මිනිත්තු {0}කට පෙර"}}},"minute-short":{displayName:"මිනි.",relative:{0:"මෙම මිනිත්තුව"},relativeTime:{future:{one:"මිනිත්තු {0}කින්",other:"මිනිත්තු {0}කින්"},past:{one:"මිනිත්තු {0}කට පෙර",other:"මිනිත්තු {0}කට පෙර"}}},second:{displayName:"තත්පරය",relative:{0:"දැන්"},relativeTime:{future:{one:"තත්පර {0}කින්",other:"තත්පර {0}කින්"},past:{one:"තත්පර {0}කට පෙර",other:"තත්පර {0}කට පෙර"}}},"second-short":{displayName:"තත්.",relative:{0:"දැන්"},relativeTime:{future:{one:"තත්පර {0}කින්",other:"තත්පර {0}කින්"},past:{one:"තත්පර {0}කට පෙර",other:"තත්පර {0}කට පෙර"}}}}},{locale:"sk",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=!a[1];return t?"other":1==e&&i?"one":r>=2&&r<=4&&i?"few":i?"other":"many"},fields:{year:{displayName:"rok",relative:{0:"tento rok",1:"budúci rok","-1":"minulý rok"},relativeTime:{future:{one:"o {0} rok",few:"o {0} roky",many:"o {0} roka",other:"o {0} rokov"},past:{one:"pred {0} rokom",few:"pred {0} rokmi",many:"pred {0} roka",other:"pred {0} rokmi"}}},"year-short":{displayName:"r.",relative:{0:"tento rok",1:"budúci rok","-1":"minulý rok"},relativeTime:{future:{one:"o {0} r.",few:"o {0} r.",many:"o {0} r.",other:"o {0} r."},past:{one:"pred {0} r.",few:"pred {0} r.",many:"pred {0} r.",other:"pred {0} r."}}},month:{displayName:"mesiac",relative:{0:"tento mesiac",1:"budúci mesiac","-1":"minulý mesiac"},relativeTime:{future:{one:"o {0} mesiac",few:"o {0} mesiace",many:"o {0} mesiaca",other:"o {0} mesiacov"},past:{one:"pred {0} mesiacom",few:"pred {0} mesiacmi",many:"pred {0} mesiaca",other:"pred {0} mesiacmi"}}},"month-short":{displayName:"mes.",relative:{0:"tento mes.",1:"budúci mes.","-1":"minulý mes."},relativeTime:{future:{one:"o {0} mes.",few:"o {0} mes.",many:"o {0} mes.",other:"o {0} mes."},past:{one:"pred {0} mes.",few:"pred {0} mes.",many:"pred {0} mes.",other:"pred {0} mes."}}},day:{displayName:"deň",relative:{0:"dnes",1:"zajtra",2:"pozajtra","-2":"predvčerom","-1":"včera"},relativeTime:{future:{one:"o {0} deň",few:"o {0} dni",many:"o {0} dňa",other:"o {0} dní"},past:{one:"pred {0} dňom",few:"pred {0} dňami",many:"pred {0} dňa",other:"pred {0} dňami"}}},"day-short":{displayName:"d.",relative:{0:"dnes",1:"zajtra",2:"pozajtra","-2":"predvčerom","-1":"včera"},relativeTime:{future:{one:"o {0} d.",few:"o {0} d.",many:"o {0} d.",other:"o {0} d."},past:{one:"pred {0} d.",few:"pred {0} d.",many:"pred {0} d.",other:"pred {0} d."}}},hour:{displayName:"hodina",relative:{0:"v tejto hodine"},relativeTime:{future:{one:"o {0} hodinu",few:"o {0} hodiny",many:"o {0} hodiny",other:"o {0} hodín"},past:{one:"pred {0} hodinou",few:"pred {0} hodinami",many:"pred {0} hodinou",other:"pred {0} hodinami"}}},"hour-short":{displayName:"h",relative:{0:"v tejto hodine"},relativeTime:{future:{one:"o {0} h",few:"o {0} h",many:"o {0} h",other:"o {0} h"},past:{one:"pred {0} h",few:"pred {0} h",many:"pred {0} h",other:"pred {0} h"}}},minute:{displayName:"minúta",relative:{0:"v tejto minúte"},relativeTime:{future:{one:"o {0} minútu",few:"o {0} minúty",many:"o {0} minúty",other:"o {0} minút"},past:{one:"pred {0} minútou",few:"pred {0} minútami",many:"pred {0} minúty",other:"pred {0} minútami"}}},"minute-short":{displayName:"min",relative:{0:"v tejto minúte"},relativeTime:{future:{one:"o {0} min",few:"o {0} min",many:"o {0} min",other:"o {0} min"},past:{one:"pred {0} min",few:"pred {0} min",many:"pred {0} min",other:"pred {0} min"}}},second:{displayName:"sekunda",relative:{0:"teraz"},relativeTime:{future:{one:"o {0} sekundu",few:"o {0} sekundy",many:"o {0} sekundy",other:"o {0} sekúnd"},past:{one:"pred {0} sekundou",few:"pred {0} sekundami",many:"pred {0} sekundy",other:"pred {0} sekundami"}}},"second-short":{displayName:"s",relative:{0:"teraz"},relativeTime:{future:{one:"o {0} s",few:"o {0} s",many:"o {0} s",other:"o {0} s"},past:{one:"pred {0} s",few:"pred {0} s",many:"pred {0} s",other:"pred {0} s"}}}}},{locale:"sl",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=!a[1],o=r.slice(-2);return t?"other":i&&1==o?"one":i&&2==o?"two":i&&(3==o||4==o)||!i?"few":"other"},fields:{year:{displayName:"leto",relative:{0:"letos",1:"naslednje leto","-1":"lani"},relativeTime:{future:{one:"čez {0} leto",two:"čez {0} leti",few:"čez {0} leta",other:"čez {0} let"},past:{one:"pred {0} letom",two:"pred {0} letoma",few:"pred {0} leti",other:"pred {0} leti"}}},"year-short":{displayName:"leto",relative:{0:"letos",1:"naslednje leto","-1":"lani"},relativeTime:{future:{one:"čez {0} leto",two:"čez {0} leti",few:"čez {0} leta",other:"čez {0} let"},past:{one:"pred {0} letom",two:"pred {0} letoma",few:"pred {0} leti",other:"pred {0} leti"}}},month:{displayName:"mesec",relative:{0:"ta mesec",1:"naslednji mesec","-1":"prejšnji mesec"},relativeTime:{future:{one:"čez {0} mesec",two:"čez {0} meseca",few:"čez {0} mesece",other:"čez {0} mesecev"},past:{one:"pred {0} mesecem",two:"pred {0} mesecema",few:"pred {0} meseci",other:"pred {0} meseci"}}},"month-short":{displayName:"mes.",relative:{0:"ta mesec",1:"naslednji mesec","-1":"prejšnji mesec"},relativeTime:{future:{one:"čez {0} mes.",two:"čez {0} mes.",few:"čez {0} mes.",other:"čez {0} mes."},past:{one:"pred {0} mes.",two:"pred {0} mes.",few:"pred {0} mes.",other:"pred {0} mes."}}},day:{displayName:"dan",relative:{0:"danes",1:"jutri",2:"pojutrišnjem","-2":"predvčerajšnjim","-1":"včeraj"},relativeTime:{future:{one:"čez {0} dan",two:"čez {0} dneva",few:"čez {0} dni",other:"čez {0} dni"},past:{one:"pred {0} dnevom",two:"pred {0} dnevoma",few:"pred {0} dnevi",other:"pred {0} dnevi"}}},"day-short":{displayName:"dan",relative:{0:"danes",1:"jutri",2:"pojutrišnjem","-2":"predvčerajšnjim","-1":"včeraj"},relativeTime:{future:{one:"čez {0} dan",two:"čez {0} dneva",few:"čez {0} dni",other:"čez {0} dni"},past:{one:"pred {0} dnevom",two:"pred {0} dnevoma",few:"pred {0} dnevi",other:"pred {0} dnevi"}}},hour:{displayName:"ura",relative:{0:"v tej uri"},relativeTime:{future:{one:"čez {0} uro",two:"čez {0} uri",few:"čez {0} ure",other:"čez {0} ur"},past:{one:"pred {0} uro",two:"pred {0} urama",few:"pred {0} urami",other:"pred {0} urami"}}},"hour-short":{displayName:"ura",relative:{0:"v tej uri"},relativeTime:{future:{one:"čez {0} uro",two:"čez {0} uri",few:"čez {0} ure",other:"čez {0} ur"},past:{one:"pred {0} uro",two:"pred {0} urama",few:"pred {0} urami",other:"pred {0} urami"}}},minute:{displayName:"minuta",relative:{0:"to minuto"},relativeTime:{future:{one:"čez {0} minuto",two:"čez {0} minuti",few:"čez {0} minute",other:"čez {0} minut"},past:{one:"pred {0} minuto",two:"pred {0} minutama",few:"pred {0} minutami",other:"pred {0} minutami"}}},"minute-short":{displayName:"min.",relative:{0:"to minuto"},relativeTime:{future:{one:"čez {0} min.",two:"čez {0} min.",few:"čez {0} min.",other:"čez {0} min."},past:{one:"pred {0} min.",two:"pred {0} min.",few:"pred {0} min.",other:"pred {0} min."}}},second:{displayName:"sekunda",relative:{0:"zdaj"},relativeTime:{future:{one:"čez {0} sekundo",two:"čez {0} sekundi",few:"čez {0} sekunde",other:"čez {0} sekund"},past:{one:"pred {0} sekundo",two:"pred {0} sekundama",few:"pred {0} sekundami",other:"pred {0} sekundami"}}},"second-short":{displayName:"sek.",relative:{0:"zdaj"},relativeTime:{future:{one:"čez {0} s",two:"čez {0} s",few:"čez {0} s",other:"čez {0} s"},past:{one:"pred {0} s",two:"pred {0} s",few:"pred {0} s",other:"pred {0} s"}}}}},{locale:"sma",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":2==e?"two":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"smi",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":2==e?"two":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"smj",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":2==e?"two":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"smn",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":2==e?"two":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"sms",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":2==e?"two":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"sn",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Gore",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Gore",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mwedzi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mwedzi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Zuva",relative:{0:"Nhasi",1:"Mangwana","-1":"Nezuro"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Zuva",relative:{0:"Nhasi",1:"Mangwana","-1":"Nezuro"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Awa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Awa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Mineti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Mineti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekondi",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"so",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"Sannadkan",1:"Sannadka xiga","-1":"Sannadkii la soo dhaafay"},relativeTime:{future:{one:"+{0} y",other:"+{0} y"},past:{one:"-{0} y",other:"-{0} y"}}},"year-short":{displayName:"Sanadkii",relative:{0:"Sannadkan",1:"Sannadka xiga","-1":"Sannadkii la soo dhaafay"},relativeTime:{future:{one:"+{0} y",other:"+{0} y"},past:{one:"-{0} y",other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"Bishan",1:"Bisha xigta","-1":"Bishii la soo dhaafay"},relativeTime:{future:{one:"+{0} m",other:"+{0} m"},past:{one:"-{0} m",other:"-{0} m"}}},"month-short":{displayName:"Bil-gaaban",relative:{0:"Bishan",1:"Bisha xigta","-1":"Bishii la soo dhaafay"},relativeTime:{future:{one:"+{0} m",other:"+{0} m"},past:{one:"-{0} m",other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"Maanta",1:"Berri","-1":"Shalay"},relativeTime:{future:{one:"+{0} d",other:"+{0} d"},past:{one:"-{0} d",other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"Maanta",1:"Berri","-1":"Shalay"},relativeTime:{future:{one:"+{0} d",other:"+{0} d"},past:{one:"-{0} d",other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{one:"+{0} h",other:"+{0} h"},past:{one:"-{0} h",other:"-{0} h"}}},"hour-short":{displayName:"Saacad-gaaban",relative:{0:"this hour"},relativeTime:{future:{one:"+{0} h",other:"+{0} h"},past:{one:"-{0} h",other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{one:"+{0} min",other:"+{0} min"},past:{one:"-{0} min",other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{one:"+{0} min",other:"+{0} min"},past:{one:"-{0} min",other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{one:"+{0} s",other:"+{0} s"},past:{one:"-{0} s",other:"-{0} s"}}},"second-short":{displayName:"Il-biriqsi-gaaban",relative:{0:"now"},relativeTime:{future:{one:"+{0} s",other:"+{0} s"},past:{one:"-{0} s",other:"-{0} s"}}}}},{locale:"so-DJ",parentLocale:"so"},{locale:"so-ET",parentLocale:"so"},{locale:"so-KE",parentLocale:"so"},{locale:"sq",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e,i=r&&a[0].slice(-1),o=r&&a[0].slice(-2);return t?1==e?"one":4==i&&14!=o?"many":"other":1==e?"one":"other"},fields:{year:{displayName:"vit",relative:{0:"sivjet",1:"mot","-1":"vjet"},relativeTime:{future:{one:"pas {0} viti",other:"pas {0} vjetësh"},past:{one:"{0} vit më parë",other:"{0} vjet më parë"}}},"year-short":{displayName:"vit",relative:{0:"këtë vit",1:"vitin e ardhshëm","-1":"vitin e kaluar"},relativeTime:{future:{one:"pas {0} viti",other:"pas {0} vjetësh"},past:{one:"{0} vit më parë",other:"{0} vjet më parë"}}},month:{displayName:"muaj",relative:{0:"këtë muaj",1:"muajin e ardhshëm","-1":"muajin e kaluar"},relativeTime:{future:{one:"pas {0} muaji",other:"pas {0} muajsh"},past:{one:"{0} muaj më parë",other:"{0} muaj më parë"}}},"month-short":{displayName:"muaj",relative:{0:"këtë muaj",1:"muajin e ardhshëm","-1":"muajin e kaluar"},relativeTime:{future:{one:"pas {0} muaji",other:"pas {0} muajsh"},past:{one:"{0} muaj më parë",other:"{0} muaj më parë"}}},day:{displayName:"ditë",relative:{0:"sot",1:"nesër","-1":"dje"},relativeTime:{future:{one:"pas {0} dite",other:"pas {0} ditësh"},past:{one:"{0} ditë më parë",other:"{0} ditë më parë"}}},"day-short":{displayName:"ditë",relative:{0:"sot",1:"nesër","-1":"dje"},relativeTime:{future:{one:"pas {0} dite",other:"pas {0} ditësh"},past:{one:"{0} ditë më parë",other:"{0} ditë më parë"}}},hour:{displayName:"orë",relative:{0:"këtë orë"},relativeTime:{future:{one:"pas {0} ore",other:"pas {0} orësh"},past:{one:"{0} orë më parë",other:"{0} orë më parë"}}},"hour-short":{displayName:"orë",relative:{0:"këtë orë"},relativeTime:{future:{one:"pas {0} ore",other:"pas {0} orësh"},past:{one:"{0} orë më parë",other:"{0} orë më parë"}}},minute:{displayName:"minutë",relative:{0:"këtë minutë"},relativeTime:{future:{one:"pas {0} minute",other:"pas {0} minutash"},past:{one:"{0} minutë më parë",other:"{0} minuta më parë"}}},"minute-short":{displayName:"min",relative:{0:"këtë minutë"},relativeTime:{future:{one:"pas {0} min",other:"pas {0} min"},past:{one:"{0} min më parë",other:"{0} min më parë"}}},second:{displayName:"sekondë",relative:{0:"tani"},relativeTime:{future:{one:"pas {0} sekonde",other:"pas {0} sekondash"},past:{one:"{0} sekondë më parë",other:"{0} sekonda më parë"}}},"second-short":{displayName:"sek",relative:{0:"tani"},relativeTime:{future:{one:"pas {0} sek",other:"pas {0} sek"},past:{one:"{0} sek më parë",other:"{0} sek më parë"}}}}},{locale:"sq-MK",parentLocale:"sq"},{locale:"sq-XK",parentLocale:"sq"},{locale:"sr",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=a[1]||"",o=!a[1],n=r.slice(-1),s=r.slice(-2),l=i.slice(-1),h=i.slice(-2);return t?"other":o&&1==n&&11!=s||1==l&&11!=h?"one":o&&n>=2&&n<=4&&(s<12||s>14)||l>=2&&l<=4&&(h<12||h>14)?"few":"other"},fields:{year:{displayName:"година",relative:{0:"ове године",1:"следеће године","-1":"прошле године"},relativeTime:{future:{one:"за {0} годину",few:"за {0} године",other:"за {0} година"},past:{one:"пре {0} године",few:"пре {0} године",other:"пре {0} година"}}},"year-short":{displayName:"год.",relative:{0:"ове год.",1:"следеће год.","-1":"прошле год."},relativeTime:{future:{one:"за {0} год.",few:"за {0} год.",other:"за {0} год."},past:{one:"пре {0} год.",few:"пре {0} год.",other:"пре {0} год."}}},month:{displayName:"месец",relative:{0:"овог месеца",1:"следећег месеца","-1":"прошлог месеца"},relativeTime:{future:{one:"за {0} месец",few:"за {0} месеца",other:"за {0} месеци"},past:{one:"пре {0} месеца",few:"пре {0} месеца",other:"пре {0} месеци"}}},"month-short":{displayName:"мес.",relative:{0:"овог мес.",1:"следећег мес.","-1":"прошлог мес."},relativeTime:{future:{one:"за {0} мес.",few:"за {0} мес.",other:"за {0} мес."},past:{one:"пре {0} мес.",few:"пре {0} мес.",other:"пре {0} мес."}}},day:{displayName:"дан",relative:{0:"данас",1:"сутра",2:"прекосутра","-2":"прекјуче","-1":"јуче"},relativeTime:{future:{one:"за {0} дан",few:"за {0} дана",other:"за {0} дана"},past:{one:"пре {0} дана",few:"пре {0} дана",other:"пре {0} дана"}}},"day-short":{displayName:"д.",relative:{0:"данас",1:"сутра",2:"прекосутра","-2":"прекјуче","-1":"јуче"},relativeTime:{future:{one:"за {0} д.",few:"за {0} д.",other:"за {0} д."},past:{one:"пре {0} д.",few:"пре {0} д.",other:"пре {0} д."}}},hour:{displayName:"сат",relative:{0:"овог сата"},relativeTime:{future:{one:"за {0} сат",few:"за {0} сата",other:"за {0} сати"},past:{one:"пре {0} сата",few:"пре {0} сата",other:"пре {0} сати"}}},"hour-short":{displayName:"ч.",relative:{0:"овог сата"},relativeTime:{future:{one:"за {0} ч.",few:"за {0} ч.",other:"за {0} ч."},past:{one:"пре {0} ч.",few:"пре {0} ч.",other:"пре {0} ч."}}},minute:{displayName:"минут",relative:{0:"овог минута"},relativeTime:{future:{one:"за {0} минут",few:"за {0} минута",other:"за {0} минута"},past:{one:"пре {0} минута",few:"пре {0} минута",other:"пре {0} минута"}}},"minute-short":{displayName:"мин.",relative:{0:"овог минута"},relativeTime:{future:{one:"за {0} мин.",few:"за {0} мин.",other:"за {0} мин."},past:{one:"пре {0} мин.",few:"пре {0} мин.",other:"пре {0} мин."}}},second:{displayName:"секунд",relative:{0:"сада"},relativeTime:{future:{one:"за {0} секунду",few:"за {0} секунде",other:"за {0} секунди"},past:{one:"пре {0} секунде",few:"пре {0} секунде",other:"пре {0} секунди"}}},"second-short":{displayName:"сек.",relative:{0:"сада"},relativeTime:{future:{one:"за {0} сек.",few:"за {0} сек.",other:"за {0} сек."},past:{one:"пре {0} сек.",few:"пре {0} сек.",other:"пре {0} сек."}}}}},{locale:"sr-Cyrl",parentLocale:"sr"},{locale:"sr-Cyrl-BA",parentLocale:"sr-Cyrl"},{locale:"sr-Cyrl-ME",parentLocale:"sr-Cyrl"},{locale:"sr-Cyrl-XK",parentLocale:"sr-Cyrl"},{locale:"sr-Latn",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"godina",relative:{0:"ove godine",1:"sledeće godine","-1":"prošle godine"},relativeTime:{future:{one:"za {0} godinu",few:"za {0} godine",other:"za {0} godina"},past:{one:"pre {0} godine",few:"pre {0} godine",other:"pre {0} godina"}}},"year-short":{displayName:"god.",relative:{0:"ove god.",1:"sledeće god.","-1":"prošle god."},relativeTime:{future:{one:"za {0} god.",few:"za {0} god.",other:"za {0} god."},past:{one:"pre {0} god.",few:"pre {0} god.",other:"pre {0} god."}}},month:{displayName:"mesec",relative:{0:"ovog meseca",1:"sledećeg meseca","-1":"prošlog meseca"},relativeTime:{future:{one:"za {0} mesec",few:"za {0} meseca",other:"za {0} meseci"},past:{one:"pre {0} meseca",few:"pre {0} meseca",other:"pre {0} meseci"}}},"month-short":{displayName:"mes.",relative:{0:"ovog mes.",1:"sledećeg mes.","-1":"prošlog mes."},relativeTime:{future:{one:"za {0} mes.",few:"za {0} mes.",other:"za {0} mes."},past:{one:"pre {0} mes.",few:"pre {0} mes.",other:"pre {0} mes."}}},day:{displayName:"dan",relative:{0:"danas",1:"sutra",2:"prekosutra","-2":"prekjuče","-1":"juče"},relativeTime:{future:{one:"za {0} dan",few:"za {0} dana",other:"za {0} dana"},past:{one:"pre {0} dana",few:"pre {0} dana",other:"pre {0} dana"}}},"day-short":{displayName:"d.",relative:{0:"danas",1:"sutra",2:"prekosutra","-2":"prekjuče","-1":"juče"},relativeTime:{future:{one:"za {0} d.",few:"za {0} d.",other:"za {0} d."},past:{one:"pre {0} d.",few:"pre {0} d.",other:"pre {0} d."}}},hour:{displayName:"sat",relative:{0:"ovog sata"},relativeTime:{future:{one:"za {0} sat",few:"za {0} sata",other:"za {0} sati"},past:{one:"pre {0} sata",few:"pre {0} sata",other:"pre {0} sati"}}},"hour-short":{displayName:"č.",relative:{0:"ovog sata"},relativeTime:{future:{one:"za {0} č.",few:"za {0} č.",other:"za {0} č."},past:{one:"pre {0} č.",few:"pre {0} č.",other:"pre {0} č."}}},minute:{displayName:"minut",relative:{0:"ovog minuta"},relativeTime:{future:{one:"za {0} minut",few:"za {0} minuta",other:"za {0} minuta"},past:{one:"pre {0} minuta",few:"pre {0} minuta",other:"pre {0} minuta"}}},"minute-short":{displayName:"min.",relative:{0:"ovog minuta"},relativeTime:{future:{one:"za {0} min.",few:"za {0} min.",other:"za {0} min."},past:{one:"pre {0} min.",few:"pre {0} min.",other:"pre {0} min."}}},second:{displayName:"sekund",relative:{0:"sada"},relativeTime:{future:{one:"za {0} sekundu",few:"za {0} sekunde",other:"za {0} sekundi"},past:{one:"pre {0} sekunde",few:"pre {0} sekunde",other:"pre {0} sekundi"}}},"second-short":{displayName:"sek.",relative:{0:"sada"},relativeTime:{future:{one:"za {0} sek.",few:"za {0} sek.",other:"za {0} sek."},past:{one:"pre {0} sek.",few:"pre {0} sek.",other:"pre {0} sek."}}}}},{locale:"sr-Latn-BA",parentLocale:"sr-Latn"},{locale:"sr-Latn-ME",parentLocale:"sr-Latn"},{locale:"sr-Latn-XK",parentLocale:"sr-Latn"},{locale:"ss",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ssy",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"st",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"sv",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=!a[1],i=Number(a[0])==e,o=i&&a[0].slice(-1),n=i&&a[0].slice(-2);return t?1!=o&&2!=o||11==n||12==n?"other":"one":1==e&&r?"one":"other"},fields:{year:{displayName:"år",relative:{0:"i år",1:"nästa år","-1":"i fjol"},relativeTime:{future:{one:"om {0} år",other:"om {0} år"},past:{one:"för {0} år sedan",other:"för {0} år sedan"}}},"year-short":{displayName:"år",relative:{0:"i år",1:"nästa år","-1":"i fjol"},relativeTime:{future:{one:"om {0} år",other:"om {0} år"},past:{one:"för {0} år sen",other:"för {0} år sen"}}},month:{displayName:"månad",relative:{0:"denna månad",1:"nästa månad","-1":"förra månaden"},relativeTime:{future:{one:"om {0} månad",other:"om {0} månader"},past:{one:"för {0} månad sedan",other:"för {0} månader sedan"}}},"month-short":{displayName:"m",relative:{0:"denna mån.",1:"nästa mån.","-1":"förra mån."},relativeTime:{future:{one:"om {0} mån.",other:"om {0} mån."},past:{one:"för {0} mån. sen",other:"för {0} mån. sen"}}},day:{displayName:"dag",relative:{0:"i dag",1:"i morgon",2:"i övermorgon","-2":"i förrgår","-1":"i går"},relativeTime:{future:{one:"om {0} dag",other:"om {0} dagar"},past:{one:"för {0} dag sedan",other:"för {0} dagar sedan"}}},"day-short":{displayName:"dag",relative:{0:"i dag",1:"i morgon",2:"i övermorgon","-2":"i förrgår","-1":"i går"},relativeTime:{future:{one:"om {0} d",other:"om {0} d"},past:{one:"för {0} d sedan",other:"för {0} d sedan"}}},hour:{displayName:"timme",relative:{0:"denna timme"},relativeTime:{future:{one:"om {0} timme",other:"om {0} timmar"},past:{one:"för {0} timme sedan",other:"för {0} timmar sedan"}}},"hour-short":{displayName:"tim",relative:{0:"denna timme"},relativeTime:{future:{one:"om {0} tim",other:"om {0} tim"},past:{one:"för {0} tim sedan",other:"för {0} tim sedan"}}},minute:{displayName:"minut",relative:{0:"denna minut"},relativeTime:{future:{one:"om {0} minut",other:"om {0} minuter"},past:{one:"för {0} minut sedan",other:"för {0} minuter sedan"}}},"minute-short":{displayName:"min",relative:{0:"denna minut"},relativeTime:{future:{one:"om {0} min",other:"om {0} min"},past:{one:"för {0} min sen",other:"för {0} min sen"}}},second:{displayName:"sekund",relative:{0:"nu"},relativeTime:{future:{one:"om {0} sekund",other:"om {0} sekunder"},past:{one:"för {0} sekund sedan",other:"för {0} sekunder sedan"}}},"second-short":{displayName:"sek",relative:{0:"nu"},relativeTime:{future:{one:"om {0} sek",other:"om {0} sek"},past:{one:"för {0} s sen",other:"för {0} s sen"}}}}},{locale:"sv-AX",parentLocale:"sv"},{locale:"sv-FI",parentLocale:"sv"},{locale:"sw",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"mwaka",relative:{0:"mwaka huu",1:"mwaka ujao","-1":"mwaka uliopita"},relativeTime:{future:{one:"baada ya mwaka {0}",other:"baada ya miaka {0}"},past:{one:"mwaka {0} uliopita",other:"miaka {0} iliyopita"}}},"year-short":{displayName:"mwaka",relative:{0:"mwaka huu",1:"mwaka ujao","-1":"mwaka uliopita"},relativeTime:{future:{one:"baada ya mwaka {0}",other:"baada ya miaka {0}"},past:{one:"mwaka {0} uliopita",other:"miaka {0} iliyopita"}}},month:{displayName:"mwezi",relative:{0:"mwezi huu",1:"mwezi ujao","-1":"mwezi uliopita"},relativeTime:{future:{one:"baada ya mwezi {0}",other:"baada ya miezi {0}"},past:{one:"mwezi {0} uliopita",other:"miezi {0} iliyopita"}}},"month-short":{displayName:"mwezi",relative:{0:"mwezi huu",1:"mwezi ujao","-1":"mwezi uliopita"},relativeTime:{future:{one:"baada ya mwezi {0}",other:"baada ya miezi {0}"},past:{one:"mwezi {0} uliopita",other:"miezi {0} iliyopita"}}},day:{displayName:"siku",relative:{0:"leo",1:"kesho",2:"kesho kutwa","-2":"juzi","-1":"jana"},relativeTime:{future:{one:"baada ya siku {0}",other:"baada ya siku {0}"},past:{one:"siku {0} iliyopita",other:"siku {0} zilizopita"}}},"day-short":{displayName:"siku",relative:{0:"leo",1:"kesho",2:"kesho kutwa","-2":"juzi","-1":"jana"},relativeTime:{future:{one:"baada ya siku {0}",other:"baada ya siku {0}"},past:{one:"siku {0} iliyopita",other:"siku {0} zilizopita"}}},hour:{displayName:"saa",relative:{0:"saa hii"},relativeTime:{future:{one:"baada ya saa {0}",other:"baada ya saa {0}"},past:{one:"saa {0} iliyopita",other:"saa {0} zilizopita"}}},"hour-short":{displayName:"saa",relative:{0:"saa hii"},relativeTime:{future:{one:"baada ya saa {0}",other:"baada ya saa {0}"},past:{one:"saa {0} iliyopita",other:"saa {0} zilizopita"}}},minute:{displayName:"dakika",relative:{0:"dakika hii"},relativeTime:{future:{one:"baada ya dakika {0}",other:"baada ya dakika {0}"},past:{one:"dakika {0} iliyopita",other:"dakika {0} zilizopita"}}},"minute-short":{displayName:"dak",relative:{0:"dakika hii"},relativeTime:{future:{one:"baada ya dakika {0}",other:"baada ya dakika {0}"},past:{one:"dakika {0} iliyopita",other:"dakika {0} zilizopita"}}},second:{displayName:"sekunde",relative:{0:"sasa hivi"},relativeTime:{future:{one:"baada ya sekunde {0}",other:"baada ya sekunde {0}"},past:{one:"Sekunde {0} iliyopita",other:"Sekunde {0} zilizopita"}}},"second-short":{displayName:"sek",relative:{0:"sasa hivi"},relativeTime:{future:{one:"baada ya sekunde {0}",other:"baada ya sekunde {0}"},past:{one:"sekunde {0} iliyopita",other:"sekunde {0} zilizopita"}}}}},{locale:"sw-CD",parentLocale:"sw"},{locale:"sw-KE",parentLocale:"sw"},{locale:"sw-UG",parentLocale:"sw"},{locale:"syr",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ta",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"ஆண்டு",relative:{0:"இந்த ஆண்டு",1:"அடுத்த ஆண்டு","-1":"கடந்த ஆண்டு"},relativeTime:{future:{one:"{0} ஆண்டில்",other:"{0} ஆண்டுகளில்"},past:{one:"{0} ஆண்டிற்கு முன்",other:"{0} ஆண்டுகளுக்கு முன்"}}},"year-short":{displayName:"ஆண்டு",relative:{0:"இந்த ஆண்டு",1:"அடுத்த ஆண்டு","-1":"கடந்த ஆண்டு"},relativeTime:{future:{one:"{0} ஆண்டில்",other:"{0} ஆண்டுகளில்"},past:{one:"{0} ஆண்டிற்கு முன்",other:"{0} ஆண்டுகளுக்கு முன்"}}},month:{displayName:"மாதம்",relative:{0:"இந்த மாதம்",1:"அடுத்த மாதம்","-1":"கடந்த மாதம்"},relativeTime:{future:{one:"{0} மாதத்தில்",other:"{0} மாதங்களில்"},past:{one:"{0} மாதத்துக்கு முன்",other:"{0} மாதங்களுக்கு முன்"}}},"month-short":{displayName:"மாத.",relative:{0:"இந்த மாதம்",1:"அடுத்த மாதம்","-1":"கடந்த மாதம்"},relativeTime:{future:{one:"{0} மாத.",other:"{0} மாத."},past:{one:"{0} மாத. முன்",other:"{0} மாத. முன்"}}},day:{displayName:"நாள்",relative:{0:"இன்று",1:"நாளை",2:"நாளை மறுநாள்","-2":"நேற்று முன் தினம்","-1":"நேற்று"},relativeTime:{future:{one:"{0} நாளில்",other:"{0} நாட்களில்"},past:{one:"{0} நாளுக்கு முன்",other:"{0} நாட்களுக்கு முன்"}}},"day-short":{displayName:"நாள்",relative:{0:"இன்று",1:"நாளை",2:"நாளை மறுநாள்","-2":"நேற்று முன் தினம்","-1":"நேற்று"},relativeTime:{future:{one:"{0} நாளில்",other:"{0} நாட்களில்"},past:{one:"{0} நாளுக்கு முன்",other:"{0} நாட்களுக்கு முன்"}}},hour:{displayName:"மணி",relative:{0:"இந்த ஒரு மணிநேரத்தில்"},relativeTime:{future:{one:"{0} மணிநேரத்தில்",other:"{0} மணிநேரத்தில்"},past:{one:"{0} மணிநேரம் முன்",other:"{0} மணிநேரம் முன்"}}},"hour-short":{displayName:"மணி.",relative:{0:"இந்த ஒரு மணிநேரத்தில்"},relativeTime:{future:{one:"{0} மணி.",other:"{0} மணி."},past:{one:"{0} மணி. முன்",other:"{0} மணி. முன்"}}},minute:{displayName:"நிமிடம்",relative:{0:"இந்த ஒரு நிமிடத்தில்"},relativeTime:{future:{one:"{0} நிமிடத்தில்",other:"{0} நிமிடங்களில்"},past:{one:"{0} நிமிடத்திற்கு முன்",other:"{0} நிமிடங்களுக்கு முன்"}}},"minute-short":{displayName:"நிமி.",relative:{0:"இந்த ஒரு நிமிடத்தில்"},relativeTime:{future:{one:"{0} நிமி.",other:"{0} நிமி."},past:{one:"{0} நிமி. முன்",other:"{0} நிமி. முன்"}}},second:{displayName:"விநாடி",relative:{0:"இப்போது"},relativeTime:{future:{one:"{0} விநாடியில்",other:"{0} விநாடிகளில்"},past:{one:"{0} விநாடிக்கு முன்",other:"{0} விநாடிகளுக்கு முன்"}}},"second-short":{displayName:"விநா.",relative:{0:"இப்போது"},relativeTime:{future:{one:"{0} விநா.",other:"{0} விநா."},past:{one:"{0} விநா. முன்",other:"{0} விநா. முன்"}}}}},{locale:"ta-LK",parentLocale:"ta"},{locale:"ta-MY",parentLocale:"ta"},{locale:"ta-SG",parentLocale:"ta"},{locale:"te",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"సంవత్సరం",relative:{0:"ఈ సంవత్సరం",1:"తదుపరి సంవత్సరం","-1":"గత సంవత్సరం"},relativeTime:{future:{one:"{0} సంవత్సరంలో",other:"{0} సంవత్సరాల్లో"},past:{one:"{0} సంవత్సరం క్రితం",other:"{0} సంవత్సరాల క్రితం"}}},"year-short":{displayName:"సం.",relative:{0:"ఈ సంవత్సరం",1:"తదుపరి సంవత్సరం","-1":"గత సంవత్సరం"},relativeTime:{future:{one:"{0} సం.లో",other:"{0} సం.ల్లో"},past:{one:"{0} సం. క్రితం",other:"{0} సం. క్రితం"}}},month:{displayName:"నెల",relative:{0:"ఈ నెల",1:"తదుపరి నెల","-1":"గత నెల"},relativeTime:{future:{one:"{0} నెలలో",other:"{0} నెలల్లో"},past:{one:"{0} నెల క్రితం",other:"{0} నెలల క్రితం"}}},"month-short":{displayName:"నెల",relative:{0:"ఈ నెల",1:"తదుపరి నెల","-1":"గత నెల"},relativeTime:{future:{one:"{0} నెలలో",other:"{0} నెలల్లో"},past:{one:"{0} నెల క్రితం",other:"{0} నెలల క్రితం"}}},day:{displayName:"దినం",relative:{0:"ఈ రోజు",1:"రేపు",2:"ఎల్లుండి","-2":"మొన్న","-1":"నిన్న"},relativeTime:{future:{one:"{0} రోజులో",other:"{0} రోజుల్లో"},past:{one:"{0} రోజు క్రితం",other:"{0} రోజుల క్రితం"}}},"day-short":{displayName:"దినం",relative:{0:"ఈ రోజు",1:"రేపు",2:"ఎల్లుండి","-2":"మొన్న","-1":"నిన్న"},relativeTime:{future:{one:"{0} రోజులో",other:"{0} రోజుల్లో"},past:{one:"{0} రోజు క్రితం",other:"{0} రోజుల క్రితం"}}},hour:{displayName:"గంట",relative:{0:"ఈ గంట"},relativeTime:{future:{one:"{0} గంటలో",other:"{0} గంటల్లో"},past:{one:"{0} గంట క్రితం",other:"{0} గంటల క్రితం"}}},"hour-short":{displayName:"గం.",relative:{0:"ఈ గంట"},relativeTime:{future:{one:"{0} గం.లో",other:"{0} గం.లో"},past:{one:"{0} గం. క్రితం",other:"{0} గం. క్రితం"}}},minute:{displayName:"నిమిషము",relative:{0:"ఈ నిమిషం"},relativeTime:{future:{one:"{0} నిమిషంలో",other:"{0} నిమిషాల్లో"},past:{one:"{0} నిమిషం క్రితం",other:"{0} నిమిషాల క్రితం"}}},"minute-short":{displayName:"నిమి.",relative:{0:"ఈ నిమిషం"},relativeTime:{future:{one:"{0} నిమి.లో",other:"{0} నిమి.లో"},past:{one:"{0} నిమి. క్రితం",other:"{0} నిమి. క్రితం"}}},second:{displayName:"సెకను",relative:{0:"ప్రస్తుతం"},relativeTime:{future:{one:"{0} సెకనులో",other:"{0} సెకన్లలో"},past:{one:"{0} సెకను క్రితం",other:"{0} సెకన్ల క్రితం"}}},"second-short":{displayName:"సెక.",relative:{0:"ప్రస్తుతం"},relativeTime:{future:{one:"{0} సెకనులో",other:"{0} సెకన్లలో"},past:{one:"{0} సెక. క్రితం",other:"{0} సెక. క్రితం"}}}}},{locale:"teo",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Ekan",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Ekan",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Elap",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Elap",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Aparan",relative:{0:"Lolo",1:"Moi","-1":"Jaan"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Aparan",relative:{0:"Lolo",1:"Moi","-1":"Jaan"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Esaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Esaa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Idakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Idakika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Isekonde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Isekonde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"teo-KE",parentLocale:"teo"},{locale:"tg",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"сол",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"с.",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"моҳ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"м.",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"рӯз",relative:{0:"имрӯз",1:"фардо","-1":"дирӯз"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"рӯз",relative:{0:"имрӯз",1:"фардо","-1":"дирӯз"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"соат",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"ст.",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"дақиқа",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"дақ.",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"сония",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"сон.",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"th",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"ปี",relative:{0:"ปีนี้",1:"ปีหน้า","-1":"ปีที่แล้ว"},relativeTime:{future:{other:"ในอีก {0} ปี"},past:{other:"{0} ปีที่แล้ว"}}},"year-short":{displayName:"ปี",relative:{0:"ปีนี้",1:"ปีหน้า","-1":"ปีที่แล้ว"},relativeTime:{future:{other:"ใน {0} ปี"},past:{other:"{0} ปีที่แล้ว"}}},month:{displayName:"เดือน",relative:{0:"เดือนนี้",1:"เดือนหน้า","-1":"เดือนที่แล้ว"},relativeTime:{future:{other:"ในอีก {0} เดือน"},past:{other:"{0} เดือนที่ผ่านมา"}}},"month-short":{displayName:"เดือน",relative:{0:"เดือนนี้",1:"เดือนหน้า","-1":"เดือนที่แล้ว"},relativeTime:{future:{other:"ใน {0} เดือน"},past:{other:"{0} เดือนที่แล้ว"}}},day:{displayName:"วัน",relative:{0:"วันนี้",1:"พรุ่งนี้",2:"มะรืนนี้","-2":"เมื่อวานซืน","-1":"เมื่อวาน"},relativeTime:{future:{other:"ในอีก {0} วัน"},past:{other:"{0} วันที่ผ่านมา"}}},"day-short":{displayName:"วัน",relative:{0:"วันนี้",1:"พรุ่งนี้",2:"มะรืนนี้","-2":"เมื่อวานซืน","-1":"เมื่อวาน"},relativeTime:{future:{other:"ใน {0} วัน"},past:{other:"{0} วันที่แล้ว"}}},hour:{displayName:"ชั่วโมง",relative:{0:"ชั่วโมงนี้"},relativeTime:{future:{other:"ในอีก {0} ชั่วโมง"},past:{other:"{0} ชั่วโมงที่ผ่านมา"}}},"hour-short":{displayName:"ชม.",relative:{0:"ชั่วโมงนี้"},relativeTime:{future:{other:"ใน {0} ชม."},past:{other:"{0} ชม. ที่แล้ว"}}},minute:{displayName:"นาที",relative:{0:"นาทีนี้"},relativeTime:{future:{other:"ในอีก {0} นาที"},past:{other:"{0} นาทีที่ผ่านมา"}}},"minute-short":{displayName:"น.",relative:{0:"นาทีนี้"},relativeTime:{future:{other:"ใน {0} นาที"},past:{other:"{0} นาทีที่แล้ว"}}},second:{displayName:"วินาที",relative:{0:"ขณะนี้"},relativeTime:{future:{other:"ในอีก {0} วินาที"},past:{other:"{0} วินาทีที่ผ่านมา"}}},"second-short":{displayName:"วิ",relative:{0:"ขณะนี้"},relativeTime:{future:{other:"ใน {0} วินาที"},past:{other:"{0} วินาทีที่แล้ว"}}}}},{locale:"ti",pluralRuleFunction:function(e,t){return t?"other":0==e||1==e?"one":"other"},fields:{year:{displayName:"ዓመት",relative:{0:"ሎሚ ዓመት",1:"ንዓመታ","-1":"ዓሚ"},relativeTime:{future:{one:"ኣብ {0} ዓ",other:"ኣብ {0} ዓ"},past:{one:"ቅድሚ {0} ዓ",other:"ቅድሚ {0} ዓ"}}},"year-short":{displayName:"ዓመት",relative:{0:"ሎሚ ዓመት",1:"ንዓመታ","-1":"ዓሚ"},relativeTime:{future:{one:"ኣብ {0} ዓ",other:"ኣብ {0} ዓ"},past:{one:"ቅድሚ -{0} ዓ",other:"ቅድሚ {0} ዓ"}}},month:{displayName:"ወርሒ",relative:{0:"ህሉው ወርሒ",1:"ዝመጽእ ወርሒ","-1":"last month"},relativeTime:{future:{one:"ኣብ {0} ወርሒ",other:"ኣብ {0} ወርሒ"},past:{one:"ቅድሚ {0} ወርሒ",other:"ቅድሚ {0} ወርሒ"}}},"month-short":{displayName:"ወርሒ",relative:{0:"ህሉው ወርሒ",1:"ዝመጽእ ወርሒ","-1":"last month"},relativeTime:{future:{one:"ኣብ {0} ወርሒ",other:"ኣብ {0} ወርሒ"},past:{one:"ቅድሚ {0} ወርሒ",other:"ቅድሚ {0} ወርሒ"}}},day:{displayName:"መዓልቲ",relative:{0:"ሎሚ",1:"ጽባሕ","-1":"ትማሊ"},relativeTime:{future:{one:"ኣብ {0} መዓልቲ",other:"ኣብ {0} መዓልቲ"},past:{one:"ቅድሚ {0} መዓልቲ",other:"ኣብ {0} መዓልቲ"}}},"day-short":{displayName:"መዓልቲ",relative:{0:"ሎሚ",1:"ጽባሕ","-1":"ትማሊ"},relativeTime:{future:{one:"ኣብ {0} መዓልቲ",other:"ኣብ {0} መዓልቲ"},past:{one:"ቅድሚ {0} መዓልቲ",other:"ቅድሚ {0} መዓልቲ"}}},hour:{displayName:"ሰዓት",relative:{0:"ኣብዚ ሰዓት"},relativeTime:{future:{one:"ኣብ {0} ሰዓት",other:"ኣብ {0} ሰዓት"},past:{one:"ቅድሚ {0} ሰዓት",other:"ቅድሚ {0} ሰዓት"}}},"hour-short":{displayName:"ሰዓት",relative:{0:"ኣብዚ ሰዓት"},relativeTime:{future:{one:"ኣብ {0} ሰዓት",other:"ኣብ {0} ሰዓት"},past:{one:"ቅድሚ {0} ሰዓት",other:"ቅድሚ {0} ሰዓት"}}},minute:{displayName:"ደቒቕ",relative:{0:"ኣብዚ ደቒቕ"},relativeTime:{future:{one:"ኣብ {0} ደቒቕ",other:"ኣብ {0} ደቒቕ"},past:{one:"ቅድሚ {0} ደቒቕ",other:"ቅድሚ {0} ደቒቕ"}}},"minute-short":{displayName:"ደቒቕ",relative:{0:"ኣብዚ ደቒቕ"},relativeTime:{future:{one:"ኣብ {0} ደቒቕ",other:"ኣብ {0} ደቒቕ"},past:{one:"ቅድሚ {0} ደቒቕ",other:"ቅድሚ {0} ደቒቕ"}}},second:{displayName:"ካልኢት",relative:{0:"ሕጂ"},relativeTime:{future:{one:"ኣብ {0} ካልኢት",other:"ኣብ {0} ካልኢት"},past:{one:"ቅድሚ {0} ካልኢት",other:"ቅድሚ {0} ካልኢት"}}},"second-short":{displayName:"ካልኢት",relative:{0:"ሕጂ"},relativeTime:{future:{one:"ኣብ {0} ካልኢት",other:"ኣብ {0} ካልኢት"},past:{one:"ቅድሚ {0} ካልኢት",other:"ቅድሚ {0} ካልኢት"}}}}},{locale:"ti-ER",parentLocale:"ti"},{locale:"tig",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"tk",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e&&a[0].slice(-1);return t?6==r||9==r||10==e?"few":"other":1==e?"one":"other"},fields:{year:{displayName:"ýyl",relative:{0:"şu ýyl",1:"indiki ýyl","-1":"geçen ýyl"},relativeTime:{future:{one:"{0} ýyldan",other:"{0} ýyldan"},past:{one:"{0} ýyl öň",other:"{0} ýyl öň"}}},"year-short":{displayName:"ý.",relative:{0:"şu ýyl",1:"indiki ýyl","-1":"geçen ýyl"},relativeTime:{future:{one:"{0} ý-dan",other:"{0} ý-dan"},past:{one:"{0} ý. öň",other:"{0} ý. öň"}}},month:{displayName:"aý",relative:{0:"şu aý",1:"indiki aý","-1":"geçen aý"},relativeTime:{future:{one:"{0} aýdan",other:"{0} aýdan"},past:{one:"{0} aý öň",other:"{0} aý öň"}}},"month-short":{displayName:"aý",relative:{0:"şu aý",1:"indiki aý","-1":"geçen aý"},relativeTime:{future:{one:"{0} aýdan",other:"{0} aýdan"},past:{one:"{0} aý öň",other:"{0} aý öň"}}},day:{displayName:"gün",relative:{0:"şu gün",1:"ertir","-1":"düýn"},relativeTime:{future:{one:"{0} günden",other:"{0} günden"},past:{one:"{0} gün öň",other:"{0} gün öň"}}},"day-short":{displayName:"gün",relative:{0:"şu gün",1:"ertir","-1":"düýn"},relativeTime:{future:{one:"{0} g-den",other:"{0} g-den"},past:{one:"{0} g. öň",other:"{0} g. öň"}}},hour:{displayName:"sagat",relative:{0:"şu sagat"},relativeTime:{future:{one:"{0} sagatdan",other:"{0} sagatdan"},past:{one:"{0} sagat öň",other:"{0} sagat öň"}}},"hour-short":{displayName:"sag.",relative:{0:"şu sagat"},relativeTime:{future:{one:"{0} sag-dan",other:"{0} sag-dan"},past:{one:"{0} sag. öň",other:"{0} sag. öň"}}},minute:{displayName:"minut",relative:{0:"şu minut"},relativeTime:{future:{one:"{0} minutdan",other:"{0} minutdan"},past:{one:"{0} minut öň",other:"{0} minut öň"}}},"minute-short":{displayName:"min.",relative:{0:"şu minut"},relativeTime:{future:{one:"{0} min-dan",other:"{0} min-dan"},past:{one:"{0} min. öň",other:"{0} min. öň"}}},second:{displayName:"sekunt",relative:{0:"häzir"},relativeTime:{future:{one:"{0} sekuntdan",other:"{0} sekuntdan"},past:{one:"{0} sekunt öň",other:"{0} sekunt öň"}}},"second-short":{displayName:"sek.",relative:{0:"häzir"},relativeTime:{future:{one:"{0} sek-dan",other:"{0} sek-dan"},past:{one:"{0} sek. öň",other:"{0} sek. öň"}}}}},{locale:"tl",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=a[1]||"",o=!a[1],n=r.slice(-1),s=i.slice(-1);return t?1==e?"one":"other":o&&(1==r||2==r||3==r)||o&&4!=n&&6!=n&&9!=n||!o&&4!=s&&6!=s&&9!=s?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"tn",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"to",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"taʻu",relative:{0:"taʻú ni",1:"taʻu kahaʻu","-1":"taʻu kuoʻosi"},relativeTime:{future:{other:"ʻi he taʻu ʻe {0}"},past:{other:"taʻu ʻe {0} kuoʻosi"}}},"year-short":{displayName:"taʻu",relative:{0:"taʻú ni",1:"taʻu kahaʻu","-1":"taʻu kuoʻosi"},relativeTime:{future:{other:"ʻi he taʻu ʻe {0}"},past:{other:"taʻu ʻe {0} kuoʻosi"}}},month:{displayName:"māhina",relative:{0:"māhiná ni",1:"māhina kahaʻu","-1":"māhina kuoʻosi"},relativeTime:{future:{other:"ʻi he māhina ʻe {0}"},past:{other:"māhina ʻe {0} kuoʻosi"}}},"month-short":{displayName:"māhina",relative:{0:"māhiná ni",1:"māhina kahaʻu","-1":"māhina kuoʻosi"},relativeTime:{future:{other:"ʻi he māhina ʻe {0}"},past:{other:"māhina ʻe {0} kuoʻosi"}}},day:{displayName:"ʻaho",relative:{0:"ʻahó ni",1:"ʻapongipongi",2:"ʻahepongipongi","-2":"ʻaneheafi","-1":"ʻaneafi"},relativeTime:{future:{other:"ʻi he ʻaho ʻe {0}"},past:{other:"ʻaho ʻe {0} kuoʻosi"}}},"day-short":{displayName:"ʻaho",relative:{0:"ʻahó ni",1:"ʻapongipongi",2:"ʻahepongipongi","-2":"ʻaneheafi","-1":"ʻaneafi"},relativeTime:{future:{other:"ʻi he ʻaho ʻe {0}"},past:{other:"ʻaho ʻe {0} kuoʻosi"}}},hour:{displayName:"houa",relative:{0:"this hour"},relativeTime:{future:{other:"ʻi he houa ʻe {0}"},past:{other:"houa ʻe {0} kuoʻosi"}}},"hour-short":{displayName:"houa",relative:{0:"this hour"},relativeTime:{future:{other:"ʻi he houa ʻe {0}"},past:{other:"houa ʻe {0} kuoʻosi"}}},minute:{displayName:"miniti",relative:{0:"this minute"},relativeTime:{future:{other:"ʻi he miniti ʻe {0}"},past:{other:"miniti ʻe {0} kuoʻosi"}}},"minute-short":{displayName:"miniti",relative:{0:"this minute"},relativeTime:{future:{other:"ʻi he miniti ʻe {0}"},past:{other:"miniti ʻe {0} kuoʻosi"}}},second:{displayName:"sekoni",relative:{0:"taimí ni"},relativeTime:{future:{other:"ʻi he sekoni ʻe {0}"},past:{other:"sekoni ʻe {0} kuoʻosi"}}},"second-short":{displayName:"sekoni",relative:{0:"taimí ni"},relativeTime:{future:{other:"ʻi he sekoni ʻe {0}"},past:{other:"sekoni ʻe {0} kuoʻosi"}}}}},{locale:"tr",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"yıl",relative:{0:"bu yıl",1:"gelecek yıl","-1":"geçen yıl"},relativeTime:{future:{one:"{0} yıl sonra",other:"{0} yıl sonra"},past:{one:"{0} yıl önce",other:"{0} yıl önce"}}},"year-short":{displayName:"yıl",relative:{0:"bu yıl",1:"gelecek yıl","-1":"geçen yıl"},relativeTime:{future:{one:"{0} yıl sonra",other:"{0} yıl sonra"},past:{one:"{0} yıl önce",other:"{0} yıl önce"}}},month:{displayName:"ay",relative:{0:"bu ay",1:"gelecek ay","-1":"geçen ay"},relativeTime:{future:{one:"{0} ay sonra",other:"{0} ay sonra"},past:{one:"{0} ay önce",other:"{0} ay önce"}}},"month-short":{displayName:"ay",relative:{0:"bu ay",1:"gelecek ay","-1":"geçen ay"},relativeTime:{future:{one:"{0} ay sonra",other:"{0} ay sonra"},past:{one:"{0} ay önce",other:"{0} ay önce"}}},day:{displayName:"gün",relative:{0:"bugün",1:"yarın",2:"öbür gün","-2":"evvelsi gün","-1":"dün"},relativeTime:{future:{one:"{0} gün sonra",other:"{0} gün sonra"},past:{one:"{0} gün önce",other:"{0} gün önce"}}},"day-short":{displayName:"gün",relative:{0:"bugün",1:"yarın",2:"öbür gün","-2":"evvelsi gün","-1":"dün"},relativeTime:{future:{one:"{0} gün sonra",other:"{0} gün sonra"},past:{one:"{0} gün önce",other:"{0} gün önce"}}},hour:{displayName:"saat",relative:{0:"bu saat"},relativeTime:{future:{one:"{0} saat sonra",other:"{0} saat sonra"},past:{one:"{0} saat önce",other:"{0} saat önce"}}},"hour-short":{displayName:"sa.",relative:{0:"bu saat"},relativeTime:{future:{one:"{0} sa. sonra",other:"{0} sa. sonra"},past:{one:"{0} sa. önce",other:"{0} sa. önce"}}},minute:{displayName:"dakika",relative:{0:"bu dakika"},relativeTime:{future:{one:"{0} dakika sonra",other:"{0} dakika sonra"},past:{one:"{0} dakika önce",other:"{0} dakika önce"}}},"minute-short":{displayName:"dk.",relative:{0:"bu dakika"},relativeTime:{future:{one:"{0} dk. sonra",other:"{0} dk. sonra"},past:{one:"{0} dk. önce",other:"{0} dk. önce"}}},second:{displayName:"saniye",relative:{0:"şimdi"},relativeTime:{future:{one:"{0} saniye sonra",other:"{0} saniye sonra"},past:{one:"{0} saniye önce",other:"{0} saniye önce"}}},"second-short":{displayName:"sn.",relative:{0:"şimdi"},relativeTime:{future:{one:"{0} sn. sonra",other:"{0} sn. sonra"},past:{one:"{0} sn. önce",other:"{0} sn. önce"}}}}},{locale:"tr-CY",parentLocale:"tr"},{locale:"ts",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"tt",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"ел",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"ел",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"ай",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"ай",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"көн",relative:{0:"бүген",1:"иртәгә","-1":"кичә"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"көн",relative:{0:"бүген",1:"иртәгә","-1":"кичә"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"сәгать",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"сәг.",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"минут",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"мин.",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"секунд",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"с.",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"twq",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Jiiri",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Jiiri",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Handu",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Handu",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Zaari",relative:{0:"Hõo",1:"Suba","-1":"Bi"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Zaari",relative:{0:"Hõo",1:"Suba","-1":"Bi"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Guuru",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Guuru",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Miniti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Miniti",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Miti",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Miti",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"tzm",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=Number(a[0])==e;return t?"other":0==e||1==e||r&&e>=11&&e<=99?"one":"other"},fields:{year:{displayName:"Asseggas",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Asseggas",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Ayur",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Ayur",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ass",relative:{0:"Assa",1:"Asekka","-1":"Assenaṭ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ass",relative:{0:"Assa",1:"Asekka","-1":"Assenaṭ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Tasragt",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Tasragt",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Tusdat",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Tusdat",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Tusnat",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Tusnat",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"ug",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"يىل",relative:{0:"بۇ يىل",1:"كېلەر يىل","-1":"ئۆتكەن يىل"},relativeTime:{future:{one:"{0} يىلدىن كېيىن",other:"{0} يىلدىن كېيىن"},past:{one:"{0} يىل ئىلگىرى",other:"{0} يىل ئىلگىرى"}}},"year-short":{displayName:"يىل",relative:{0:"بۇ يىل",1:"كېلەر يىل","-1":"ئۆتكەن يىل"},relativeTime:{future:{one:"{0} يىلدىن كېيىن",other:"{0} يىلدىن كېيىن"},past:{one:"{0} يىل ئىلگىرى",other:"{0} يىل ئىلگىرى"}}},month:{displayName:"ئاي",relative:{0:"بۇ ئاي",1:"كېلەر ئاي","-1":"ئۆتكەن ئاي"},relativeTime:{future:{one:"{0} ئايدىن كېيىن",other:"{0} ئايدىن كېيىن"},past:{one:"{0} ئاي ئىلگىرى",other:"{0} ئاي ئىلگىرى"}}},"month-short":{displayName:"ئاي",relative:{0:"بۇ ئاي",1:"كېلەر ئاي","-1":"ئۆتكەن ئاي"},relativeTime:{future:{one:"{0} ئايدىن كېيىن",other:"{0} ئايدىن كېيىن"},past:{one:"{0} ئاي ئىلگىرى",other:"{0} ئاي ئىلگىرى"}}},day:{displayName:"كۈن",relative:{0:"بۈگۈن",1:"ئەتە","-1":"تۈنۈگۈن"},relativeTime:{future:{one:"{0} كۈندىن كېيىن",other:"{0} كۈندىن كېيىن"},past:{one:"{0} كۈن ئىلگىرى",other:"{0} كۈن ئىلگىرى"}}},"day-short":{displayName:"كۈن",relative:{0:"بۈگۈن",1:"ئەتە","-1":"تۈنۈگۈن"},relativeTime:{future:{one:"{0} كۈندىن كېيىن",other:"{0} كۈندىن كېيىن"},past:{one:"{0} كۈن ئىلگىرى",other:"{0} كۈن ئىلگىرى"}}},hour:{displayName:"سائەت",relative:{0:"this hour"},relativeTime:{future:{one:"{0} سائەتتىن كېيىن",other:"{0} سائەتتىن كېيىن"},past:{one:"{0} سائەت ئىلگىرى",other:"{0} سائەت ئىلگىرى"}}},"hour-short":{displayName:"سائەت",relative:{0:"this hour"},relativeTime:{future:{one:"{0} سائەتتىن كېيىن",other:"{0} سائەتتىن كېيىن"},past:{one:"{0} سائەت ئىلگىرى",other:"{0} سائەت ئىلگىرى"}}},minute:{displayName:"مىنۇت",relative:{0:"this minute"},relativeTime:{future:{one:"{0} مىنۇتتىن كېيىن",other:"{0} مىنۇتتىن كېيىن"},past:{one:"{0} مىنۇت ئىلگىرى",other:"{0} مىنۇت ئىلگىرى"}}},"minute-short":{displayName:"مىنۇت",relative:{0:"this minute"},relativeTime:{future:{one:"{0} مىنۇتتىن كېيىن",other:"{0} مىنۇتتىن كېيىن"},past:{one:"{0} مىنۇت ئىلگىرى",other:"{0} مىنۇت ئىلگىرى"}}},second:{displayName:"سېكۇنت",relative:{0:"now"},relativeTime:{future:{one:"{0} سېكۇنتتىن كېيىن",other:"{0} سېكۇنتتىن كېيىن"},past:{one:"{0} سېكۇنت ئىلگىرى",other:"{0} سېكۇنت ئىلگىرى"}}},"second-short":{displayName:"سېكۇنت",relative:{0:"now"},relativeTime:{future:{one:"{0} سېكۇنتتىن كېيىن",other:"{0} سېكۇنتتىن كېيىن"},past:{one:"{0} سېكۇنت ئىلگىرى",other:"{0} سېكۇنت ئىلگىرى"}}}}},{locale:"uk",pluralRuleFunction:function(e,t){var a=String(e).split("."),r=a[0],i=!a[1],o=Number(a[0])==e,n=o&&a[0].slice(-1),s=o&&a[0].slice(-2),l=r.slice(-1),h=r.slice(-2);return t?3==n&&13!=s?"few":"other":i&&1==l&&11!=h?"one":i&&l>=2&&l<=4&&(h<12||h>14)?"few":i&&0==l||i&&l>=5&&l<=9||i&&h>=11&&h<=14?"many":"other"},fields:{year:{displayName:"рік",relative:{0:"цього року",1:"наступного року","-1":"торік"},relativeTime:{future:{one:"через {0} рік",few:"через {0} роки",many:"через {0} років",other:"через {0} року"},past:{one:"{0} рік тому",few:"{0} роки тому",many:"{0} років тому",other:"{0} року тому"}}},"year-short":{displayName:"р.",relative:{0:"цього року",1:"наступного року","-1":"торік"},relativeTime:{future:{one:"через {0} р.",few:"через {0} р.",many:"через {0} р.",other:"через {0} р."},past:{one:"{0} р. тому",few:"{0} р. тому",many:"{0} р. тому",other:"{0} р. тому"}}},month:{displayName:"місяць",relative:{0:"цього місяця",1:"наступного місяця","-1":"минулого місяця"},relativeTime:{future:{one:"через {0} місяць",few:"через {0} місяці",many:"через {0} місяців",other:"через {0} місяця"},past:{one:"{0} місяць тому",few:"{0} місяці тому",many:"{0} місяців тому",other:"{0} місяця тому"}}},"month-short":{displayName:"міс.",relative:{0:"цього місяця",1:"наступного місяця","-1":"минулого місяця"},relativeTime:{future:{one:"через {0} міс.",few:"через {0} міс.",many:"через {0} міс.",other:"через {0} міс."},past:{one:"{0} міс. тому",few:"{0} міс. тому",many:"{0} міс. тому",other:"{0} міс. тому"}}},day:{displayName:"день",relative:{0:"сьогодні",1:"завтра",2:"післязавтра","-2":"позавчора","-1":"учора"},relativeTime:{future:{one:"через {0} день",few:"через {0} дні",many:"через {0} днів",other:"через {0} дня"},past:{one:"{0} день тому",few:"{0} дні тому",many:"{0} днів тому",other:"{0} дня тому"}}},"day-short":{displayName:"д.",relative:{0:"сьогодні",1:"завтра",2:"післязавтра","-2":"позавчора","-1":"учора"},relativeTime:{future:{one:"через {0} дн.",few:"через {0} дн.",many:"через {0} дн.",other:"через {0} дн."},past:{one:"{0} дн. тому",few:"{0} дн. тому",many:"{0} дн. тому",other:"{0} дн. тому"}}},hour:{displayName:"година",relative:{0:"цієї години"},relativeTime:{future:{one:"через {0} годину",few:"через {0} години",many:"через {0} годин",other:"через {0} години"},past:{one:"{0} годину тому",few:"{0} години тому",many:"{0} годин тому",other:"{0} години тому"}}},"hour-short":{displayName:"год.",relative:{0:"цієї години"},relativeTime:{future:{one:"через {0} год",few:"через {0} год",many:"через {0} год",other:"через {0} год"},past:{one:"{0} год тому",few:"{0} год тому",many:"{0} год тому",other:"{0} год тому"}}},minute:{displayName:"хвилина",relative:{0:"цієї хвилини"},relativeTime:{future:{one:"через {0} хвилину",few:"через {0} хвилини",many:"через {0} хвилин",other:"через {0} хвилини"},past:{one:"{0} хвилину тому",few:"{0} хвилини тому",many:"{0} хвилин тому",other:"{0} хвилини тому"}}},"minute-short":{displayName:"хв.",relative:{0:"цієї хвилини"},relativeTime:{future:{one:"через {0} хв",few:"через {0} хв",many:"через {0} хв",other:"через {0} хв"},past:{one:"{0} хв тому",few:"{0} хв тому",many:"{0} хв тому",other:"{0} хв тому"}}},second:{displayName:"секунда",relative:{0:"зараз"},relativeTime:{future:{one:"через {0} секунду",few:"через {0} секунди",many:"через {0} секунд",other:"через {0} секунди"},past:{one:"{0} секунду тому",few:"{0} секунди тому",many:"{0} секунд тому",other:"{0} секунди тому"}}},"second-short":{displayName:"с",relative:{0:"зараз"},relativeTime:{future:{one:"через {0} с",few:"через {0} с",many:"через {0} с",other:"через {0} с"},past:{one:"{0} с тому",few:"{0} с тому",many:"{0} с тому",other:"{0} с тому"}}}}},{locale:"ur",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"سال",relative:{0:"اس سال",1:"اگلے سال","-1":"گزشتہ سال"},relativeTime:{future:{one:"{0} سال میں",other:"{0} سال میں"},past:{one:"{0} سال پہلے",other:"{0} سال پہلے"}}},"year-short":{displayName:"سال",relative:{0:"اس سال",1:"اگلے سال","-1":"گزشتہ سال"},relativeTime:{future:{one:"{0} سال میں",other:"{0} سال میں"},past:{one:"{0} سال پہلے",other:"{0} سال پہلے"}}},month:{displayName:"مہینہ",relative:{0:"اس مہینہ",1:"اگلا مہینہ","-1":"پچھلا مہینہ"},relativeTime:{future:{one:"{0} مہینہ میں",other:"{0} مہینے میں"},past:{one:"{0} مہینہ پہلے",other:"{0} مہینے پہلے"}}},"month-short":{displayName:"ماہ",relative:{0:"اس مہینہ",1:"اگلے مہینہ","-1":"پچھلے مہینہ"},relativeTime:{future:{one:"{0} ماہ میں",other:"{0} ماہ میں"},past:{one:"{0} ماہ قبل",other:"{0} ماہ قبل"}}},day:{displayName:"دن",relative:{0:"آج",1:"آئندہ کل",2:"آنے والا پرسوں","-2":"گزشتہ پرسوں","-1":"گزشتہ کل"},relativeTime:{future:{one:"{0} دن میں",other:"{0} دنوں میں"},past:{one:"{0} دن پہلے",other:"{0} دنوں پہلے"}}},"day-short":{displayName:"دن",relative:{0:"آج",1:"آئندہ کل",2:"آنے والا پرسوں","-2":"گزشتہ پرسوں","-1":"گزشتہ کل"},relativeTime:{future:{one:"{0} دن میں",other:"{0} دنوں میں"},past:{one:"{0} دن پہلے",other:"{0} دنوں پہلے"}}},hour:{displayName:"گھنٹہ",relative:{0:"اس گھنٹے"},relativeTime:{future:{one:"{0} گھنٹے میں",other:"{0} گھنٹے میں"},past:{one:"{0} گھنٹہ پہلے",other:"{0} گھنٹے پہلے"}}},"hour-short":{displayName:"گھنٹہ",relative:{0:"اس گھنٹے"},relativeTime:{future:{one:"{0} گھنٹے میں",other:"{0} گھنٹے میں"},past:{one:"{0} گھنٹے پہلے",other:"{0} گھنٹے پہلے"}}},minute:{displayName:"منٹ",relative:{0:"اس منٹ"},relativeTime:{future:{one:"{0} منٹ میں",other:"{0} منٹ میں"},past:{one:"{0} منٹ پہلے",other:"{0} منٹ پہلے"}}},"minute-short":{displayName:"منٹ",relative:{0:"اس منٹ"},relativeTime:{future:{one:"{0} منٹ میں",other:"{0} منٹ میں"},past:{one:"{0} منٹ پہلے",other:"{0} منٹ پہلے"}}},second:{displayName:"سیکنڈ",relative:{0:"اب"},relativeTime:{future:{one:"{0} سیکنڈ میں",other:"{0} سیکنڈ میں"},past:{one:"{0} سیکنڈ پہلے",other:"{0} سیکنڈ پہلے"}}},"second-short":{displayName:"سیکنڈ",relative:{0:"اب"},relativeTime:{future:{one:"{0} سیکنڈ میں",other:"{0} سیکنڈ میں"},past:{one:"{0} سیکنڈ پہلے",other:"{0} سیکنڈ پہلے"}}}}},{locale:"ur-IN",parentLocale:"ur",fields:{year:{displayName:"سال",relative:{0:"اس سال",1:"اگلے سال","-1":"گزشتہ سال"},relativeTime:{future:{one:"{0} سال میں",other:"{0} سالوں میں"},past:{one:"{0} سال پہلے",other:"{0} سال پہلے"}}},"year-short":{displayName:"سال",relative:{0:"اس سال",1:"اگلے سال","-1":"گزشتہ سال"},relativeTime:{future:{one:"{0} سال میں",other:"{0} سالوں میں"},past:{one:"{0} سال پہلے",other:"{0} سالوں پہلے"}}},month:{displayName:"مہینہ",relative:{0:"اس ماہ",1:"اگلے ماہ","-1":"گزشتہ ماہ"},relativeTime:{future:{one:"{0} ماہ میں",other:"{0} ماہ میں"},past:{one:"{0} ماہ قبل",other:"{0} ماہ قبل"}}},"month-short":{displayName:"مہینہ",relative:{0:"اس مہینہ",1:"اگلے مہینہ","-1":"پچھلے مہینہ"},relativeTime:{future:{one:"{0} ماہ میں",other:"{0} ماہ میں"},past:{one:"{0} ماہ قبل",other:"{0} ماہ قبل"}}},day:{displayName:"دن",relative:{0:"آج",1:"آئندہ کل",2:"آنے والا پرسوں","-2":"گزشتہ پرسوں","-1":"گزشتہ کل"},relativeTime:{future:{one:"{0} دن میں",other:"{0} دنوں میں"},past:{one:"{0} دن پہلے",other:"{0} دنوں پہلے"}}},"day-short":{displayName:"دن",relative:{0:"آج",1:"آئندہ کل",2:"آنے والا پرسوں","-2":"گزشتہ پرسوں","-1":"گزشتہ کل"},relativeTime:{future:{one:"{0} دنوں میں",other:"{0} دنوں میں"},past:{one:"{0} دن پہلے",other:"{0} دنوں پہلے"}}},hour:{displayName:"گھنٹہ",relative:{0:"اس گھنٹے"},relativeTime:{future:{one:"{0} گھنٹے میں",other:"{0} گھنٹے میں"},past:{one:"{0} گھنٹہ پہلے",other:"{0} گھنٹے پہلے"}}},"hour-short":{displayName:"گھنٹہ",relative:{0:"اس گھنٹے"},relativeTime:{future:{one:"{0} گھنٹے میں",other:"{0} گھنٹے میں"},past:{one:"{0} گھنٹے قبل",other:"{0} گھنٹے قبل"}}},minute:{displayName:"منٹ",relative:{0:"اس منٹ"},relativeTime:{future:{one:"{0} منٹ میں",other:"{0} منٹ میں"},past:{one:"{0} منٹ قبل",other:"{0} منٹ قبل"}}},"minute-short":{displayName:"منٹ",relative:{0:"اس منٹ"},relativeTime:{future:{one:"{0} منٹ میں",other:"{0} منٹ میں"},past:{one:"{0} منٹ قبل",other:"{0} منٹ قبل"}}},second:{displayName:"سیکنڈ",relative:{0:"اب"},relativeTime:{future:{one:"{0} سیکنڈ میں",other:"{0} سیکنڈ میں"},past:{one:"{0} سیکنڈ قبل",other:"{0} سیکنڈ قبل"}}},"second-short":{displayName:"سیکنڈ",relative:{0:"اب"},relativeTime:{future:{one:"{0} سیکنڈ میں",other:"{0} سیکنڈ میں"},past:{one:"{0} سیکنڈ قبل",other:"{0} سیکنڈ قبل"}}}}},{locale:"uz",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"yil",relative:{0:"shu yil",1:"keyingi yil","-1":"o‘tgan yil"},relativeTime:{future:{one:"{0} yildan keyin",other:"{0} yildan keyin"},past:{one:"{0} yil oldin",other:"{0} yil oldin"}}},"year-short":{displayName:"yil",relative:{0:"bu yil",1:"keyingi yil","-1":"oʻtgan yil"},relativeTime:{future:{one:"{0} yildan keyin",other:"{0} yildan keyin"},past:{one:"{0} yil oldin",other:"{0} yil oldin"}}},month:{displayName:"oy",relative:{0:"shu oy",1:"keyingi oy","-1":"o‘tgan oy"},relativeTime:{future:{one:"{0} oydan keyin",other:"{0} oydan keyin"},past:{one:"{0} oy oldin",other:"{0} oy oldin"}}},"month-short":{displayName:"oy",relative:{0:"shu oy",1:"keyingi oy","-1":"o‘tgan oy"},relativeTime:{future:{one:"{0} oydan keyin",other:"{0} oydan keyin"},past:{one:"{0} oy oldin",other:"{0} oy oldin"}}},day:{displayName:"kun",relative:{0:"bugun",1:"ertaga","-1":"kecha"},relativeTime:{future:{one:"{0} kundan keyin",other:"{0} kundan keyin"},past:{one:"{0} kun oldin",other:"{0} kun oldin"}}},"day-short":{displayName:"kun",relative:{0:"bugun",1:"ertaga","-1":"kecha"},relativeTime:{future:{one:"{0} kundan keyin",other:"{0} kundan keyin"},past:{one:"{0} kun oldin",other:"{0} kun oldin"}}},hour:{displayName:"soat",relative:{0:"shu soatda"},relativeTime:{future:{one:"{0} soatdan keyin",other:"{0} soatdan keyin"},past:{one:"{0} soat oldin",other:"{0} soat oldin"}}},"hour-short":{displayName:"soat",relative:{0:"shu soatda"},relativeTime:{future:{one:"{0} soatdan keyin",other:"{0} soatdan keyin"},past:{one:"{0} soat oldin",other:"{0} soat oldin"}}},minute:{displayName:"daqiqa",relative:{0:"shu daqiqada"},relativeTime:{future:{one:"{0} daqiqadan keyin",other:"{0} daqiqadan keyin"},past:{one:"{0} daqiqa oldin",other:"{0} daqiqa oldin"}}},"minute-short":{displayName:"daq.",relative:{0:"shu daqiqada"},relativeTime:{future:{one:"{0} daqiqadan keyin",other:"{0} daqiqadan keyin"},past:{one:"{0} daqiqa oldin",other:"{0} daqiqa oldin"}}},second:{displayName:"soniya",relative:{0:"hozir"},relativeTime:{future:{one:"{0} soniyadan keyin",other:"{0} soniyadan keyin"},past:{one:"{0} soniya oldin",other:"{0} soniya oldin"}}},"second-short":{displayName:"son.",relative:{0:"hozir"},relativeTime:{future:{one:"{0} soniyadan keyin",other:"{0} soniyadan keyin"},past:{one:"{0} soniya oldin",other:"{0} soniya oldin"}}}}},{locale:"uz-Arab",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"uz-Cyrl",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Йил",relative:{0:"бу йил",1:"кейинги йил","-1":"ўтган йил"},relativeTime:{future:{one:"{0} йилдан сўнг",other:"{0} йилдан сўнг"},past:{one:"{0} йил аввал",other:"{0} йил аввал"}}},"year-short":{displayName:"Йил",relative:{0:"бу йил",1:"кейинги йил","-1":"ўтган йил"},relativeTime:{future:{one:"{0} йилдан сўнг",other:"{0} йилдан сўнг"},past:{one:"{0} йил аввал",other:"{0} йил аввал"}}},month:{displayName:"Ой",relative:{0:"бу ой",1:"кейинги ой","-1":"ўтган ой"},relativeTime:{future:{one:"{0} ойдан сўнг",other:"{0} ойдан сўнг"},past:{one:"{0} ой аввал",other:"{0} ой аввал"}}},"month-short":{displayName:"Ой",relative:{0:"бу ой",1:"кейинги ой","-1":"ўтган ой"},relativeTime:{future:{one:"{0} ойдан сўнг",other:"{0} ойдан сўнг"},past:{one:"{0} ой аввал",other:"{0} ой аввал"}}},day:{displayName:"Кун",relative:{0:"бугун",1:"эртага","-1":"кеча"},relativeTime:{future:{one:"{0} кундан сўнг",other:"{0} кундан сўнг"},past:{one:"{0} кун олдин",other:"{0} кун олдин"}}},"day-short":{displayName:"Кун",relative:{0:"бугун",1:"эртага","-1":"кеча"},relativeTime:{future:{one:"{0} кундан сўнг",other:"{0} кундан сўнг"},past:{one:"{0} кун олдин",other:"{0} кун олдин"}}},hour:{displayName:"Соат",relative:{0:"this hour"},relativeTime:{future:{one:"{0} соатдан сўнг",other:"{0} соатдан сўнг"},past:{one:"{0} соат олдин",other:"{0} соат олдин"}}},"hour-short":{displayName:"Соат",relative:{0:"this hour"},relativeTime:{future:{one:"{0} соатдан сўнг",other:"{0} соатдан сўнг"},past:{one:"{0} соат олдин",other:"{0} соат олдин"}}},minute:{displayName:"Дақиқа",relative:{0:"this minute"},relativeTime:{future:{one:"{0} дақиқадан сўнг",other:"{0} дақиқадан сўнг"},past:{one:"{0} дақиқа олдин",other:"{0} дақиқа олдин"}}},"minute-short":{displayName:"Дақиқа",relative:{0:"this minute"},relativeTime:{future:{one:"{0} дақиқадан сўнг",other:"{0} дақиқадан сўнг"},past:{one:"{0} дақиқа олдин",other:"{0} дақиқа олдин"}}},second:{displayName:"Сония",relative:{0:"ҳозир"},relativeTime:{future:{one:"{0} сониядан сўнг",other:"{0} сониядан сўнг"},past:{one:"{0} сония олдин",other:"{0} сония олдин"}}},"second-short":{displayName:"Сония",relative:{0:"ҳозир"},relativeTime:{future:{one:"{0} сониядан сўнг",other:"{0} сониядан сўнг"},past:{one:"{0} сония олдин",other:"{0} сония олдин"}}}}},{locale:"uz-Latn",parentLocale:"uz"},{locale:"vai",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"ꕢꘋ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"ꕢꘋ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"ꕪꖃ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"ꕪꖃ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"ꔎꔒ",relative:{0:"ꗦꗷ",1:"ꔻꕯ","-1":"ꖴꖸ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"ꔎꔒ",relative:{0:"ꗦꗷ",1:"ꔻꕯ","-1":"ꖴꖸ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"ꕌꕎ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"ꕌꕎ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"ꕆꕇ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"ꕆꕇ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"ꕧꕃꕧꕪ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"ꕧꕃꕧꕪ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"vai-Latn",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"saŋ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"saŋ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"kalo",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"kalo",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"tele",relative:{0:"wɛlɛ",1:"sina","-1":"kunu"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"tele",relative:{0:"wɛlɛ",1:"sina","-1":"kunu"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"hawa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"hawa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"mini",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"mini",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"jaki-jaka",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"jaki-jaka",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"vai-Vaii",parentLocale:"vai"},{locale:"ve",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"vi",pluralRuleFunction:function(e,t){return t&&1==e?"one":"other"},fields:{year:{displayName:"Năm",relative:{0:"năm nay",1:"năm sau","-1":"năm ngoái"},relativeTime:{future:{other:"sau {0} năm nữa"},past:{other:"{0} năm trước"}}},"year-short":{displayName:"Năm",relative:{0:"năm nay",1:"năm sau","-1":"năm ngoái"},relativeTime:{future:{other:"sau {0} năm nữa"},past:{other:"{0} năm trước"}}},month:{displayName:"Tháng",relative:{0:"tháng này",1:"tháng sau","-1":"tháng trước"},relativeTime:{future:{other:"sau {0} tháng nữa"},past:{other:"{0} tháng trước"}}},"month-short":{displayName:"Tháng",relative:{0:"tháng này",1:"tháng sau","-1":"tháng trước"},relativeTime:{future:{other:"sau {0} tháng nữa"},past:{other:"{0} tháng trước"}}},day:{displayName:"Ngày",relative:{0:"Hôm nay",1:"Ngày mai",2:"Ngày kia","-2":"Hôm kia","-1":"Hôm qua"},relativeTime:{future:{other:"sau {0} ngày nữa"},past:{other:"{0} ngày trước"}}},"day-short":{displayName:"Ngày",relative:{0:"Hôm nay",1:"Ngày mai",2:"Ngày kia","-2":"Hôm kia","-1":"Hôm qua"},relativeTime:{future:{other:"sau {0} ngày nữa"},past:{other:"{0} ngày trước"}}},hour:{displayName:"Giờ",relative:{0:"giờ này"},relativeTime:{future:{other:"sau {0} giờ nữa"},past:{other:"{0} giờ trước"}}},"hour-short":{displayName:"Giờ",relative:{0:"giờ này"},relativeTime:{future:{other:"sau {0} giờ nữa"},past:{other:"{0} giờ trước"}}},minute:{displayName:"Phút",relative:{0:"phút này"},relativeTime:{future:{other:"sau {0} phút nữa"},past:{other:"{0} phút trước"}}},"minute-short":{displayName:"Phút",relative:{0:"phút này"},relativeTime:{future:{other:"sau {0} phút nữa"},past:{other:"{0} phút trước"}}},second:{displayName:"Giây",relative:{0:"bây giờ"},relativeTime:{future:{other:"sau {0} giây nữa"},past:{other:"{0} giây trước"}}},"second-short":{displayName:"Giây",relative:{0:"bây giờ"},relativeTime:{future:{other:"sau {0} giây nữa"},past:{other:"{0} giây trước"}}}}},{locale:"vo",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"vun",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Maka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Maka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Mori",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Mori",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Mfiri",relative:{0:"Inu",1:"Ngama","-1":"Ukou"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Mfiri",relative:{0:"Inu",1:"Ngama","-1":"Ukou"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Saa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Dakyika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Dakyika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Sekunde",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"wa",pluralRuleFunction:function(e,t){return t?"other":0==e||1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"wae",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Jár",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"I {0} jár",other:"I {0} jár"},past:{one:"vor {0} jár",other:"cor {0} jár"}}},"year-short":{displayName:"Jár",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"I {0} jár",other:"I {0} jár"},past:{one:"vor {0} jár",other:"cor {0} jár"}}},month:{displayName:"Mánet",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"I {0} mánet",other:"I {0} mánet"},past:{one:"vor {0} mánet",other:"vor {0} mánet"}}},"month-short":{displayName:"Mánet",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"I {0} mánet",other:"I {0} mánet"},past:{one:"vor {0} mánet",other:"vor {0} mánet"}}},day:{displayName:"Tag",relative:{0:"Hitte",1:"Móre",2:"Ubermóre","-2":"Vorgešter","-1":"Gešter"},relativeTime:{future:{one:"i {0} tag",other:"i {0} täg"},past:{one:"vor {0} tag",other:"vor {0} täg"}}},"day-short":{displayName:"Tag",relative:{0:"Hitte",1:"Móre",2:"Ubermóre","-2":"Vorgešter","-1":"Gešter"},relativeTime:{future:{one:"i {0} tag",other:"i {0} täg"},past:{one:"vor {0} tag",other:"vor {0} täg"}}},hour:{displayName:"Schtund",relative:{0:"this hour"},relativeTime:{future:{one:"i {0} stund",other:"i {0} stunde"},past:{one:"vor {0} stund",other:"vor {0} stunde"}}},"hour-short":{displayName:"Schtund",relative:{0:"this hour"},relativeTime:{future:{one:"i {0} stund",other:"i {0} stunde"},past:{one:"vor {0} stund",other:"vor {0} stunde"}}},minute:{displayName:"Mínütta",relative:{0:"this minute"},relativeTime:{future:{one:"i {0} minüta",other:"i {0} minüte"},past:{one:"vor {0} minüta",other:"vor {0} minüte"}}},"minute-short":{displayName:"Mínütta",relative:{0:"this minute"},relativeTime:{future:{one:"i {0} minüta",other:"i {0} minüte"},past:{one:"vor {0} minüta",other:"vor {0} minüte"}}},second:{displayName:"Sekunda",relative:{0:"now"},relativeTime:{future:{one:"i {0} sekund",other:"i {0} sekunde"},past:{one:"vor {0} sekund",other:"vor {0} sekunde"}}},"second-short":{displayName:"Sekunda",relative:{0:"now"},relativeTime:{future:{one:"i {0} sekund",other:"i {0} sekunde"},past:{one:"vor {0} sekund",other:"vor {0} sekunde"}}}}},{locale:"wo",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"at",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"at.",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"weer",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"we.",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"fan",relative:{0:"tay",1:"suba","-1":"démb"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"fan",relative:{0:"tay",1:"suba","-1":"démb"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"waxtu",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"wxt.",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"simili",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"sim.",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"saa",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"saa.",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"xh",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"xog",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"Omwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Omwaka",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Omwezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Omwezi",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Olunaku",relative:{0:"Olwaleelo (leelo)",1:"Enkyo","-1":"Edho"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Olunaku",relative:{0:"Olwaleelo (leelo)",1:"Enkyo","-1":"Edho"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Essawa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Essawa",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Edakiika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Edakiika",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Obutikitiki",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Obutikitiki",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"yav",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"yɔɔŋ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"yɔɔŋ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"oóli",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"oóli",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"puɔ́sɛ́",relative:{0:"ínaan",1:"nakinyám","-1":"púyoó"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"puɔ́sɛ́",relative:{0:"ínaan",1:"nakinyám","-1":"púyoó"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"kisikɛl,",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"kisikɛl,",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"minít",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"minít",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"síkɛn",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"síkɛn",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"yi",pluralRuleFunction:function(e,t){var a=!String(e).split(".")[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"יאָר",relative:{0:"הײַ יאָר",1:"איבער א יאָר","-1":"פֿאַראַיאָר"},relativeTime:{future:{one:"איבער {0} יאָר",other:"איבער {0} יאָר"},past:{one:"פֿאַר {0} יאָר",other:"פֿאַר {0} יאָר"}}},"year-short":{displayName:"יאָר",relative:{0:"הײַ יאָר",1:"איבער א יאָר","-1":"פֿאַראַיאָר"},relativeTime:{future:{one:"איבער א יאָר",other:"איבער {0} יאָר"},past:{one:"פֿאַר {0} יאָר",other:"פֿאַר {0} יאָר"}}},month:{displayName:"מאנאַט",relative:{0:"דעם חודש",1:"קומענדיקן חודש","-1":"פֿאַרגאנגענעם חודש"},relativeTime:{future:{one:"איבער {0} חודש",other:"איבער {0} חדשים"},past:{one:"פֿאַר {0} חודש",other:"פֿאַר {0} חדשים"}}},"month-short":{displayName:"מאנאַט",relative:{0:"דעם חודש",1:"קומענדיקן חודש","-1":"פֿאַרגאנגענעם חודש"},relativeTime:{future:{one:"איבער {0} חודש",other:"איבער {0} חדשים"},past:{one:"פֿאַר {0} חודש",other:"פֿאַר {0} חדשים"}}},day:{displayName:"טאָג",relative:{0:"היינט",1:"מארגן","-1":"נעכטן"},relativeTime:{future:{one:"אין {0} טאָג אַרום",other:"אין {0} טעג אַרום"},past:{other:"-{0} d"}}},"day-short":{displayName:"טאָג",relative:{0:"היינט",1:"מארגן","-1":"נעכטן"},relativeTime:{future:{one:"אין {0} טאָג אַרום",other:"אין {0} טעג אַרום"},past:{other:"-{0} d"}}},hour:{displayName:"שעה",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"שעה",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"מינוט",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"מינוט",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"סעקונדע",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"סעקונדע",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"yo",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"Ọdún",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Ọdún",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Osù",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Osù",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ọjọ́",relative:{0:"Òní",1:"Ọ̀la",2:"òtúùnla","-2":"íjẹta","-1":"Àná"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ọjọ́",relative:{0:"Òní",1:"Ọ̀la",2:"òtúùnla","-2":"íjẹta","-1":"Àná"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"wákàtí",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"wákàtí",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Ìsẹ́jú",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Ìsẹ́jú",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Ìsẹ́jú Ààyá",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Ìsẹ́jú Ààyá",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"yo-BJ",parentLocale:"yo",fields:{year:{displayName:"Ɔdún",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Ɔdún",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Osù",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Osù",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Ɔjɔ́",relative:{0:"Òní",1:"Ɔ̀la",2:"òtúùnla","-2":"íjɛta","-1":"Àná"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Ɔjɔ́",relative:{0:"Òní",1:"Ɔ̀la",2:"òtúùnla","-2":"íjɛta","-1":"Àná"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"wákàtí",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"wákàtí",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Ìsɛ́jú",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Ìsɛ́jú",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Ìsɛ́jú Ààyá",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Ìsɛ́jú Ààyá",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"yue",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"年",relative:{0:"今年",1:"下年","-1":"舊年"},relativeTime:{future:{other:"{0} 年後"},past:{other:"{0} 年前"}}},"year-short":{displayName:"年",relative:{0:"今年",1:"下年","-1":"舊年"},relativeTime:{future:{other:"{0} 年後"},past:{other:"{0} 年前"}}},month:{displayName:"月",relative:{0:"今個月",1:"下個月","-1":"上個月"},relativeTime:{future:{other:"{0} 個月後"},past:{other:"{0} 個月前"}}},"month-short":{displayName:"月",relative:{0:"今個月",1:"下個月","-1":"上個月"},relativeTime:{future:{other:"{0} 個月後"},past:{other:"{0} 個月前"}}},day:{displayName:"日",relative:{0:"今日",1:"聽日",2:"後天","-2":"前天","-1":"尋日"},relativeTime:{future:{other:"{0} 日後"},past:{other:"{0} 日前"}}},"day-short":{displayName:"日",relative:{0:"今日",1:"聽日",2:"後天","-2":"前天","-1":"尋日"},relativeTime:{future:{other:"{0} 日後"},past:{other:"{0} 日前"}}},hour:{displayName:"小時",relative:{0:"呢個小時"},relativeTime:{future:{other:"{0} 小時後"},past:{other:"{0} 小時前"}}},"hour-short":{displayName:"小時",relative:{0:"呢個小時"},relativeTime:{future:{other:"{0} 小時後"},past:{other:"{0} 小時前"}}},minute:{displayName:"分鐘",relative:{0:"呢分鐘"},relativeTime:{future:{other:"{0} 分鐘後"},past:{other:"{0} 分鐘前"}}},"minute-short":{displayName:"分鐘",relative:{0:"呢分鐘"},relativeTime:{future:{other:"{0} 分鐘後"},past:{other:"{0} 分鐘前"}}},second:{displayName:"秒",relative:{0:"宜家"},relativeTime:{future:{other:"{0} 秒後"},past:{other:"{0} 秒前"}}},"second-short":{displayName:"秒",relative:{0:"宜家"},relativeTime:{future:{other:"{0} 秒後"},past:{other:"{0} 秒前"}}}}},{locale:"yue-Hans",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"年",relative:{0:"今年",1:"下年","-1":"旧年"},relativeTime:{future:{other:"{0} 年后"},past:{other:"{0} 年前"}}},"year-short":{displayName:"年",relative:{0:"今年",1:"下年","-1":"旧年"},relativeTime:{future:{other:"{0} 年后"},past:{other:"{0} 年前"}}},month:{displayName:"月",relative:{0:"今个月",1:"下个月","-1":"上个月"},relativeTime:{future:{other:"{0} 个月后"},past:{other:"{0} 个月前"}}},"month-short":{displayName:"月",relative:{0:"今个月",1:"下个月","-1":"上个月"},relativeTime:{future:{other:"{0} 个月后"},past:{other:"{0} 个月前"}}},day:{displayName:"日",relative:{0:"今日",1:"听日",2:"后天","-2":"前天","-1":"寻日"},relativeTime:{future:{other:"{0} 日后"},past:{other:"{0} 日前"}}},"day-short":{displayName:"日",relative:{0:"今日",1:"听日",2:"后天","-2":"前天","-1":"寻日"},relativeTime:{future:{other:"{0} 日后"},past:{other:"{0} 日前"}}},hour:{displayName:"小时",relative:{0:"呢个小时"},relativeTime:{future:{other:"{0} 小时后"},past:{other:"{0} 小时前"}}},"hour-short":{displayName:"小时",relative:{0:"呢个小时"},relativeTime:{future:{other:"{0} 小时后"},past:{other:"{0} 小时前"}}},minute:{displayName:"分钟",relative:{0:"呢分钟"},relativeTime:{future:{other:"{0} 分钟后"},past:{other:"{0} 分钟前"}}},"minute-short":{displayName:"分钟",relative:{0:"呢分钟"},relativeTime:{future:{other:"{0} 分钟后"},past:{other:"{0} 分钟前"}}},second:{displayName:"秒",relative:{0:"宜家"},relativeTime:{future:{other:"{0} 秒后"},past:{other:"{0} 秒前"}}},"second-short":{displayName:"秒",relative:{0:"宜家"},relativeTime:{future:{other:"{0} 秒后"},past:{other:"{0} 秒前"}}}}},{locale:"yue-Hant",parentLocale:"yue"},{locale:"zgh",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"ⴰⵙⴳⴳⵯⴰⵙ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"ⴰⵙⴳⴳⵯⴰⵙ",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"ⴰⵢⵢⵓⵔ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"ⴰⵢⵢⵓⵔ",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"ⴰⵙⵙ",relative:{0:"ⴰⵙⵙⴰ",1:"ⴰⵙⴽⴽⴰ","-1":"ⵉⴹⵍⵍⵉ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"ⴰⵙⵙ",relative:{0:"ⴰⵙⵙⴰ",1:"ⴰⵙⴽⴽⴰ","-1":"ⵉⴹⵍⵍⵉ"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"ⵜⴰⵙⵔⴰⴳⵜ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"ⵜⴰⵙⵔⴰⴳⵜ",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"ⵜⵓⵙⴷⵉⴷⵜ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"ⵜⵓⵙⴷⵉⴷⵜ",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"ⵜⴰⵙⵉⵏⵜ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"ⵜⴰⵙⵉⵏⵜ",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"zh",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"年",relative:{0:"今年",1:"明年","-1":"去年"},relativeTime:{future:{other:"{0}年后"},past:{other:"{0}年前"}}},"year-short":{displayName:"年",relative:{0:"今年",1:"明年","-1":"去年"},relativeTime:{future:{other:"{0}年后"},past:{other:"{0}年前"}}},month:{displayName:"月",relative:{0:"本月",1:"下个月","-1":"上个月"},relativeTime:{future:{other:"{0}个月后"},past:{other:"{0}个月前"}}},"month-short":{displayName:"月",relative:{0:"本月",1:"下个月","-1":"上个月"},relativeTime:{future:{other:"{0}个月后"},past:{other:"{0}个月前"}}},day:{displayName:"日",relative:{0:"今天",1:"明天",2:"后天","-2":"前天","-1":"昨天"},relativeTime:{future:{other:"{0}天后"},past:{other:"{0}天前"}}},"day-short":{displayName:"日",relative:{0:"今天",1:"明天",2:"后天","-2":"前天","-1":"昨天"},relativeTime:{future:{other:"{0}天后"},past:{other:"{0}天前"}}},hour:{displayName:"小时",relative:{0:"这一时间 / 此时"},relativeTime:{future:{other:"{0}小时后"},past:{other:"{0}小时前"}}},"hour-short":{displayName:"小时",relative:{0:"这一时间 / 此时"},relativeTime:{future:{other:"{0}小时后"},past:{other:"{0}小时前"}}},minute:{displayName:"分钟",relative:{0:"此刻"},relativeTime:{future:{other:"{0}分钟后"},past:{other:"{0}分钟前"}}},"minute-short":{displayName:"分",relative:{0:"此刻"},relativeTime:{future:{other:"{0}分钟后"},past:{other:"{0}分钟前"}}},second:{displayName:"秒",relative:{0:"现在"},relativeTime:{future:{other:"{0}秒钟后"},past:{other:"{0}秒钟前"}}},"second-short":{displayName:"秒",relative:{0:"现在"},relativeTime:{future:{other:"{0}秒后"},past:{other:"{0}秒前"}}}}},{locale:"zh-Hans",parentLocale:"zh"},{locale:"zh-Hans-HK",parentLocale:"zh-Hans",fields:{year:{displayName:"年",relative:{0:"今年",1:"明年","-1":"去年"},relativeTime:{future:{other:"{0}年后"},past:{other:"{0}年前"}}},"year-short":{displayName:"年",relative:{0:"今年",1:"明年","-1":"去年"},relativeTime:{future:{other:"{0}年后"},past:{other:"{0}年前"}}},month:{displayName:"月",relative:{0:"本月",1:"下个月","-1":"上个月"},relativeTime:{future:{other:"{0}个月后"},past:{other:"{0}个月前"}}},"month-short":{displayName:"月",relative:{0:"本月",1:"下个月","-1":"上个月"},relativeTime:{future:{other:"{0}个月后"},past:{other:"{0}个月前"}}},day:{displayName:"日",relative:{0:"今天",1:"明天",2:"后天","-2":"前天","-1":"昨天"},relativeTime:{future:{other:"{0}天后"},past:{other:"{0}天前"}}},"day-short":{displayName:"日",relative:{0:"今天",1:"明天",2:"后天","-2":"前天","-1":"昨天"},relativeTime:{future:{other:"{0}天后"},past:{other:"{0}天前"}}},hour:{displayName:"小时",relative:{0:"这一时间 / 此时"},relativeTime:{future:{other:"{0}小时后"},past:{other:"{0}小时前"}}},"hour-short":{displayName:"小时",relative:{0:"这一时间 / 此时"},relativeTime:{future:{other:"{0}小时后"},past:{other:"{0}小时前"}}},minute:{displayName:"分钟",relative:{0:"此刻"},relativeTime:{future:{other:"{0}分钟后"},past:{other:"{0}分钟前"}}},"minute-short":{displayName:"分",relative:{0:"此刻"},relativeTime:{future:{other:"{0}分钟后"},past:{other:"{0}分钟前"}}},second:{displayName:"秒",relative:{0:"现在"},relativeTime:{future:{other:"{0}秒后"},past:{other:"{0}秒前"}}},"second-short":{displayName:"秒",relative:{0:"现在"},relativeTime:{future:{other:"{0}秒后"},past:{other:"{0}秒前"}}}}},{locale:"zh-Hans-MO",parentLocale:"zh-Hans",fields:{year:{displayName:"年",relative:{0:"今年",1:"明年","-1":"去年"},relativeTime:{future:{other:"{0}年后"},past:{other:"{0}年前"}}},"year-short":{displayName:"年",relative:{0:"今年",1:"明年","-1":"去年"},relativeTime:{future:{other:"{0}年后"},past:{other:"{0}年前"}}},month:{displayName:"月",relative:{0:"本月",1:"下个月","-1":"上个月"},relativeTime:{future:{other:"{0}个月后"},past:{other:"{0}个月前"}}},"month-short":{displayName:"月",relative:{0:"本月",1:"下个月","-1":"上个月"},relativeTime:{future:{other:"{0}个月后"},past:{other:"{0}个月前"}}},day:{displayName:"日",relative:{0:"今天",1:"明天",2:"后天","-2":"前天","-1":"昨天"},relativeTime:{future:{other:"{0}天后"},past:{other:"{0}天前"}}},"day-short":{displayName:"日",relative:{0:"今天",1:"明天",2:"后天","-2":"前天","-1":"昨天"},relativeTime:{future:{other:"{0}天后"},past:{other:"{0}天前"}}},hour:{displayName:"小时",relative:{0:"这一时间 / 此时"},relativeTime:{future:{other:"{0}小时后"},past:{other:"{0}小时前"}}},"hour-short":{displayName:"小时",relative:{0:"这一时间 / 此时"},relativeTime:{future:{other:"{0}小时后"},past:{other:"{0}小时前"}}},minute:{displayName:"分钟",relative:{0:"此刻"},relativeTime:{future:{other:"{0}分钟后"},past:{other:"{0}分钟前"}}},"minute-short":{displayName:"分",relative:{0:"此刻"},relativeTime:{future:{other:"{0}分钟后"},past:{other:"{0}分钟前"}}},second:{displayName:"秒",relative:{0:"现在"},relativeTime:{future:{other:"{0}秒后"},past:{other:"{0}秒前"}}},"second-short":{displayName:"秒",relative:{0:"现在"},relativeTime:{future:{other:"{0}秒后"},past:{other:"{0}秒前"}}}}},{locale:"zh-Hans-SG",parentLocale:"zh-Hans",fields:{year:{displayName:"年",relative:{0:"今年",1:"明年","-1":"去年"},relativeTime:{future:{other:"{0}年后"},past:{other:"{0}年前"}}},"year-short":{displayName:"年",relative:{0:"今年",1:"明年","-1":"去年"},relativeTime:{future:{other:"{0}年后"},past:{other:"{0}年前"}}},month:{displayName:"月",relative:{0:"本月",1:"下个月","-1":"上个月"},relativeTime:{future:{other:"{0}个月后"},past:{other:"{0}个月前"}}},"month-short":{displayName:"月",relative:{0:"本月",1:"下个月","-1":"上个月"},relativeTime:{future:{other:"{0}个月后"},past:{other:"{0}个月前"}}},day:{displayName:"日",relative:{0:"今天",1:"明天",2:"后天","-2":"前天","-1":"昨天"},relativeTime:{future:{other:"{0}天后"},past:{other:"{0}天前"}}},"day-short":{displayName:"日",relative:{0:"今天",1:"明天",2:"后天","-2":"前天","-1":"昨天"},relativeTime:{future:{other:"{0}天后"},past:{other:"{0}天前"}}},hour:{displayName:"小时",relative:{0:"这一时间 / 此时"},relativeTime:{future:{other:"{0}小时后"},past:{other:"{0}小时前"}}},"hour-short":{displayName:"小时",relative:{0:"这一时间 / 此时"},relativeTime:{future:{other:"{0}小时后"},past:{other:"{0}小时前"}}},minute:{displayName:"分钟",relative:{0:"此刻"},relativeTime:{future:{other:"{0}分钟后"},past:{other:"{0}分钟前"}}},"minute-short":{displayName:"分",relative:{0:"此刻"},relativeTime:{future:{other:"{0}分钟后"},past:{other:"{0}分钟前"}}},second:{displayName:"秒",relative:{0:"现在"},relativeTime:{future:{other:"{0}秒后"},past:{other:"{0}秒前"}}},"second-short":{displayName:"秒",relative:{0:"现在"},relativeTime:{future:{other:"{0}秒后"},past:{other:"{0}秒前"}}}}},{locale:"zh-Hant",pluralRuleFunction:function(e,t){return "other"},fields:{year:{displayName:"年",relative:{0:"今年",1:"明年","-1":"去年"},relativeTime:{future:{other:"{0} 年後"},past:{other:"{0} 年前"}}},"year-short":{displayName:"年",relative:{0:"今年",1:"明年","-1":"去年"},relativeTime:{future:{other:"{0} 年後"},past:{other:"{0} 年前"}}},month:{displayName:"月",relative:{0:"本月",1:"下個月","-1":"上個月"},relativeTime:{future:{other:"{0} 個月後"},past:{other:"{0} 個月前"}}},"month-short":{displayName:"月",relative:{0:"本月",1:"下個月","-1":"上個月"},relativeTime:{future:{other:"{0} 個月後"},past:{other:"{0} 個月前"}}},day:{displayName:"日",relative:{0:"今天",1:"明天",2:"後天","-2":"前天","-1":"昨天"},relativeTime:{future:{other:"{0} 天後"},past:{other:"{0} 天前"}}},"day-short":{displayName:"日",relative:{0:"今天",1:"明天",2:"後天","-2":"前天","-1":"昨天"},relativeTime:{future:{other:"{0} 天後"},past:{other:"{0} 天前"}}},hour:{displayName:"小時",relative:{0:"這一小時"},relativeTime:{future:{other:"{0} 小時後"},past:{other:"{0} 小時前"}}},"hour-short":{displayName:"小時",relative:{0:"這一小時"},relativeTime:{future:{other:"{0} 小時後"},past:{other:"{0} 小時前"}}},minute:{displayName:"分鐘",relative:{0:"這一分鐘"},relativeTime:{future:{other:"{0} 分鐘後"},past:{other:"{0} 分鐘前"}}},"minute-short":{displayName:"分鐘",relative:{0:"這一分鐘"},relativeTime:{future:{other:"{0} 分鐘後"},past:{other:"{0} 分鐘前"}}},second:{displayName:"秒",relative:{0:"現在"},relativeTime:{future:{other:"{0} 秒後"},past:{other:"{0} 秒前"}}},"second-short":{displayName:"秒",relative:{0:"現在"},relativeTime:{future:{other:"{0} 秒後"},past:{other:"{0} 秒前"}}}}},{locale:"zh-Hant-HK",parentLocale:"zh-Hant",fields:{year:{displayName:"年",relative:{0:"今年",1:"下年","-1":"上年"},relativeTime:{future:{other:"{0} 年後"},past:{other:"{0} 年前"}}},"year-short":{displayName:"年",relative:{0:"今年",1:"下年","-1":"上年"},relativeTime:{future:{other:"{0} 年後"},past:{other:"{0} 年前"}}},month:{displayName:"月",relative:{0:"本月",1:"下個月","-1":"上個月"},relativeTime:{future:{other:"{0} 個月後"},past:{other:"{0} 個月前"}}},"month-short":{displayName:"月",relative:{0:"本月",1:"下個月","-1":"上個月"},relativeTime:{future:{other:"{0} 個月後"},past:{other:"{0} 個月前"}}},day:{displayName:"日",relative:{0:"今日",1:"明日",2:"後日","-2":"前日","-1":"昨日"},relativeTime:{future:{other:"{0} 日後"},past:{other:"{0} 日前"}}},"day-short":{displayName:"日",relative:{0:"今日",1:"明日",2:"後日","-2":"前日","-1":"昨日"},relativeTime:{future:{other:"{0} 日後"},past:{other:"{0} 日前"}}},hour:{displayName:"小時",relative:{0:"這個小時"},relativeTime:{future:{other:"{0} 小時後"},past:{other:"{0} 小時前"}}},"hour-short":{displayName:"小時",relative:{0:"這個小時"},relativeTime:{future:{other:"{0} 小時後"},past:{other:"{0} 小時前"}}},minute:{displayName:"分鐘",relative:{0:"這分鐘"},relativeTime:{future:{other:"{0} 分鐘後"},past:{other:"{0} 分鐘前"}}},"minute-short":{displayName:"分鐘",relative:{0:"這分鐘"},relativeTime:{future:{other:"{0} 分鐘後"},past:{other:"{0} 分鐘前"}}},second:{displayName:"秒",relative:{0:"現在"},relativeTime:{future:{other:"{0} 秒後"},past:{other:"{0} 秒前"}}},"second-short":{displayName:"秒",relative:{0:"現在"},relativeTime:{future:{other:"{0} 秒後"},past:{other:"{0} 秒前"}}}}},{locale:"zh-Hant-MO",parentLocale:"zh-Hant-HK"},{locale:"zu",pluralRuleFunction:function(e,t){return t?"other":e>=0&&e<=1?"one":"other"},fields:{year:{displayName:"Unyaka",relative:{0:"kulo nyaka",1:"unyaka ozayo","-1":"onyakeni odlule"},relativeTime:{future:{one:"onyakeni ongu-{0} ozayo",other:"eminyakeni engu-{0} ezayo"},past:{one:"{0} unyaka odlule",other:"{0} iminyaka edlule"}}},"year-short":{displayName:"Unyaka",relative:{0:"kulo nyaka",1:"unyaka ozayo","-1":"onyakeni odlule"},relativeTime:{future:{one:"onyakeni ongu-{0} ozayo",other:"eminyakeni engu-{0} ezayo"},past:{one:"{0} unyaka odlule",other:"{0} unyaka odlule"}}},month:{displayName:"Inyanga",relative:{0:"le nyanga",1:"inyanga ezayo","-1":"inyanga edlule"},relativeTime:{future:{one:"enyangeni engu-{0}",other:"ezinyangeni ezingu-{0} ezizayo"},past:{one:"{0} inyanga edlule",other:"{0} izinyanga ezedlule"}}},"month-short":{displayName:"Inyanga",relative:{0:"le nyanga",1:"inyanga ezayo","-1":"inyanga edlule"},relativeTime:{future:{one:"ezinyangeni ezingu-{0} ezizayo",other:"ezinyangeni ezingu-{0} ezizayo"},past:{one:"{0} izinyanga ezedlule",other:"{0} izinyanga ezedlule"}}},day:{displayName:"Usuku",relative:{0:"namhlanje",1:"kusasa",2:"usuku olulandela olwakusasa","-2":"usuku olwandulela olwayizolo","-1":"izolo"},relativeTime:{future:{one:"osukwini olungu-{0} oluzayo",other:"ezinsukwini ezingu-{0} ezizayo"},past:{one:"osukwini olungu-{0} olwedlule",other:"ezinsukwini ezingu-{0} ezedlule."}}},"day-short":{displayName:"Usuku",relative:{0:"namhlanje",1:"kusasa",2:"usuku olulandela olwakusasa","-2":"usuku olwandulela olwayizolo","-1":"izolo"},relativeTime:{future:{one:"osukwini olungu-{0} oluzayo",other:"ezinsukwini ezingu-{0} ezizayo"},past:{one:"{0} usuku olwedlule",other:"{0} izinsuku ezedlule"}}},hour:{displayName:"Ihora",relative:{0:"leli hora"},relativeTime:{future:{one:"ehoreni elingu-{0} elizayo",other:"emahoreni angu-{0} ezayo"},past:{one:"{0} ihora eledlule",other:"emahoreni angu-{0} edlule"}}},"hour-short":{displayName:"Ihora",relative:{0:"leli hora"},relativeTime:{future:{one:"ehoreni elingu-{0} elizayo",other:"emahoreni angu-{0} ezayo"},past:{one:"{0} ihora eledlule",other:"emahoreni angu-{0} edlule"}}},minute:{displayName:"Iminithi",relative:{0:"leli minithi"},relativeTime:{future:{one:"kuminithi elingu-{0} elizayo",other:"kumaminithi angu-{0} ezayo"},past:{one:"{0} iminithi eledlule",other:"{0} amaminithi edlule"}}},"minute-short":{displayName:"Iminithi",relative:{0:"leli minithi"},relativeTime:{future:{one:"kuminithi elingu-{0} elizayo",other:"kumaminithi angu-{0} ezayo"},past:{one:"{0} iminithi eledlule",other:"{0} amaminithi edlule"}}},second:{displayName:"Isekhondi",relative:{0:"manje"},relativeTime:{future:{one:"kusekhondi elingu-{0} elizayo",other:"kumasekhondi angu-{0} ezayo"},past:{one:"{0} isekhondi eledlule",other:"{0} amasekhondi edlule"}}},"second-short":{displayName:"Isekhondi",relative:{0:"manje"},relativeTime:{future:{one:"kusekhondi elingu-{0} elizayo",other:"kumasekhondi angu-{0} ezayo"},past:{one:"{0} isekhondi eledlule",other:"{0} amasekhondi edlule"}}}}}]});
}(localeData));

var allLocaleData = localeData.exports;

var intlMessageformat = {exports: {}};

var main$1 = {};

var core$1 = {};

var utils = {};

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/
utils.extend = extend;
var hop$1 = Object.prototype.hasOwnProperty;

function extend(obj) {
    var sources = Array.prototype.slice.call(arguments, 1),
        i, len, source, key;

    for (i = 0, len = sources.length; i < len; i += 1) {
        source = sources[i];
        if (!source) { continue; }

        for (key in source) {
            if (hop$1.call(source, key)) {
                obj[key] = source[key];
            }
        }
    }

    return obj;
}
utils.hop = hop$1;

var es5$1 = {};

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/
var src$utils$$ = utils;

// Purposely using the same implementation as the Intl.js `Intl` polyfill.
// Copyright 2013 Andy Earnshaw, MIT License

var realDefineProp$1 = (function () {
    try { return !!Object.defineProperty({}, 'a', {}); }
    catch (e) { return false; }
})();

var defineProperty$3 = realDefineProp$1 ? Object.defineProperty :
        function (obj, name, desc) {

    if ('get' in desc && obj.__defineGetter__) {
        obj.__defineGetter__(name, desc.get);
    } else if (!src$utils$$.hop.call(obj, name) || 'value' in desc) {
        obj[name] = desc.value;
    }
};

var objCreate$1 = Object.create || function (proto, props) {
    var obj, k;

    function F() {}
    F.prototype = proto;
    obj = new F();

    for (k in props) {
        if (src$utils$$.hop.call(props, k)) {
            defineProperty$3(obj, k, props[k]);
        }
    }

    return obj;
};

es5$1.defineProperty = defineProperty$3, es5$1.objCreate = objCreate$1;

var compiler = {};

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/

(function (exports) {
exports["default"] = Compiler;

function Compiler(locales, formats, pluralFn) {
    this.locales  = locales;
    this.formats  = formats;
    this.pluralFn = pluralFn;
}

Compiler.prototype.compile = function (ast) {
    this.pluralStack        = [];
    this.currentPlural      = null;
    this.pluralNumberFormat = null;

    return this.compileMessage(ast);
};

Compiler.prototype.compileMessage = function (ast) {
    if (!(ast && ast.type === 'messageFormatPattern')) {
        throw new Error('Message AST is not of type: "messageFormatPattern"');
    }

    var elements = ast.elements,
        pattern  = [];

    var i, len, element;

    for (i = 0, len = elements.length; i < len; i += 1) {
        element = elements[i];

        switch (element.type) {
            case 'messageTextElement':
                pattern.push(this.compileMessageText(element));
                break;

            case 'argumentElement':
                pattern.push(this.compileArgument(element));
                break;

            default:
                throw new Error('Message element does not have a valid type');
        }
    }

    return pattern;
};

Compiler.prototype.compileMessageText = function (element) {
    // When this `element` is part of plural sub-pattern and its value contains
    // an unescaped '#', use a `PluralOffsetString` helper to properly output
    // the number with the correct offset in the string.
    if (this.currentPlural && /(^|[^\\])#/g.test(element.value)) {
        // Create a cache a NumberFormat instance that can be reused for any
        // PluralOffsetString instance in this message.
        if (!this.pluralNumberFormat) {
            this.pluralNumberFormat = new Intl.NumberFormat(this.locales);
        }

        return new PluralOffsetString(
                this.currentPlural.id,
                this.currentPlural.format.offset,
                this.pluralNumberFormat,
                element.value);
    }

    // Unescape the escaped '#'s in the message text.
    return element.value.replace(/\\#/g, '#');
};

Compiler.prototype.compileArgument = function (element) {
    var format = element.format;

    if (!format) {
        return new StringFormat(element.id);
    }

    var formats  = this.formats,
        locales  = this.locales,
        pluralFn = this.pluralFn,
        options;

    switch (format.type) {
        case 'numberFormat':
            options = formats.number[format.style];
            return {
                id    : element.id,
                format: new Intl.NumberFormat(locales, options).format
            };

        case 'dateFormat':
            options = formats.date[format.style];
            return {
                id    : element.id,
                format: new Intl.DateTimeFormat(locales, options).format
            };

        case 'timeFormat':
            options = formats.time[format.style];
            return {
                id    : element.id,
                format: new Intl.DateTimeFormat(locales, options).format
            };

        case 'pluralFormat':
            options = this.compileOptions(element);
            return new PluralFormat(
                element.id, format.ordinal, format.offset, options, pluralFn
            );

        case 'selectFormat':
            options = this.compileOptions(element);
            return new SelectFormat(element.id, options);

        default:
            throw new Error('Message element does not have a valid format type');
    }
};

Compiler.prototype.compileOptions = function (element) {
    var format      = element.format,
        options     = format.options,
        optionsHash = {};

    // Save the current plural element, if any, then set it to a new value when
    // compiling the options sub-patterns. This conforms the spec's algorithm
    // for handling `"#"` syntax in message text.
    this.pluralStack.push(this.currentPlural);
    this.currentPlural = format.type === 'pluralFormat' ? element : null;

    var i, len, option;

    for (i = 0, len = options.length; i < len; i += 1) {
        option = options[i];

        // Compile the sub-pattern and save it under the options's selector.
        optionsHash[option.selector] = this.compileMessage(option.value);
    }

    // Pop the plural stack to put back the original current plural value.
    this.currentPlural = this.pluralStack.pop();

    return optionsHash;
};

// -- Compiler Helper Classes --------------------------------------------------

function StringFormat(id) {
    this.id = id;
}

StringFormat.prototype.format = function (value) {
    if (!value && typeof value !== 'number') {
        return '';
    }

    return typeof value === 'string' ? value : String(value);
};

function PluralFormat(id, useOrdinal, offset, options, pluralFn) {
    this.id         = id;
    this.useOrdinal = useOrdinal;
    this.offset     = offset;
    this.options    = options;
    this.pluralFn   = pluralFn;
}

PluralFormat.prototype.getOption = function (value) {
    var options = this.options;

    var option = options['=' + value] ||
            options[this.pluralFn(value - this.offset, this.useOrdinal)];

    return option || options.other;
};

function PluralOffsetString(id, offset, numberFormat, string) {
    this.id           = id;
    this.offset       = offset;
    this.numberFormat = numberFormat;
    this.string       = string;
}

PluralOffsetString.prototype.format = function (value) {
    var number = this.numberFormat.format(value - this.offset);

    return this.string
            .replace(/(^|[^\\])#/g, '$1' + number)
            .replace(/\\#/g, '#');
};

function SelectFormat(id, options) {
    this.id      = id;
    this.options = options;
}

SelectFormat.prototype.getOption = function (value) {
    var options = this.options;
    return options[value] || options.other;
};


}(compiler));

var intlMessageformatParser = {exports: {}};

var parser = {};

(function (exports) {

exports["default"] = (function() {

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(elements) {
                return {
                    type    : 'messageFormatPattern',
                    elements: elements,
                    location: location()
                };
            },
        peg$c1 = function(text) {
                var string = '',
                    i, j, outerLen, inner, innerLen;

                for (i = 0, outerLen = text.length; i < outerLen; i += 1) {
                    inner = text[i];

                    for (j = 0, innerLen = inner.length; j < innerLen; j += 1) {
                        string += inner[j];
                    }
                }

                return string;
            },
        peg$c2 = function(messageText) {
                return {
                    type : 'messageTextElement',
                    value: messageText,
                    location: location()
                };
            },
        peg$c3 = /^[^ \t\n\r,.+={}#]/,
        peg$c4 = { type: "class", value: "[^ \\t\\n\\r,.+={}#]", description: "[^ \\t\\n\\r,.+={}#]" },
        peg$c5 = "{",
        peg$c6 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c7 = ",",
        peg$c8 = { type: "literal", value: ",", description: "\",\"" },
        peg$c9 = "}",
        peg$c10 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c11 = function(id, format) {
                return {
                    type  : 'argumentElement',
                    id    : id,
                    format: format && format[2],
                    location: location()
                };
            },
        peg$c12 = "number",
        peg$c13 = { type: "literal", value: "number", description: "\"number\"" },
        peg$c14 = "date",
        peg$c15 = { type: "literal", value: "date", description: "\"date\"" },
        peg$c16 = "time",
        peg$c17 = { type: "literal", value: "time", description: "\"time\"" },
        peg$c18 = function(type, style) {
                return {
                    type : type + 'Format',
                    style: style && style[2],
                    location: location()
                };
            },
        peg$c19 = "plural",
        peg$c20 = { type: "literal", value: "plural", description: "\"plural\"" },
        peg$c21 = function(pluralStyle) {
                return {
                    type   : pluralStyle.type,
                    ordinal: false,
                    offset : pluralStyle.offset || 0,
                    options: pluralStyle.options,
                    location: location()
                };
            },
        peg$c22 = "selectordinal",
        peg$c23 = { type: "literal", value: "selectordinal", description: "\"selectordinal\"" },
        peg$c24 = function(pluralStyle) {
                return {
                    type   : pluralStyle.type,
                    ordinal: true,
                    offset : pluralStyle.offset || 0,
                    options: pluralStyle.options,
                    location: location()
                }
            },
        peg$c25 = "select",
        peg$c26 = { type: "literal", value: "select", description: "\"select\"" },
        peg$c27 = function(options) {
                return {
                    type   : 'selectFormat',
                    options: options,
                    location: location()
                };
            },
        peg$c28 = "=",
        peg$c29 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c30 = function(selector, pattern) {
                return {
                    type    : 'optionalFormatPattern',
                    selector: selector,
                    value   : pattern,
                    location: location()
                };
            },
        peg$c31 = "offset:",
        peg$c32 = { type: "literal", value: "offset:", description: "\"offset:\"" },
        peg$c33 = function(number) {
                return number;
            },
        peg$c34 = function(offset, options) {
                return {
                    type   : 'pluralFormat',
                    offset : offset,
                    options: options,
                    location: location()
                };
            },
        peg$c35 = { type: "other", description: "whitespace" },
        peg$c36 = /^[ \t\n\r]/,
        peg$c37 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
        peg$c38 = { type: "other", description: "optionalWhitespace" },
        peg$c39 = /^[0-9]/,
        peg$c40 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c41 = /^[0-9a-f]/i,
        peg$c42 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
        peg$c43 = "0",
        peg$c44 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c45 = /^[1-9]/,
        peg$c46 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c47 = function(digits) {
            return parseInt(digits, 10);
        },
        peg$c48 = /^[^{}\\\0-\x1F \t\n\r]/,
        peg$c49 = { type: "class", value: "[^{}\\\\\\0-\\x1F\\x7f \\t\\n\\r]", description: "[^{}\\\\\\0-\\x1F\\x7f \\t\\n\\r]" },
        peg$c50 = "\\\\",
        peg$c51 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
        peg$c52 = function() { return '\\'; },
        peg$c53 = "\\#",
        peg$c54 = { type: "literal", value: "\\#", description: "\"\\\\#\"" },
        peg$c55 = function() { return '\\#'; },
        peg$c56 = "\\{",
        peg$c57 = { type: "literal", value: "\\{", description: "\"\\\\{\"" },
        peg$c58 = function() { return '\u007B'; },
        peg$c59 = "\\}",
        peg$c60 = { type: "literal", value: "\\}", description: "\"\\\\}\"" },
        peg$c61 = function() { return '\u007D'; },
        peg$c62 = "\\u",
        peg$c63 = { type: "literal", value: "\\u", description: "\"\\\\u\"" },
        peg$c64 = function(digits) {
                return String.fromCharCode(parseInt(digits, 16));
            },
        peg$c65 = function(chars) { return chars.join(''); },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parsemessageFormatPattern();

      return s0;
    }

    function peg$parsemessageFormatPattern() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsemessageFormatElement();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsemessageFormatElement();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsemessageFormatElement() {
      var s0;

      s0 = peg$parsemessageTextElement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseargumentElement();
      }

      return s0;
    }

    function peg$parsemessageText() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsechars();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsechars();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsemessageTextElement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsemessageText();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseargument() {
      var s0, s1, s2;

      s0 = peg$parsenumber();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c3.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c3.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseargumentElement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseargument();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c7;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseelementFormat();
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s7 = peg$c9;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c11(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelementFormat() {
      var s0;

      s0 = peg$parsesimpleFormat();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepluralFormat();
        if (s0 === peg$FAILED) {
          s0 = peg$parseselectOrdinalFormat();
          if (s0 === peg$FAILED) {
            s0 = peg$parseselectFormat();
          }
        }
      }

      return s0;
    }

    function peg$parsesimpleFormat() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c12) {
        s1 = peg$c12;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c14) {
          s1 = peg$c14;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c16) {
            s1 = peg$c16;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c17); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c7;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsechars();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c18(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepluralFormat() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c19) {
        s1 = peg$c19;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c7;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepluralStyle();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c21(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseselectOrdinalFormat() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c7;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepluralStyle();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseselectFormat() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c25) {
        s1 = peg$c25;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c7;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseoptionalFormatPattern();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseoptionalFormatPattern();
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c27(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseselector() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c28;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenumber();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsechars();
      }

      return s0;
    }

    function peg$parseoptionalFormatPattern() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseselector();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s4 = peg$c5;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsemessageFormatPattern();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c9;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c10); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c30(s2, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseoffset() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c31) {
        s1 = peg$c31;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c33(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepluralStyle() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseoffset();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseoptionalFormatPattern();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseoptionalFormatPattern();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c34(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c36.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c36.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c37); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsews();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsews();
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c39.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }

      return s0;
    }

    function peg$parsehexDigit() {
      var s0;

      if (peg$c41.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c43;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$currPos;
        if (peg$c45.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsedigit();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsedigit();
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c47(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsechar() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      if (peg$c48.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c50) {
          s1 = peg$c50;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c52();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c53) {
            s1 = peg$c53;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c54); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c55();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c56) {
              s1 = peg$c56;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c58();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c59) {
                s1 = peg$c59;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c60); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c61();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c62) {
                  s1 = peg$c62;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c63); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$currPos;
                  s4 = peg$parsehexDigit();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsehexDigit();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsehexDigit();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsehexDigit();
                        if (s7 !== peg$FAILED) {
                          s4 = [s4, s5, s6, s7];
                          s3 = s4;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s2 = input.substring(s2, peg$currPos);
                  } else {
                    s2 = s3;
                  }
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c64(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsechars() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsechar();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsechar();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c65(s1);
      }
      s0 = s1;

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();


}(parser));

(function (module, exports) {

exports = module.exports = parser['default'];
exports['default'] = exports;
}(intlMessageformatParser, intlMessageformatParser.exports));

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/

(function (exports) {
var src$utils$$ = utils, src$es5$$ = es5$1, src$compiler$$ = compiler, intl$messageformat$parser$$ = intlMessageformatParser.exports;
exports["default"] = MessageFormat;

// -- MessageFormat --------------------------------------------------------

function MessageFormat(message, locales, formats) {
    // Parse string messages into an AST.
    var ast = typeof message === 'string' ?
            MessageFormat.__parse(message) : message;

    if (!(ast && ast.type === 'messageFormatPattern')) {
        throw new TypeError('A message must be provided as a String or AST.');
    }

    // Creates a new object with the specified `formats` merged with the default
    // formats.
    formats = this._mergeFormats(MessageFormat.formats, formats);

    // Defined first because it's used to build the format pattern.
    src$es5$$.defineProperty(this, '_locale',  {value: this._resolveLocale(locales)});

    // Compile the `ast` to a pattern that is highly optimized for repeated
    // `format()` invocations. **Note:** This passes the `locales` set provided
    // to the constructor instead of just the resolved locale.
    var pluralFn = this._findPluralRuleFunction(this._locale);
    var pattern  = this._compilePattern(ast, locales, formats, pluralFn);

    // "Bind" `format()` method to `this` so it can be passed by reference like
    // the other `Intl` APIs.
    var messageFormat = this;
    this.format = function (values) {
      try {
        return messageFormat._format(pattern, values);
      } catch (e) {
        if (e.variableId) {
          throw new Error(
            'The intl string context variable \'' + e.variableId + '\'' +
            ' was not provided to the string \'' + message + '\''
          );
        } else {
          throw e;
        }
      }
    };
}

// Default format options used as the prototype of the `formats` provided to the
// constructor. These are used when constructing the internal Intl.NumberFormat
// and Intl.DateTimeFormat instances.
src$es5$$.defineProperty(MessageFormat, 'formats', {
    enumerable: true,

    value: {
        number: {
            'currency': {
                style: 'currency'
            },

            'percent': {
                style: 'percent'
            }
        },

        date: {
            'short': {
                month: 'numeric',
                day  : 'numeric',
                year : '2-digit'
            },

            'medium': {
                month: 'short',
                day  : 'numeric',
                year : 'numeric'
            },

            'long': {
                month: 'long',
                day  : 'numeric',
                year : 'numeric'
            },

            'full': {
                weekday: 'long',
                month  : 'long',
                day    : 'numeric',
                year   : 'numeric'
            }
        },

        time: {
            'short': {
                hour  : 'numeric',
                minute: 'numeric'
            },

            'medium':  {
                hour  : 'numeric',
                minute: 'numeric',
                second: 'numeric'
            },

            'long': {
                hour        : 'numeric',
                minute      : 'numeric',
                second      : 'numeric',
                timeZoneName: 'short'
            },

            'full': {
                hour        : 'numeric',
                minute      : 'numeric',
                second      : 'numeric',
                timeZoneName: 'short'
            }
        }
    }
});

// Define internal private properties for dealing with locale data.
src$es5$$.defineProperty(MessageFormat, '__localeData__', {value: src$es5$$.objCreate(null)});
src$es5$$.defineProperty(MessageFormat, '__addLocaleData', {value: function (data) {
    if (!(data && data.locale)) {
        throw new Error(
            'Locale data provided to IntlMessageFormat is missing a ' +
            '`locale` property'
        );
    }

    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;
}});

// Defines `__parse()` static method as an exposed private.
src$es5$$.defineProperty(MessageFormat, '__parse', {value: intl$messageformat$parser$$["default"].parse});

// Define public `defaultLocale` property which defaults to English, but can be
// set by the developer.
src$es5$$.defineProperty(MessageFormat, 'defaultLocale', {
    enumerable: true,
    writable  : true,
    value     : undefined
});

MessageFormat.prototype.resolvedOptions = function () {
    // TODO: Provide anything else?
    return {
        locale: this._locale
    };
};

MessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) {
    var compiler = new src$compiler$$["default"](locales, formats, pluralFn);
    return compiler.compile(ast);
};

MessageFormat.prototype._findPluralRuleFunction = function (locale) {
    var localeData = MessageFormat.__localeData__;
    var data       = localeData[locale.toLowerCase()];

    // The locale data is de-duplicated, so we have to traverse the locale's
    // hierarchy until we find a `pluralRuleFunction` to return.
    while (data) {
        if (data.pluralRuleFunction) {
            return data.pluralRuleFunction;
        }

        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];
    }

    throw new Error(
        'Locale data added to IntlMessageFormat is missing a ' +
        '`pluralRuleFunction` for :' + locale
    );
};

MessageFormat.prototype._format = function (pattern, values) {
    var result = '',
        i, len, part, id, value, err;

    for (i = 0, len = pattern.length; i < len; i += 1) {
        part = pattern[i];

        // Exist early for string parts.
        if (typeof part === 'string') {
            result += part;
            continue;
        }

        id = part.id;

        // Enforce that all required values are provided by the caller.
        if (!(values && src$utils$$.hop.call(values, id))) {
          err = new Error('A value must be provided for: ' + id);
          err.variableId = id;
          throw err;
        }

        value = values[id];

        // Recursively format plural and select parts' option — which can be a
        // nested pattern structure. The choosing of the option to use is
        // abstracted-by and delegated-to the part helper object.
        if (part.options) {
            result += this._format(part.getOption(value), values);
        } else {
            result += part.format(value);
        }
    }

    return result;
};

MessageFormat.prototype._mergeFormats = function (defaults, formats) {
    var mergedFormats = {},
        type, mergedType;

    for (type in defaults) {
        if (!src$utils$$.hop.call(defaults, type)) { continue; }

        mergedFormats[type] = mergedType = src$es5$$.objCreate(defaults[type]);

        if (formats && src$utils$$.hop.call(formats, type)) {
            src$utils$$.extend(mergedType, formats[type]);
        }
    }

    return mergedFormats;
};

MessageFormat.prototype._resolveLocale = function (locales) {
    if (typeof locales === 'string') {
        locales = [locales];
    }

    // Create a copy of the array so we can push on the default locale.
    locales = (locales || []).concat(MessageFormat.defaultLocale);

    var localeData = MessageFormat.__localeData__;
    var i, len, localeParts, data;

    // Using the set of locales + the default locale, we look for the first one
    // which that has been registered. When data does not exist for a locale, we
    // traverse its ancestors to find something that's been registered within
    // its hierarchy of locales. Since we lack the proper `parentLocale` data
    // here, we must take a naive approach to traversal.
    for (i = 0, len = locales.length; i < len; i += 1) {
        localeParts = locales[i].toLowerCase().split('-');

        while (localeParts.length) {
            data = localeData[localeParts.join('-')];
            if (data) {
                // Return the normalized locale string; e.g., we return "en-US",
                // instead of "en-us".
                return data.locale;
            }

            localeParts.pop();
        }
    }

    var defaultLocale = locales.pop();
    throw new Error(
        'No locale data has been added to IntlMessageFormat for: ' +
        locales.join(', ') + ', or the default locale: ' + defaultLocale
    );
};


}(core$1));

var en$4 = {};

(function (exports) {
exports["default"] = {"locale":"en","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return n10==1&&n100!=11?"one":n10==2&&n100!=12?"two":n10==3&&n100!=13?"few":"other";return n==1&&v0?"one":"other"}};


}(en$4));

/* jslint esnext: true */

(function (exports) {
var src$core$$ = core$1, src$en$$ = en$4;

src$core$$["default"].__addLocaleData(src$en$$["default"]);
src$core$$["default"].defaultLocale = 'en';

exports["default"] = src$core$$["default"];


}(main$1));

// GENERATED FILE
var IntlMessageFormat$1 = core$1["default"];

IntlMessageFormat$1.__addLocaleData({"locale":"af","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"af-NA","parentLocale":"af"});
IntlMessageFormat$1.__addLocaleData({"locale":"agq","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ak","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==0||n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"am","pluralRuleFunction":function (n,ord){if(ord)return "other";return n>=0&&n<=1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ar","pluralRuleFunction":function (n,ord){var s=String(n).split("."),t0=Number(s[0])==n,n100=t0&&s[0].slice(-2);if(ord)return "other";return n==0?"zero":n==1?"one":n==2?"two":n100>=3&&n100<=10?"few":n100>=11&&n100<=99?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-AE","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-BH","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-DJ","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-DZ","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-EG","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-EH","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-ER","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-IL","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-IQ","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-JO","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-KM","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-KW","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-LB","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-LY","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-MA","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-MR","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-OM","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-PS","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-QA","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-SA","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-SD","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-SO","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-SS","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-SY","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-TD","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-TN","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"ar-YE","parentLocale":"ar"});
IntlMessageFormat$1.__addLocaleData({"locale":"as","pluralRuleFunction":function (n,ord){if(ord)return n==1||n==5||n==7||n==8||n==9||n==10?"one":n==2||n==3?"two":n==4?"few":n==6?"many":"other";return n>=0&&n<=1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"asa","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ast","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return "other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"az","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],i10=i.slice(-1),i100=i.slice(-2),i1000=i.slice(-3);if(ord)return i10==1||i10==2||i10==5||i10==7||i10==8||(i100==20||i100==50||i100==70||i100==80)?"one":i10==3||i10==4||(i1000==100||i1000==200||i1000==300||i1000==400||i1000==500||i1000==600||i1000==700||i1000==800||i1000==900)?"few":i==0||i10==6||(i100==40||i100==60||i100==90)?"many":"other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"az-Arab","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"az-Cyrl","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"az-Latn","parentLocale":"az"});
IntlMessageFormat$1.__addLocaleData({"locale":"bas","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"be","pluralRuleFunction":function (n,ord){var s=String(n).split("."),t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return (n10==2||n10==3)&&n100!=12&&n100!=13?"few":"other";return n10==1&&n100!=11?"one":n10>=2&&n10<=4&&(n100<12||n100>14)?"few":t0&&n10==0||n10>=5&&n10<=9||n100>=11&&n100<=14?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"bem","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"bez","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"bg","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"bh","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==0||n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"bm","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"bm-Nkoo","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"bn","pluralRuleFunction":function (n,ord){if(ord)return n==1||n==5||n==7||n==8||n==9||n==10?"one":n==2||n==3?"two":n==4?"few":n==6?"many":"other";return n>=0&&n<=1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"bn-IN","parentLocale":"bn"});
IntlMessageFormat$1.__addLocaleData({"locale":"bo","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"bo-IN","parentLocale":"bo"});
IntlMessageFormat$1.__addLocaleData({"locale":"br","pluralRuleFunction":function (n,ord){var s=String(n).split("."),t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2),n1000000=t0&&s[0].slice(-6);if(ord)return "other";return n10==1&&n100!=11&&n100!=71&&n100!=91?"one":n10==2&&n100!=12&&n100!=72&&n100!=92?"two":(n10==3||n10==4||n10==9)&&(n100<10||n100>19)&&(n100<70||n100>79)&&(n100<90||n100>99)?"few":n!=0&&t0&&n1000000==0?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"brx","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"bs","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],f=s[1]||"",v0=!s[1],i10=i.slice(-1),i100=i.slice(-2),f10=f.slice(-1),f100=f.slice(-2);if(ord)return "other";return v0&&i10==1&&i100!=11||f10==1&&f100!=11?"one":v0&&(i10>=2&&i10<=4)&&(i100<12||i100>14)||f10>=2&&f10<=4&&(f100<12||f100>14)?"few":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"bs-Cyrl","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"bs-Latn","parentLocale":"bs"});
IntlMessageFormat$1.__addLocaleData({"locale":"ca","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return n==1||n==3?"one":n==2?"two":n==4?"few":"other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ca-AD","parentLocale":"ca"});
IntlMessageFormat$1.__addLocaleData({"locale":"ca-ES-VALENCIA","parentLocale":"ca-ES"});
IntlMessageFormat$1.__addLocaleData({"locale":"ca-ES","parentLocale":"ca"});
IntlMessageFormat$1.__addLocaleData({"locale":"ca-FR","parentLocale":"ca"});
IntlMessageFormat$1.__addLocaleData({"locale":"ca-IT","parentLocale":"ca"});
IntlMessageFormat$1.__addLocaleData({"locale":"ce","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"cgg","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"chr","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ckb","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ckb-IR","parentLocale":"ckb"});
IntlMessageFormat$1.__addLocaleData({"locale":"cs","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],v0=!s[1];if(ord)return "other";return n==1&&v0?"one":i>=2&&i<=4&&v0?"few":!v0?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"cu","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"cy","pluralRuleFunction":function (n,ord){if(ord)return n==0||n==7||n==8||n==9?"zero":n==1?"one":n==2?"two":n==3||n==4?"few":n==5||n==6?"many":"other";return n==0?"zero":n==1?"one":n==2?"two":n==3?"few":n==6?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"da","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],t0=Number(s[0])==n;if(ord)return "other";return n==1||!t0&&(i==0||i==1)?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"da-GL","parentLocale":"da"});
IntlMessageFormat$1.__addLocaleData({"locale":"dav","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"de","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return "other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"de-AT","parentLocale":"de"});
IntlMessageFormat$1.__addLocaleData({"locale":"de-BE","parentLocale":"de"});
IntlMessageFormat$1.__addLocaleData({"locale":"de-CH","parentLocale":"de"});
IntlMessageFormat$1.__addLocaleData({"locale":"de-LI","parentLocale":"de"});
IntlMessageFormat$1.__addLocaleData({"locale":"de-LU","parentLocale":"de"});
IntlMessageFormat$1.__addLocaleData({"locale":"dje","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"dsb","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],f=s[1]||"",v0=!s[1],i100=i.slice(-2),f100=f.slice(-2);if(ord)return "other";return v0&&i100==1||f100==1?"one":v0&&i100==2||f100==2?"two":v0&&(i100==3||i100==4)||(f100==3||f100==4)?"few":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"dua","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"dv","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"dyo","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"dz","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ebu","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ee","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ee-TG","parentLocale":"ee"});
IntlMessageFormat$1.__addLocaleData({"locale":"el","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"el-CY","parentLocale":"el"});
IntlMessageFormat$1.__addLocaleData({"locale":"en","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return n10==1&&n100!=11?"one":n10==2&&n100!=12?"two":n10==3&&n100!=13?"few":"other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"en-001","parentLocale":"en"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-150","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-AG","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-AI","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-AS","parentLocale":"en"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-AT","parentLocale":"en-150"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-AU","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-BB","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-BE","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-BI","parentLocale":"en"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-BM","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-BS","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-BW","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-BZ","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-CA","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-CC","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-CH","parentLocale":"en-150"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-CK","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-CM","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-CX","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-CY","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-DE","parentLocale":"en-150"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-DG","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-DK","parentLocale":"en-150"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-DM","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-Dsrt","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"en-ER","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-FI","parentLocale":"en-150"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-FJ","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-FK","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-FM","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-GB","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-GD","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-GG","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-GH","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-GI","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-GM","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-GU","parentLocale":"en"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-GY","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-HK","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-IE","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-IL","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-IM","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-IN","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-IO","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-JE","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-JM","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-KE","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-KI","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-KN","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-KY","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-LC","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-LR","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-LS","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-MG","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-MH","parentLocale":"en"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-MO","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-MP","parentLocale":"en"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-MS","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-MT","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-MU","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-MW","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-MY","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-NA","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-NF","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-NG","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-NL","parentLocale":"en-150"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-NR","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-NU","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-NZ","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-PG","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-PH","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-PK","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-PN","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-PR","parentLocale":"en"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-PW","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-RW","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-SB","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-SC","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-SD","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-SE","parentLocale":"en-150"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-SG","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-SH","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-SI","parentLocale":"en-150"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-SL","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-SS","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-SX","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-SZ","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-Shaw","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"en-TC","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-TK","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-TO","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-TT","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-TV","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-TZ","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-UG","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-UM","parentLocale":"en"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-US","parentLocale":"en"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-VC","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-VG","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-VI","parentLocale":"en"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-VU","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-WS","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-ZA","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-ZM","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"en-ZW","parentLocale":"en-001"});
IntlMessageFormat$1.__addLocaleData({"locale":"eo","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"es","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"es-419","parentLocale":"es"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-AR","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-BO","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-CL","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-CO","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-CR","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-CU","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-DO","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-EA","parentLocale":"es"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-EC","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-GQ","parentLocale":"es"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-GT","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-HN","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-IC","parentLocale":"es"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-MX","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-NI","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-PA","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-PE","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-PH","parentLocale":"es"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-PR","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-PY","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-SV","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-US","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-UY","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"es-VE","parentLocale":"es-419"});
IntlMessageFormat$1.__addLocaleData({"locale":"et","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return "other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"eu","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ewo","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"fa","pluralRuleFunction":function (n,ord){if(ord)return "other";return n>=0&&n<=1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"fa-AF","parentLocale":"fa"});
IntlMessageFormat$1.__addLocaleData({"locale":"ff","pluralRuleFunction":function (n,ord){if(ord)return "other";return n>=0&&n<2?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ff-CM","parentLocale":"ff"});
IntlMessageFormat$1.__addLocaleData({"locale":"ff-GN","parentLocale":"ff"});
IntlMessageFormat$1.__addLocaleData({"locale":"ff-MR","parentLocale":"ff"});
IntlMessageFormat$1.__addLocaleData({"locale":"fi","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return "other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"fil","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],f=s[1]||"",v0=!s[1],i10=i.slice(-1),f10=f.slice(-1);if(ord)return n==1?"one":"other";return v0&&(i==1||i==2||i==3)||v0&&i10!=4&&i10!=6&&i10!=9||!v0&&f10!=4&&f10!=6&&f10!=9?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"fo","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"fo-DK","parentLocale":"fo"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr","pluralRuleFunction":function (n,ord){if(ord)return n==1?"one":"other";return n>=0&&n<2?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-BE","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-BF","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-BI","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-BJ","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-BL","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-CA","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-CD","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-CF","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-CG","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-CH","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-CI","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-CM","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-DJ","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-DZ","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-GA","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-GF","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-GN","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-GP","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-GQ","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-HT","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-KM","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-LU","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-MA","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-MC","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-MF","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-MG","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-ML","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-MQ","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-MR","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-MU","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-NC","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-NE","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-PF","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-PM","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-RE","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-RW","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-SC","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-SN","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-SY","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-TD","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-TG","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-TN","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-VU","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-WF","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fr-YT","parentLocale":"fr"});
IntlMessageFormat$1.__addLocaleData({"locale":"fur","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"fy","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return "other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ga","pluralRuleFunction":function (n,ord){var s=String(n).split("."),t0=Number(s[0])==n;if(ord)return n==1?"one":"other";return n==1?"one":n==2?"two":t0&&n>=3&&n<=6?"few":t0&&n>=7&&n<=10?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"gd","pluralRuleFunction":function (n,ord){var s=String(n).split("."),t0=Number(s[0])==n;if(ord)return "other";return n==1||n==11?"one":n==2||n==12?"two":t0&&n>=3&&n<=10||t0&&n>=13&&n<=19?"few":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"gl","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return "other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"gsw","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"gsw-FR","parentLocale":"gsw"});
IntlMessageFormat$1.__addLocaleData({"locale":"gsw-LI","parentLocale":"gsw"});
IntlMessageFormat$1.__addLocaleData({"locale":"gu","pluralRuleFunction":function (n,ord){if(ord)return n==1?"one":n==2||n==3?"two":n==4?"few":n==6?"many":"other";return n>=0&&n<=1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"guw","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==0||n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"guz","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"gv","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],v0=!s[1],i10=i.slice(-1),i100=i.slice(-2);if(ord)return "other";return v0&&i10==1?"one":v0&&i10==2?"two":v0&&(i100==0||i100==20||i100==40||i100==60||i100==80)?"few":!v0?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ha","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ha-Arab","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ha-GH","parentLocale":"ha"});
IntlMessageFormat$1.__addLocaleData({"locale":"ha-NE","parentLocale":"ha"});
IntlMessageFormat$1.__addLocaleData({"locale":"haw","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"he","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1);if(ord)return "other";return n==1&&v0?"one":i==2&&v0?"two":v0&&(n<0||n>10)&&t0&&n10==0?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"hi","pluralRuleFunction":function (n,ord){if(ord)return n==1?"one":n==2||n==3?"two":n==4?"few":n==6?"many":"other";return n>=0&&n<=1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"hr","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],f=s[1]||"",v0=!s[1],i10=i.slice(-1),i100=i.slice(-2),f10=f.slice(-1),f100=f.slice(-2);if(ord)return "other";return v0&&i10==1&&i100!=11||f10==1&&f100!=11?"one":v0&&(i10>=2&&i10<=4)&&(i100<12||i100>14)||f10>=2&&f10<=4&&(f100<12||f100>14)?"few":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"hr-BA","parentLocale":"hr"});
IntlMessageFormat$1.__addLocaleData({"locale":"hsb","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],f=s[1]||"",v0=!s[1],i100=i.slice(-2),f100=f.slice(-2);if(ord)return "other";return v0&&i100==1||f100==1?"one":v0&&i100==2||f100==2?"two":v0&&(i100==3||i100==4)||(f100==3||f100==4)?"few":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"hu","pluralRuleFunction":function (n,ord){if(ord)return n==1||n==5?"one":"other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"hy","pluralRuleFunction":function (n,ord){if(ord)return n==1?"one":"other";return n>=0&&n<2?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"id","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ig","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ii","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"in","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"is","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],t0=Number(s[0])==n,i10=i.slice(-1),i100=i.slice(-2);if(ord)return "other";return t0&&i10==1&&i100!=11||!t0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"it","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return n==11||n==8||n==80||n==800?"many":"other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"it-CH","parentLocale":"it"});
IntlMessageFormat$1.__addLocaleData({"locale":"it-SM","parentLocale":"it"});
IntlMessageFormat$1.__addLocaleData({"locale":"iu","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":n==2?"two":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"iu-Latn","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"iw","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1);if(ord)return "other";return n==1&&v0?"one":i==2&&v0?"two":v0&&(n<0||n>10)&&t0&&n10==0?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ja","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"jbo","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"jgo","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ji","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return "other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"jmc","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"jv","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"jw","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ka","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],i100=i.slice(-2);if(ord)return i==1?"one":i==0||(i100>=2&&i100<=20||i100==40||i100==60||i100==80)?"many":"other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"kab","pluralRuleFunction":function (n,ord){if(ord)return "other";return n>=0&&n<2?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"kaj","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"kam","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"kcg","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"kde","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"kea","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"khq","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ki","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"kk","pluralRuleFunction":function (n,ord){var s=String(n).split("."),t0=Number(s[0])==n,n10=t0&&s[0].slice(-1);if(ord)return n10==6||n10==9||t0&&n10==0&&n!=0?"many":"other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"kkj","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"kl","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"kln","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"km","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"kn","pluralRuleFunction":function (n,ord){if(ord)return "other";return n>=0&&n<=1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ko","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ko-KP","parentLocale":"ko"});
IntlMessageFormat$1.__addLocaleData({"locale":"kok","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ks","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ksb","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ksf","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ksh","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==0?"zero":n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ku","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"kw","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":n==2?"two":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ky","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"lag","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0];if(ord)return "other";return n==0?"zero":(i==0||i==1)&&n!=0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"lb","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"lg","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"lkt","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ln","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==0||n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ln-AO","parentLocale":"ln"});
IntlMessageFormat$1.__addLocaleData({"locale":"ln-CF","parentLocale":"ln"});
IntlMessageFormat$1.__addLocaleData({"locale":"ln-CG","parentLocale":"ln"});
IntlMessageFormat$1.__addLocaleData({"locale":"lo","pluralRuleFunction":function (n,ord){if(ord)return n==1?"one":"other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"lrc","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"lrc-IQ","parentLocale":"lrc"});
IntlMessageFormat$1.__addLocaleData({"locale":"lt","pluralRuleFunction":function (n,ord){var s=String(n).split("."),f=s[1]||"",t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return "other";return n10==1&&(n100<11||n100>19)?"one":n10>=2&&n10<=9&&(n100<11||n100>19)?"few":f!=0?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"lu","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"luo","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"luy","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"lv","pluralRuleFunction":function (n,ord){var s=String(n).split("."),f=s[1]||"",v=f.length,t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2),f100=f.slice(-2),f10=f.slice(-1);if(ord)return "other";return t0&&n10==0||n100>=11&&n100<=19||v==2&&(f100>=11&&f100<=19)?"zero":n10==1&&n100!=11||v==2&&f10==1&&f100!=11||v!=2&&f10==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"mas","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"mas-TZ","parentLocale":"mas"});
IntlMessageFormat$1.__addLocaleData({"locale":"mer","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"mfe","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"mg","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==0||n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"mgh","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"mgo","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"mk","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],f=s[1]||"",v0=!s[1],i10=i.slice(-1),i100=i.slice(-2),f10=f.slice(-1);if(ord)return i10==1&&i100!=11?"one":i10==2&&i100!=12?"two":(i10==7||i10==8)&&i100!=17&&i100!=18?"many":"other";return v0&&i10==1||f10==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ml","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"mn","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"mn-Mong","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"mo","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1],t0=Number(s[0])==n,n100=t0&&s[0].slice(-2);if(ord)return n==1?"one":"other";return n==1&&v0?"one":!v0||n==0||n!=1&&(n100>=1&&n100<=19)?"few":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"mr","pluralRuleFunction":function (n,ord){if(ord)return n==1?"one":n==2||n==3?"two":n==4?"few":"other";return n>=0&&n<=1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ms","pluralRuleFunction":function (n,ord){if(ord)return n==1?"one":"other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ms-Arab","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ms-BN","parentLocale":"ms"});
IntlMessageFormat$1.__addLocaleData({"locale":"ms-SG","parentLocale":"ms"});
IntlMessageFormat$1.__addLocaleData({"locale":"mt","pluralRuleFunction":function (n,ord){var s=String(n).split("."),t0=Number(s[0])==n,n100=t0&&s[0].slice(-2);if(ord)return "other";return n==1?"one":n==0||n100>=2&&n100<=10?"few":n100>=11&&n100<=19?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"mua","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"my","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"mzn","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"nah","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"naq","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":n==2?"two":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"nb","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"nb-SJ","parentLocale":"nb"});
IntlMessageFormat$1.__addLocaleData({"locale":"nd","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ne","pluralRuleFunction":function (n,ord){var s=String(n).split("."),t0=Number(s[0])==n;if(ord)return t0&&n>=1&&n<=4?"one":"other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ne-IN","parentLocale":"ne"});
IntlMessageFormat$1.__addLocaleData({"locale":"nl","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return "other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"nl-AW","parentLocale":"nl"});
IntlMessageFormat$1.__addLocaleData({"locale":"nl-BE","parentLocale":"nl"});
IntlMessageFormat$1.__addLocaleData({"locale":"nl-BQ","parentLocale":"nl"});
IntlMessageFormat$1.__addLocaleData({"locale":"nl-CW","parentLocale":"nl"});
IntlMessageFormat$1.__addLocaleData({"locale":"nl-SR","parentLocale":"nl"});
IntlMessageFormat$1.__addLocaleData({"locale":"nl-SX","parentLocale":"nl"});
IntlMessageFormat$1.__addLocaleData({"locale":"nmg","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"nn","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"nnh","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"no","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"nqo","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"nr","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"nso","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==0||n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"nus","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ny","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"nyn","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"om","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"om-KE","parentLocale":"om"});
IntlMessageFormat$1.__addLocaleData({"locale":"or","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"os","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"os-RU","parentLocale":"os"});
IntlMessageFormat$1.__addLocaleData({"locale":"pa","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==0||n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"pa-Arab","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"pa-Guru","parentLocale":"pa"});
IntlMessageFormat$1.__addLocaleData({"locale":"pap","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"pl","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],v0=!s[1],i10=i.slice(-1),i100=i.slice(-2);if(ord)return "other";return n==1&&v0?"one":v0&&(i10>=2&&i10<=4)&&(i100<12||i100>14)?"few":v0&&i!=1&&(i10==0||i10==1)||v0&&(i10>=5&&i10<=9)||v0&&(i100>=12&&i100<=14)?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"prg","pluralRuleFunction":function (n,ord){var s=String(n).split("."),f=s[1]||"",v=f.length,t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2),f100=f.slice(-2),f10=f.slice(-1);if(ord)return "other";return t0&&n10==0||n100>=11&&n100<=19||v==2&&(f100>=11&&f100<=19)?"zero":n10==1&&n100!=11||v==2&&f10==1&&f100!=11||v!=2&&f10==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ps","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"pt","pluralRuleFunction":function (n,ord){var s=String(n).split("."),t0=Number(s[0])==n;if(ord)return "other";return t0&&n>=0&&n<=2&&n!=2?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"pt-AO","parentLocale":"pt-PT"});
IntlMessageFormat$1.__addLocaleData({"locale":"pt-PT","parentLocale":"pt","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return "other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"pt-CV","parentLocale":"pt-PT"});
IntlMessageFormat$1.__addLocaleData({"locale":"pt-GW","parentLocale":"pt-PT"});
IntlMessageFormat$1.__addLocaleData({"locale":"pt-MO","parentLocale":"pt-PT"});
IntlMessageFormat$1.__addLocaleData({"locale":"pt-MZ","parentLocale":"pt-PT"});
IntlMessageFormat$1.__addLocaleData({"locale":"pt-ST","parentLocale":"pt-PT"});
IntlMessageFormat$1.__addLocaleData({"locale":"pt-TL","parentLocale":"pt-PT"});
IntlMessageFormat$1.__addLocaleData({"locale":"qu","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"qu-BO","parentLocale":"qu"});
IntlMessageFormat$1.__addLocaleData({"locale":"qu-EC","parentLocale":"qu"});
IntlMessageFormat$1.__addLocaleData({"locale":"rm","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"rn","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ro","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1],t0=Number(s[0])==n,n100=t0&&s[0].slice(-2);if(ord)return n==1?"one":"other";return n==1&&v0?"one":!v0||n==0||n!=1&&(n100>=1&&n100<=19)?"few":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ro-MD","parentLocale":"ro"});
IntlMessageFormat$1.__addLocaleData({"locale":"rof","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ru","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],v0=!s[1],i10=i.slice(-1),i100=i.slice(-2);if(ord)return "other";return v0&&i10==1&&i100!=11?"one":v0&&(i10>=2&&i10<=4)&&(i100<12||i100>14)?"few":v0&&i10==0||v0&&(i10>=5&&i10<=9)||v0&&(i100>=11&&i100<=14)?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ru-BY","parentLocale":"ru"});
IntlMessageFormat$1.__addLocaleData({"locale":"ru-KG","parentLocale":"ru"});
IntlMessageFormat$1.__addLocaleData({"locale":"ru-KZ","parentLocale":"ru"});
IntlMessageFormat$1.__addLocaleData({"locale":"ru-MD","parentLocale":"ru"});
IntlMessageFormat$1.__addLocaleData({"locale":"ru-UA","parentLocale":"ru"});
IntlMessageFormat$1.__addLocaleData({"locale":"rw","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"rwk","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sah","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"saq","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sbp","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sdh","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"se","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":n==2?"two":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"se-FI","parentLocale":"se"});
IntlMessageFormat$1.__addLocaleData({"locale":"se-SE","parentLocale":"se"});
IntlMessageFormat$1.__addLocaleData({"locale":"seh","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ses","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sg","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sh","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],f=s[1]||"",v0=!s[1],i10=i.slice(-1),i100=i.slice(-2),f10=f.slice(-1),f100=f.slice(-2);if(ord)return "other";return v0&&i10==1&&i100!=11||f10==1&&f100!=11?"one":v0&&(i10>=2&&i10<=4)&&(i100<12||i100>14)||f10>=2&&f10<=4&&(f100<12||f100>14)?"few":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"shi","pluralRuleFunction":function (n,ord){var s=String(n).split("."),t0=Number(s[0])==n;if(ord)return "other";return n>=0&&n<=1?"one":t0&&n>=2&&n<=10?"few":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"shi-Latn","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"shi-Tfng","parentLocale":"shi"});
IntlMessageFormat$1.__addLocaleData({"locale":"si","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],f=s[1]||"";if(ord)return "other";return n==0||n==1||i==0&&f==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sk","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],v0=!s[1];if(ord)return "other";return n==1&&v0?"one":i>=2&&i<=4&&v0?"few":!v0?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sl","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],v0=!s[1],i100=i.slice(-2);if(ord)return "other";return v0&&i100==1?"one":v0&&i100==2?"two":v0&&(i100==3||i100==4)||!v0?"few":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sma","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":n==2?"two":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"smi","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":n==2?"two":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"smj","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":n==2?"two":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"smn","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":n==2?"two":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sms","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":n==2?"two":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sn","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"so","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"so-DJ","parentLocale":"so"});
IntlMessageFormat$1.__addLocaleData({"locale":"so-ET","parentLocale":"so"});
IntlMessageFormat$1.__addLocaleData({"locale":"so-KE","parentLocale":"so"});
IntlMessageFormat$1.__addLocaleData({"locale":"sq","pluralRuleFunction":function (n,ord){var s=String(n).split("."),t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return n==1?"one":n10==4&&n100!=14?"many":"other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sq-MK","parentLocale":"sq"});
IntlMessageFormat$1.__addLocaleData({"locale":"sq-XK","parentLocale":"sq"});
IntlMessageFormat$1.__addLocaleData({"locale":"sr","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],f=s[1]||"",v0=!s[1],i10=i.slice(-1),i100=i.slice(-2),f10=f.slice(-1),f100=f.slice(-2);if(ord)return "other";return v0&&i10==1&&i100!=11||f10==1&&f100!=11?"one":v0&&(i10>=2&&i10<=4)&&(i100<12||i100>14)||f10>=2&&f10<=4&&(f100<12||f100>14)?"few":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sr-Cyrl","parentLocale":"sr"});
IntlMessageFormat$1.__addLocaleData({"locale":"sr-Cyrl-BA","parentLocale":"sr-Cyrl"});
IntlMessageFormat$1.__addLocaleData({"locale":"sr-Cyrl-ME","parentLocale":"sr-Cyrl"});
IntlMessageFormat$1.__addLocaleData({"locale":"sr-Cyrl-XK","parentLocale":"sr-Cyrl"});
IntlMessageFormat$1.__addLocaleData({"locale":"sr-Latn","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sr-Latn-BA","parentLocale":"sr-Latn"});
IntlMessageFormat$1.__addLocaleData({"locale":"sr-Latn-ME","parentLocale":"sr-Latn"});
IntlMessageFormat$1.__addLocaleData({"locale":"sr-Latn-XK","parentLocale":"sr-Latn"});
IntlMessageFormat$1.__addLocaleData({"locale":"ss","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ssy","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"st","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sv","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return (n10==1||n10==2)&&n100!=11&&n100!=12?"one":"other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sv-AX","parentLocale":"sv"});
IntlMessageFormat$1.__addLocaleData({"locale":"sv-FI","parentLocale":"sv"});
IntlMessageFormat$1.__addLocaleData({"locale":"sw","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return "other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"sw-CD","parentLocale":"sw"});
IntlMessageFormat$1.__addLocaleData({"locale":"sw-KE","parentLocale":"sw"});
IntlMessageFormat$1.__addLocaleData({"locale":"sw-UG","parentLocale":"sw"});
IntlMessageFormat$1.__addLocaleData({"locale":"syr","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ta","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ta-LK","parentLocale":"ta"});
IntlMessageFormat$1.__addLocaleData({"locale":"ta-MY","parentLocale":"ta"});
IntlMessageFormat$1.__addLocaleData({"locale":"ta-SG","parentLocale":"ta"});
IntlMessageFormat$1.__addLocaleData({"locale":"te","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"teo","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"teo-KE","parentLocale":"teo"});
IntlMessageFormat$1.__addLocaleData({"locale":"th","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ti","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==0||n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ti-ER","parentLocale":"ti"});
IntlMessageFormat$1.__addLocaleData({"locale":"tig","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"tk","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"tl","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],f=s[1]||"",v0=!s[1],i10=i.slice(-1),f10=f.slice(-1);if(ord)return n==1?"one":"other";return v0&&(i==1||i==2||i==3)||v0&&i10!=4&&i10!=6&&i10!=9||!v0&&f10!=4&&f10!=6&&f10!=9?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"tn","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"to","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"tr","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"tr-CY","parentLocale":"tr"});
IntlMessageFormat$1.__addLocaleData({"locale":"ts","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"twq","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"tzm","pluralRuleFunction":function (n,ord){var s=String(n).split("."),t0=Number(s[0])==n;if(ord)return "other";return n==0||n==1||t0&&n>=11&&n<=99?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ug","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"uk","pluralRuleFunction":function (n,ord){var s=String(n).split("."),i=s[0],v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2),i10=i.slice(-1),i100=i.slice(-2);if(ord)return n10==3&&n100!=13?"few":"other";return v0&&i10==1&&i100!=11?"one":v0&&(i10>=2&&i10<=4)&&(i100<12||i100>14)?"few":v0&&i10==0||v0&&(i10>=5&&i10<=9)||v0&&(i100>=11&&i100<=14)?"many":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ur","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return "other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"ur-IN","parentLocale":"ur"});
IntlMessageFormat$1.__addLocaleData({"locale":"uz","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"uz-Arab","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"uz-Cyrl","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"uz-Latn","parentLocale":"uz"});
IntlMessageFormat$1.__addLocaleData({"locale":"vai","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"vai-Latn","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"vai-Vaii","parentLocale":"vai"});
IntlMessageFormat$1.__addLocaleData({"locale":"ve","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"vi","pluralRuleFunction":function (n,ord){if(ord)return n==1?"one":"other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"vo","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"vun","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"wa","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==0||n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"wae","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"wo","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"xh","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"xog","pluralRuleFunction":function (n,ord){if(ord)return "other";return n==1?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"yav","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"yi","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1];if(ord)return "other";return n==1&&v0?"one":"other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"yo","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"yo-BJ","parentLocale":"yo"});
IntlMessageFormat$1.__addLocaleData({"locale":"zgh","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"zh","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"zh-Hans","parentLocale":"zh"});
IntlMessageFormat$1.__addLocaleData({"locale":"zh-Hans-HK","parentLocale":"zh-Hans"});
IntlMessageFormat$1.__addLocaleData({"locale":"zh-Hans-MO","parentLocale":"zh-Hans"});
IntlMessageFormat$1.__addLocaleData({"locale":"zh-Hans-SG","parentLocale":"zh-Hans"});
IntlMessageFormat$1.__addLocaleData({"locale":"zh-Hant","pluralRuleFunction":function (n,ord){if(ord)return "other";return "other"}});
IntlMessageFormat$1.__addLocaleData({"locale":"zh-Hant-HK","parentLocale":"zh-Hant"});
IntlMessageFormat$1.__addLocaleData({"locale":"zh-Hant-MO","parentLocale":"zh-Hant-HK"});
IntlMessageFormat$1.__addLocaleData({"locale":"zu","pluralRuleFunction":function (n,ord){if(ord)return "other";return n>=0&&n<=1?"one":"other"}});

/* jshint node:true */

(function (module, exports) {

var IntlMessageFormat = main$1['default'];

// Add all locale data to `IntlMessageFormat`. This module will be ignored when
// bundling for the browser with Browserify/Webpack.


// Re-export `IntlMessageFormat` as the CommonJS default exports with all the
// locale data registered, and with English set as the default locale. Define
// the `default` prop for use with other compiled ES6 Modules.
exports = module.exports = IntlMessageFormat;
exports['default'] = exports;
}(intlMessageformat, intlMessageformat.exports));

var IntlMessageFormat = intlMessageformat.exports;

var intlRelativeformat = {exports: {}};

var main = {};

var core = {};

var diff = {};

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/
Object.defineProperty(diff, "__esModule", { value: true });
/* jslint esnext: true */
var round = Math.round;
function daysToYears(days) {
    // 400 years have 146097 days (taking into account leap year rules)
    return days * 400 / 146097;
}
// Thanks to date-fns
// https://github.com/date-fns/date-fns
// MIT © Sasha Koss
var MILLISECONDS_IN_MINUTE = 60000;
var MILLISECONDS_IN_DAY = 86400000;
function startOfDay(dirtyDate) {
    var date = new Date(dirtyDate);
    date.setHours(0, 0, 0, 0);
    return date;
}
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
    var startOfDayLeft = startOfDay(dirtyDateLeft);
    var startOfDayRight = startOfDay(dirtyDateRight);
    var timestampLeft = startOfDayLeft.getTime() -
        startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;
    var timestampRight = startOfDayRight.getTime() -
        startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;
    // Round the number of days to the nearest integer
    // because the number of milliseconds in a day is not constant
    // (e.g. it's different in the day of the daylight saving time clock shift)
    return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}
function default_1(from, to) {
    // Convert to ms timestamps.
    from = +from;
    to = +to;
    var millisecond = round(to - from), second = round(millisecond / 1000), minute = round(second / 60), hour = round(minute / 60);
    // We expect a more precision in rounding when dealing with
    // days as it feels wrong when something happended 13 hours ago and
    // is regarded as "yesterday" even if the time was this morning.
    var day = differenceInCalendarDays(to, from);
    var week = round(day / 7);
    var rawYears = daysToYears(day), month = round(rawYears * 12), year = round(rawYears);
    return {
        millisecond: millisecond,
        second: second,
        'second-short': second,
        minute: minute,
        'minute-short': minute,
        hour: hour,
        'hour-short': hour,
        day: day,
        'day-short': day,
        week: week,
        'week-short': week,
        month: month,
        'month-short': month,
        year: year,
        'year-short': year
    };
}
diff.default = default_1;

var es5 = {};

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/
Object.defineProperty(es5, "__esModule", { value: true });
/* jslint esnext: true */
// Purposely using the same implementation as the Intl.js `Intl` polyfill.
// Copyright 2013 Andy Earnshaw, MIT License
var hop = Object.prototype.hasOwnProperty;
var toString$2 = Object.prototype.toString;
var realDefineProp = (function () {
    try {
        return !!Object.defineProperty({}, 'a', {});
    }
    catch (e) {
        return false;
    }
})();
var defineProperty$2 = realDefineProp ? Object.defineProperty :
    function (obj, name, desc) {
        if ('get' in desc && obj.__defineGetter__) {
            obj.__defineGetter__(name, desc.get);
        }
        else if (!hop.call(obj, name) || 'value' in desc) {
            obj[name] = desc.value;
        }
    };
es5.defineProperty = defineProperty$2;
var objCreate = Object.create || function (proto, props) {
    var obj, k;
    function F() { }
    F.prototype = proto;
    obj = new F();
    for (k in props) {
        if (hop.call(props, k)) {
            defineProperty$2(obj, k, props[k]);
        }
    }
    return obj;
};
es5.objCreate = objCreate;
var arrIndexOf = Array.prototype.indexOf || function (search, fromIndex) {
    /*jshint validthis:true */
    var arr = this;
    if (!arr.length) {
        return -1;
    }
    for (var i = fromIndex || 0, max = arr.length; i < max; i++) {
        if (arr[i] === search) {
            return i;
        }
    }
    return -1;
};
es5.arrIndexOf = arrIndexOf;
var isArray$3 = Array.isArray || function (obj) {
    return toString$2.call(obj) === '[object Array]';
};
es5.isArray = isArray$3;
var dateNow = Date.now || function () {
    return new Date().getTime();
};
es5.dateNow = dateNow;

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/
Object.defineProperty(core, "__esModule", { value: true });
/* jslint esnext: true */
var intl_messageformat_1 = intlMessageformat.exports;
var diff_1 = diff;
var es5_1 = es5;
core.default = RelativeFormat;
// -----------------------------------------------------------------------------
var FIELDS = [
    'second', 'second-short',
    'minute', 'minute-short',
    'hour', 'hour-short',
    'day', 'day-short',
    'month', 'month-short',
    'year', 'year-short'
];
var STYLES = ['best fit', 'numeric'];
// -- RelativeFormat -----------------------------------------------------------
function RelativeFormat(locales, options) {
    options = options || {};
    // Make a copy of `locales` if it's an array, so that it doesn't change
    // since it's used lazily.
    if (es5_1.isArray(locales)) {
        locales = locales.concat();
    }
    es5_1.defineProperty(this, '_locale', { value: this._resolveLocale(locales) });
    es5_1.defineProperty(this, '_options', { value: {
            style: this._resolveStyle(options.style),
            units: this._isValidUnits(options.units) && options.units
        } });
    es5_1.defineProperty(this, '_locales', { value: locales });
    es5_1.defineProperty(this, '_fields', { value: this._findFields(this._locale) });
    es5_1.defineProperty(this, '_messages', { value: es5_1.objCreate(null) });
    // "Bind" `format()` method to `this` so it can be passed by reference like
    // the other `Intl` APIs.
    var relativeFormat = this;
    this.format = function format(date, options) {
        return relativeFormat._format(date, options);
    };
}
// Define internal private properties for dealing with locale data.
es5_1.defineProperty(RelativeFormat, '__localeData__', { value: es5_1.objCreate(null) });
es5_1.defineProperty(RelativeFormat, '__addLocaleData', { value: function () {
        for (var i = 0; i < arguments.length; i++) {
            var datum = arguments[i];
            if (!(datum && datum.locale)) {
                throw new Error('Locale data provided to IntlRelativeFormat is missing a ' +
                    '`locale` property value');
            }
            RelativeFormat.__localeData__[datum.locale.toLowerCase()] = datum;
            // Add data to IntlMessageFormat.
            intl_messageformat_1.default.__addLocaleData(datum);
        }
    } });
// Define public `defaultLocale` property which can be set by the developer, or
// it will be set when the first RelativeFormat instance is created by
// leveraging the resolved locale from `Intl`.
es5_1.defineProperty(RelativeFormat, 'defaultLocale', {
    enumerable: true,
    writable: true,
    value: undefined
});
// Define public `thresholds` property which can be set by the developer, and
// defaults to relative time thresholds from moment.js.
es5_1.defineProperty(RelativeFormat, 'thresholds', {
    enumerable: true,
    value: {
        second: 45, 'second-short': 45,
        minute: 45, 'minute-short': 45,
        hour: 22, 'hour-short': 22,
        day: 26, 'day-short': 26,
        month: 11, 'month-short': 11 // months to year
    }
});
RelativeFormat.prototype.resolvedOptions = function () {
    return {
        locale: this._locale,
        style: this._options.style,
        units: this._options.units
    };
};
RelativeFormat.prototype._compileMessage = function (units) {
    // `this._locales` is the original set of locales the user specified to the
    // constructor, while `this._locale` is the resolved root locale.
    var locales = this._locales;
    this._locale;
    var field = this._fields[units];
    var relativeTime = field.relativeTime;
    var future = '';
    var past = '';
    var i;
    for (i in relativeTime.future) {
        if (relativeTime.future.hasOwnProperty(i)) {
            future += ' ' + i + ' {' +
                relativeTime.future[i].replace('{0}', '#') + '}';
        }
    }
    for (i in relativeTime.past) {
        if (relativeTime.past.hasOwnProperty(i)) {
            past += ' ' + i + ' {' +
                relativeTime.past[i].replace('{0}', '#') + '}';
        }
    }
    var message = '{when, select, future {{0, plural, ' + future + '}}' +
        'past {{0, plural, ' + past + '}}}';
    // Create the synthetic IntlMessageFormat instance using the original
    // locales value specified by the user when constructing the the parent
    // IntlRelativeFormat instance.
    return new intl_messageformat_1.default(message, locales);
};
RelativeFormat.prototype._getMessage = function (units) {
    var messages = this._messages;
    // Create a new synthetic message based on the locale data from CLDR.
    if (!messages[units]) {
        messages[units] = this._compileMessage(units);
    }
    return messages[units];
};
RelativeFormat.prototype._getRelativeUnits = function (diff, units) {
    var field = this._fields[units];
    if (field.relative) {
        return field.relative[diff];
    }
};
RelativeFormat.prototype._findFields = function (locale) {
    var localeData = RelativeFormat.__localeData__;
    var data = localeData[locale.toLowerCase()];
    // The locale data is de-duplicated, so we have to traverse the locale's
    // hierarchy until we find `fields` to return.
    while (data) {
        if (data.fields) {
            return data.fields;
        }
        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];
    }
    throw new Error('Locale data added to IntlRelativeFormat is missing `fields` for :' +
        locale);
};
RelativeFormat.prototype._format = function (date, options) {
    var now = options && options.now !== undefined ? options.now : es5_1.dateNow();
    if (date === undefined) {
        date = now;
    }
    // Determine if the `date` and optional `now` values are valid, and throw a
    // similar error to what `Intl.DateTimeFormat#format()` would throw.
    if (!isFinite(now)) {
        throw new RangeError('The `now` option provided to IntlRelativeFormat#format() is not ' +
            'in valid range.');
    }
    if (!isFinite(date)) {
        throw new RangeError('The date value provided to IntlRelativeFormat#format() is not ' +
            'in valid range.');
    }
    var diffReport = diff_1.default(now, date);
    var units = this._options.units || this._selectUnits(diffReport);
    var diffInUnits = diffReport[units];
    if (this._options.style !== 'numeric') {
        var relativeUnits = this._getRelativeUnits(diffInUnits, units);
        if (relativeUnits) {
            return relativeUnits;
        }
    }
    return this._getMessage(units).format({
        '0': Math.abs(diffInUnits),
        when: diffInUnits < 0 ? 'past' : 'future'
    });
};
RelativeFormat.prototype._isValidUnits = function (units) {
    if (!units || es5_1.arrIndexOf.call(FIELDS, units) >= 0) {
        return true;
    }
    if (typeof units === 'string') {
        var suggestion = /s$/.test(units) && units.substr(0, units.length - 1);
        if (suggestion && es5_1.arrIndexOf.call(FIELDS, suggestion) >= 0) {
            throw new Error('"' + units + '" is not a valid IntlRelativeFormat `units` ' +
                'value, did you mean: ' + suggestion);
        }
    }
    throw new Error('"' + units + '" is not a valid IntlRelativeFormat `units` value, it ' +
        'must be one of: "' + FIELDS.join('", "') + '"');
};
RelativeFormat.prototype._resolveLocale = function (locales) {
    if (typeof locales === 'string') {
        locales = [locales];
    }
    // Create a copy of the array so we can push on the default locale.
    locales = (locales || []).concat(RelativeFormat.defaultLocale);
    var localeData = RelativeFormat.__localeData__;
    var i, len, localeParts, data;
    // Using the set of locales + the default locale, we look for the first one
    // which that has been registered. When data does not exist for a locale, we
    // traverse its ancestors to find something that's been registered within
    // its hierarchy of locales. Since we lack the proper `parentLocale` data
    // here, we must take a naive approach to traversal.
    for (i = 0, len = locales.length; i < len; i += 1) {
        localeParts = locales[i].toLowerCase().split('-');
        while (localeParts.length) {
            data = localeData[localeParts.join('-')];
            if (data) {
                // Return the normalized locale string; e.g., we return "en-US",
                // instead of "en-us".
                return data.locale;
            }
            localeParts.pop();
        }
    }
    var defaultLocale = locales.pop();
    throw new Error('No locale data has been added to IntlRelativeFormat for: ' +
        locales.join(', ') + ', or the default locale: ' + defaultLocale);
};
RelativeFormat.prototype._resolveStyle = function (style) {
    // Default to "best fit" style.
    if (!style) {
        return STYLES[0];
    }
    if (es5_1.arrIndexOf.call(STYLES, style) >= 0) {
        return style;
    }
    throw new Error('"' + style + '" is not a valid IntlRelativeFormat `style` value, it ' +
        'must be one of: "' + STYLES.join('", "') + '"');
};
RelativeFormat.prototype._selectUnits = function (diffReport) {
    var i, l, units;
    var fields = FIELDS.filter(function (field) {
        return field.indexOf('-short') < 1;
    });
    for (i = 0, l = fields.length; i < l; i += 1) {
        units = fields[i];
        if (Math.abs(diffReport[units]) < RelativeFormat.thresholds[units]) {
            break;
        }
    }
    return units;
};

var en$3 = {};

Object.defineProperty(en$3, "__esModule", { value: true });
/* @generated */
en$3.default = { "locale": "en", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1], t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2);
        if (ord)
            return (n10 == 1 && n100 != 11) ? 'one'
                : (n10 == 2 && n100 != 12) ? 'two'
                    : (n10 == 3 && n100 != 13) ? 'few'
                        : 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "in {0} year", "other": "in {0} years" }, "past": { "one": "{0} year ago", "other": "{0} years ago" } } }, "year-short": { "displayName": "yr.", "relative": { "0": "this yr.", "1": "next yr.", "-1": "last yr." }, "relativeTime": { "future": { "one": "in {0} yr.", "other": "in {0} yr." }, "past": { "one": "{0} yr. ago", "other": "{0} yr. ago" } } }, "month": { "displayName": "month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "in {0} month", "other": "in {0} months" }, "past": { "one": "{0} month ago", "other": "{0} months ago" } } }, "month-short": { "displayName": "mo.", "relative": { "0": "this mo.", "1": "next mo.", "-1": "last mo." }, "relativeTime": { "future": { "one": "in {0} mo.", "other": "in {0} mo." }, "past": { "one": "{0} mo. ago", "other": "{0} mo. ago" } } }, "week": { "displayName": "week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "in {0} week", "other": "in {0} weeks" }, "past": { "one": "{0} week ago", "other": "{0} weeks ago" } } }, "week-short": { "displayName": "wk.", "relativePeriod": "the week of {0}", "relative": { "0": "this wk.", "1": "next wk.", "-1": "last wk." }, "relativeTime": { "future": { "one": "in {0} wk.", "other": "in {0} wk." }, "past": { "one": "{0} wk. ago", "other": "{0} wk. ago" } } }, "day": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "day-short": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "hour": { "displayName": "hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hour", "other": "in {0} hours" }, "past": { "one": "{0} hour ago", "other": "{0} hours ago" } } }, "hour-short": { "displayName": "hr.", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hr.", "other": "in {0} hr." }, "past": { "one": "{0} hr. ago", "other": "{0} hr. ago" } } }, "minute": { "displayName": "minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} minute", "other": "in {0} minutes" }, "past": { "one": "{0} minute ago", "other": "{0} minutes ago" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} min.", "other": "in {0} min." }, "past": { "one": "{0} min. ago", "other": "{0} min. ago" } } }, "second": { "displayName": "second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} second", "other": "in {0} seconds" }, "past": { "one": "{0} second ago", "other": "{0} seconds ago" } } }, "second-short": { "displayName": "sec.", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} sec.", "other": "in {0} sec." }, "past": { "one": "{0} sec. ago", "other": "{0} sec. ago" } } } } };

/* jslint esnext: true */
Object.defineProperty(main, "__esModule", { value: true });
var core_1$1 = core;
var en_1 = en$3;
core_1$1.default.__addLocaleData(en_1.default);
core_1$1.default.defaultLocale = 'en';
main.default = core_1$1.default;

var locales$1 = {};

Object.defineProperty(locales$1, "__esModule", { value: true });
/* @generated */
var core_1 = core;
core_1.default.__addLocaleData({ "locale": "af", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "jaar", "relative": { "0": "hierdie jaar", "1": "volgende jaar", "-1": "verlede jaar" }, "relativeTime": { "future": { "one": "oor {0} jaar", "other": "oor {0} jaar" }, "past": { "one": "{0} jaar gelede", "other": "{0} jaar gelede" } } }, "year-short": { "displayName": "j.", "relative": { "0": "hierdie jaar", "1": "volgende jaar", "-1": "verlede jaar" }, "relativeTime": { "future": { "one": "oor {0} j.", "other": "oor {0} j." }, "past": { "one": "{0} j. gelede", "other": "{0} j. gelede" } } }, "month": { "displayName": "maand", "relative": { "0": "vandeesmaand", "1": "volgende maand", "-1": "verlede maand" }, "relativeTime": { "future": { "one": "oor {0} maand", "other": "oor {0} maande" }, "past": { "one": "{0} maand gelede", "other": "{0} maande gelede" } } }, "month-short": { "displayName": "md.", "relative": { "0": "vandeesmaand", "1": "volgende maand", "-1": "verlede maand" }, "relativeTime": { "future": { "one": "oor {0} md.", "other": "oor {0} md." }, "past": { "one": "{0} md. gelede", "other": "{0} md. gelede" } } }, "week": { "displayName": "week", "relativePeriod": "die week van {0}", "relative": { "0": "hierdie week", "1": "volgende week", "-1": "verlede week" }, "relativeTime": { "future": { "one": "oor {0} week", "other": "oor {0} weke" }, "past": { "one": "{0} week gelede", "other": "{0} weke gelede" } } }, "week-short": { "displayName": "wk.", "relativePeriod": "die week van {0}", "relative": { "0": "hierdie week", "1": "volgende week", "-1": "verlede week" }, "relativeTime": { "future": { "one": "oor {0} w.", "other": "oor {0} w." }, "past": { "one": "{0} w. gelede", "other": "{0} w. gelede" } } }, "day": { "displayName": "dag", "relative": { "0": "vandag", "1": "môre", "2": "oormôre", "-2": "eergister", "-1": "gister" }, "relativeTime": { "future": { "one": "oor {0} dag", "other": "oor {0} dae" }, "past": { "one": "{0} dag gelede", "other": "{0} dae gelede" } } }, "day-short": { "displayName": "d.", "relative": { "0": "vandag", "1": "môre", "2": "oormôre", "-2": "eergister", "-1": "gister" }, "relativeTime": { "future": { "one": "oor {0} dag", "other": "oor {0} dae" }, "past": { "one": "{0} dag gelede", "other": "{0} dae gelede" } } }, "hour": { "displayName": "uur", "relative": { "0": "hierdie uur" }, "relativeTime": { "future": { "one": "oor {0} uur", "other": "oor {0} uur" }, "past": { "one": "{0} uur gelede", "other": "{0} uur gelede" } } }, "hour-short": { "displayName": "u.", "relative": { "0": "hierdie uur" }, "relativeTime": { "future": { "one": "oor {0} u.", "other": "oor {0} u." }, "past": { "one": "{0} u. gelede", "other": "{0} u. gelede" } } }, "minute": { "displayName": "minuut", "relative": { "0": "hierdie minuut" }, "relativeTime": { "future": { "one": "oor {0} minuut", "other": "oor {0} minute" }, "past": { "one": "{0} minuut gelede", "other": "{0} minute gelede" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "hierdie minuut" }, "relativeTime": { "future": { "one": "oor {0} min.", "other": "oor {0} min." }, "past": { "one": "{0} min. gelede", "other": "{0} min. gelede" } } }, "second": { "displayName": "sekonde", "relative": { "0": "nou" }, "relativeTime": { "future": { "one": "oor {0} sekonde", "other": "oor {0} sekondes" }, "past": { "one": "{0} sekonde gelede", "other": "{0} sekondes gelede" } } }, "second-short": { "displayName": "s.", "relative": { "0": "nou" }, "relativeTime": { "future": { "one": "oor {0} s.", "other": "oor {0} s." }, "past": { "one": "{0} s. gelede", "other": "{0} s. gelede" } } } } }, { "locale": "af-NA", "parentLocale": "af" }, { "locale": "agq", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "kɨnûm", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "kɨnûm", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "ndzɔŋ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "ndzɔŋ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "ewɨn", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "ewɨn", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "utsuʔ", "relative": { "0": "nɛ", "1": "tsʉtsʉ", "-1": "ā zūɛɛ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "utsuʔ", "relative": { "0": "nɛ", "1": "tsʉtsʉ", "-1": "ā zūɛɛ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "tàm", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "tàm", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "menè", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "menè", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "sɛkɔ̀n", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "sɛkɔ̀n", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ak", "pluralRuleFunction": function (n) {
        return ((n == 0
            || n == 1)) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Afe", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Afe", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Bosome", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Bosome", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Dapɛn", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Dapɛn", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Da", "relative": { "0": "Ndɛ", "1": "Ɔkyena", "-1": "Ndeda" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Da", "relative": { "0": "Ndɛ", "1": "Ɔkyena", "-1": "Ndeda" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Dɔnhwer", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Dɔnhwer", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Sema", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Sema", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sɛkɛnd", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sɛkɛnd", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "am", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n >= 0 && n <= 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ዓመት", "relative": { "0": "በዚህ ዓመት", "1": "የሚቀጥለው ዓመት", "-1": "ያለፈው ዓመት" }, "relativeTime": { "future": { "one": "በ{0} ዓመታት ውስጥ", "other": "በ{0} ዓመታት ውስጥ" }, "past": { "one": "ከ{0} ዓመት በፊት", "other": "ከ{0} ዓመታት በፊት" } } }, "year-short": { "displayName": "ዓመት", "relative": { "0": "በዚህ ዓመት", "1": "የሚቀጥለው ዓመት", "-1": "ያለፈው ዓመት" }, "relativeTime": { "future": { "one": "በ{0} ዓመታት ውስጥ", "other": "በ{0} ዓመታት ውስጥ" }, "past": { "one": "ከ{0} ዓመታት በፊት", "other": "ከ{0} ዓመታት በፊት" } } }, "month": { "displayName": "ወር", "relative": { "0": "በዚህ ወር", "1": "የሚቀጥለው ወር", "-1": "ያለፈው ወር" }, "relativeTime": { "future": { "one": "በ{0} ወር ውስጥ", "other": "በ{0} ወራት ውስጥ" }, "past": { "one": "ከ{0} ወር በፊት", "other": "ከ{0} ወራት በፊት" } } }, "month-short": { "displayName": "ወር", "relative": { "0": "በዚህ ወር", "1": "የሚቀጥለው ወር", "-1": "ያለፈው ወር" }, "relativeTime": { "future": { "one": "በ{0} ወራት ውስጥ", "other": "በ{0} ወራት ውስጥ" }, "past": { "one": "ከ{0} ወራት በፊት", "other": "ከ{0} ወራት በፊት" } } }, "week": { "displayName": "ሳምንት", "relativePeriod": "{0} ሳምንት", "relative": { "0": "በዚህ ሳምንት", "1": "የሚቀጥለው ሳምንት", "-1": "ያለፈው ሳምንት" }, "relativeTime": { "future": { "one": "በ{0} ሳምንት ውስጥ", "other": "በ{0} ሳምንታት ውስጥ" }, "past": { "one": "ከ{0} ሳምንት በፊት", "other": "ከ{0} ሳምንታት በፊት" } } }, "week-short": { "displayName": "ሳምንት", "relativePeriod": "{0} ሳምንት", "relative": { "0": "በዚህ ሣምንት", "1": "የሚቀጥለው ሳምንት", "-1": "ባለፈው ሳምንት" }, "relativeTime": { "future": { "one": "በ{0} ሳምንታት ውስጥ", "other": "በ{0} ሳምንታት ውስጥ" }, "past": { "one": "ከ{0} ሳምንታት በፊት", "other": "ከ{0} ሳምንታት በፊት" } } }, "day": { "displayName": "ቀን", "relative": { "0": "ዛሬ", "1": "ነገ", "2": "ከነገ ወዲያ", "-2": "ከትናንት ወዲያ", "-1": "ትናንት" }, "relativeTime": { "future": { "one": "በ{0} ቀን ውስጥ", "other": "በ{0} ቀናት ውስጥ" }, "past": { "one": "ከ{0} ቀን በፊት", "other": "ከ{0} ቀናት በፊት" } } }, "day-short": { "displayName": "ቀን", "relative": { "0": "ዛሬ", "1": "ነገ", "2": "ከነገ ወዲያ", "-2": "ከትናንት ወዲያ", "-1": "ትላንትና" }, "relativeTime": { "future": { "one": "በ{0} ቀን ውስጥ", "other": "በ{0} ቀኖች ውስጥ" }, "past": { "one": "ከ {0} ቀን በፊት", "other": "ከ{0} ቀኖች በፊት" } } }, "hour": { "displayName": "ሰዓት", "relative": { "0": "ይህ ሰዓት" }, "relativeTime": { "future": { "one": "በ{0} ሰዓት ውስጥ", "other": "በ{0} ሰዓቶች ውስጥ" }, "past": { "one": "ከ{0} ሰዓት በፊት", "other": "ከ{0} ሰዓቶች በፊት" } } }, "hour-short": { "displayName": "ሰዓት", "relative": { "0": "ይህ ሰዓት" }, "relativeTime": { "future": { "one": "በ{0} ሰዓት ውስጥ", "other": "በ{0} ሰዓቶች ውስጥ" }, "past": { "one": "ከ{0} ሰዓት በፊት", "other": "ከ{0} ሰዓቶች በፊት" } } }, "minute": { "displayName": "ደቂቃ", "relative": { "0": "ይህ ደቂቃ" }, "relativeTime": { "future": { "one": "በ{0} ደቂቃ ውስጥ", "other": "በ{0} ደቂቃዎች ውስጥ" }, "past": { "one": "ከ{0} ደቂቃ በፊት", "other": "ከ{0} ደቂቃዎች በፊት" } } }, "minute-short": { "displayName": "ደቂቃ", "relative": { "0": "ይህ ደቂቃ" }, "relativeTime": { "future": { "one": "በ{0} ደቂቃ ውስጥ", "other": "በ{0} ደቂቃዎች ውስጥ" }, "past": { "one": "ከ{0} ደቂቃ በፊት", "other": "ከ{0} ደቂቃዎች በፊት" } } }, "second": { "displayName": "ሰከንድ", "relative": { "0": "አሁን" }, "relativeTime": { "future": { "one": "በ{0} ሰከንድ ውስጥ", "other": "በ{0} ሰከንዶች ውስጥ" }, "past": { "one": "ከ{0} ሰከንድ በፊት", "other": "ከ{0} ሰከንዶች በፊት" } } }, "second-short": { "displayName": "ሰከንድ", "relative": { "0": "አሁን" }, "relativeTime": { "future": { "one": "በ{0} ሰከንድ ውስጥ", "other": "በ{0} ሰከንዶች ውስጥ" }, "past": { "one": "ከ{0} ሰከንድ በፊት", "other": "ከ{0} ሰከንዶች በፊት" } } } } }, { "locale": "ar", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n, n100 = t0 && s[0].slice(-2);
        if (ord)
            return 'other';
        return (n == 0) ? 'zero'
            : (n == 1) ? 'one'
                : (n == 2) ? 'two'
                    : ((n100 >= 3 && n100 <= 10)) ? 'few'
                        : ((n100 >= 11 && n100 <= 99)) ? 'many'
                            : 'other';
    }, "fields": { "year": { "displayName": "السنة", "relative": { "0": "السنة الحالية", "1": "السنة القادمة", "-1": "السنة الماضية" }, "relativeTime": { "future": { "zero": "خلال {0} سنة", "one": "خلال سنة واحدة", "two": "خلال سنتين", "few": "خلال {0} سنوات", "many": "خلال {0} سنة", "other": "خلال {0} سنة" }, "past": { "zero": "قبل {0} سنة", "one": "قبل سنة واحدة", "two": "قبل سنتين", "few": "قبل {0} سنوات", "many": "قبل {0} سنة", "other": "قبل {0} سنة" } } }, "year-short": { "displayName": "السنة", "relative": { "0": "السنة الحالية", "1": "السنة القادمة", "-1": "السنة الماضية" }, "relativeTime": { "future": { "zero": "خلال {0} سنة", "one": "خلال سنة واحدة", "two": "خلال سنتين", "few": "خلال {0} سنوات", "many": "خلال {0} سنة", "other": "خلال {0} سنة" }, "past": { "zero": "قبل {0} سنة", "one": "قبل سنة واحدة", "two": "قبل سنتين", "few": "قبل {0} سنوات", "many": "قبل {0} سنة", "other": "قبل {0} سنة" } } }, "month": { "displayName": "الشهر", "relative": { "0": "هذا الشهر", "1": "الشهر القادم", "-1": "الشهر الماضي" }, "relativeTime": { "future": { "zero": "خلال {0} شهر", "one": "خلال شهر واحد", "two": "خلال شهرين", "few": "خلال {0} أشهر", "many": "خلال {0} شهرًا", "other": "خلال {0} شهر" }, "past": { "zero": "قبل {0} شهر", "one": "قبل شهر واحد", "two": "قبل شهرين", "few": "قبل {0} أشهر", "many": "قبل {0} شهرًا", "other": "قبل {0} شهر" } } }, "month-short": { "displayName": "الشهر", "relative": { "0": "هذا الشهر", "1": "الشهر القادم", "-1": "الشهر الماضي" }, "relativeTime": { "future": { "zero": "خلال {0} شهر", "one": "خلال شهر واحد", "two": "خلال شهرين", "few": "خلال {0} أشهر", "many": "خلال {0} شهرًا", "other": "خلال {0} شهر" }, "past": { "zero": "قبل {0} شهر", "one": "قبل شهر واحد", "two": "قبل شهرين", "few": "خلال {0} أشهر", "many": "قبل {0} شهرًا", "other": "قبل {0} شهر" } } }, "week": { "displayName": "الأسبوع", "relativePeriod": "أسبوع {0}", "relative": { "0": "هذا الأسبوع", "1": "الأسبوع القادم", "-1": "الأسبوع الماضي" }, "relativeTime": { "future": { "zero": "خلال {0} أسبوع", "one": "خلال أسبوع واحد", "two": "خلال أسبوعين", "few": "خلال {0} أسابيع", "many": "خلال {0} أسبوعًا", "other": "خلال {0} أسبوع" }, "past": { "zero": "قبل {0} أسبوع", "one": "قبل أسبوع واحد", "two": "قبل أسبوعين", "few": "قبل {0} أسابيع", "many": "قبل {0} أسبوعًا", "other": "قبل {0} أسبوع" } } }, "week-short": { "displayName": "الأسبوع", "relativePeriod": "أسبوع {0}", "relative": { "0": "هذا الأسبوع", "1": "الأسبوع القادم", "-1": "الأسبوع الماضي" }, "relativeTime": { "future": { "zero": "خلال {0} أسبوع", "one": "خلال أسبوع واحد", "two": "خلال {0} أسبوعين", "few": "خلال {0} أسابيع", "many": "خلال {0} أسبوعًا", "other": "خلال {0} أسبوع" }, "past": { "zero": "قبل {0} أسبوع", "one": "قبل أسبوع واحد", "two": "قبل أسبوعين", "few": "قبل {0} أسابيع", "many": "قبل {0} أسبوعًا", "other": "قبل {0} أسبوع" } } }, "day": { "displayName": "يوم", "relative": { "0": "اليوم", "1": "غدًا", "2": "بعد الغد", "-2": "أول أمس", "-1": "أمس" }, "relativeTime": { "future": { "zero": "خلال {0} يوم", "one": "خلال يوم واحد", "two": "خلال يومين", "few": "خلال {0} أيام", "many": "خلال {0} يومًا", "other": "خلال {0} يوم" }, "past": { "zero": "قبل {0} يوم", "one": "قبل يوم واحد", "two": "قبل يومين", "few": "قبل {0} أيام", "many": "قبل {0} يومًا", "other": "قبل {0} يوم" } } }, "day-short": { "displayName": "يوم", "relative": { "0": "اليوم", "1": "غدًا", "2": "بعد الغد", "-2": "أول أمس", "-1": "أمس" }, "relativeTime": { "future": { "zero": "خلال {0} يوم", "one": "خلال يوم واحد", "two": "خلال يومين", "few": "خلال {0} أيام", "many": "خلال {0} يومًا", "other": "خلال {0} يوم" }, "past": { "zero": "قبل {0} يوم", "one": "قبل يوم واحد", "two": "قبل يومين", "few": "قبل {0} أيام", "many": "قبل {0} يومًا", "other": "قبل {0} يوم" } } }, "hour": { "displayName": "الساعات", "relative": { "0": "الساعة الحالية" }, "relativeTime": { "future": { "zero": "خلال {0} ساعة", "one": "خلال ساعة واحدة", "two": "خلال ساعتين", "few": "خلال {0} ساعات", "many": "خلال {0} ساعة", "other": "خلال {0} ساعة" }, "past": { "zero": "قبل {0} ساعة", "one": "قبل ساعة واحدة", "two": "قبل ساعتين", "few": "قبل {0} ساعات", "many": "قبل {0} ساعة", "other": "قبل {0} ساعة" } } }, "hour-short": { "displayName": "الساعات", "relative": { "0": "الساعة الحالية" }, "relativeTime": { "future": { "zero": "خلال {0} ساعة", "one": "خلال ساعة واحدة", "two": "خلال ساعتين", "few": "خلال {0} ساعات", "many": "خلال {0} ساعة", "other": "خلال {0} ساعة" }, "past": { "zero": "قبل {0} ساعة", "one": "قبل ساعة واحدة", "two": "قبل ساعتين", "few": "قبل {0} ساعات", "many": "قبل {0} ساعة", "other": "قبل {0} ساعة" } } }, "minute": { "displayName": "الدقائق", "relative": { "0": "هذه الدقيقة" }, "relativeTime": { "future": { "zero": "خلال {0} دقيقة", "one": "خلال دقيقة واحدة", "two": "خلال دقيقتين", "few": "خلال {0} دقائق", "many": "خلال {0} دقيقة", "other": "خلال {0} دقيقة" }, "past": { "zero": "قبل {0} دقيقة", "one": "قبل دقيقة واحدة", "two": "قبل دقيقتين", "few": "قبل {0} دقائق", "many": "قبل {0} دقيقة", "other": "قبل {0} دقيقة" } } }, "minute-short": { "displayName": "الدقائق", "relative": { "0": "هذه الدقيقة" }, "relativeTime": { "future": { "zero": "خلال {0} دقيقة", "one": "خلال دقيقة واحدة", "two": "خلال دقيقتين", "few": "خلال {0} دقائق", "many": "خلال {0} دقيقة", "other": "خلال {0} دقيقة" }, "past": { "zero": "قبل {0} دقيقة", "one": "قبل دقيقة واحدة", "two": "قبل دقيقتين", "few": "قبل {0} دقائق", "many": "قبل {0} دقيقة", "other": "قبل {0} دقيقة" } } }, "second": { "displayName": "الثواني", "relative": { "0": "الآن" }, "relativeTime": { "future": { "zero": "خلال {0} ثانية", "one": "خلال ثانية واحدة", "two": "خلال ثانيتين", "few": "خلال {0} ثوانٍ", "many": "خلال {0} ثانية", "other": "خلال {0} ثانية" }, "past": { "zero": "قبل {0} ثانية", "one": "قبل ثانية واحدة", "two": "قبل ثانيتين", "few": "قبل {0} ثوانِ", "many": "قبل {0} ثانية", "other": "قبل {0} ثانية" } } }, "second-short": { "displayName": "الثواني", "relative": { "0": "الآن" }, "relativeTime": { "future": { "zero": "خلال {0} ثانية", "one": "خلال ثانية واحدة", "two": "خلال ثانيتين", "few": "خلال {0} ثوانٍ", "many": "خلال {0} ثانية", "other": "خلال {0} ثانية" }, "past": { "zero": "قبل {0} ثانية", "one": "قبل ثانية واحدة", "two": "قبل ثانيتين", "few": "قبل {0} ثوانٍ", "many": "قبل {0} ثانية", "other": "قبل {0} ثانية" } } } } }, { "locale": "ar-AE", "parentLocale": "ar", "fields": { "year": { "displayName": "السنة", "relative": { "0": "هذه السنة", "1": "السنة التالية", "-1": "السنة الماضية" }, "relativeTime": { "future": { "zero": "خلال {0} سنة", "one": "خلال سنة واحدة", "two": "خلال سنتين", "few": "خلال {0} سنوات", "many": "خلال {0} سنة", "other": "خلال {0} سنة" }, "past": { "zero": "قبل {0} سنة", "one": "قبل سنة واحدة", "two": "قبل سنتين", "few": "قبل {0} سنوات", "many": "قبل {0} سنة", "other": "قبل {0} سنة" } } }, "year-short": { "displayName": "السنة", "relative": { "0": "هذه السنة", "1": "السنة التالية", "-1": "السنة الماضية" }, "relativeTime": { "future": { "zero": "خلال {0} سنة", "one": "خلال سنة واحدة", "two": "خلال سنتين", "few": "خلال {0} سنوات", "many": "خلال {0} سنة", "other": "خلال {0} سنة" }, "past": { "zero": "قبل {0} سنة", "one": "قبل سنة واحدة", "two": "قبل سنتين", "few": "قبل {0} سنوات", "many": "قبل {0} سنة", "other": "قبل {0} سنة" } } }, "month": { "displayName": "الشهر", "relative": { "0": "هذا الشهر", "1": "الشهر القادم", "-1": "الشهر الماضي" }, "relativeTime": { "future": { "zero": "خلال {0} شهر", "one": "خلال شهر واحد", "two": "خلال شهرين", "few": "خلال {0} أشهر", "many": "خلال {0} شهرًا", "other": "خلال {0} شهر" }, "past": { "zero": "قبل {0} شهر", "one": "قبل شهر واحد", "two": "قبل شهرين", "few": "قبل {0} أشهر", "many": "قبل {0} شهرًا", "other": "قبل {0} شهر" } } }, "month-short": { "displayName": "الشهر", "relative": { "0": "هذا الشهر", "1": "الشهر القادم", "-1": "الشهر الماضي" }, "relativeTime": { "future": { "zero": "خلال {0} شهر", "one": "خلال شهر واحد", "two": "خلال شهرين", "few": "خلال {0} أشهر", "many": "خلال {0} شهرًا", "other": "خلال {0} شهر" }, "past": { "zero": "قبل {0} شهر", "one": "قبل شهر واحد", "two": "قبل شهرين", "few": "خلال {0} أشهر", "many": "قبل {0} شهرًا", "other": "قبل {0} شهر" } } }, "week": { "displayName": "الأسبوع", "relativePeriod": "أسبوع {0}", "relative": { "0": "هذا الأسبوع", "1": "الأسبوع القادم", "-1": "الأسبوع الماضي" }, "relativeTime": { "future": { "zero": "خلال {0} أسبوع", "one": "خلال أسبوع واحد", "two": "خلال أسبوعين", "few": "خلال {0} أسابيع", "many": "خلال {0} أسبوعًا", "other": "خلال {0} أسبوع" }, "past": { "zero": "قبل {0} أسبوع", "one": "قبل أسبوع واحد", "two": "قبل أسبوعين", "few": "قبل {0} أسابيع", "many": "قبل {0} أسبوعًا", "other": "قبل {0} أسبوع" } } }, "week-short": { "displayName": "الأسبوع", "relativePeriod": "أسبوع {0}", "relative": { "0": "هذا الأسبوع", "1": "الأسبوع القادم", "-1": "الأسبوع الماضي" }, "relativeTime": { "future": { "zero": "خلال {0} أسبوع", "one": "خلال أسبوع واحد", "two": "خلال {0} أسبوعين", "few": "خلال {0} أسابيع", "many": "خلال {0} أسبوعًا", "other": "خلال {0} أسبوع" }, "past": { "zero": "قبل {0} أسبوع", "one": "قبل أسبوع واحد", "two": "قبل أسبوعين", "few": "قبل {0} أسابيع", "many": "قبل {0} أسبوعًا", "other": "قبل {0} أسبوع" } } }, "day": { "displayName": "يوم", "relative": { "0": "اليوم", "1": "غدًا", "2": "بعد الغد", "-2": "أول أمس", "-1": "أمس" }, "relativeTime": { "future": { "zero": "خلال {0} يوم", "one": "خلال يوم واحد", "two": "خلال يومين", "few": "خلال {0} أيام", "many": "خلال {0} يومًا", "other": "خلال {0} يوم" }, "past": { "zero": "قبل {0} يوم", "one": "قبل يوم واحد", "two": "قبل يومين", "few": "قبل {0} أيام", "many": "قبل {0} يومًا", "other": "قبل {0} يوم" } } }, "day-short": { "displayName": "يوم", "relative": { "0": "اليوم", "1": "غدًا", "2": "بعد الغد", "-2": "أول أمس", "-1": "أمس" }, "relativeTime": { "future": { "zero": "خلال {0} يوم", "one": "خلال يوم واحد", "two": "خلال يومين", "few": "خلال {0} أيام", "many": "خلال {0} يومًا", "other": "خلال {0} يوم" }, "past": { "zero": "قبل {0} يوم", "one": "قبل يوم واحد", "two": "قبل يومين", "few": "قبل {0} أيام", "many": "قبل {0} يومًا", "other": "قبل {0} يوم" } } }, "hour": { "displayName": "الساعات", "relative": { "0": "الساعة الحالية" }, "relativeTime": { "future": { "zero": "خلال {0} ساعة", "one": "خلال ساعة واحدة", "two": "خلال ساعتين", "few": "خلال {0} ساعات", "many": "خلال {0} ساعة", "other": "خلال {0} ساعة" }, "past": { "zero": "قبل {0} ساعة", "one": "قبل ساعة واحدة", "two": "قبل ساعتين", "few": "قبل {0} ساعات", "many": "قبل {0} ساعة", "other": "قبل {0} ساعة" } } }, "hour-short": { "displayName": "الساعات", "relative": { "0": "الساعة الحالية" }, "relativeTime": { "future": { "zero": "خلال {0} ساعة", "one": "خلال ساعة واحدة", "two": "خلال ساعتين", "few": "خلال {0} ساعات", "many": "خلال {0} ساعة", "other": "خلال {0} ساعة" }, "past": { "zero": "قبل {0} ساعة", "one": "قبل ساعة واحدة", "two": "قبل ساعتين", "few": "قبل {0} ساعات", "many": "قبل {0} ساعة", "other": "قبل {0} ساعة" } } }, "minute": { "displayName": "الدقائق", "relative": { "0": "هذه الدقيقة" }, "relativeTime": { "future": { "zero": "خلال {0} دقيقة", "one": "خلال دقيقة واحدة", "two": "خلال دقيقتين", "few": "خلال {0} دقائق", "many": "خلال {0} دقيقة", "other": "خلال {0} دقيقة" }, "past": { "zero": "قبل {0} دقيقة", "one": "قبل دقيقة واحدة", "two": "قبل دقيقتين", "few": "قبل {0} دقائق", "many": "قبل {0} دقيقة", "other": "قبل {0} دقيقة" } } }, "minute-short": { "displayName": "الدقائق", "relative": { "0": "هذه الدقيقة" }, "relativeTime": { "future": { "zero": "خلال {0} دقيقة", "one": "خلال دقيقة واحدة", "two": "خلال دقيقتين", "few": "خلال {0} دقائق", "many": "خلال {0} دقيقة", "other": "خلال {0} دقيقة" }, "past": { "zero": "قبل {0} دقيقة", "one": "قبل دقيقة واحدة", "two": "قبل دقيقتين", "few": "قبل {0} دقائق", "many": "قبل {0} دقيقة", "other": "قبل {0} دقيقة" } } }, "second": { "displayName": "الثواني", "relative": { "0": "الآن" }, "relativeTime": { "future": { "zero": "خلال {0} ثانية", "one": "خلال ثانية واحدة", "two": "خلال ثانيتين", "few": "خلال {0} ثوانٍ", "many": "خلال {0} ثانية", "other": "خلال {0} ثانية" }, "past": { "zero": "قبل {0} ثانية", "one": "قبل ثانية واحدة", "two": "قبل ثانيتين", "few": "قبل {0} ثوانِ", "many": "قبل {0} ثانية", "other": "قبل {0} ثانية" } } }, "second-short": { "displayName": "الثواني", "relative": { "0": "الآن" }, "relativeTime": { "future": { "zero": "خلال {0} ثانية", "one": "خلال ثانية واحدة", "two": "خلال ثانيتين", "few": "خلال {0} ثوانٍ", "many": "خلال {0} ثانية", "other": "خلال {0} ثانية" }, "past": { "zero": "قبل {0} ثانية", "one": "قبل ثانية واحدة", "two": "قبل ثانيتين", "few": "قبل {0} ثوانٍ", "many": "قبل {0} ثانية", "other": "قبل {0} ثانية" } } } } }, { "locale": "ar-BH", "parentLocale": "ar" }, { "locale": "ar-DJ", "parentLocale": "ar" }, { "locale": "ar-DZ", "parentLocale": "ar" }, { "locale": "ar-EG", "parentLocale": "ar" }, { "locale": "ar-EH", "parentLocale": "ar" }, { "locale": "ar-ER", "parentLocale": "ar" }, { "locale": "ar-IL", "parentLocale": "ar" }, { "locale": "ar-IQ", "parentLocale": "ar" }, { "locale": "ar-JO", "parentLocale": "ar" }, { "locale": "ar-KM", "parentLocale": "ar" }, { "locale": "ar-KW", "parentLocale": "ar" }, { "locale": "ar-LB", "parentLocale": "ar" }, { "locale": "ar-LY", "parentLocale": "ar" }, { "locale": "ar-MA", "parentLocale": "ar" }, { "locale": "ar-MR", "parentLocale": "ar" }, { "locale": "ar-OM", "parentLocale": "ar" }, { "locale": "ar-PS", "parentLocale": "ar" }, { "locale": "ar-QA", "parentLocale": "ar" }, { "locale": "ar-SA", "parentLocale": "ar" }, { "locale": "ar-SD", "parentLocale": "ar" }, { "locale": "ar-SO", "parentLocale": "ar" }, { "locale": "ar-SS", "parentLocale": "ar" }, { "locale": "ar-SY", "parentLocale": "ar" }, { "locale": "ar-TD", "parentLocale": "ar" }, { "locale": "ar-TN", "parentLocale": "ar" }, { "locale": "ar-YE", "parentLocale": "ar" }, { "locale": "ars", "pluralRuleFunction": function (n) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n, n100 = t0 && s[0].slice(-2);
        return (n == 0) ? 'zero'
            : (n == 1) ? 'one'
                : (n == 2) ? 'two'
                    : ((n100 >= 3 && n100 <= 10)) ? 'few'
                        : ((n100 >= 11 && n100 <= 99)) ? 'many'
                            : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "as", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return ((n == 1 || n == 5 || n == 7 || n == 8 || n == 9
                || n == 10)) ? 'one'
                : ((n == 2
                    || n == 3)) ? 'two'
                    : (n == 4) ? 'few'
                        : (n == 6) ? 'many'
                            : 'other';
        return (n >= 0 && n <= 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "বছৰ", "relative": { "0": "এই বছৰ", "1": "অহা বছৰ", "-1": "যোৱা বছৰ" }, "relativeTime": { "future": { "one": "{0} বছৰত", "other": "{0} বছৰত" }, "past": { "one": "{0} বছৰৰ পূৰ্বে", "other": "{0} বছৰৰ পূৰ্বে" } } }, "year-short": { "displayName": "বছৰ", "relative": { "0": "এই বছৰ", "1": "অহা বছৰ", "-1": "যোৱা বছৰ" }, "relativeTime": { "future": { "one": "{0} বছৰত", "other": "{0} বছৰত" }, "past": { "one": "{0} বছৰৰ পূৰ্বে", "other": "{0} বছৰৰ পূৰ্বে" } } }, "month": { "displayName": "মাহ", "relative": { "0": "এই মাহ", "1": "অহা মাহ", "-1": "যোৱা মাহ" }, "relativeTime": { "future": { "one": "{0} মাহত", "other": "{0} মাহত" }, "past": { "one": "{0} মাহ পূৰ্বে", "other": "{0} মাহ পূৰ্বে" } } }, "month-short": { "displayName": "মাহ", "relative": { "0": "এই মাহ", "1": "অহা মাহ", "-1": "যোৱা মাহ" }, "relativeTime": { "future": { "one": "{0} মাহত", "other": "{0} মাহত" }, "past": { "one": "{0} মাহ পূৰ্বে", "other": "{0} মাহ পূৰ্বে" } } }, "week": { "displayName": "সপ্তাহ", "relativePeriod": "{0}ৰ সপ্তাহ", "relative": { "0": "এই সপ্তাহ", "1": "অহা সপ্তাহ", "-1": "যোৱা সপ্তাহ" }, "relativeTime": { "future": { "one": "{0} সপ্তাহত", "other": "{0} সপ্তাহত" }, "past": { "one": "{0} সপ্তাহ পূৰ্বে", "other": "{0} সপ্তাহ পূৰ্বে" } } }, "week-short": { "displayName": "সপ্তাহ", "relativePeriod": "{0}ৰ সপ্তাহ", "relative": { "0": "এই সপ্তাহ", "1": "অহা সপ্তাহ", "-1": "যোৱা সপ্তাহ" }, "relativeTime": { "future": { "one": "{0} সপ্তাহত", "other": "{0} সপ্তাহত" }, "past": { "one": "{0} সপ্তাহ পূৰ্বে", "other": "{0} সপ্তাহ পূৰ্বে" } } }, "day": { "displayName": "দিন", "relative": { "0": "আজি", "1": "কাইলৈ", "2": "পৰহিলৈ", "-2": "পৰহি", "-1": "কালি" }, "relativeTime": { "future": { "one": "{0} দিনত", "other": "{0} দিনত" }, "past": { "one": "{0} দিন পূৰ্বে", "other": "{0} দিন পূৰ্বে" } } }, "day-short": { "displayName": "দিন", "relative": { "0": "আজি", "1": "কাইলৈ", "2": "পৰহিলৈ", "-2": "পৰহি", "-1": "কালি" }, "relativeTime": { "future": { "one": "{0} দিনত", "other": "{0} দিনত" }, "past": { "one": "{0} দিন পূৰ্বে", "other": "{0} দিন পূৰ্বে" } } }, "hour": { "displayName": "ঘণ্টা", "relative": { "0": "এইটো ঘণ্টাত" }, "relativeTime": { "future": { "one": "{0} ঘণ্টাত", "other": "{0} ঘণ্টাত" }, "past": { "one": "{0} ঘণ্টা পূৰ্বে", "other": "{0} ঘণ্টা পূৰ্বে" } } }, "hour-short": { "displayName": "ঘণ্টা", "relative": { "0": "এইটো ঘণ্টাত" }, "relativeTime": { "future": { "one": "{0} ঘণ্টাত", "other": "{0} ঘণ্টাত" }, "past": { "one": "{0} ঘণ্টা পূৰ্বে", "other": "{0} ঘণ্টা পূৰ্বে" } } }, "minute": { "displayName": "মিনিট", "relative": { "0": "এইটো মিনিটত" }, "relativeTime": { "future": { "one": "{0} মিনিটত", "other": "{0} মিনিটত" }, "past": { "one": "{0} মিনিট পূৰ্বে", "other": "{0} মিনিট পূৰ্বে" } } }, "minute-short": { "displayName": "মিনিট", "relative": { "0": "এইটো মিনিটত" }, "relativeTime": { "future": { "one": "{0} মিনিটত", "other": "{0} মিনিটত" }, "past": { "one": "{0} মিনিট পূৰ্বে", "other": "{0} মিনিট পূৰ্বে" } } }, "second": { "displayName": "ছেকেণ্ড", "relative": { "0": "এতিয়া" }, "relativeTime": { "future": { "one": "{0} ছেকেণ্ডত", "other": "{0} ছেকেণ্ডত" }, "past": { "one": "{0} ছেকেণ্ড পূৰ্বে", "other": "{0} ছেকেণ্ড পূৰ্বে" } } }, "second-short": { "displayName": "ছেকেণ্ড", "relative": { "0": "এতিয়া" }, "relativeTime": { "future": { "one": "{0} ছেকেণ্ডত", "other": "{0} ছেকেণ্ডত" }, "past": { "one": "{0} ছেকেণ্ড পূৰ্বে", "other": "{0} ছেকেণ্ড পূৰ্বে" } } } } }, { "locale": "asa", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mweji", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mweji", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Ndisha", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Ndisha", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Thiku", "relative": { "0": "Iyoo", "1": "Yavo", "-1": "Ighuo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Thiku", "relative": { "0": "Iyoo", "1": "Yavo", "-1": "Ighuo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Thaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Thaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Thekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Thekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ast", "pluralRuleFunction": function (n) {
        var s = String(n).split('.'), v0 = !s[1];
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "añu", "relative": { "0": "esti añu", "1": "l’añu viniente", "-1": "l’añu pasáu" }, "relativeTime": { "future": { "one": "en {0} añu", "other": "en {0} años" }, "past": { "one": "hai {0} añu", "other": "hai {0} años" } } }, "year-short": { "displayName": "añu", "relative": { "0": "esti añu", "1": "l’añu vin.", "-1": "l’añu pas." }, "relativeTime": { "future": { "one": "en {0} añu", "other": "en {0} años" }, "past": { "one": "hai {0} añu", "other": "hai {0} años" } } }, "month": { "displayName": "mes", "relative": { "0": "esti mes", "1": "el mes viniente", "-1": "el mes pasáu" }, "relativeTime": { "future": { "one": "en {0} mes", "other": "en {0} meses" }, "past": { "one": "hai {0} mes", "other": "hai {0} meses" } } }, "month-short": { "displayName": "mes", "relative": { "0": "esti mes", "1": "mes vin.", "-1": "mes pas." }, "relativeTime": { "future": { "one": "en {0} mes", "other": "en {0} meses" }, "past": { "one": "hai {0} mes", "other": "hai {0} meses" } } }, "week": { "displayName": "selmana", "relativePeriod": "la selmana del {0}", "relative": { "0": "esta selmana", "1": "la selmana viniente", "-1": "la selmana pasada" }, "relativeTime": { "future": { "one": "en {0} selmana", "other": "en {0} selmanes" }, "past": { "one": "hai {0} selmana", "other": "hai {0} selmanes" } } }, "week-short": { "displayName": "sel.", "relativePeriod": "la selmana del {0}", "relative": { "0": "esta selm.", "1": "selm. viniente", "-1": "selm. pasada" }, "relativeTime": { "future": { "one": "en {0} selm.", "other": "en {0} selm." }, "past": { "one": "hai {0} selm.", "other": "hai {0} selm." } } }, "day": { "displayName": "día", "relative": { "0": "güei", "1": "mañana", "2": "pasao mañana", "-2": "antayeri", "-1": "ayeri" }, "relativeTime": { "future": { "one": "en {0} día", "other": "en {0} díes" }, "past": { "one": "hai {0} día", "other": "hai {0} díes" } } }, "day-short": { "displayName": "día", "relative": { "0": "güei", "1": "mañana", "2": "pasao mañana", "-2": "antayeri", "-1": "ayeri" }, "relativeTime": { "future": { "one": "en {0} día", "other": "en {0} díes" }, "past": { "one": "hai {0} día", "other": "hai {0} díes" } } }, "hour": { "displayName": "hora", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "en {0} hora", "other": "en {0} hores" }, "past": { "one": "hai {0} hora", "other": "hai {0} hores" } } }, "hour-short": { "displayName": "h.", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "en {0} h.", "other": "en {0} h." }, "past": { "one": "hai {0} h.", "other": "hai {0} h." } } }, "minute": { "displayName": "minutu", "relative": { "0": "esti minutu" }, "relativeTime": { "future": { "one": "en {0} minutu", "other": "en {0} minutos" }, "past": { "one": "hai {0} minutu", "other": "hai {0} minutos" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "esti min." }, "relativeTime": { "future": { "one": "en {0} min.", "other": "en {0} min." }, "past": { "one": "hai {0} min.", "other": "hai {0} min." } } }, "second": { "displayName": "segundu", "relative": { "0": "agora" }, "relativeTime": { "future": { "one": "en {0} segundu", "other": "en {0} segundos" }, "past": { "one": "hai {0} segundu", "other": "hai {0} segundos" } } }, "second-short": { "displayName": "s.", "relative": { "0": "agora" }, "relativeTime": { "future": { "one": "en {0} seg.", "other": "en {0} seg." }, "past": { "one": "hai {0} seg.", "other": "hai {0} seg." } } } } }, { "locale": "az", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], i10 = i.slice(-1), i100 = i.slice(-2), i1000 = i.slice(-3);
        if (ord)
            return ((i10 == 1 || i10 == 2 || i10 == 5 || i10 == 7 || i10 == 8)
                || (i100 == 20 || i100 == 50 || i100 == 70
                    || i100 == 80)) ? 'one'
                : ((i10 == 3 || i10 == 4) || (i1000 == 100 || i1000 == 200
                    || i1000 == 300 || i1000 == 400 || i1000 == 500 || i1000 == 600 || i1000 == 700
                    || i1000 == 800
                    || i1000 == 900)) ? 'few'
                    : (i == 0 || i10 == 6 || (i100 == 40 || i100 == 60
                        || i100 == 90)) ? 'many'
                        : 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "İl", "relative": { "0": "bu il", "1": "gələn il", "-1": "keçən il" }, "relativeTime": { "future": { "one": "{0} il ərzində", "other": "{0} il ərzində" }, "past": { "one": "{0} il öncə", "other": "{0} il öncə" } } }, "year-short": { "displayName": "il", "relative": { "0": "bu il", "1": "gələn il", "-1": "keçən il" }, "relativeTime": { "future": { "one": "{0} il ərzində", "other": "{0} il ərzində" }, "past": { "one": "{0} il öncə", "other": "{0} il öncə" } } }, "month": { "displayName": "Ay", "relative": { "0": "bu ay", "1": "gələn ay", "-1": "keçən ay" }, "relativeTime": { "future": { "one": "{0} ay ərzində", "other": "{0} ay ərzində" }, "past": { "one": "{0} ay öncə", "other": "{0} ay öncə" } } }, "month-short": { "displayName": "ay", "relative": { "0": "bu ay", "1": "gələn ay", "-1": "keçən ay" }, "relativeTime": { "future": { "one": "{0} ay ərzində", "other": "{0} ay ərzində" }, "past": { "one": "{0} ay öncə", "other": "{0} ay öncə" } } }, "week": { "displayName": "Həftə", "relativePeriod": "{0} həftəsi", "relative": { "0": "bu həftə", "1": "gələn həftə", "-1": "keçən həftə" }, "relativeTime": { "future": { "one": "{0} həftə ərzində", "other": "{0} həftə ərzində" }, "past": { "one": "{0} həftə öncə", "other": "{0} həftə öncə" } } }, "week-short": { "displayName": "həftə", "relativePeriod": "{0} həftəsi", "relative": { "0": "bu həftə", "1": "gələn həftə", "-1": "keçən həftə" }, "relativeTime": { "future": { "one": "{0} həftə ərzində", "other": "{0} həftə ərzində" }, "past": { "one": "{0} həftə öncə", "other": "{0} həftə öncə" } } }, "day": { "displayName": "Gün", "relative": { "0": "bu gün", "1": "sabah", "-1": "dünən" }, "relativeTime": { "future": { "one": "{0} gün ərzində", "other": "{0} gün ərzində" }, "past": { "one": "{0} gün öncə", "other": "{0} gün öncə" } } }, "day-short": { "displayName": "Gün", "relative": { "0": "bu gün", "1": "sabah", "-1": "dünən" }, "relativeTime": { "future": { "one": "{0} gün ərzində", "other": "{0} gün ərzində" }, "past": { "one": "{0} gün öncə", "other": "{0} gün öncə" } } }, "hour": { "displayName": "Saat", "relative": { "0": "bu saat" }, "relativeTime": { "future": { "one": "{0} saat ərzində", "other": "{0} saat ərzində" }, "past": { "one": "{0} saat öncə", "other": "{0} saat öncə" } } }, "hour-short": { "displayName": "saat", "relative": { "0": "bu saat" }, "relativeTime": { "future": { "one": "{0} saat ərzində", "other": "{0} saat ərzində" }, "past": { "one": "{0} saat öncə", "other": "{0} saat öncə" } } }, "minute": { "displayName": "Dəqiqə", "relative": { "0": "bu dəqiqə" }, "relativeTime": { "future": { "one": "{0} dəqiqə ərzində", "other": "{0} dəqiqə ərzində" }, "past": { "one": "{0} dəqiqə öncə", "other": "{0} dəqiqə öncə" } } }, "minute-short": { "displayName": "dəq.", "relative": { "0": "bu dəqiqə" }, "relativeTime": { "future": { "one": "{0} dəqiqə ərzində", "other": "{0} dəqiqə ərzində" }, "past": { "one": "{0} dəqiqə öncə", "other": "{0} dəqiqə öncə" } } }, "second": { "displayName": "Saniyə", "relative": { "0": "indi" }, "relativeTime": { "future": { "one": "{0} saniyə ərzində", "other": "{0} saniyə ərzində" }, "past": { "one": "{0} saniyə öncə", "other": "{0} saniyə öncə" } } }, "second-short": { "displayName": "san.", "relative": { "0": "indi" }, "relativeTime": { "future": { "one": "{0} saniyə ərzində", "other": "{0} saniyə ərzində" }, "past": { "one": "{0} saniyə öncə", "other": "{0} saniyə öncə" } } } } }, { "locale": "az-Arab", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "az-Cyrl", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "az-Latn", "parentLocale": "az" }, { "locale": "bas", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "ŋwìi", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "ŋwìi", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "soŋ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "soŋ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "sɔndɛ̂", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "sɔndɛ̂", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "kɛl", "relative": { "0": "lɛ̀n", "1": "yàni", "-1": "yààni" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "kɛl", "relative": { "0": "lɛ̀n", "1": "yàni", "-1": "yààni" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "ŋgɛŋ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "ŋgɛŋ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "ŋget", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "ŋget", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "hìŋgeŋget", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "hìŋgeŋget", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "be", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2);
        if (ord)
            return ((n10 == 2
                || n10 == 3) && n100 != 12 && n100 != 13) ? 'few' : 'other';
        return (n10 == 1 && n100 != 11) ? 'one'
            : ((n10 >= 2 && n10 <= 4) && (n100 < 12
                || n100 > 14)) ? 'few'
                : (t0 && n10 == 0 || (n10 >= 5 && n10 <= 9)
                    || (n100 >= 11 && n100 <= 14)) ? 'many'
                    : 'other';
    }, "fields": { "year": { "displayName": "год", "relative": { "0": "у гэтым годзе", "1": "у наступным годзе", "-1": "у мінулым годзе" }, "relativeTime": { "future": { "one": "праз {0} год", "few": "праз {0} гады", "many": "праз {0} гадоў", "other": "праз {0} года" }, "past": { "one": "{0} год таму", "few": "{0} гады таму", "many": "{0} гадоў таму", "other": "{0} года таму" } } }, "year-short": { "displayName": "г.", "relative": { "0": "у гэтым годзе", "1": "у наступным годзе", "-1": "у мінулым годзе" }, "relativeTime": { "future": { "one": "праз {0} г.", "few": "праз {0} г.", "many": "праз {0} г.", "other": "праз {0} г." }, "past": { "one": "{0} г. таму", "few": "{0} г. таму", "many": "{0} г. таму", "other": "{0} г. таму" } } }, "month": { "displayName": "месяц", "relative": { "0": "у гэтым месяцы", "1": "у наступным месяцы", "-1": "у мінулым месяцы" }, "relativeTime": { "future": { "one": "праз {0} месяц", "few": "праз {0} месяцы", "many": "праз {0} месяцаў", "other": "праз {0} месяца" }, "past": { "one": "{0} месяц таму", "few": "{0} месяцы таму", "many": "{0} месяцаў таму", "other": "{0} месяца таму" } } }, "month-short": { "displayName": "мес.", "relative": { "0": "у гэтым месяцы", "1": "у наступным месяцы", "-1": "у мінулым месяцы" }, "relativeTime": { "future": { "one": "праз {0} мес.", "few": "праз {0} мес.", "many": "праз {0} мес.", "other": "праз {0} мес." }, "past": { "one": "{0} мес. таму", "few": "{0} мес. таму", "many": "{0} мес. таму", "other": "{0} мес. таму" } } }, "week": { "displayName": "тыд", "relativePeriod": "тыдзень {0}", "relative": { "0": "на гэтым тыдні", "1": "на наступным тыдні", "-1": "на мінулым тыдні" }, "relativeTime": { "future": { "one": "праз {0} тыдзень", "few": "праз {0} тыдні", "many": "праз {0} тыдняў", "other": "праз {0} тыдня" }, "past": { "one": "{0} тыдзень таму", "few": "{0} тыдні таму", "many": "{0} тыдняў таму", "other": "{0} тыдня таму" } } }, "week-short": { "displayName": "тыд", "relativePeriod": "тыдзень {0}", "relative": { "0": "на гэтым тыдні", "1": "на наступным тыдні", "-1": "на мінулым тыдні" }, "relativeTime": { "future": { "one": "праз {0} тыд", "few": "праз {0} тыд", "many": "праз {0} тыд", "other": "праз {0} тыд" }, "past": { "one": "{0} тыд таму", "few": "{0} тыд таму", "many": "{0} тыд таму", "other": "{0} тыд таму" } } }, "day": { "displayName": "дзень", "relative": { "0": "сёння", "1": "заўтра", "2": "паслязаўтра", "-2": "пазаўчора", "-1": "учора" }, "relativeTime": { "future": { "one": "праз {0} дзень", "few": "праз {0} дні", "many": "праз {0} дзён", "other": "праз {0} дня" }, "past": { "one": "{0} дзень таму", "few": "{0} дні таму", "many": "{0} дзён таму", "other": "{0} дня таму" } } }, "day-short": { "displayName": "дзень", "relative": { "0": "сёння", "1": "заўтра", "2": "паслязаўтра", "-2": "пазаўчора", "-1": "учора" }, "relativeTime": { "future": { "one": "праз {0} дзень", "few": "праз {0} дні", "many": "праз {0} дзён", "other": "праз {0} дня" }, "past": { "one": "{0} дзень таму", "few": "{0} дні таму", "many": "{0} дзён таму", "other": "{0} дня таму" } } }, "hour": { "displayName": "гадзіна", "relative": { "0": "у гэту гадзіну" }, "relativeTime": { "future": { "one": "праз {0} гадзіну", "few": "праз {0} гадзіны", "many": "праз {0} гадзін", "other": "праз {0} гадзіны" }, "past": { "one": "{0} гадзіну таму", "few": "{0} гадзіны таму", "many": "{0} гадзін таму", "other": "{0} гадзіны таму" } } }, "hour-short": { "displayName": "гадз", "relative": { "0": "у гэту гадзіну" }, "relativeTime": { "future": { "one": "праз {0} гадз", "few": "праз {0} гадз", "many": "праз {0} гадз", "other": "праз {0} гадз" }, "past": { "one": "{0} гадз таму", "few": "{0} гадз таму", "many": "{0} гадз таму", "other": "{0} гадз таму" } } }, "minute": { "displayName": "хвіліна", "relative": { "0": "у гэту хвіліну" }, "relativeTime": { "future": { "one": "праз {0} хвіліну", "few": "праз {0} хвіліны", "many": "праз {0} хвілін", "other": "праз {0} хвіліны" }, "past": { "one": "{0} хвіліну таму", "few": "{0} хвіліны таму", "many": "{0} хвілін таму", "other": "{0} хвіліны таму" } } }, "minute-short": { "displayName": "хв", "relative": { "0": "у гэту хвіліну" }, "relativeTime": { "future": { "one": "праз {0} хв", "few": "праз {0} хв", "many": "праз {0} хв", "other": "праз {0} хв" }, "past": { "one": "{0} хв таму", "few": "{0} хв таму", "many": "{0} хв таму", "other": "{0} хв таму" } } }, "second": { "displayName": "секунда", "relative": { "0": "цяпер" }, "relativeTime": { "future": { "one": "праз {0} секунду", "few": "праз {0} секунды", "many": "праз {0} секунд", "other": "праз {0} секунды" }, "past": { "one": "{0} секунду таму", "few": "{0} секунды таму", "many": "{0} секунд таму", "other": "{0} секунды таму" } } }, "second-short": { "displayName": "с", "relative": { "0": "цяпер" }, "relativeTime": { "future": { "one": "праз {0} с", "few": "праз {0} с", "many": "праз {0} с", "other": "праз {0} с" }, "past": { "one": "{0} с таму", "few": "{0} с таму", "many": "{0} с таму", "other": "{0} с таму" } } } } }, { "locale": "bem", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Umwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Umwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Umweshi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Umweshi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Umulungu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Umulungu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ubushiku", "relative": { "0": "Lelo", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ubushiku", "relative": { "0": "Lelo", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Insa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Insa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Mineti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Mineti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "bez", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Mwaha", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Mwaha", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mwedzi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mwedzi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Mlungu gumamfu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Mlungu gumamfu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Sihu", "relative": { "0": "Neng’u ni", "1": "Hilawu", "-1": "Igolo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Sihu", "relative": { "0": "Neng’u ni", "1": "Hilawu", "-1": "Igolo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "bg", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "година", "relative": { "0": "тази година", "1": "следващата година", "-1": "миналата година" }, "relativeTime": { "future": { "one": "след {0} година", "other": "след {0} години" }, "past": { "one": "преди {0} година", "other": "преди {0} години" } } }, "year-short": { "displayName": "г.", "relative": { "0": "т. г.", "1": "следв. г.", "-1": "мин. г." }, "relativeTime": { "future": { "one": "след {0} г.", "other": "след {0} г." }, "past": { "one": "преди {0} г.", "other": "преди {0} г." } } }, "month": { "displayName": "месец", "relative": { "0": "този месец", "1": "следващ месец", "-1": "предходен месец" }, "relativeTime": { "future": { "one": "след {0} месец", "other": "след {0} месеца" }, "past": { "one": "преди {0} месец", "other": "преди {0} месеца" } } }, "month-short": { "displayName": "мес.", "relative": { "0": "този мес.", "1": "следв. мес.", "-1": "мин. мес." }, "relativeTime": { "future": { "one": "след {0} м.", "other": "след {0} м." }, "past": { "one": "преди {0} м.", "other": "преди {0} м." } } }, "week": { "displayName": "седмица", "relativePeriod": "седмицата от {0}", "relative": { "0": "тази седмица", "1": "следващата седмица", "-1": "предходната седмица" }, "relativeTime": { "future": { "one": "след {0} седмица", "other": "след {0} седмици" }, "past": { "one": "преди {0} седмица", "other": "преди {0} седмици" } } }, "week-short": { "displayName": "седм.", "relativePeriod": "седмицата от {0}", "relative": { "0": "тази седм.", "1": "следв. седм.", "-1": "миналата седмица" }, "relativeTime": { "future": { "one": "след {0} седм.", "other": "след {0} седм." }, "past": { "one": "преди {0} седм.", "other": "преди {0} седм." } } }, "day": { "displayName": "ден", "relative": { "0": "днес", "1": "утре", "2": "вдругиден", "-2": "онзи ден", "-1": "вчера" }, "relativeTime": { "future": { "one": "след {0} ден", "other": "след {0} дни" }, "past": { "one": "преди {0} ден", "other": "преди {0} дни" } } }, "day-short": { "displayName": "д", "relative": { "0": "днес", "1": "утре", "2": "вдругиден", "-2": "онзи ден", "-1": "вчера" }, "relativeTime": { "future": { "one": "след {0} ден", "other": "след {0} дни" }, "past": { "one": "преди {0} ден", "other": "преди {0} дни" } } }, "hour": { "displayName": "час", "relative": { "0": "в този час" }, "relativeTime": { "future": { "one": "след {0} час", "other": "след {0} часа" }, "past": { "one": "преди {0} час", "other": "преди {0} часа" } } }, "hour-short": { "displayName": "ч", "relative": { "0": "в този час" }, "relativeTime": { "future": { "one": "след {0} ч", "other": "след {0} ч" }, "past": { "one": "преди {0} ч", "other": "преди {0} ч" } } }, "minute": { "displayName": "минута", "relative": { "0": "в тази минута" }, "relativeTime": { "future": { "one": "след {0} минута", "other": "след {0} минути" }, "past": { "one": "преди {0} минута", "other": "преди {0} минути" } } }, "minute-short": { "displayName": "мин", "relative": { "0": "в тази минута" }, "relativeTime": { "future": { "one": "след {0} мин", "other": "след {0} мин" }, "past": { "one": "преди {0} мин", "other": "преди {0} мин" } } }, "second": { "displayName": "секунда", "relative": { "0": "сега" }, "relativeTime": { "future": { "one": "след {0} секунда", "other": "след {0} секунди" }, "past": { "one": "преди {0} секунда", "other": "преди {0} секунди" } } }, "second-short": { "displayName": "сек", "relative": { "0": "сега" }, "relativeTime": { "future": { "one": "след {0} сек", "other": "след {0} сек" }, "past": { "one": "преди {0} сек", "other": "преди {0} сек" } } } } }, { "locale": "bh", "pluralRuleFunction": function (n) {
        return ((n == 0
            || n == 1)) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "bm", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "san", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "san", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "kalo", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "kalo", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "dɔgɔkun", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "dɔgɔkun", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "don", "relative": { "0": "bi", "1": "sini", "-1": "kunu" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "don", "relative": { "0": "bi", "1": "sini", "-1": "kunu" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "lɛrɛ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "lɛrɛ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "miniti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "miniti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "sekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "sekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "bm-Nkoo", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "bn", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return ((n == 1 || n == 5 || n == 7 || n == 8 || n == 9
                || n == 10)) ? 'one'
                : ((n == 2
                    || n == 3)) ? 'two'
                    : (n == 4) ? 'few'
                        : (n == 6) ? 'many'
                            : 'other';
        return (n >= 0 && n <= 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "বছর", "relative": { "0": "এই বছর", "1": "পরের বছর", "-1": "গত বছর" }, "relativeTime": { "future": { "one": "{0} বছরে", "other": "{0} বছরে" }, "past": { "one": "{0} বছর পূর্বে", "other": "{0} বছর পূর্বে" } } }, "year-short": { "displayName": "বছর", "relative": { "0": "এই বছর", "1": "পরের বছর", "-1": "গত বছর" }, "relativeTime": { "future": { "one": "{0} বছরে", "other": "{0} বছরে" }, "past": { "one": "{0} বছর পূর্বে", "other": "{0} বছর পূর্বে" } } }, "month": { "displayName": "মাস", "relative": { "0": "এই মাস", "1": "পরের মাস", "-1": "গত মাস" }, "relativeTime": { "future": { "one": "{0} মাসে", "other": "{0} মাসে" }, "past": { "one": "{0} মাস আগে", "other": "{0} মাস আগে" } } }, "month-short": { "displayName": "মাস", "relative": { "0": "এই মাস", "1": "পরের মাস", "-1": "গত মাস" }, "relativeTime": { "future": { "one": "{0} মাসে", "other": "{0} মাসে" }, "past": { "one": "{0} মাস আগে", "other": "{0} মাস আগে" } } }, "week": { "displayName": "সপ্তাহ", "relativePeriod": "{0} তম সপ্তাহে", "relative": { "0": "এই সপ্তাহ", "1": "পরের সপ্তাহ", "-1": "গত সপ্তাহ" }, "relativeTime": { "future": { "one": "{0} সপ্তাহে", "other": "{0} সপ্তাহে" }, "past": { "one": "{0} সপ্তাহ আগে", "other": "{0} সপ্তাহ আগে" } } }, "week-short": { "displayName": "সপ্তাহ", "relativePeriod": "{0} তম সপ্তাহে", "relative": { "0": "এই সপ্তাহ", "1": "পরের সপ্তাহ", "-1": "গত সপ্তাহ" }, "relativeTime": { "future": { "one": "{0} সপ্তাহে", "other": "{0} সপ্তাহে" }, "past": { "one": "{0} সপ্তাহ আগে", "other": "{0} সপ্তাহ আগে" } } }, "day": { "displayName": "দিন", "relative": { "0": "আজ", "1": "আগামীকাল", "2": "আগামী পরশু", "-2": "গত পরশু", "-1": "গতকাল" }, "relativeTime": { "future": { "one": "{0} দিনের মধ্যে", "other": "{0} দিনের মধ্যে" }, "past": { "one": "{0} দিন আগে", "other": "{0} দিন আগে" } } }, "day-short": { "displayName": "দিন", "relative": { "0": "আজ", "1": "আগামীকাল", "2": "আগামী পরশু", "-2": "গত পরশু", "-1": "গতকাল" }, "relativeTime": { "future": { "one": "{0} দিনের মধ্যে", "other": "{0} দিনের মধ্যে" }, "past": { "one": "{0} দিন আগে", "other": "{0} দিন আগে" } } }, "hour": { "displayName": "ঘণ্টা", "relative": { "0": "এই ঘণ্টায়" }, "relativeTime": { "future": { "one": "{0} ঘন্টায়", "other": "{0} ঘন্টায়" }, "past": { "one": "{0} ঘন্টা আগে", "other": "{0} ঘন্টা আগে" } } }, "hour-short": { "displayName": "ঘণ্টা", "relative": { "0": "এই ঘণ্টায়" }, "relativeTime": { "future": { "one": "{0} ঘন্টায়", "other": "{0} ঘন্টায়" }, "past": { "one": "{0} ঘন্টা আগে", "other": "{0} ঘন্টা আগে" } } }, "minute": { "displayName": "মিনিট", "relative": { "0": "এই মিনিট" }, "relativeTime": { "future": { "one": "{0} মিনিটে", "other": "{0} মিনিটে" }, "past": { "one": "{0} মিনিট আগে", "other": "{0} মিনিট আগে" } } }, "minute-short": { "displayName": "মিনিট", "relative": { "0": "এই মিনিট" }, "relativeTime": { "future": { "one": "{0} মিনিটে", "other": "{0} মিনিটে" }, "past": { "one": "{0} মিনিট আগে", "other": "{0} মিনিট আগে" } } }, "second": { "displayName": "সেকেন্ড", "relative": { "0": "এখন" }, "relativeTime": { "future": { "one": "{0} সেকেন্ডে", "other": "{0} সেকেন্ডে" }, "past": { "one": "{0} সেকেন্ড পূর্বে", "other": "{0} সেকেন্ড পূর্বে" } } }, "second-short": { "displayName": "সেকেন্ড", "relative": { "0": "এখন" }, "relativeTime": { "future": { "one": "{0} সেকেন্ডে", "other": "{0} সেকেন্ডে" }, "past": { "one": "{0} সেকেন্ড পূর্বে", "other": "{0} সেকেন্ড পূর্বে" } } } } }, { "locale": "bn-IN", "parentLocale": "bn" }, { "locale": "bo", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "ལོ།", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "ལོ།", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "ཟླ་བ་", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "ཟླ་བ་", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "ཉིན།", "relative": { "0": "དེ་རིང་", "1": "སང་ཉིན་", "2": "གནངས་ཉིན་", "-2": "ཁས་ཉིན་", "-1": "ཁས་ས་" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "ཉིན།", "relative": { "0": "དེ་རིང་", "1": "སང་ཉིན་", "2": "གནངས་ཉིན་", "-2": "ཁས་ཉིན་", "-1": "ཁས་ས་" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "ཆུ་ཚོད་", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "ཆུ་ཚོད་", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "སྐར་མ།", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "སྐར་མ།", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "སྐར་ཆ།", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "སྐར་ཆ།", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "bo-IN", "parentLocale": "bo" }, { "locale": "br", "pluralRuleFunction": function (n) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2), n1000000 = t0 && s[0].slice(-6);
        return (n10 == 1 && n100 != 11 && n100 != 71 && n100 != 91) ? 'one'
            : (n10 == 2 && n100 != 12 && n100 != 72 && n100 != 92) ? 'two'
                : (((n10 == 3 || n10 == 4) || n10 == 9) && (n100 < 10
                    || n100 > 19) && (n100 < 70 || n100 > 79) && (n100 < 90
                    || n100 > 99)) ? 'few'
                    : (n != 0 && t0 && n1000000 == 0) ? 'many'
                        : 'other';
    }, "fields": { "year": { "displayName": "bloaz", "relative": { "0": "hevlene", "1": "ar bloaz a zeu", "-1": "warlene" }, "relativeTime": { "future": { "one": "a-benn {0} bloaz", "two": "a-benn {0} vloaz", "few": "a-benn {0} bloaz", "many": "a-benn {0} a vloazioù", "other": "a-benn {0} vloaz" }, "past": { "one": "{0} bloaz zo", "two": "{0} vloaz zo", "few": "{0} bloaz zo", "many": "{0} a vloazioù zo", "other": "{0} vloaz zo" } } }, "year-short": { "displayName": "bl.", "relative": { "0": "hevlene", "1": "ar bl. a zeu", "-1": "warlene" }, "relativeTime": { "future": { "one": "a-benn {0} bl.", "two": "a-benn {0} bl.", "few": "a-benn {0} bl.", "many": "a-benn {0} bl.", "other": "a-benn {0} bl." }, "past": { "one": "{0} bl. zo", "two": "{0} bl. zo", "few": "{0} bl. zo", "many": "{0} bl. zo", "other": "{0} bl. zo" } } }, "month": { "displayName": "miz", "relative": { "0": "ar miz-mañ", "1": "ar miz a zeu", "-1": "ar miz diaraok" }, "relativeTime": { "future": { "one": "a-benn {0} miz", "two": "a-benn {0} viz", "few": "a-benn {0} miz", "many": "a-benn {0} a vizioù", "other": "a-benn {0} miz" }, "past": { "one": "{0} miz zo", "two": "{0} viz zo", "few": "{0} miz zo", "many": "{0} a vizioù zo", "other": "{0} miz zo" } } }, "month-short": { "displayName": "miz", "relative": { "0": "ar miz-mañ", "1": "ar miz a zeu", "-1": "ar miz diaraok" }, "relativeTime": { "future": { "one": "a-benn {0} miz", "two": "a-benn {0} viz", "few": "a-benn {0} miz", "many": "a-benn {0} a vizioù", "other": "a-benn {0} miz" }, "past": { "one": "{0} miz zo", "two": "{0} viz zo", "few": "{0} miz zo", "many": "{0} a vizioù zo", "other": "{0} miz zo" } } }, "week": { "displayName": "sizhun", "relativePeriod": "the week of {0}", "relative": { "0": "ar sizhun-mañ", "1": "ar sizhun a zeu", "-1": "ar sizhun diaraok" }, "relativeTime": { "future": { "one": "a-benn {0} sizhun", "two": "a-benn {0} sizhun", "few": "a-benn {0} sizhun", "many": "a-benn {0} a sizhunioù", "other": "a-benn {0} sizhun" }, "past": { "one": "{0} sizhun zo", "two": "{0} sizhun zo", "few": "{0} sizhun zo", "many": "{0} a sizhunioù zo", "other": "{0} sizhun zo" } } }, "week-short": { "displayName": "sizhun", "relativePeriod": "the week of {0}", "relative": { "0": "ar sizhun-mañ", "1": "ar sizhun a zeu", "-1": "ar sizhun diaraok" }, "relativeTime": { "future": { "one": "a-benn {0} sizhun", "two": "a-benn {0} sizhun", "few": "a-benn {0} sizhun", "many": "a-benn {0} a sizhunioù", "other": "a-benn {0} sizhun" }, "past": { "one": "{0} sizhun zo", "two": "{0} sizhun zo", "few": "{0} sizhun zo", "many": "{0} a sizhunioù zo", "other": "{0} sizhun zo" } } }, "day": { "displayName": "deiz", "relative": { "0": "hiziv", "1": "warcʼhoazh", "-2": "dercʼhent-decʼh", "-1": "decʼh" }, "relativeTime": { "future": { "one": "a-benn {0} deiz", "two": "a-benn {0} zeiz", "few": "a-benn {0} deiz", "many": "a-benn {0} a zeizioù", "other": "a-benn {0} deiz" }, "past": { "one": "{0} deiz zo", "two": "{0} zeiz zo", "few": "{0} deiz zo", "many": "{0} a zeizioù zo", "other": "{0} deiz zo" } } }, "day-short": { "displayName": "d", "relative": { "0": "hiziv", "1": "warcʼhoazh", "-2": "dercʼhent-decʼh", "-1": "decʼh" }, "relativeTime": { "future": { "one": "a-benn {0} d", "two": "a-benn {0} d", "few": "a-benn {0} d", "many": "a-benn {0} d", "other": "a-benn {0} d" }, "past": { "one": "{0} d zo", "two": "{0} d zo", "few": "{0} d zo", "many": "{0} d zo", "other": "{0} d zo" } } }, "hour": { "displayName": "eur", "relative": { "0": "dʼan eur-mañ" }, "relativeTime": { "future": { "one": "a-benn {0} eur", "two": "a-benn {0} eur", "few": "a-benn {0} eur", "many": "a-benn {0} a eurioù", "other": "a-benn {0} eur" }, "past": { "one": "{0} eur zo", "two": "{0} eur zo", "few": "{0} eur zo", "many": "{0} a eurioù zo", "other": "{0} eur zo" } } }, "hour-short": { "displayName": "e", "relative": { "0": "dʼan eur-mañ" }, "relativeTime": { "future": { "one": "a-benn {0} e", "two": "a-benn {0} e", "few": "a-benn {0} e", "many": "a-benn {0} e", "other": "a-benn {0} e" }, "past": { "one": "{0} e zo", "two": "{0} e zo", "few": "{0} e zo", "many": "{0} e zo", "other": "{0} e zo" } } }, "minute": { "displayName": "munut", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "a-benn {0} munut", "two": "a-benn {0} vunut", "few": "a-benn {0} munut", "many": "a-benn {0} a vunutoù", "other": "a-benn {0} munut" }, "past": { "one": "{0} munut zo", "two": "{0} vunut zo", "few": "{0} munut zo", "many": "{0} a vunutoù zo", "other": "{0} munut zo" } } }, "minute-short": { "displayName": "min", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "a-benn {0} min", "two": "a-benn {0} min", "few": "a-benn {0} min", "many": "a-benn {0} min", "other": "a-benn {0} min" }, "past": { "one": "{0} min zo", "two": "{0} min zo", "few": "{0} min zo", "many": "{0} min zo", "other": "{0} min zo" } } }, "second": { "displayName": "eilenn", "relative": { "0": "bremañ" }, "relativeTime": { "future": { "one": "a-benn {0} eilenn", "two": "a-benn {0} eilenn", "few": "a-benn {0} eilenn", "many": "a-benn {0} a eilennoù", "other": "a-benn {0} eilenn" }, "past": { "one": "{0} eilenn zo", "two": "{0} eilenn zo", "few": "{0} eilenn zo", "many": "{0} eilenn zo", "other": "{0} eilenn zo" } } }, "second-short": { "displayName": "s", "relative": { "0": "brem." }, "relativeTime": { "future": { "one": "a-benn {0} s", "two": "a-benn {0} s", "few": "a-benn {0} s", "many": "a-benn {0} s", "other": "a-benn {0} s" }, "past": { "one": "{0} s zo", "two": "{0} s zo", "few": "{0} s zo", "many": "{0} s zo", "other": "{0} s zo" } } } } }, { "locale": "brx", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "बोसोर", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "बोसोर", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "दान", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "दान", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "सबथा\u002Fहबथा", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "सबथा\u002Fहबथा", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "सान", "relative": { "0": "दिनै", "1": "गाबोन", "-1": "मैया" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "सान", "relative": { "0": "दिनै", "1": "गाबोन", "-1": "मैया" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "रिंगा", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "रिंगा", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "मिनिथ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "मिनिथ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "सेखेन्द", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "सेखेन्द", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "bs", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2), f10 = f.slice(-1), f100 = f.slice(-2);
        if (ord)
            return 'other';
        return (v0 && i10 == 1 && i100 != 11
            || f10 == 1 && f100 != 11) ? 'one'
            : (v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14)
                || (f10 >= 2 && f10 <= 4) && (f100 < 12
                    || f100 > 14)) ? 'few'
                : 'other';
    }, "fields": { "year": { "displayName": "godina", "relative": { "0": "ove godine", "1": "sljedeće godine", "-1": "prošle godine" }, "relativeTime": { "future": { "one": "za {0} godinu", "few": "za {0} godine", "other": "za {0} godina" }, "past": { "one": "prije {0} godinu", "few": "prije {0} godine", "other": "prije {0} godina" } } }, "year-short": { "displayName": "god.", "relative": { "0": "ove godine", "1": "sljedeće godine", "-1": "prošle godine" }, "relativeTime": { "future": { "one": "za {0} god.", "few": "za {0} god.", "other": "za {0} god." }, "past": { "one": "prije {0} god.", "few": "prije {0} god.", "other": "prije {0} god." } } }, "month": { "displayName": "mjesec", "relative": { "0": "ovaj mjesec", "1": "sljedeći mjesec", "-1": "prošli mjesec" }, "relativeTime": { "future": { "one": "za {0} mjesec", "few": "za {0} mjeseca", "other": "za {0} mjeseci" }, "past": { "one": "prije {0} mjesec", "few": "prije {0} mjeseca", "other": "prije {0} mjeseci" } } }, "month-short": { "displayName": "mj.", "relative": { "0": "ovaj mjesec", "1": "sljedeći mjesec", "-1": "prošli mjesec" }, "relativeTime": { "future": { "one": "za {0} mj.", "few": "za {0} mj.", "other": "za {0} mj." }, "past": { "one": "prije {0} mj.", "few": "prije {0} mj.", "other": "prije {0} mj." } } }, "week": { "displayName": "sedmica", "relativePeriod": "sedmica u kojoj je {0}", "relative": { "0": "ove sedmice", "1": "sljedeće sedmice", "-1": "prošle sedmice" }, "relativeTime": { "future": { "one": "za {0} sedmicu", "few": "za {0} sedmice", "other": "za {0} sedmica" }, "past": { "one": "prije {0} sedmicu", "few": "prije {0} sedmice", "other": "prije {0} sedmica" } } }, "week-short": { "displayName": "sed.", "relativePeriod": "sedmica u kojoj je {0}", "relative": { "0": "ove sedmice", "1": "sljedeće sedmice", "-1": "prošle sedmice" }, "relativeTime": { "future": { "one": "za {0} sed.", "few": "za {0} sed.", "other": "za {0} sed." }, "past": { "one": "prije {0} sed.", "few": "prije {0} sed.", "other": "prije {0} sed." } } }, "day": { "displayName": "dan", "relative": { "0": "danas", "1": "sutra", "2": "prekosutra", "-2": "prekjučer", "-1": "jučer" }, "relativeTime": { "future": { "one": "za {0} dan", "few": "za {0} dana", "other": "za {0} dana" }, "past": { "one": "prije {0} dan", "few": "prije {0} dana", "other": "prije {0} dana" } } }, "day-short": { "displayName": "dan", "relative": { "0": "danas", "1": "sutra", "2": "prekosutra", "-2": "prekjučer", "-1": "jučer" }, "relativeTime": { "future": { "one": "za {0} d.", "few": "za {0} d.", "other": "za {0} d." }, "past": { "one": "prije {0} d.", "few": "prije {0} d.", "other": "prije {0} d." } } }, "hour": { "displayName": "sat", "relative": { "0": "ovaj sat" }, "relativeTime": { "future": { "one": "za {0} sat", "few": "za {0} sata", "other": "za {0} sati" }, "past": { "one": "prije {0} sat", "few": "prije {0} sata", "other": "prije {0} sati" } } }, "hour-short": { "displayName": "h", "relative": { "0": "ovaj sat" }, "relativeTime": { "future": { "one": "za {0} sat", "few": "za {0} sata", "other": "za {0} sati" }, "past": { "one": "prije {0} sat", "few": "prije {0} sata", "other": "prije {0} sati" } } }, "minute": { "displayName": "minuta", "relative": { "0": "ova minuta" }, "relativeTime": { "future": { "one": "za {0} minutu", "few": "za {0} minute", "other": "za {0} minuta" }, "past": { "one": "prije {0} minutu", "few": "prije {0} minute", "other": "prije {0} minuta" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "ova minuta" }, "relativeTime": { "future": { "one": "za {0} min.", "few": "za {0} min.", "other": "za {0} min." }, "past": { "one": "prije {0} min.", "few": "prije {0} min.", "other": "prije {0} min." } } }, "second": { "displayName": "sekunda", "relative": { "0": "sada" }, "relativeTime": { "future": { "one": "za {0} sekundu", "few": "za {0} sekunde", "other": "za {0} sekundi" }, "past": { "one": "prije {0} sekundu", "few": "prije {0} sekunde", "other": "prije {0} sekundi" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "sada" }, "relativeTime": { "future": { "one": "za {0} sek.", "few": "za {0} sek.", "other": "za {0} sek." }, "past": { "one": "prije {0} sek.", "few": "prije {0} sek.", "other": "prije {0} sek." } } } } }, { "locale": "bs-Cyrl", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "година", "relative": { "0": "Ове године", "1": "Следеће године", "-1": "Прошле године" }, "relativeTime": { "future": { "one": "за {0} годину", "few": "за {0} године", "other": "за {0} година" }, "past": { "one": "пре {0} годину", "few": "пре {0} године", "other": "пре {0} година" } } }, "year-short": { "displayName": "година", "relative": { "0": "Ове године", "1": "Следеће године", "-1": "Прошле године" }, "relativeTime": { "future": { "one": "за {0} годину", "few": "за {0} године", "other": "за {0} година" }, "past": { "one": "пре {0} годину", "few": "пре {0} године", "other": "пре {0} година" } } }, "month": { "displayName": "месец", "relative": { "0": "Овог месеца", "1": "Следећег месеца", "-1": "Прошлог месеца" }, "relativeTime": { "future": { "one": "за {0} месец", "few": "за {0} месеца", "other": "за {0} месеци" }, "past": { "one": "пре {0} месец", "few": "пре {0} месеца", "other": "пре {0} месеци" } } }, "month-short": { "displayName": "месец", "relative": { "0": "Овог месеца", "1": "Следећег месеца", "-1": "Прошлог месеца" }, "relativeTime": { "future": { "one": "за {0} месец", "few": "за {0} месеца", "other": "за {0} месеци" }, "past": { "one": "пре {0} месец", "few": "пре {0} месеца", "other": "пре {0} месеци" } } }, "week": { "displayName": "недеља", "relativePeriod": "the week of {0}", "relative": { "0": "Ове недеље", "1": "Следеће недеље", "-1": "Прошле недеље" }, "relativeTime": { "future": { "one": "за {0} недељу", "few": "за {0} недеље", "other": "за {0} недеља" }, "past": { "one": "пре {0} недељу", "few": "пре {0} недеље", "other": "пре {0} недеља" } } }, "week-short": { "displayName": "недеља", "relativePeriod": "the week of {0}", "relative": { "0": "Ове недеље", "1": "Следеће недеље", "-1": "Прошле недеље" }, "relativeTime": { "future": { "one": "за {0} недељу", "few": "за {0} недеље", "other": "за {0} недеља" }, "past": { "one": "пре {0} недељу", "few": "пре {0} недеље", "other": "пре {0} недеља" } } }, "day": { "displayName": "дан", "relative": { "0": "данас", "1": "сутра", "2": "прекосутра", "-2": "прекјуче", "-1": "јуче" }, "relativeTime": { "future": { "one": "за {0} дан", "few": "за {0} дана", "other": "за {0} дана" }, "past": { "one": "пре {0} дан", "few": "пре {0} дана", "other": "пре {0} дана" } } }, "day-short": { "displayName": "дан", "relative": { "0": "данас", "1": "сутра", "2": "прекосутра", "-2": "прекјуче", "-1": "јуче" }, "relativeTime": { "future": { "one": "за {0} дан", "few": "за {0} дана", "other": "за {0} дана" }, "past": { "one": "пре {0} дан", "few": "пре {0} дана", "other": "пре {0} дана" } } }, "hour": { "displayName": "час", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "за {0} сат", "few": "за {0} сата", "other": "за {0} сати" }, "past": { "one": "пре {0} сат", "few": "пре {0} сата", "other": "пре {0} сати" } } }, "hour-short": { "displayName": "час", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "за {0} сат", "few": "за {0} сата", "other": "за {0} сати" }, "past": { "one": "пре {0} сат", "few": "пре {0} сата", "other": "пре {0} сати" } } }, "minute": { "displayName": "минут", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "за {0} минут", "few": "за {0} минута", "other": "за {0} минута" }, "past": { "one": "пре {0} минут", "few": "пре {0} минута", "other": "пре {0} минута" } } }, "minute-short": { "displayName": "минут", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "за {0} минут", "few": "за {0} минута", "other": "за {0} минута" }, "past": { "one": "пре {0} минут", "few": "пре {0} минута", "other": "пре {0} минута" } } }, "second": { "displayName": "секунд", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "за {0} секунд", "few": "за {0} секунде", "other": "за {0} секунди" }, "past": { "one": "пре {0} секунд", "few": "пре {0} секунде", "other": "пре {0} секунди" } } }, "second-short": { "displayName": "секунд", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "за {0} секунд", "few": "за {0} секунде", "other": "за {0} секунди" }, "past": { "one": "пре {0} секунд", "few": "пре {0} секунде", "other": "пре {0} секунди" } } } } }, { "locale": "bs-Latn", "parentLocale": "bs" }, { "locale": "ca", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1];
        if (ord)
            return ((n == 1
                || n == 3)) ? 'one'
                : (n == 2) ? 'two'
                    : (n == 4) ? 'few'
                        : 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "any", "relative": { "0": "enguany", "1": "l’any que ve", "-1": "l’any passat" }, "relativeTime": { "future": { "one": "d’aquí a {0} any", "other": "d’aquí a {0} anys" }, "past": { "one": "fa {0} any", "other": "fa {0} anys" } } }, "year-short": { "displayName": "any", "relative": { "0": "enguany", "1": "l’any que ve", "-1": "l’any passat" }, "relativeTime": { "future": { "one": "d’aquí a {0} any", "other": "d’aquí a {0} anys" }, "past": { "one": "fa {0} any", "other": "fa {0} anys" } } }, "month": { "displayName": "mes", "relative": { "0": "aquest mes", "1": "el mes que ve", "-1": "el mes passat" }, "relativeTime": { "future": { "one": "d’aquí a {0} mes", "other": "d’aquí a {0} mesos" }, "past": { "one": "fa {0} mes", "other": "fa {0} mesos" } } }, "month-short": { "displayName": "mes", "relative": { "0": "aquest mes", "1": "el mes que ve", "-1": "el mes passat" }, "relativeTime": { "future": { "one": "d’aquí a {0} mes", "other": "d’aquí a {0} mesos" }, "past": { "one": "fa {0} mes", "other": "fa {0} mesos" } } }, "week": { "displayName": "setmana", "relativePeriod": "la setmana del {0}", "relative": { "0": "aquesta setmana", "1": "la setmana que ve", "-1": "la setmana passada" }, "relativeTime": { "future": { "one": "d’aquí a {0} setmana", "other": "d’aquí a {0} setmanes" }, "past": { "one": "fa {0} setmana", "other": "fa {0} setmanes" } } }, "week-short": { "displayName": "setm.", "relativePeriod": "la setmana de: {0}", "relative": { "0": "aquesta setm.", "1": "la setm. que ve", "-1": "la setm. passada" }, "relativeTime": { "future": { "one": "d’aquí a {0} setm.", "other": "d’aquí a {0} setm." }, "past": { "one": "fa {0} setm.", "other": "fa {0} setm." } } }, "day": { "displayName": "dia", "relative": { "0": "avui", "1": "demà", "2": "demà passat", "-2": "abans-d’ahir", "-1": "ahir" }, "relativeTime": { "future": { "one": "d’aquí a {0} dia", "other": "d’aquí a {0} dies" }, "past": { "one": "fa {0} dia", "other": "fa {0} dies" } } }, "day-short": { "displayName": "dia", "relative": { "0": "avui", "1": "demà", "2": "demà passat", "-2": "abans-d’ahir", "-1": "ahir" }, "relativeTime": { "future": { "one": "d’aquí a {0} dia", "other": "d’aquí a {0} dies" }, "past": { "one": "fa {0} dia", "other": "fa {0} dies" } } }, "hour": { "displayName": "hora", "relative": { "0": "aquesta hora" }, "relativeTime": { "future": { "one": "d’aquí a {0} hora", "other": "d’aquí a {0} hores" }, "past": { "one": "fa {0} hora", "other": "fa {0} hores" } } }, "hour-short": { "displayName": "h", "relative": { "0": "aquesta hora" }, "relativeTime": { "future": { "one": "d’aquí a {0} h", "other": "d’aquí a {0} h" }, "past": { "one": "fa {0} h", "other": "fa {0} h" } } }, "minute": { "displayName": "minut", "relative": { "0": "aquest minut" }, "relativeTime": { "future": { "one": "d’aquí a {0} minut", "other": "d’aquí a {0} minuts" }, "past": { "one": "fa {0} minut", "other": "fa {0} minuts" } } }, "minute-short": { "displayName": "min", "relative": { "0": "aquest minut" }, "relativeTime": { "future": { "one": "d’aquí a {0} min", "other": "d’aquí a {0} min" }, "past": { "one": "fa {0} min", "other": "fa {0} min" } } }, "second": { "displayName": "segon", "relative": { "0": "ara" }, "relativeTime": { "future": { "one": "d’aquí a {0} segon", "other": "d’aquí a {0} segons" }, "past": { "one": "fa {0} segon", "other": "fa {0} segons" } } }, "second-short": { "displayName": "s", "relative": { "0": "ara" }, "relativeTime": { "future": { "one": "d’aquí a {0} s", "other": "d’aquí a {0} s" }, "past": { "one": "fa {0} s", "other": "fa {0} s" } } } } }, { "locale": "ca-AD", "parentLocale": "ca" }, { "locale": "ca-ES-VALENCIA", "parentLocale": "ca-ES", "fields": { "year": { "displayName": "any", "relative": { "0": "enguany", "1": "l’any que ve", "-1": "l’any passat" }, "relativeTime": { "future": { "one": "d’aquí a {0} any", "other": "d’aquí a {0} anys" }, "past": { "one": "fa {0} any", "other": "fa {0} anys" } } }, "year-short": { "displayName": "any", "relative": { "0": "enguany", "1": "l’any que ve", "-1": "l’any passat" }, "relativeTime": { "future": { "one": "d’aquí a {0} any", "other": "d’aquí a {0} anys" }, "past": { "one": "fa {0} any", "other": "fa {0} anys" } } }, "month": { "displayName": "mes", "relative": { "0": "aquest mes", "1": "el mes que ve", "-1": "el mes passat" }, "relativeTime": { "future": { "one": "d’aquí a {0} mes", "other": "d’aquí a {0} mesos" }, "past": { "one": "fa {0} mes", "other": "fa {0} mesos" } } }, "month-short": { "displayName": "mes", "relative": { "0": "aquest mes", "1": "el mes que ve", "-1": "el mes passat" }, "relativeTime": { "future": { "one": "d’aquí a {0} mes", "other": "d’aquí a {0} mesos" }, "past": { "one": "fa {0} mes", "other": "fa {0} mesos" } } }, "week": { "displayName": "setmana", "relativePeriod": "la setmana del {0}", "relative": { "0": "aquesta setmana", "1": "la setmana que ve", "-1": "la setmana passada" }, "relativeTime": { "future": { "one": "d’aquí a {0} setmana", "other": "d’aquí a {0} setmanes" }, "past": { "one": "fa {0} setmana", "other": "fa {0} setmanes" } } }, "week-short": { "displayName": "setm.", "relativePeriod": "la setmana de: {0}", "relative": { "0": "aquesta setm.", "1": "la setm. que ve", "-1": "la setm. passada" }, "relativeTime": { "future": { "one": "d’aquí a {0} setm.", "other": "d’aquí a {0} setm." }, "past": { "one": "fa {0} setm.", "other": "fa {0} setm." } } }, "day": { "displayName": "dia", "relative": { "0": "avui", "1": "demà", "2": "demà passat", "-2": "abans-d’ahir", "-1": "ahir" }, "relativeTime": { "future": { "one": "d’aquí a {0} dia", "other": "d’aquí a {0} dies" }, "past": { "one": "fa {0} dia", "other": "fa {0} dies" } } }, "day-short": { "displayName": "dia", "relative": { "0": "avui", "1": "demà", "2": "demà passat", "-2": "abans-d’ahir", "-1": "ahir" }, "relativeTime": { "future": { "one": "d’aquí a {0} dia", "other": "d’aquí a {0} dies" }, "past": { "one": "fa {0} dia", "other": "fa {0} dies" } } }, "hour": { "displayName": "hora", "relative": { "0": "aquesta hora" }, "relativeTime": { "future": { "one": "d’aquí a {0} hora", "other": "d’aquí a {0} hores" }, "past": { "one": "fa {0} hora", "other": "fa {0} hores" } } }, "hour-short": { "displayName": "h", "relative": { "0": "aquesta hora" }, "relativeTime": { "future": { "one": "d’aquí a {0} h", "other": "d’aquí a {0} h" }, "past": { "one": "fa {0} h", "other": "fa {0} h" } } }, "minute": { "displayName": "minut", "relative": { "0": "aquest minut" }, "relativeTime": { "future": { "one": "d’aquí a {0} minut", "other": "d’aquí a {0} minuts" }, "past": { "one": "fa {0} minut", "other": "fa {0} minuts" } } }, "minute-short": { "displayName": "min", "relative": { "0": "aquest minut" }, "relativeTime": { "future": { "one": "d’aquí a {0} min", "other": "d’aquí a {0} min" }, "past": { "one": "fa {0} min", "other": "fa {0} min" } } }, "second": { "displayName": "segon", "relative": { "0": "ara" }, "relativeTime": { "future": { "one": "d’aquí a {0} segon", "other": "d’aquí a {0} segons" }, "past": { "one": "fa {0} segon", "other": "fa {0} segons" } } }, "second-short": { "displayName": "s", "relative": { "0": "ara" }, "relativeTime": { "future": { "one": "d’aquí a {0} s", "other": "d’aquí a {0} s" }, "past": { "one": "fa {0} s", "other": "fa {0} s" } } } } }, { "locale": "ca-ES", "parentLocale": "ca" }, { "locale": "ca-FR", "parentLocale": "ca" }, { "locale": "ca-IT", "parentLocale": "ca" }, { "locale": "ccp", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "𑄝𑄧𑄏𑄧𑄢𑄴", "relative": { "0": "𑄃𑄬 𑄝𑄧𑄏𑄧𑄢𑄴", "1": "𑄎𑄬𑄢𑄧 𑄝𑄧𑄏𑄧𑄢𑄴", "-1": "𑄉𑄬𑄣𑄳𑄠𑄬 𑄝𑄧𑄏𑄧𑄢𑄴" }, "relativeTime": { "future": { "one": "{0} 𑄝𑄧𑄏𑄧𑄢𑄬", "other": "{0} 𑄝𑄧𑄏𑄧𑄢𑄬" }, "past": { "one": "{0} 𑄝𑄧𑄏𑄧𑄢𑄴 𑄃𑄉𑄬", "other": "{0} 𑄝𑄧𑄏𑄧𑄢𑄴 𑄃𑄉𑄬" } } }, "year-short": { "displayName": "𑄝𑄧𑄏𑄧𑄢𑄴", "relative": { "0": "𑄃𑄳𑄆𑄬 𑄝𑄧𑄏𑄧𑄢𑄴", "1": "𑄛𑄧𑄢𑄬 𑄝𑄧𑄏𑄧𑄢𑄴", "-1": "𑄉𑄬𑄣𑄳𑄠𑄬 𑄝𑄧𑄏𑄧𑄢𑄴" }, "relativeTime": { "future": { "one": "{0} 𑄝𑄧𑄏𑄧𑄢𑄬", "other": "{0} 𑄝𑄧𑄏𑄧𑄢𑄬" }, "past": { "one": "{0} 𑄝𑄧𑄏𑄧𑄢𑄴 𑄃𑄉𑄬", "other": "{0} 𑄝𑄧𑄏𑄧𑄢𑄴 𑄃𑄉𑄬" } } }, "month": { "displayName": "𑄟𑄏𑄴", "relative": { "0": "𑄃𑄳𑄆𑄬 𑄟𑄏𑄴", "1": "𑄛𑄧𑄢𑄬 𑄟𑄏𑄴", "-1": "𑄉𑄬𑄣𑄧𑄘𑄬 𑄟𑄏𑄴" }, "relativeTime": { "future": { "one": "{0} 𑄟𑄏𑄬", "other": "{0} 𑄟𑄏𑄬" }, "past": { "one": "{0} 𑄟𑄏𑄧 𑄃𑄉𑄬", "other": "{0} 𑄟𑄏𑄧 𑄃𑄉𑄬" } } }, "month-short": { "displayName": "𑄟𑄏𑄴", "relative": { "0": "𑄃𑄳𑄆𑄬 𑄟𑄏𑄴", "1": "𑄛𑄧𑄢𑄬 𑄟𑄏𑄴", "-1": "𑄉𑄬𑄣𑄧𑄉𑄬 𑄟𑄏𑄴" }, "relativeTime": { "future": { "one": "{0} 𑄟𑄏𑄬", "other": "{0} 𑄟𑄏𑄬" }, "past": { "one": "{0} 𑄇𑄏𑄧 𑄃𑄉𑄬", "other": "{0} 𑄟𑄏𑄧 𑄃𑄉𑄬" } } }, "week": { "displayName": "𑄥𑄛𑄴𑄖", "relativePeriod": "{0} 𑄥𑄛𑄴𑄖", "relative": { "0": "𑄃𑄳𑄆𑄬 𑄥𑄛𑄴𑄖", "1": "𑄛𑄧𑄢𑄬 𑄥𑄛𑄴𑄖", "-1": "𑄉𑄬𑄣𑄧𑄘𑄬 𑄥𑄛𑄴𑄖" }, "relativeTime": { "future": { "one": "{0} 𑄥𑄛𑄴𑄖𑄠𑄴", "other": "{0} 𑄥𑄛𑄴𑄖𑄠𑄴" }, "past": { "one": "{0} 𑄥𑄛𑄴𑄖 𑄃𑄉𑄬", "other": "{0} 𑄥𑄛𑄴𑄖 𑄃𑄉𑄬" } } }, "week-short": { "displayName": "𑄥𑄛𑄴𑄖", "relativePeriod": "{0} 𑄃𑄳𑄆𑄬 𑄥𑄛𑄴𑄖𑄠𑄴", "relative": { "0": "𑄃𑄳𑄆𑄬 𑄥𑄛𑄴𑄖", "1": "𑄛𑄧𑄢𑄬 𑄥𑄛𑄴𑄖", "-1": "𑄉𑄬𑄣𑄧𑄘𑄬 𑄥𑄛𑄴𑄖" }, "relativeTime": { "future": { "one": "{0} 𑄥𑄛𑄴𑄖𑄠𑄴", "other": "{0} 𑄥𑄛𑄴𑄖𑄠𑄴" }, "past": { "one": "{0} 𑄥𑄛𑄴𑄖 𑄃𑄉𑄬", "other": "{0} 𑄥𑄛𑄴𑄖 𑄃𑄉𑄬" } } }, "day": { "displayName": "𑄘𑄨𑄚𑄴", "relative": { "0": "𑄃𑄬𑄌𑄴𑄥𑄳𑄠", "1": "𑄃𑄬𑄎𑄬𑄖𑄴𑄖𑄳𑄠𑄇𑄬𑄣𑄳𑄠𑄬", "2": "𑄃𑄬𑄎𑄬𑄖𑄴𑄖𑄳𑄠𑄬 𑄛𑄧𑄢𑄴𑄥𑄪", "-2": "𑄉𑄬𑄣𑄧𑄘𑄬 𑄛𑄧𑄢𑄴𑄥𑄪", "-1": "𑄉𑄬𑄣𑄴𑄣𑄳𑄠𑄇𑄬𑄣𑄳𑄠𑄬" }, "relativeTime": { "future": { "one": "{0} 𑄘𑄨𑄚𑄮 𑄟𑄧𑄖𑄴𑄙𑄳𑄠", "other": "{0} 𑄘𑄨𑄚𑄮 𑄟𑄧𑄖𑄴𑄙𑄳𑄠" }, "past": { "one": "{0} 𑄘𑄨𑄚𑄴 𑄃𑄉𑄬", "other": "{0} 𑄘𑄨𑄚𑄴 𑄃𑄉𑄬" } } }, "day-short": { "displayName": "𑄘𑄨𑄚𑄴", "relative": { "0": "𑄃𑄬𑄌𑄴𑄥𑄳𑄠𑄬", "1": "𑄃𑄬𑄎𑄬𑄖𑄴𑄖𑄳𑄠𑄇𑄬𑄣𑄴𑄣𑄳𑄠𑄬", "2": "𑄃𑄬𑄎𑄬𑄖𑄴𑄖𑄳𑄠𑄇𑄬𑄣𑄴𑄣𑄳𑄠𑄬 𑄛𑄧𑄢𑄴𑄥𑄪", "-2": "𑄉𑄬𑄣𑄧𑄘𑄬 𑄛𑄧𑄢𑄴𑄥𑄪", "-1": "𑄉𑄬𑄣𑄴𑄣𑄳𑄠𑄇𑄬𑄣𑄴𑄣𑄳𑄠𑄬" }, "relativeTime": { "future": { "one": "{0} 𑄘𑄨𑄚𑄮 𑄟𑄧𑄖𑄴𑄙𑄳𑄠", "other": "{0} 𑄘𑄨𑄚𑄮 𑄟𑄧𑄖𑄴𑄙𑄳𑄠" }, "past": { "one": "{0} 𑄘𑄨𑄚𑄴 𑄃𑄉𑄬", "other": "{0} 𑄘𑄨𑄚𑄴 𑄃𑄉𑄬" } } }, "hour": { "displayName": "𑄊𑄮𑄚𑄴𑄓", "relative": { "0": "𑄃𑄳𑄆𑄬 𑄊𑄮𑄚𑄴𑄓𑄠𑄴" }, "relativeTime": { "future": { "one": "{0} 𑄊𑄮𑄚𑄴𑄓𑄠𑄴", "other": "{0} 𑄊𑄮𑄚𑄴𑄓𑄠𑄴" }, "past": { "one": "{0} 𑄊𑄮𑄚𑄴𑄓 𑄃𑄉𑄬", "other": "{0} 𑄊𑄮𑄚𑄴𑄓 𑄃𑄉𑄬" } } }, "hour-short": { "displayName": "𑄊𑄮𑄚𑄴𑄓", "relative": { "0": "𑄃𑄳𑄆𑄬 𑄊𑄮𑄚𑄴𑄓𑄠𑄴" }, "relativeTime": { "future": { "one": "{0} 𑄊𑄮𑄚𑄴𑄓𑄠𑄴", "other": "{0} 𑄊𑄮𑄚𑄴𑄓𑄠𑄴" }, "past": { "one": "{0} 𑄊𑄮𑄚𑄴𑄓 𑄃𑄉𑄬", "other": "{0} 𑄊𑄮𑄚𑄴𑄓 𑄃𑄉𑄬" } } }, "minute": { "displayName": "𑄟𑄨𑄚𑄨𑄖𑄴", "relative": { "0": "𑄃𑄳𑄆𑄬 𑄟𑄨𑄚𑄨𑄖𑄴" }, "relativeTime": { "future": { "one": "{0} 𑄟𑄨𑄚𑄨𑄘𑄬", "other": "{0} 𑄟𑄨𑄚𑄨𑄘𑄬" }, "past": { "one": "{0} 𑄟𑄨𑄚𑄨𑄖𑄴 𑄃𑄉𑄬", "other": "{0} 𑄟𑄨𑄚𑄨𑄖𑄴 𑄃𑄉𑄬" } } }, "minute-short": { "displayName": "𑄟𑄨𑄚𑄨𑄖𑄴", "relative": { "0": "𑄃𑄳𑄆𑄬 𑄟𑄨𑄚𑄨𑄖𑄴" }, "relativeTime": { "future": { "one": "{0} 𑄟𑄨𑄚𑄨𑄘𑄬", "other": "{0} 𑄟𑄨𑄚𑄨𑄘𑄬" }, "past": { "one": "{0} 𑄟𑄨𑄚𑄨𑄖𑄴 𑄃𑄉𑄬", "other": "{0} 𑄟𑄨𑄚𑄨𑄖𑄴 𑄃𑄉𑄬" } } }, "second": { "displayName": "𑄥𑄬𑄉𑄬𑄚𑄴", "relative": { "0": "𑄃𑄨𑄇𑄴𑄅𑄚𑄪" }, "relativeTime": { "future": { "one": "{0} 𑄥𑄬𑄉𑄬𑄚𑄴𑄘𑄬", "other": "{0} 𑄥𑄬𑄉𑄬𑄚𑄴𑄘𑄬" }, "past": { "one": "{0} 𑄥𑄬𑄉𑄬𑄚𑄴 𑄃𑄉𑄬", "other": "{0} 𑄥𑄬𑄉𑄬𑄚𑄴 𑄃𑄉𑄬" } } }, "second-short": { "displayName": "𑄥𑄬𑄉𑄬𑄚𑄴", "relative": { "0": "𑄃𑄨𑄇𑄴𑄅𑄚𑄪" }, "relativeTime": { "future": { "one": "{0} 𑄥𑄬𑄉𑄬𑄚𑄴𑄘𑄬", "other": "{0} 𑄥𑄬𑄉𑄬𑄚𑄴𑄘𑄬" }, "past": { "one": "{0} 𑄥𑄬𑄉𑄬𑄚𑄴 𑄃𑄉𑄬", "other": "{0} 𑄥𑄬𑄉𑄬𑄚𑄴 𑄃𑄉𑄬" } } } } }, { "locale": "ccp-IN", "parentLocale": "ccp" }, { "locale": "ce", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "шо", "relative": { "0": "карарчу шарахь", "1": "рогӀерчу шарахь", "-1": "даханчу шарахь" }, "relativeTime": { "future": { "one": "{0} шо даьлча", "other": "{0} шо даьлча" }, "past": { "one": "{0} шо хьалха", "other": "{0} шо хьалха" } } }, "year-short": { "displayName": "ш.", "relative": { "0": "карарчу шарахь", "1": "рогӀерчу шарахь", "-1": "даханчу шарахь" }, "relativeTime": { "future": { "one": "{0} ш. даьлча", "other": "{0} ш. даьлча" }, "past": { "one": "{0} ш. хьалха", "other": "{0} ш. хьалха" } } }, "month": { "displayName": "бутт", "relative": { "0": "карарчу баттахь", "1": "рогӀерчу баттахь", "-1": "баханчу баттахь" }, "relativeTime": { "future": { "one": "{0} бутт баьлча", "other": "{0} бутт баьлча" }, "past": { "one": "{0} бутт хьалха", "other": "{0} бутт хьалха" } } }, "month-short": { "displayName": "бут.", "relative": { "0": "карарчу баттахь", "1": "рогӀерчу баттахь", "-1": "баханчу баттахь" }, "relativeTime": { "future": { "one": "{0} б. баьлча", "other": "{0} б. баьлча" }, "past": { "one": "{0} б. хьалха", "other": "{0} б. хьалха" } } }, "week": { "displayName": "кӀира", "relativePeriod": "the week of {0}", "relative": { "0": "карарчу кӀирнахь", "1": "рогӀерчу кӀирнахь", "-1": "даханчу кӀирнахь" }, "relativeTime": { "future": { "one": "{0} кӀира даьлча", "other": "{0} кӀира даьлча" }, "past": { "one": "{0} кӀира хьалха", "other": "{0} кӀира хьалха" } } }, "week-short": { "displayName": "кӀир.", "relativePeriod": "кӀирнахь", "relative": { "0": "карарчу кӀирнахь", "1": "рогӀерчу кӀирнахь", "-1": "даханчу кӀирнахь" }, "relativeTime": { "future": { "one": "{0} кӀир. даьлча", "other": "{0} кӀир. даьлча" }, "past": { "one": "{0} кӀир. хьалха", "other": "{0} кӀир. хьалха" } } }, "day": { "displayName": "де", "relative": { "0": "тахана", "1": "кхана", "-1": "селхана" }, "relativeTime": { "future": { "one": "{0} де даьлча", "other": "{0} де даьлча" }, "past": { "one": "{0} де хьалха", "other": "{0} де хьалха" } } }, "day-short": { "displayName": "де", "relative": { "0": "тахана", "1": "кхана", "-1": "селхана" }, "relativeTime": { "future": { "one": "{0} д. даьлча", "other": "{0} д. даьлча" }, "past": { "one": "{0} д. хьалха", "other": "{0} де хьалха" } } }, "hour": { "displayName": "сахьт", "relative": { "0": "хӀокху сахьтехь" }, "relativeTime": { "future": { "one": "{0} сахьт даьлча", "other": "{0} сахьт даьлча" }, "past": { "one": "{0} сахьт хьалха", "other": "{0} сахьт хьалха" } } }, "hour-short": { "displayName": "сахь.", "relative": { "0": "хӀокху сахьтехь" }, "relativeTime": { "future": { "one": "{0} сахь. даьлча", "other": "{0} сахь. даьлча" }, "past": { "one": "{0} сахь. хьалха", "other": "{0} сахь. хьалха" } } }, "minute": { "displayName": "минот", "relative": { "0": "хӀокху минотехь" }, "relativeTime": { "future": { "one": "{0} минот яьлча", "other": "{0} минот яьлча" }, "past": { "one": "{0} минот хьалха", "other": "{0} минот хьалха" } } }, "minute-short": { "displayName": "мин.", "relative": { "0": "хӀокху минотехь" }, "relativeTime": { "future": { "one": "{0} мин. яьлча", "other": "{0} мин. яьлча" }, "past": { "one": "{0} мин. хьалха", "other": "{0} мин. хьалха" } } }, "second": { "displayName": "секунд", "relative": { "0": "хӀинца" }, "relativeTime": { "future": { "one": "{0} секунд яьлча", "other": "{0} секунд яьлча" }, "past": { "one": "{0} секунд хьалха", "other": "{0} секунд хьалха" } } }, "second-short": { "displayName": "сек.", "relative": { "0": "хӀинца" }, "relativeTime": { "future": { "one": "{0} сек. яьлча", "other": "{0} сек. яьлча" }, "past": { "one": "{0} сек. хьалха", "other": "{0} сек. хьалха" } } } } }, { "locale": "cgg", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Omwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Omwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Omwezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Omwezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Esande", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Esande", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Eizooba", "relative": { "0": "Erizooba", "1": "Nyenkyakare", "-1": "Nyomwabazyo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Eizooba", "relative": { "0": "Erizooba", "1": "Nyenkyakare", "-1": "Nyomwabazyo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Shaaha", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Shaaha", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Edakiika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Edakiika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Obucweka\u002FEsekendi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Obucweka\u002FEsekendi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "chr", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ᎤᏕᏘᏴᏌᏗᏒᎢ", "relative": { "0": "ᎯᎠ ᏧᏕᏘᏴᏒᏘ", "1": "ᎡᏘᏴᎢ", "-1": "ᎡᏘ ᏥᎨᏒ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᎤᏕᏘᏴᏌᏗᏒᎢ", "other": "ᎾᎿ {0} ᎢᏧᏕᏘᏴᏌᏗᏒᎢ" }, "past": { "one": "{0} ᎤᏕᏘᏴᏌᏗᏒᎢ ᏥᎨᏒ", "other": "{0} ᎢᏧᏕᏘᏴᏌᏗᏒᎢ ᏥᎨᏒ" } } }, "year-short": { "displayName": "ᎤᏕ.", "relative": { "0": "ᎯᎠ ᏧᏕᏘᏴᏒᏘ", "1": "ᎡᏘᏴᎢ", "-1": "ᎡᏘ ᏥᎨᏒ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᎤᏕ.", "other": "ᎾᎿ {0} ᎤᏕ." }, "past": { "one": "{0} ᎤᏕ. ᏥᎨᏒ", "other": "{0} ᎤᏕ. ᏥᎨᏒ" } } }, "month": { "displayName": "ᎧᎸᎢ", "relative": { "0": "ᎯᎠ ᎧᎸᎢ", "1": "ᏔᎵᏁ ᎧᎸᎢ", "-1": "ᎧᎸᎢ ᏥᎨᏒ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᎧᎸᎢ", "other": "ᎾᎿ {0} ᏗᎧᎸᎢ" }, "past": { "one": "{0} ᎧᎸᎢ ᏥᎨᏒ", "other": "{0} ᏗᎧᎸᎢ ᏥᎨᏒ" } } }, "month-short": { "displayName": "ᎧᎸ.", "relative": { "0": "ᎯᎠ ᎧᎸᎢ", "1": "ᏔᎵᏁ ᎧᎸᎢ", "-1": "ᎧᎸᎢ ᏥᎨᏒ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᎧᎸ.", "other": "ᎾᎿ {0} ᎧᎸ." }, "past": { "one": "{0} ᎧᎸ. ᏥᎨᏒ", "other": "{0} ᎧᎸ. ᏥᎨᏒ" } } }, "week": { "displayName": "ᏒᎾᏙᏓᏆᏍᏗ", "relativePeriod": "Ꮎ ᏒᎾᏙᏓᏆᏍᏗ ᎾᏍᎩ {0}", "relative": { "0": "ᎯᎠ ᎠᎵᎵᏌ", "1": "ᏐᏆᎴᏅᎲ", "-1": "ᏥᏛᎵᏱᎵᏒᎢ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᏒᎾᏙᏓᏆᏍᏗ", "other": "ᎾᎿ {0} ᎢᏳᎾᏙᏓᏆᏍᏗ" }, "past": { "one": "{0} ᏒᎾᏙᏓᏆᏍᏗ ᏥᎨᏒ", "other": "{0} ᎢᏳᎾᏙᏓᏆᏍᏗ ᏥᎨᏒ" } } }, "week-short": { "displayName": "ᏒᎾ.", "relativePeriod": "Ꮎ ᏒᎾᏙᏓᏆᏍᏗ ᎾᏍᎩ {0}", "relative": { "0": "ᎯᎠ ᎠᎵᎵᏌ", "1": "ᏐᏆᎴᏅᎲ", "-1": "ᏥᏛᎵᏱᎵᏒᎢ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᏒᎾ.", "other": "ᎾᎿ {0} ᏒᎾ." }, "past": { "one": "{0} ᏒᎾ. ᏥᎨᏒ", "other": "{0} ᏒᎾ. ᏥᎨᏒ" } } }, "day": { "displayName": "ᎢᎦ", "relative": { "0": "ᎪᎯ ᎢᎦ", "1": "ᏌᎾᎴᎢ", "-1": "ᏒᎯ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᎢᎦ", "other": "ᎾᎿ {0} ᎯᎸᏍᎩ ᏧᏒᎯᏛ" }, "past": { "one": "{0} ᎢᎦ ᏥᎨᏒ", "other": "{0} ᎯᎸᏍᎩ ᏧᏒᎯᏛ ᏥᎨᏒ" } } }, "day-short": { "displayName": "ᎢᎦ", "relative": { "0": "ᎪᎯ ᎢᎦ", "1": "ᏌᎾᎴᎢ", "-1": "ᏒᎯ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᎢᎦ", "other": "ᎾᎿ {0} ᎯᎸᏍᎩ ᏧᏒᎯᏛ" }, "past": { "one": "{0} ᎢᎦ ᏥᎨᏒ", "other": "{0} ᎯᎸᏍᎩ ᏧᏒᎯᏛ ᏥᎨᏒ" } } }, "hour": { "displayName": "ᏑᏟᎶᏓ", "relative": { "0": "ᎯᎠ ᏑᏟᎶᏓ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᏑᏟᎶᏓ", "other": "ᎾᎿ {0} ᎢᏳᏟᎶᏓ" }, "past": { "one": "{0} ᏑᏟᎶᏓ ᏥᎨᏒ", "other": "{0} ᎢᏳᏟᎶᏓ ᏥᎨᏒ" } } }, "hour-short": { "displayName": "ᏑᏟ.", "relative": { "0": "ᎯᎠ ᏑᏟᎶᏓ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᏑᏟ.", "other": "ᎾᎿ {0} ᏑᏟ." }, "past": { "one": "{0} ᏑᏟ. ᏥᎨᏒ", "other": "{0} ᏑᏟ. ᏥᎨᏒ" } } }, "minute": { "displayName": "ᎢᏯᏔᏬᏍᏔᏅ", "relative": { "0": "ᎯᎠ ᎢᏯᏔᏬᏍᏔᏅ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᎢᏯᏔᏬᏍᏔᏅ", "other": "ᎾᎿ {0} ᎢᏯᏔᏬᏍᏔᏅ" }, "past": { "one": "{0} ᎢᏯᏔᏬᏍᏔᏅ ᏥᎨᏒ", "other": "{0} ᎢᏯᏔᏬᏍᏔᏅ ᏥᎨᏒ" } } }, "minute-short": { "displayName": "ᎢᏯᏔ.", "relative": { "0": "ᎯᎠ ᎢᏯᏔᏬᏍᏔᏅ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᎢᏯᏔ.", "other": "ᎾᎿ {0} ᎢᏯᏔ." }, "past": { "one": "{0} ᎢᏯᏔ. ᏥᎨᏒ", "other": "{0} ᎢᏯᏔ. ᏥᎨᏒ" } } }, "second": { "displayName": "ᎠᏎᏢ", "relative": { "0": "ᏃᏊ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᎠᏎᏢ", "other": "ᎾᎿ {0} ᏓᏓᎾᏩᏍᎬ ᏥᎨᏒ" }, "past": { "one": "{0} ᎠᏎᏢ ᏥᎨᏒ", "other": "{0} ᏓᏓᎾᏩᏍᎬ ᏥᎨᏒ" } } }, "second-short": { "displayName": "ᎠᏎ.", "relative": { "0": "ᏃᏊ" }, "relativeTime": { "future": { "one": "ᎾᎿ {0} ᎠᏎ.", "other": "ᎾᎿ {0} ᎠᏎ." }, "past": { "one": "{0} ᎠᏎ. ᏥᎨᏒ", "other": "{0} ᎠᏎ. ᏥᎨᏒ" } } } } }, { "locale": "ckb", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ckb-IR", "parentLocale": "ckb" }, { "locale": "cs", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], v0 = !s[1];
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one'
            : ((i >= 2 && i <= 4) && v0) ? 'few'
                : (!v0) ? 'many'
                    : 'other';
    }, "fields": { "year": { "displayName": "rok", "relative": { "0": "tento rok", "1": "příští rok", "-1": "minulý rok" }, "relativeTime": { "future": { "one": "za {0} rok", "few": "za {0} roky", "many": "za {0} roku", "other": "za {0} let" }, "past": { "one": "před {0} rokem", "few": "před {0} lety", "many": "před {0} roku", "other": "před {0} lety" } } }, "year-short": { "displayName": "r.", "relative": { "0": "tento rok", "1": "příští rok", "-1": "minulý rok" }, "relativeTime": { "future": { "one": "za {0} r.", "few": "za {0} r.", "many": "za {0} r.", "other": "za {0} l." }, "past": { "one": "před {0} r.", "few": "před {0} r.", "many": "před {0} r.", "other": "před {0} l." } } }, "month": { "displayName": "měsíc", "relative": { "0": "tento měsíc", "1": "příští měsíc", "-1": "minulý měsíc" }, "relativeTime": { "future": { "one": "za {0} měsíc", "few": "za {0} měsíce", "many": "za {0} měsíce", "other": "za {0} měsíců" }, "past": { "one": "před {0} měsícem", "few": "před {0} měsíci", "many": "před {0} měsíce", "other": "před {0} měsíci" } } }, "month-short": { "displayName": "měs.", "relative": { "0": "tento měs.", "1": "příští měs.", "-1": "minulý měs." }, "relativeTime": { "future": { "one": "za {0} měs.", "few": "za {0} měs.", "many": "za {0} měs.", "other": "za {0} měs." }, "past": { "one": "před {0} měs.", "few": "před {0} měs.", "many": "před {0} měs.", "other": "před {0} měs." } } }, "week": { "displayName": "týden", "relativePeriod": "v týdnu {0}", "relative": { "0": "tento týden", "1": "příští týden", "-1": "minulý týden" }, "relativeTime": { "future": { "one": "za {0} týden", "few": "za {0} týdny", "many": "za {0} týdne", "other": "za {0} týdnů" }, "past": { "one": "před {0} týdnem", "few": "před {0} týdny", "many": "před {0} týdne", "other": "před {0} týdny" } } }, "week-short": { "displayName": "týd.", "relativePeriod": "v týd. {0}", "relative": { "0": "tento týd.", "1": "příští týd.", "-1": "minulý týd." }, "relativeTime": { "future": { "one": "za {0} týd.", "few": "za {0} týd.", "many": "za {0} týd.", "other": "za {0} týd." }, "past": { "one": "před {0} týd.", "few": "před {0} týd.", "many": "před {0} týd.", "other": "před {0} týd." } } }, "day": { "displayName": "den", "relative": { "0": "dnes", "1": "zítra", "2": "pozítří", "-2": "předevčírem", "-1": "včera" }, "relativeTime": { "future": { "one": "za {0} den", "few": "za {0} dny", "many": "za {0} dne", "other": "za {0} dní" }, "past": { "one": "před {0} dnem", "few": "před {0} dny", "many": "před {0} dne", "other": "před {0} dny" } } }, "day-short": { "displayName": "den", "relative": { "0": "dnes", "1": "zítra", "2": "pozítří", "-2": "předevčírem", "-1": "včera" }, "relativeTime": { "future": { "one": "za {0} den", "few": "za {0} dny", "many": "za {0} dne", "other": "za {0} dní" }, "past": { "one": "před {0} dnem", "few": "před {0} dny", "many": "před {0} dne", "other": "před {0} dny" } } }, "hour": { "displayName": "hodina", "relative": { "0": "tuto hodinu" }, "relativeTime": { "future": { "one": "za {0} hodinu", "few": "za {0} hodiny", "many": "za {0} hodiny", "other": "za {0} hodin" }, "past": { "one": "před {0} hodinou", "few": "před {0} hodinami", "many": "před {0} hodiny", "other": "před {0} hodinami" } } }, "hour-short": { "displayName": "h", "relative": { "0": "tuto hodinu" }, "relativeTime": { "future": { "one": "za {0} h", "few": "za {0} h", "many": "za {0} h", "other": "za {0} h" }, "past": { "one": "před {0} h", "few": "před {0} h", "many": "před {0} h", "other": "před {0} h" } } }, "minute": { "displayName": "minuta", "relative": { "0": "tuto minutu" }, "relativeTime": { "future": { "one": "za {0} minutu", "few": "za {0} minuty", "many": "za {0} minuty", "other": "za {0} minut" }, "past": { "one": "před {0} minutou", "few": "před {0} minutami", "many": "před {0} minuty", "other": "před {0} minutami" } } }, "minute-short": { "displayName": "min", "relative": { "0": "tuto minutu" }, "relativeTime": { "future": { "one": "za {0} min", "few": "za {0} min", "many": "za {0} min", "other": "za {0} min" }, "past": { "one": "před {0} min", "few": "před {0} min", "many": "před {0} min", "other": "před {0} min" } } }, "second": { "displayName": "sekunda", "relative": { "0": "nyní" }, "relativeTime": { "future": { "one": "za {0} sekundu", "few": "za {0} sekundy", "many": "za {0} sekundy", "other": "za {0} sekund" }, "past": { "one": "před {0} sekundou", "few": "před {0} sekundami", "many": "před {0} sekundy", "other": "před {0} sekundami" } } }, "second-short": { "displayName": "s", "relative": { "0": "nyní" }, "relativeTime": { "future": { "one": "za {0} s", "few": "za {0} s", "many": "za {0} s", "other": "za {0} s" }, "past": { "one": "před {0} s", "few": "před {0} s", "many": "před {0} s", "other": "před {0} s" } } } } }, { "locale": "cu", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "cy", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return ((n == 0 || n == 7 || n == 8
                || n == 9)) ? 'zero'
                : (n == 1) ? 'one'
                    : (n == 2) ? 'two'
                        : ((n == 3
                            || n == 4)) ? 'few'
                            : ((n == 5
                                || n == 6)) ? 'many'
                                : 'other';
        return (n == 0) ? 'zero'
            : (n == 1) ? 'one'
                : (n == 2) ? 'two'
                    : (n == 3) ? 'few'
                        : (n == 6) ? 'many'
                            : 'other';
    }, "fields": { "year": { "displayName": "blwyddyn", "relative": { "0": "eleni", "1": "blwyddyn nesaf", "-1": "llynedd" }, "relativeTime": { "future": { "zero": "ymhen {0} mlynedd", "one": "ymhen blwyddyn", "two": "ymhen {0} flynedd", "few": "ymhen {0} blynedd", "many": "ymhen {0} blynedd", "other": "ymhen {0} mlynedd" }, "past": { "zero": "{0} o flynyddoedd yn ôl", "one": "blwyddyn yn ôl", "two": "{0} flynedd yn ôl", "few": "{0} blynedd yn ôl", "many": "{0} blynedd yn ôl", "other": "{0} o flynyddoedd yn ôl" } } }, "year-short": { "displayName": "bl.", "relative": { "0": "eleni", "1": "blwyddyn nesaf", "-1": "llynedd" }, "relativeTime": { "future": { "zero": "ymhen {0} mlynedd", "one": "ymhen blwyddyn", "two": "ymhen {0} flynedd", "few": "ymhen {0} blynedd", "many": "ymhen {0} blynedd", "other": "ymhen {0} mlynedd" }, "past": { "zero": "{0} o flynyddoedd yn ôl", "one": "blwyddyn yn ôl", "two": "{0} flynedd yn ôl", "few": "{0} blynedd yn ôl", "many": "{0} blynedd yn ôl", "other": "{0} o flynyddoedd yn ôl" } } }, "month": { "displayName": "mis", "relative": { "0": "y mis hwn", "1": "mis nesaf", "-1": "mis diwethaf" }, "relativeTime": { "future": { "zero": "ymhen {0} mis", "one": "ymhen mis", "two": "ymhen deufis", "few": "ymhen {0} mis", "many": "ymhen {0} mis", "other": "ymhen {0} mis" }, "past": { "zero": "{0} mis yn ôl", "one": "{0} mis yn ôl", "two": "{0} fis yn ôl", "few": "{0} mis yn ôl", "many": "{0} mis yn ôl", "other": "{0} mis yn ôl" } } }, "month-short": { "displayName": "mis", "relative": { "0": "y mis hwn", "1": "mis nesaf", "-1": "mis diwethaf" }, "relativeTime": { "future": { "zero": "ymhen {0} mis", "one": "ymhen mis", "two": "ymhen deufis", "few": "ymhen {0} mis", "many": "ymhen {0} mis", "other": "ymhen {0} mis" }, "past": { "zero": "{0} mis yn ôl", "one": "{0} mis yn ôl", "two": "deufis yn ôl", "few": "{0} mis yn ôl", "many": "{0} mis yn ôl", "other": "{0} mis yn ôl" } } }, "week": { "displayName": "wythnos", "relativePeriod": "wythnos {0}", "relative": { "0": "yr wythnos hon", "1": "wythnos nesaf", "-1": "wythnos ddiwethaf" }, "relativeTime": { "future": { "zero": "ymhen {0} wythnos", "one": "ymhen wythnos", "two": "ymhen pythefnos", "few": "ymhen {0} wythnos", "many": "ymhen {0} wythnos", "other": "ymhen {0} wythnos" }, "past": { "zero": "{0} wythnos yn ôl", "one": "{0} wythnos yn ôl", "two": "{0} wythnos yn ôl", "few": "{0} wythnos yn ôl", "many": "{0} wythnos yn ôl", "other": "{0} wythnos yn ôl" } } }, "week-short": { "displayName": "wythnos", "relativePeriod": "wythnos {0}", "relative": { "0": "yr wythnos hon", "1": "wythnos nesaf", "-1": "wythnos ddiwethaf" }, "relativeTime": { "future": { "zero": "ymhen {0} wythnos", "one": "ymhen wythnos", "two": "ymhen pythefnos", "few": "ymhen {0} wythnos", "many": "ymhen {0} wythnos", "other": "ymhen {0} wythnos" }, "past": { "zero": "{0} wythnos yn ôl", "one": "{0} wythnos yn ôl", "two": "pythefnos yn ôl", "few": "{0} wythnos yn ôl", "many": "{0} wythnos yn ôl", "other": "{0} wythnos yn ôl" } } }, "day": { "displayName": "diwrnod", "relative": { "0": "heddiw", "1": "yfory", "2": "drennydd", "-2": "echdoe", "-1": "ddoe" }, "relativeTime": { "future": { "zero": "ymhen {0} diwrnod", "one": "ymhen diwrnod", "two": "ymhen deuddydd", "few": "ymhen {0} diwrnod", "many": "ymhen {0} diwrnod", "other": "ymhen {0} diwrnod" }, "past": { "zero": "{0} diwrnod yn ôl", "one": "{0} diwrnod yn ôl", "two": "{0} ddiwrnod yn ôl", "few": "{0} diwrnod yn ôl", "many": "{0} diwrnod yn ôl", "other": "{0} diwrnod yn ôl" } } }, "day-short": { "displayName": "diwrnod", "relative": { "0": "heddiw", "1": "yfory", "2": "drennydd", "-2": "echdoe", "-1": "ddoe" }, "relativeTime": { "future": { "zero": "ymhen {0} diwrnod", "one": "ymhen diwrnod", "two": "ymhen deuddydd", "few": "ymhen {0} diwrnod", "many": "ymhen {0} diwrnod", "other": "ymhen {0} diwrnod" }, "past": { "zero": "{0} diwrnod yn ôl", "one": "{0} diwrnod yn ôl", "two": "{0} ddiwrnod yn ôl", "few": "{0} diwrnod yn ôl", "many": "{0} diwrnod yn ôl", "other": "{0} diwrnod yn ôl" } } }, "hour": { "displayName": "awr", "relative": { "0": "yr awr hon" }, "relativeTime": { "future": { "zero": "ymhen {0} awr", "one": "ymhen awr", "two": "ymhen {0} awr", "few": "ymhen {0} awr", "many": "ymhen {0} awr", "other": "ymhen {0} awr" }, "past": { "zero": "{0} awr yn ôl", "one": "{0} awr yn ôl", "two": "{0} awr yn ôl", "few": "{0} awr yn ôl", "many": "{0} awr yn ôl", "other": "{0} awr yn ôl" } } }, "hour-short": { "displayName": "awr", "relative": { "0": "yr awr hon" }, "relativeTime": { "future": { "zero": "ymhen {0} awr", "one": "ymhen awr", "two": "ymhen {0} awr", "few": "ymhen {0} awr", "many": "ymhen {0} awr", "other": "ymhen {0} awr" }, "past": { "zero": "{0} awr yn ôl", "one": "awr yn ôl", "two": "{0} awr yn ôl", "few": "{0} awr yn ôl", "many": "{0} awr yn ôl", "other": "{0} awr yn ôl" } } }, "minute": { "displayName": "munud", "relative": { "0": "y funud hon" }, "relativeTime": { "future": { "zero": "ymhen {0} munud", "one": "ymhen {0} munud", "two": "ymhen {0} munud", "few": "ymhen {0} munud", "many": "ymhen {0} munud", "other": "ymhen {0} munud" }, "past": { "zero": "{0} munud yn ôl", "one": "{0} munud yn ôl", "two": "{0} munud yn ôl", "few": "{0} munud yn ôl", "many": "{0} munud yn ôl", "other": "{0} munud yn ôl" } } }, "minute-short": { "displayName": "mun.", "relative": { "0": "y funud hon" }, "relativeTime": { "future": { "zero": "ymhen {0} munud", "one": "ymhen {0} mun.", "two": "ymhen {0} fun.", "few": "ymhen {0} munud", "many": "ymhen {0} munud", "other": "ymhen {0} munud" }, "past": { "zero": "{0} munud yn ôl", "one": "{0} munud yn ôl", "two": "{0} fun. yn ôl", "few": "{0} munud yn ôl", "many": "{0} munud yn ôl", "other": "{0} munud yn ôl" } } }, "second": { "displayName": "eiliad", "relative": { "0": "nawr" }, "relativeTime": { "future": { "zero": "ymhen {0} eiliad", "one": "ymhen {0} eiliad", "two": "ymhen {0} eiliad", "few": "ymhen {0} eiliad", "many": "ymhen {0} eiliad", "other": "ymhen {0} eiliad" }, "past": { "zero": "{0} eiliad yn ôl", "one": "{0} eiliad yn ôl", "two": "{0} eiliad yn ôl", "few": "{0} eiliad yn ôl", "many": "{0} eiliad yn ôl", "other": "{0} eiliad yn ôl" } } }, "second-short": { "displayName": "eiliad", "relative": { "0": "nawr" }, "relativeTime": { "future": { "zero": "ymhen {0} eiliad", "one": "ymhen {0} eiliad", "two": "ymhen {0} eiliad", "few": "ymhen {0} eiliad", "many": "ymhen {0} eiliad", "other": "ymhen {0} eiliad" }, "past": { "zero": "{0} eiliad yn ôl", "one": "{0} eiliad yn ôl", "two": "{0} eiliad yn ôl", "few": "{0} eiliad yn ôl", "many": "{0} eiliad yn ôl", "other": "{0} eiliad yn ôl" } } } } }, { "locale": "da", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], t0 = Number(s[0]) == n;
        if (ord)
            return 'other';
        return (n == 1 || !t0 && (i == 0
            || i == 1)) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "år", "relative": { "0": "i år", "1": "næste år", "-1": "sidste år" }, "relativeTime": { "future": { "one": "om {0} år", "other": "om {0} år" }, "past": { "one": "for {0} år siden", "other": "for {0} år siden" } } }, "year-short": { "displayName": "år", "relative": { "0": "i år", "1": "næste år", "-1": "sidste år" }, "relativeTime": { "future": { "one": "om {0} år", "other": "om {0} år" }, "past": { "one": "for {0} år siden", "other": "for {0} år siden" } } }, "month": { "displayName": "måned", "relative": { "0": "denne måned", "1": "næste måned", "-1": "sidste måned" }, "relativeTime": { "future": { "one": "om {0} måned", "other": "om {0} måneder" }, "past": { "one": "for {0} måned siden", "other": "for {0} måneder siden" } } }, "month-short": { "displayName": "md.", "relative": { "0": "denne md.", "1": "næste md.", "-1": "sidste md." }, "relativeTime": { "future": { "one": "om {0} md.", "other": "om {0} mdr." }, "past": { "one": "for {0} md. siden", "other": "for {0} mdr. siden" } } }, "week": { "displayName": "uge", "relativePeriod": "i ugen med {0}", "relative": { "0": "denne uge", "1": "næste uge", "-1": "sidste uge" }, "relativeTime": { "future": { "one": "om {0} uge", "other": "om {0} uger" }, "past": { "one": "for {0} uge siden", "other": "for {0} uger siden" } } }, "week-short": { "displayName": "uge", "relativePeriod": "i ugen med {0}", "relative": { "0": "denne uge", "1": "næste uge", "-1": "sidste uge" }, "relativeTime": { "future": { "one": "om {0} uge", "other": "om {0} uger" }, "past": { "one": "for {0} uge siden", "other": "for {0} uger siden" } } }, "day": { "displayName": "dag", "relative": { "0": "i dag", "1": "i morgen", "2": "i overmorgen", "-2": "i forgårs", "-1": "i går" }, "relativeTime": { "future": { "one": "om {0} dag", "other": "om {0} dage" }, "past": { "one": "for {0} dag siden", "other": "for {0} dage siden" } } }, "day-short": { "displayName": "dag", "relative": { "0": "i dag", "1": "i morgen", "2": "i overmorgen", "-2": "i forgårs", "-1": "i går" }, "relativeTime": { "future": { "one": "om {0} dag", "other": "om {0} dage" }, "past": { "one": "for {0} dag siden", "other": "for {0} dage siden" } } }, "hour": { "displayName": "time", "relative": { "0": "i den kommende time" }, "relativeTime": { "future": { "one": "om {0} time", "other": "om {0} timer" }, "past": { "one": "for {0} time siden", "other": "for {0} timer siden" } } }, "hour-short": { "displayName": "t.", "relative": { "0": "i den kommende time" }, "relativeTime": { "future": { "one": "om {0} time", "other": "om {0} timer" }, "past": { "one": "for {0} time siden", "other": "for {0} timer siden" } } }, "minute": { "displayName": "minut", "relative": { "0": "i det kommende minut" }, "relativeTime": { "future": { "one": "om {0} minut", "other": "om {0} minutter" }, "past": { "one": "for {0} minut siden", "other": "for {0} minutter siden" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "i det kommende minut" }, "relativeTime": { "future": { "one": "om {0} min.", "other": "om {0} min." }, "past": { "one": "for {0} min. siden", "other": "for {0} min. siden" } } }, "second": { "displayName": "sekund", "relative": { "0": "nu" }, "relativeTime": { "future": { "one": "om {0} sekund", "other": "om {0} sekunder" }, "past": { "one": "for {0} sekund siden", "other": "for {0} sekunder siden" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "nu" }, "relativeTime": { "future": { "one": "om {0} sek.", "other": "om {0} sek." }, "past": { "one": "for {0} sek. siden", "other": "for {0} sek. siden" } } } } }, { "locale": "da-GL", "parentLocale": "da" }, { "locale": "dav", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mori", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mori", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Juma", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Juma", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ituku", "relative": { "0": "Idime", "1": "Kesho", "-1": "Iguo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ituku", "relative": { "0": "Idime", "1": "Kesho", "-1": "Iguo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "de", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1];
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Jahr", "relative": { "0": "dieses Jahr", "1": "nächstes Jahr", "-1": "letztes Jahr" }, "relativeTime": { "future": { "one": "in {0} Jahr", "other": "in {0} Jahren" }, "past": { "one": "vor {0} Jahr", "other": "vor {0} Jahren" } } }, "year-short": { "displayName": "Jahr", "relative": { "0": "dieses Jahr", "1": "nächstes Jahr", "-1": "letztes Jahr" }, "relativeTime": { "future": { "one": "in {0} Jahr", "other": "in {0} Jahren" }, "past": { "one": "vor {0} Jahr", "other": "vor {0} Jahren" } } }, "month": { "displayName": "Monat", "relative": { "0": "diesen Monat", "1": "nächsten Monat", "-1": "letzten Monat" }, "relativeTime": { "future": { "one": "in {0} Monat", "other": "in {0} Monaten" }, "past": { "one": "vor {0} Monat", "other": "vor {0} Monaten" } } }, "month-short": { "displayName": "Monat", "relative": { "0": "diesen Monat", "1": "nächsten Monat", "-1": "letzten Monat" }, "relativeTime": { "future": { "one": "in {0} Monat", "other": "in {0} Monaten" }, "past": { "one": "vor {0} Monat", "other": "vor {0} Monaten" } } }, "week": { "displayName": "Woche", "relativePeriod": "die Woche vom {0}", "relative": { "0": "diese Woche", "1": "nächste Woche", "-1": "letzte Woche" }, "relativeTime": { "future": { "one": "in {0} Woche", "other": "in {0} Wochen" }, "past": { "one": "vor {0} Woche", "other": "vor {0} Wochen" } } }, "week-short": { "displayName": "Woche", "relativePeriod": "die Woche vom {0}", "relative": { "0": "diese Woche", "1": "nächste Woche", "-1": "letzte Woche" }, "relativeTime": { "future": { "one": "in {0} Woche", "other": "in {0} Wochen" }, "past": { "one": "vor {0} Woche", "other": "vor {0} Wochen" } } }, "day": { "displayName": "Tag", "relative": { "0": "heute", "1": "morgen", "2": "übermorgen", "-2": "vorgestern", "-1": "gestern" }, "relativeTime": { "future": { "one": "in {0} Tag", "other": "in {0} Tagen" }, "past": { "one": "vor {0} Tag", "other": "vor {0} Tagen" } } }, "day-short": { "displayName": "Tag", "relative": { "0": "heute", "1": "morgen", "2": "übermorgen", "-2": "vorgestern", "-1": "gestern" }, "relativeTime": { "future": { "one": "in {0} Tag", "other": "in {0} Tagen" }, "past": { "one": "vor {0} Tag", "other": "vor {0} Tagen" } } }, "hour": { "displayName": "Stunde", "relative": { "0": "in dieser Stunde" }, "relativeTime": { "future": { "one": "in {0} Stunde", "other": "in {0} Stunden" }, "past": { "one": "vor {0} Stunde", "other": "vor {0} Stunden" } } }, "hour-short": { "displayName": "Std.", "relative": { "0": "in dieser Stunde" }, "relativeTime": { "future": { "one": "in {0} Std.", "other": "in {0} Std." }, "past": { "one": "vor {0} Std.", "other": "vor {0} Std." } } }, "minute": { "displayName": "Minute", "relative": { "0": "in dieser Minute" }, "relativeTime": { "future": { "one": "in {0} Minute", "other": "in {0} Minuten" }, "past": { "one": "vor {0} Minute", "other": "vor {0} Minuten" } } }, "minute-short": { "displayName": "Min.", "relative": { "0": "in dieser Minute" }, "relativeTime": { "future": { "one": "in {0} Min.", "other": "in {0} Min." }, "past": { "one": "vor {0} Min.", "other": "vor {0} Min." } } }, "second": { "displayName": "Sekunde", "relative": { "0": "jetzt" }, "relativeTime": { "future": { "one": "in {0} Sekunde", "other": "in {0} Sekunden" }, "past": { "one": "vor {0} Sekunde", "other": "vor {0} Sekunden" } } }, "second-short": { "displayName": "Sek.", "relative": { "0": "jetzt" }, "relativeTime": { "future": { "one": "in {0} Sek.", "other": "in {0} Sek." }, "past": { "one": "vor {0} Sek.", "other": "vor {0} Sek." } } } } }, { "locale": "de-AT", "parentLocale": "de" }, { "locale": "de-BE", "parentLocale": "de" }, { "locale": "de-CH", "parentLocale": "de" }, { "locale": "de-IT", "parentLocale": "de" }, { "locale": "de-LI", "parentLocale": "de" }, { "locale": "de-LU", "parentLocale": "de" }, { "locale": "dje", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Jiiri", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Jiiri", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Handu", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Handu", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Hebu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Hebu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Zaari", "relative": { "0": "Hõo", "1": "Suba", "-1": "Bi" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Zaari", "relative": { "0": "Hõo", "1": "Suba", "-1": "Bi" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Guuru", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Guuru", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Miniti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Miniti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Miti", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Miti", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "dsb", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i100 = i.slice(-2), f100 = f.slice(-2);
        if (ord)
            return 'other';
        return (v0 && i100 == 1
            || f100 == 1) ? 'one'
            : (v0 && i100 == 2
                || f100 == 2) ? 'two'
                : (v0 && (i100 == 3 || i100 == 4) || (f100 == 3
                    || f100 == 4)) ? 'few'
                    : 'other';
    }, "fields": { "year": { "displayName": "lěto", "relative": { "0": "lětosa", "1": "znowa", "-1": "łoni" }, "relativeTime": { "future": { "one": "za {0} lěto", "two": "za {0} lěśe", "few": "za {0} lěta", "other": "za {0} lět" }, "past": { "one": "pśed {0} lětom", "two": "pśed {0} lětoma", "few": "pśed {0} lětami", "other": "pśed {0} lětami" } } }, "year-short": { "displayName": "l.", "relative": { "0": "lětosa", "1": "znowa", "-1": "łoni" }, "relativeTime": { "future": { "one": "za {0} l.", "two": "za {0} l.", "few": "za {0} l.", "other": "za {0} l." }, "past": { "one": "pśed {0} l.", "two": "pśed {0} l.", "few": "pśed {0} l.", "other": "pśed {0} l." } } }, "month": { "displayName": "mjasec", "relative": { "0": "ten mjasec", "1": "pśiducy mjasec", "-1": "slědny mjasec" }, "relativeTime": { "future": { "one": "za {0} mjasec", "two": "za {0} mjaseca", "few": "za {0} mjasecy", "other": "za {0} mjasecow" }, "past": { "one": "pśed {0} mjasecom", "two": "pśed {0} mjasecoma", "few": "pśed {0} mjasecami", "other": "pśed {0} mjasecami" } } }, "month-short": { "displayName": "mjas.", "relative": { "0": "ten mjasec", "1": "pśiducy mjasec", "-1": "slědny mjasec" }, "relativeTime": { "future": { "one": "za {0} mjas.", "two": "za {0} mjas.", "few": "za {0} mjas.", "other": "za {0} mjas." }, "past": { "one": "pśed {0} mjas.", "two": "pśed {0} mjas.", "few": "pśed {0} mjas.", "other": "pśed {0} mjas." } } }, "week": { "displayName": "tyźeń", "relativePeriod": "the week of {0}", "relative": { "0": "ten tyźeń", "1": "pśiducy tyźeń", "-1": "slědny tyźeń" }, "relativeTime": { "future": { "one": "za {0} tyźeń", "two": "za {0} tyźenja", "few": "za {0} tyźenje", "other": "za {0} tyźenjow" }, "past": { "one": "pśed {0} tyźenjom", "two": "pśed {0} tyźenjoma", "few": "pśed {0} tyźenjami", "other": "pśed {0} tyźenjami" } } }, "week-short": { "displayName": "tyź.", "relativePeriod": "the week of {0}", "relative": { "0": "ten tyźeń", "1": "pśiducy tyźeń", "-1": "slědny tyźeń" }, "relativeTime": { "future": { "one": "za {0} tyź.", "two": "za {0} tyź.", "few": "za {0} tyź.", "other": "za {0} tyź." }, "past": { "one": "pśed {0} tyź.", "two": "pśed {0} tyź.", "few": "pśed {0} tyź.", "other": "pśed {0} tyź." } } }, "day": { "displayName": "źeń", "relative": { "0": "źinsa", "1": "witśe", "-1": "cora" }, "relativeTime": { "future": { "one": "za {0} źeń", "two": "za {0} dnja", "few": "za {0} dny", "other": "za {0} dnjow" }, "past": { "one": "pśed {0} dnjom", "two": "pśed {0} dnjoma", "few": "pśed {0} dnjami", "other": "pśed {0} dnjami" } } }, "day-short": { "displayName": "źeń", "relative": { "0": "źinsa", "1": "witśe", "-1": "cora" }, "relativeTime": { "future": { "one": "za {0} źeń", "two": "za {0} dnj.", "few": "za {0} dny", "other": "za {0} dnj." }, "past": { "one": "pśed {0} dnj.", "two": "pśed {0} dnj.", "few": "pśed {0} dnj.", "other": "pśed {0} dnj." } } }, "hour": { "displayName": "góźina", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "za {0} góźinu", "two": "za {0} góźinje", "few": "za {0} góźiny", "other": "za {0} góźin" }, "past": { "one": "pśed {0} góźinu", "two": "pśed {0} góźinoma", "few": "pśed {0} góźinami", "other": "pśed {0} góźinami" } } }, "hour-short": { "displayName": "góź.", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "za {0} góź.", "two": "za {0} góź.", "few": "za {0} góź.", "other": "za {0} góź." }, "past": { "one": "pśed {0} góź.", "two": "pśed {0} góź.", "few": "pśed {0} góź.", "other": "pśed {0} góź." } } }, "minute": { "displayName": "minuta", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "za {0} minutu", "two": "za {0} minuśe", "few": "za {0} minuty", "other": "za {0} minutow" }, "past": { "one": "pśed {0} minutu", "two": "pśed {0} minutoma", "few": "pśed {0} minutami", "other": "pśed {0} minutami" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "za {0} min.", "two": "za {0} min.", "few": "za {0} min.", "other": "za {0} min." }, "past": { "one": "pśed {0} min.", "two": "pśed {0} min.", "few": "pśed {0} min.", "other": "pśed {0} min." } } }, "second": { "displayName": "sekunda", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "za {0} sekundu", "two": "za {0} sekunźe", "few": "za {0} sekundy", "other": "za {0} sekundow" }, "past": { "one": "pśed {0} sekundu", "two": "pśed {0} sekundoma", "few": "pśed {0} sekundami", "other": "pśed {0} sekundami" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "za {0} sek.", "two": "za {0} sek.", "few": "za {0} sek.", "other": "za {0} sek." }, "past": { "one": "pśed {0} sek.", "two": "pśed {0} sek.", "few": "pśed {0} sek.", "other": "pśed {0} sek." } } } } }, { "locale": "dua", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "mbú", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "mbú", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "mɔ́di", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "mɔ́di", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "disama", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "disama", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "búnyá", "relative": { "0": "wɛ́ŋgɛ̄", "1": "kíɛlɛ", "-1": "kíɛlɛ nítómb́í" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "búnyá", "relative": { "0": "wɛ́ŋgɛ̄", "1": "kíɛlɛ", "-1": "kíɛlɛ nítómb́í" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "ŋgandɛ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "ŋgandɛ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "ndɔkɔ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "ndɔkɔ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "píndí", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "píndí", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "dv", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "dyo", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Emit", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Emit", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Fuleeŋ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Fuleeŋ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Lóokuŋ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Lóokuŋ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Funak", "relative": { "0": "Jaat", "1": "Kajom", "-1": "Fucen" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Funak", "relative": { "0": "Jaat", "1": "Kajom", "-1": "Fucen" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "dz", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "ལོ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "ལོ་འཁོར་ {0} ནང་" }, "past": { "other": "ལོ་འཁོར་ {0} ཧེ་མ་" } } }, "year-short": { "displayName": "ལོ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "ལོ་འཁོར་ {0} ནང་" }, "past": { "other": "ལོ་འཁོར་ {0} ཧེ་མ་" } } }, "month": { "displayName": "ཟླ་ཝ་", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "ཟླཝ་ {0} ནང་" }, "past": { "other": "ཟླཝ་ {0} ཧེ་མ་" } } }, "month-short": { "displayName": "ཟླ་ཝ་", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "ཟླཝ་ {0} ནང་" }, "past": { "other": "ཟླཝ་ {0} ཧེ་མ་" } } }, "week": { "displayName": "བདུན་ཕྲག", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "བངུན་ཕྲག་ {0} ནང་" }, "past": { "other": "བངུན་ཕྲག་ {0} ཧེ་མ་" } } }, "week-short": { "displayName": "བདུན་ཕྲག", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "བངུན་ཕྲག་ {0} ནང་" }, "past": { "other": "བངུན་ཕྲག་ {0} ཧེ་མ་" } } }, "day": { "displayName": "ཚེས་", "relative": { "0": "ད་རིས་", "1": "ནངས་པ་", "2": "གནངས་ཚེ", "-2": "ཁ་ཉིམ", "-1": "ཁ་ཙ་" }, "relativeTime": { "future": { "other": "ཉིནམ་ {0} ནང་" }, "past": { "other": "ཉིནམ་ {0} ཧེ་མ་" } } }, "day-short": { "displayName": "ཚེས་", "relative": { "0": "ད་རིས་", "1": "ནངས་པ་", "2": "གནངས་ཚེ", "-2": "ཁ་ཉིམ", "-1": "ཁ་ཙ་" }, "relativeTime": { "future": { "other": "ཉིནམ་ {0} ནང་" }, "past": { "other": "ཉིནམ་ {0} ཧེ་མ་" } } }, "hour": { "displayName": "ཆུ་ཚོད", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "ཆུ་ཚོད་ {0} ནང་" }, "past": { "other": "ཆུ་ཚོད་ {0} ཧེ་མ་" } } }, "hour-short": { "displayName": "ཆུ་ཚོད", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "ཆུ་ཚོད་ {0} ནང་" }, "past": { "other": "ཆུ་ཚོད་ {0} ཧེ་མ་" } } }, "minute": { "displayName": "སྐར་མ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "སྐར་མ་ {0} ནང་" }, "past": { "other": "སྐར་མ་ {0} ཧེ་མ་" } } }, "minute-short": { "displayName": "སྐར་མ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "སྐར་མ་ {0} ནང་" }, "past": { "other": "སྐར་མ་ {0} ཧེ་མ་" } } }, "second": { "displayName": "སྐར་ཆཱ་", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "སྐར་ཆ་ {0} ནང་" }, "past": { "other": "སྐར་ཆ་ {0} ཧེ་མ་" } } }, "second-short": { "displayName": "སྐར་ཆཱ་", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "སྐར་ཆ་ {0} ནང་" }, "past": { "other": "སྐར་ཆ་ {0} ཧེ་མ་" } } } } }, { "locale": "ebu", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mweri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mweri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Kiumia", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Kiumia", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Mũthenya", "relative": { "0": "Ũmũnthĩ", "1": "Rũciũ", "-1": "Ĩgoro" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Mũthenya", "relative": { "0": "Ũmũnthĩ", "1": "Rũciũ", "-1": "Ĩgoro" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Ithaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Ithaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Ndagĩka", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Ndagĩka", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ee", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ƒe", "relative": { "0": "ƒe sia", "1": "ƒe si gbɔ na", "-1": "ƒe si va yi" }, "relativeTime": { "future": { "one": "le ƒe {0} me", "other": "le ƒe {0} me" }, "past": { "one": "ƒe {0} si va yi", "other": "ƒe {0} si wo va yi" } } }, "year-short": { "displayName": "ƒe", "relative": { "0": "ƒe sia", "1": "ƒe si gbɔ na", "-1": "ƒe si va yi" }, "relativeTime": { "future": { "one": "le ƒe {0} me", "other": "le ƒe {0} me" }, "past": { "one": "le ƒe {0} si va yi me", "other": "le ƒe {0} si va yi me" } } }, "month": { "displayName": "ɣleti", "relative": { "0": "ɣleti sia", "1": "ɣleti si gbɔ na", "-1": "ɣleti si va yi" }, "relativeTime": { "future": { "one": "le ɣleti {0} me", "other": "le ɣleti {0} wo me" }, "past": { "one": "ɣleti {0} si va yi", "other": "ɣleti {0} si wo va yi" } } }, "month-short": { "displayName": "ɣleti", "relative": { "0": "ɣleti sia", "1": "ɣleti si gbɔ na", "-1": "ɣleti si va yi" }, "relativeTime": { "future": { "one": "le ɣleti {0} me", "other": "le ɣleti {0} wo me" }, "past": { "one": "ɣleti {0} si va yi", "other": "ɣleti {0} si wo va yi" } } }, "week": { "displayName": "kɔsiɖa ɖeka", "relativePeriod": "the week of {0}", "relative": { "0": "kɔsiɖa sia", "1": "kɔsiɖa si gbɔ na", "-1": "kɔsiɖa si va yi" }, "relativeTime": { "future": { "one": "le kɔsiɖa {0} me", "other": "le kɔsiɖa {0} wo me" }, "past": { "one": "kɔsiɖa {0} si va yi", "other": "kɔsiɖa {0} si wo va yi" } } }, "week-short": { "displayName": "kɔsiɖa ɖeka", "relativePeriod": "the week of {0}", "relative": { "0": "kɔsiɖa sia", "1": "kɔsiɖa si gbɔ na", "-1": "kɔsiɖa si va yi" }, "relativeTime": { "future": { "one": "le kɔsiɖa {0} me", "other": "le kɔsiɖa {0} wo me" }, "past": { "one": "kɔsiɖa {0} si va yi", "other": "kɔsiɖa {0} si wo va yi" } } }, "day": { "displayName": "ŋkeke", "relative": { "0": "egbe", "1": "etsɔ si gbɔna", "2": "nyitsɔ si gbɔna", "-2": "nyitsɔ si va yi", "-1": "etsɔ si va yi" }, "relativeTime": { "future": { "one": "le ŋkeke {0} me", "other": "le ŋkeke {0} wo me" }, "past": { "one": "ŋkeke {0} si va yi", "other": "ŋkeke {0} si wo va yi" } } }, "day-short": { "displayName": "ŋkeke", "relative": { "0": "egbe", "1": "etsɔ si gbɔna", "2": "nyitsɔ si gbɔna", "-2": "nyitsɔ si va yi", "-1": "etsɔ si va yi" }, "relativeTime": { "future": { "one": "le ŋkeke {0} me", "other": "le ŋkeke {0} wo me" }, "past": { "one": "ŋkeke {0} si va yi", "other": "ŋkeke {0} si wo va yi" } } }, "hour": { "displayName": "gaƒoƒo", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "le gaƒoƒo {0} me", "other": "le gaƒoƒo {0} wo me" }, "past": { "one": "gaƒoƒo {0} si va yi", "other": "gaƒoƒo {0} si wo va yi" } } }, "hour-short": { "displayName": "gaƒoƒo", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "le gaƒoƒo {0} me", "other": "le gaƒoƒo {0} wo me" }, "past": { "one": "gaƒoƒo {0} si va yi", "other": "gaƒoƒo {0} si wo va yi" } } }, "minute": { "displayName": "aɖabaƒoƒo", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "le aɖabaƒoƒo {0} me", "other": "le aɖabaƒoƒo {0} wo me" }, "past": { "one": "aɖabaƒoƒo {0} si va yi", "other": "aɖabaƒoƒo {0} si wo va yi" } } }, "minute-short": { "displayName": "aɖabaƒoƒo", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "le aɖabaƒoƒo {0} me", "other": "le aɖabaƒoƒo {0} wo me" }, "past": { "one": "aɖabaƒoƒo {0} si va yi", "other": "aɖabaƒoƒo {0} si wo va yi" } } }, "second": { "displayName": "sekend", "relative": { "0": "fifi" }, "relativeTime": { "future": { "one": "le sekend {0} me", "other": "le sekend {0} wo me" }, "past": { "one": "sekend {0} si va yi", "other": "sekend {0} si wo va yi" } } }, "second-short": { "displayName": "sekend", "relative": { "0": "fifi" }, "relativeTime": { "future": { "one": "le sekend {0} me", "other": "le sekend {0} wo me" }, "past": { "one": "sekend {0} si va yi", "other": "sekend {0} si wo va yi" } } } } }, { "locale": "ee-TG", "parentLocale": "ee" }, { "locale": "el", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "έτος", "relative": { "0": "φέτος", "1": "επόμενο έτος", "-1": "πέρσι" }, "relativeTime": { "future": { "one": "σε {0} έτος", "other": "σε {0} έτη" }, "past": { "one": "πριν από {0} έτος", "other": "πριν από {0} έτη" } } }, "year-short": { "displayName": "έτ.", "relative": { "0": "φέτος", "1": "επόμενο έτος", "-1": "πέρσι" }, "relativeTime": { "future": { "one": "σε {0} έτος", "other": "σε {0} έτη" }, "past": { "one": "πριν από {0} έτος", "other": "πριν από {0} έτη" } } }, "month": { "displayName": "μήνας", "relative": { "0": "τρέχων μήνας", "1": "επόμενος μήνας", "-1": "προηγούμενος μήνας" }, "relativeTime": { "future": { "one": "σε {0} μήνα", "other": "σε {0} μήνες" }, "past": { "one": "πριν από {0} μήνα", "other": "πριν από {0} μήνες" } } }, "month-short": { "displayName": "μήν.", "relative": { "0": "τρέχων μήνας", "1": "επόμενος μήνας", "-1": "προηγούμενος μήνας" }, "relativeTime": { "future": { "one": "σε {0} μήνα", "other": "σε {0} μήνες" }, "past": { "one": "πριν από {0} μήνα", "other": "πριν από {0} μήνες" } } }, "week": { "displayName": "εβδομάδα", "relativePeriod": "την εβδομάδα {0}", "relative": { "0": "τρέχουσα εβδομάδα", "1": "επόμενη εβδομάδα", "-1": "προηγούμενη εβδομάδα" }, "relativeTime": { "future": { "one": "σε {0} εβδομάδα", "other": "σε {0} εβδομάδες" }, "past": { "one": "πριν από {0} εβδομάδα", "other": "πριν από {0} εβδομάδες" } } }, "week-short": { "displayName": "εβδ.", "relativePeriod": "την εβδ. {0}", "relative": { "0": "τρέχουσα εβδομάδα", "1": "επόμενη εβδομάδα", "-1": "προηγούμενη εβδομάδα" }, "relativeTime": { "future": { "one": "σε {0} εβδ.", "other": "σε {0} εβδ." }, "past": { "one": "πριν από {0} εβδ.", "other": "πριν από {0} εβδ." } } }, "day": { "displayName": "ημέρα", "relative": { "0": "σήμερα", "1": "αύριο", "2": "μεθαύριο", "-2": "προχθές", "-1": "χθες" }, "relativeTime": { "future": { "one": "σε {0} ημέρα", "other": "σε {0} ημέρες" }, "past": { "one": "πριν από {0} ημέρα", "other": "πριν από {0} ημέρες" } } }, "day-short": { "displayName": "ημ.", "relative": { "0": "σήμερα", "1": "αύριο", "2": "μεθαύριο", "-2": "προχθές", "-1": "χθες" }, "relativeTime": { "future": { "one": "σε {0} ημ.", "other": "σε {0} ημ." }, "past": { "one": "πριν από {0} ημ.", "other": "πριν από {0} ημ." } } }, "hour": { "displayName": "ώρα", "relative": { "0": "τρέχουσα ώρα" }, "relativeTime": { "future": { "one": "σε {0} ώρα", "other": "σε {0} ώρες" }, "past": { "one": "πριν από {0} ώρα", "other": "πριν από {0} ώρες" } } }, "hour-short": { "displayName": "ώ.", "relative": { "0": "τρέχουσα ώρα" }, "relativeTime": { "future": { "one": "σε {0} ώ.", "other": "σε {0} ώ." }, "past": { "one": "πριν από {0} ώ.", "other": "πριν από {0} ώ." } } }, "minute": { "displayName": "λεπτό", "relative": { "0": "τρέχον λεπτό" }, "relativeTime": { "future": { "one": "σε {0} λεπτό", "other": "σε {0} λεπτά" }, "past": { "one": "πριν από {0} λεπτό", "other": "πριν από {0} λεπτά" } } }, "minute-short": { "displayName": "λεπ.", "relative": { "0": "τρέχον λεπτό" }, "relativeTime": { "future": { "one": "σε {0} λεπ.", "other": "σε {0} λεπ." }, "past": { "one": "πριν από {0} λεπ.", "other": "πριν από {0} λεπ." } } }, "second": { "displayName": "δευτερόλεπτο", "relative": { "0": "τώρα" }, "relativeTime": { "future": { "one": "σε {0} δευτερόλεπτο", "other": "σε {0} δευτερόλεπτα" }, "past": { "one": "πριν από {0} δευτερόλεπτο", "other": "πριν από {0} δευτερόλεπτα" } } }, "second-short": { "displayName": "δευτ.", "relative": { "0": "τώρα" }, "relativeTime": { "future": { "one": "σε {0} δευτ.", "other": "σε {0} δευτ." }, "past": { "one": "πριν από {0} δευτ.", "other": "πριν από {0} δευτ." } } } } }, { "locale": "el-CY", "parentLocale": "el" }, { "locale": "en", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1], t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2);
        if (ord)
            return (n10 == 1 && n100 != 11) ? 'one'
                : (n10 == 2 && n100 != 12) ? 'two'
                    : (n10 == 3 && n100 != 13) ? 'few'
                        : 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "in {0} year", "other": "in {0} years" }, "past": { "one": "{0} year ago", "other": "{0} years ago" } } }, "year-short": { "displayName": "yr.", "relative": { "0": "this yr.", "1": "next yr.", "-1": "last yr." }, "relativeTime": { "future": { "one": "in {0} yr.", "other": "in {0} yr." }, "past": { "one": "{0} yr. ago", "other": "{0} yr. ago" } } }, "month": { "displayName": "month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "in {0} month", "other": "in {0} months" }, "past": { "one": "{0} month ago", "other": "{0} months ago" } } }, "month-short": { "displayName": "mo.", "relative": { "0": "this mo.", "1": "next mo.", "-1": "last mo." }, "relativeTime": { "future": { "one": "in {0} mo.", "other": "in {0} mo." }, "past": { "one": "{0} mo. ago", "other": "{0} mo. ago" } } }, "week": { "displayName": "week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "in {0} week", "other": "in {0} weeks" }, "past": { "one": "{0} week ago", "other": "{0} weeks ago" } } }, "week-short": { "displayName": "wk.", "relativePeriod": "the week of {0}", "relative": { "0": "this wk.", "1": "next wk.", "-1": "last wk." }, "relativeTime": { "future": { "one": "in {0} wk.", "other": "in {0} wk." }, "past": { "one": "{0} wk. ago", "other": "{0} wk. ago" } } }, "day": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "day-short": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "hour": { "displayName": "hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hour", "other": "in {0} hours" }, "past": { "one": "{0} hour ago", "other": "{0} hours ago" } } }, "hour-short": { "displayName": "hr.", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hr.", "other": "in {0} hr." }, "past": { "one": "{0} hr. ago", "other": "{0} hr. ago" } } }, "minute": { "displayName": "minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} minute", "other": "in {0} minutes" }, "past": { "one": "{0} minute ago", "other": "{0} minutes ago" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} min.", "other": "in {0} min." }, "past": { "one": "{0} min. ago", "other": "{0} min. ago" } } }, "second": { "displayName": "second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} second", "other": "in {0} seconds" }, "past": { "one": "{0} second ago", "other": "{0} seconds ago" } } }, "second-short": { "displayName": "sec.", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} sec.", "other": "in {0} sec." }, "past": { "one": "{0} sec. ago", "other": "{0} sec. ago" } } } } }, { "locale": "en-001", "parentLocale": "en", "fields": { "year": { "displayName": "year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "in {0} year", "other": "in {0} years" }, "past": { "one": "{0} year ago", "other": "{0} years ago" } } }, "year-short": { "displayName": "yr", "relative": { "0": "this yr.", "1": "next yr.", "-1": "last yr." }, "relativeTime": { "future": { "one": "in {0} yr", "other": "in {0} yr" }, "past": { "one": "{0} yr ago", "other": "{0} yr ago" } } }, "month": { "displayName": "month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "in {0} month", "other": "in {0} months" }, "past": { "one": "{0} month ago", "other": "{0} months ago" } } }, "month-short": { "displayName": "mo", "relative": { "0": "this mo.", "1": "next mo.", "-1": "last mo." }, "relativeTime": { "future": { "one": "in {0} mo", "other": "in {0} mo" }, "past": { "one": "{0} mo ago", "other": "{0} mo ago" } } }, "week": { "displayName": "week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "in {0} week", "other": "in {0} weeks" }, "past": { "one": "{0} week ago", "other": "{0} weeks ago" } } }, "week-short": { "displayName": "wk", "relativePeriod": "the week of {0}", "relative": { "0": "this wk.", "1": "next wk.", "-1": "last wk." }, "relativeTime": { "future": { "one": "in {0} wk", "other": "in {0} wk" }, "past": { "one": "{0} wk ago", "other": "{0} wk ago" } } }, "day": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "day-short": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "hour": { "displayName": "hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hour", "other": "in {0} hours" }, "past": { "one": "{0} hour ago", "other": "{0} hours ago" } } }, "hour-short": { "displayName": "hr", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hr", "other": "in {0} hr" }, "past": { "one": "{0} hr ago", "other": "{0} hr ago" } } }, "minute": { "displayName": "minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} minute", "other": "in {0} minutes" }, "past": { "one": "{0} minute ago", "other": "{0} minutes ago" } } }, "minute-short": { "displayName": "min", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} min", "other": "in {0} min" }, "past": { "one": "{0} min ago", "other": "{0} min ago" } } }, "second": { "displayName": "second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} second", "other": "in {0} seconds" }, "past": { "one": "{0} second ago", "other": "{0} seconds ago" } } }, "second-short": { "displayName": "sec", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} sec", "other": "in {0} sec" }, "past": { "one": "{0} sec ago", "other": "{0} sec ago" } } } } }, { "locale": "en-150", "parentLocale": "en-001" }, { "locale": "en-AG", "parentLocale": "en-001" }, { "locale": "en-AI", "parentLocale": "en-001" }, { "locale": "en-AS", "parentLocale": "en" }, { "locale": "en-AT", "parentLocale": "en-150" }, { "locale": "en-AU", "parentLocale": "en-001", "fields": { "year": { "displayName": "year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "in {0} year", "other": "in {0} years" }, "past": { "one": "{0} year ago", "other": "{0} years ago" } } }, "year-short": { "displayName": "yr", "relative": { "0": "this yr.", "1": "next yr.", "-1": "last yr." }, "relativeTime": { "future": { "one": "in {0} yr", "other": "in {0} yrs" }, "past": { "one": "{0} yr ago", "other": "{0} yrs ago" } } }, "month": { "displayName": "month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "in {0} month", "other": "in {0} months" }, "past": { "one": "{0} month ago", "other": "{0} months ago" } } }, "month-short": { "displayName": "mo.", "relative": { "0": "this mo.", "1": "next mo.", "-1": "last mo." }, "relativeTime": { "future": { "one": "in {0} mo.", "other": "in {0} mo." }, "past": { "one": "{0} mo. ago", "other": "{0} mo. ago" } } }, "week": { "displayName": "week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "in {0} week", "other": "in {0} weeks" }, "past": { "one": "{0} week ago", "other": "{0} weeks ago" } } }, "week-short": { "displayName": "wk", "relativePeriod": "the week of {0}", "relative": { "0": "this wk.", "1": "next wk.", "-1": "last wk." }, "relativeTime": { "future": { "one": "in {0} wk", "other": "in {0} wks" }, "past": { "one": "{0} wk ago", "other": "{0} wks ago" } } }, "day": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "day-short": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "hour": { "displayName": "hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hour", "other": "in {0} hours" }, "past": { "one": "{0} hour ago", "other": "{0} hours ago" } } }, "hour-short": { "displayName": "h", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hr", "other": "in {0} hrs" }, "past": { "one": "{0} hr ago", "other": "{0} hrs ago" } } }, "minute": { "displayName": "minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} minute", "other": "in {0} minutes" }, "past": { "one": "{0} minute ago", "other": "{0} minutes ago" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} min.", "other": "in {0} mins" }, "past": { "one": "{0} min. ago", "other": "{0} mins ago" } } }, "second": { "displayName": "second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} second", "other": "in {0} seconds" }, "past": { "one": "{0} second ago", "other": "{0} seconds ago" } } }, "second-short": { "displayName": "sec.", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} sec.", "other": "in {0} secs" }, "past": { "one": "{0} sec. ago", "other": "{0} secs ago" } } } } }, { "locale": "en-BB", "parentLocale": "en-001" }, { "locale": "en-BE", "parentLocale": "en-001" }, { "locale": "en-BI", "parentLocale": "en" }, { "locale": "en-BM", "parentLocale": "en-001" }, { "locale": "en-BS", "parentLocale": "en-001" }, { "locale": "en-BW", "parentLocale": "en-001" }, { "locale": "en-BZ", "parentLocale": "en-001" }, { "locale": "en-CA", "parentLocale": "en-001", "fields": { "year": { "displayName": "year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "in {0} year", "other": "in {0} years" }, "past": { "one": "{0} year ago", "other": "{0} years ago" } } }, "year-short": { "displayName": "yr.", "relative": { "0": "this yr.", "1": "next yr.", "-1": "last yr." }, "relativeTime": { "future": { "one": "in {0} yr.", "other": "in {0} yrs." }, "past": { "one": "{0} yr. ago", "other": "{0} yrs. ago" } } }, "month": { "displayName": "month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "in {0} month", "other": "in {0} months" }, "past": { "one": "{0} month ago", "other": "{0} months ago" } } }, "month-short": { "displayName": "mo.", "relative": { "0": "this mo.", "1": "next mo.", "-1": "last mo." }, "relativeTime": { "future": { "one": "in {0} mo.", "other": "in {0} mos." }, "past": { "one": "{0} mo. ago", "other": "{0} mos. ago" } } }, "week": { "displayName": "week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "in {0} week", "other": "in {0} weeks" }, "past": { "one": "{0} week ago", "other": "{0} weeks ago" } } }, "week-short": { "displayName": "wk.", "relativePeriod": "the wk. of {0}", "relative": { "0": "this wk.", "1": "next wk.", "-1": "last wk." }, "relativeTime": { "future": { "one": "in {0} wk.", "other": "in {0} wks." }, "past": { "one": "{0} wk. ago", "other": "{0} wks. ago" } } }, "day": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "day-short": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "hour": { "displayName": "hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hour", "other": "in {0} hours" }, "past": { "one": "{0} hour ago", "other": "{0} hours ago" } } }, "hour-short": { "displayName": "hr.", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hr.", "other": "in {0} hrs." }, "past": { "one": "{0} hr. ago", "other": "{0} hrs. ago" } } }, "minute": { "displayName": "minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} minute", "other": "in {0} minutes" }, "past": { "one": "{0} minute ago", "other": "{0} minutes ago" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} min.", "other": "in {0} mins." }, "past": { "one": "{0} min. ago", "other": "{0} mins. ago" } } }, "second": { "displayName": "second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} second", "other": "in {0} seconds" }, "past": { "one": "{0} second ago", "other": "{0} seconds ago" } } }, "second-short": { "displayName": "sec.", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} sec.", "other": "in {0} secs." }, "past": { "one": "{0} sec. ago", "other": "{0} secs. ago" } } } } }, { "locale": "en-CC", "parentLocale": "en-001" }, { "locale": "en-CH", "parentLocale": "en-150" }, { "locale": "en-CK", "parentLocale": "en-001" }, { "locale": "en-CM", "parentLocale": "en-001" }, { "locale": "en-CX", "parentLocale": "en-001" }, { "locale": "en-CY", "parentLocale": "en-001" }, { "locale": "en-DE", "parentLocale": "en-150" }, { "locale": "en-DG", "parentLocale": "en-001" }, { "locale": "en-DK", "parentLocale": "en-150" }, { "locale": "en-DM", "parentLocale": "en-001" }, { "locale": "en-Dsrt", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "en-ER", "parentLocale": "en-001" }, { "locale": "en-FI", "parentLocale": "en-150" }, { "locale": "en-FJ", "parentLocale": "en-001" }, { "locale": "en-FK", "parentLocale": "en-001" }, { "locale": "en-FM", "parentLocale": "en-001" }, { "locale": "en-GB", "parentLocale": "en-001" }, { "locale": "en-GD", "parentLocale": "en-001" }, { "locale": "en-GG", "parentLocale": "en-001" }, { "locale": "en-GH", "parentLocale": "en-001" }, { "locale": "en-GI", "parentLocale": "en-001" }, { "locale": "en-GM", "parentLocale": "en-001" }, { "locale": "en-GU", "parentLocale": "en" }, { "locale": "en-GY", "parentLocale": "en-001" }, { "locale": "en-HK", "parentLocale": "en-001" }, { "locale": "en-IE", "parentLocale": "en-001" }, { "locale": "en-IL", "parentLocale": "en-001" }, { "locale": "en-IM", "parentLocale": "en-001" }, { "locale": "en-IN", "parentLocale": "en-001" }, { "locale": "en-IO", "parentLocale": "en-001" }, { "locale": "en-JE", "parentLocale": "en-001" }, { "locale": "en-JM", "parentLocale": "en-001" }, { "locale": "en-KE", "parentLocale": "en-001" }, { "locale": "en-KI", "parentLocale": "en-001" }, { "locale": "en-KN", "parentLocale": "en-001" }, { "locale": "en-KY", "parentLocale": "en-001" }, { "locale": "en-LC", "parentLocale": "en-001" }, { "locale": "en-LR", "parentLocale": "en-001" }, { "locale": "en-LS", "parentLocale": "en-001" }, { "locale": "en-MG", "parentLocale": "en-001" }, { "locale": "en-MH", "parentLocale": "en" }, { "locale": "en-MO", "parentLocale": "en-001" }, { "locale": "en-MP", "parentLocale": "en" }, { "locale": "en-MS", "parentLocale": "en-001" }, { "locale": "en-MT", "parentLocale": "en-001" }, { "locale": "en-MU", "parentLocale": "en-001" }, { "locale": "en-MW", "parentLocale": "en-001" }, { "locale": "en-MY", "parentLocale": "en-001" }, { "locale": "en-NA", "parentLocale": "en-001" }, { "locale": "en-NF", "parentLocale": "en-001" }, { "locale": "en-NG", "parentLocale": "en-001" }, { "locale": "en-NL", "parentLocale": "en-150" }, { "locale": "en-NR", "parentLocale": "en-001" }, { "locale": "en-NU", "parentLocale": "en-001" }, { "locale": "en-NZ", "parentLocale": "en-001" }, { "locale": "en-PG", "parentLocale": "en-001" }, { "locale": "en-PH", "parentLocale": "en-001" }, { "locale": "en-PK", "parentLocale": "en-001" }, { "locale": "en-PN", "parentLocale": "en-001" }, { "locale": "en-PR", "parentLocale": "en" }, { "locale": "en-PW", "parentLocale": "en-001" }, { "locale": "en-RW", "parentLocale": "en-001" }, { "locale": "en-SB", "parentLocale": "en-001" }, { "locale": "en-SC", "parentLocale": "en-001" }, { "locale": "en-SD", "parentLocale": "en-001" }, { "locale": "en-SE", "parentLocale": "en-150" }, { "locale": "en-SG", "parentLocale": "en-001", "fields": { "year": { "displayName": "year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "in {0} year", "other": "in {0} years" }, "past": { "one": "{0} year ago", "other": "{0} years ago" } } }, "year-short": { "displayName": "yr", "relative": { "0": "this yr", "1": "next yr", "-1": "last yr" }, "relativeTime": { "future": { "one": "in {0} yr", "other": "in {0} yr" }, "past": { "one": "{0} yr ago", "other": "{0} yr ago" } } }, "month": { "displayName": "month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "in {0} month", "other": "in {0} months" }, "past": { "one": "{0} month ago", "other": "{0} months ago" } } }, "month-short": { "displayName": "mth", "relative": { "0": "this mth", "1": "next mth", "-1": "last mth" }, "relativeTime": { "future": { "one": "in {0} mth", "other": "in {0} mth" }, "past": { "one": "{0} mth ago", "other": "{0} mth ago" } } }, "week": { "displayName": "week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "in {0} week", "other": "in {0} weeks" }, "past": { "one": "{0} week ago", "other": "{0} weeks ago" } } }, "week-short": { "displayName": "wk", "relativePeriod": "the week of {0}", "relative": { "0": "this wk", "1": "next wk", "-1": "last wk" }, "relativeTime": { "future": { "one": "in {0} wk", "other": "in {0} wk" }, "past": { "one": "{0} wk ago", "other": "{0} wk ago" } } }, "day": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "day-short": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "hour": { "displayName": "hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hour", "other": "in {0} hours" }, "past": { "one": "{0} hour ago", "other": "{0} hours ago" } } }, "hour-short": { "displayName": "hr", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hr", "other": "in {0} hr" }, "past": { "one": "{0} hr ago", "other": "{0} hr ago" } } }, "minute": { "displayName": "minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} minute", "other": "in {0} minutes" }, "past": { "one": "{0} minute ago", "other": "{0} minutes ago" } } }, "minute-short": { "displayName": "min", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} min", "other": "in {0} min" }, "past": { "one": "{0} min ago", "other": "{0} min ago" } } }, "second": { "displayName": "second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} second", "other": "in {0} seconds" }, "past": { "one": "{0} second ago", "other": "{0} seconds ago" } } }, "second-short": { "displayName": "sec", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} sec", "other": "in {0} sec" }, "past": { "one": "{0} sec ago", "other": "{0} sec ago" } } } } }, { "locale": "en-SH", "parentLocale": "en-001" }, { "locale": "en-SI", "parentLocale": "en-150" }, { "locale": "en-SL", "parentLocale": "en-001" }, { "locale": "en-SS", "parentLocale": "en-001" }, { "locale": "en-SX", "parentLocale": "en-001" }, { "locale": "en-SZ", "parentLocale": "en-001" }, { "locale": "en-Shaw", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "en-TC", "parentLocale": "en-001" }, { "locale": "en-TK", "parentLocale": "en-001" }, { "locale": "en-TO", "parentLocale": "en-001" }, { "locale": "en-TT", "parentLocale": "en-001" }, { "locale": "en-TV", "parentLocale": "en-001" }, { "locale": "en-TZ", "parentLocale": "en-001" }, { "locale": "en-UG", "parentLocale": "en-001" }, { "locale": "en-UM", "parentLocale": "en" }, { "locale": "en-US", "parentLocale": "en" }, { "locale": "en-VC", "parentLocale": "en-001" }, { "locale": "en-VG", "parentLocale": "en-001" }, { "locale": "en-VI", "parentLocale": "en" }, { "locale": "en-VU", "parentLocale": "en-001" }, { "locale": "en-WS", "parentLocale": "en-001" }, { "locale": "en-ZA", "parentLocale": "en-001" }, { "locale": "en-ZM", "parentLocale": "en-001" }, { "locale": "en-ZW", "parentLocale": "en-001" }, { "locale": "eo", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "es", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "año", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} año", "other": "dentro de {0} años" }, "past": { "one": "hace {0} año", "other": "hace {0} años" } } }, "year-short": { "displayName": "a", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} a", "other": "dentro de {0} a" }, "past": { "one": "hace {0} a", "other": "hace {0} a" } } }, "month": { "displayName": "mes", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} mes", "other": "dentro de {0} meses" }, "past": { "one": "hace {0} mes", "other": "hace {0} meses" } } }, "month-short": { "displayName": "m", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} m", "other": "dentro de {0} m" }, "past": { "one": "hace {0} m", "other": "hace {0} m" } } }, "week": { "displayName": "semana", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la próxima semana", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} semana", "other": "dentro de {0} semanas" }, "past": { "one": "hace {0} semana", "other": "hace {0} semanas" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "la sem. del {0}", "relative": { "0": "esta semana", "1": "la próxima semana", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} sem.", "other": "dentro de {0} sem." }, "past": { "one": "hace {0} sem.", "other": "hace {0} sem." } } }, "day": { "displayName": "día", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "day-short": { "displayName": "d", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "hour": { "displayName": "hora", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} hora", "other": "dentro de {0} horas" }, "past": { "one": "hace {0} hora", "other": "hace {0} horas" } } }, "hour-short": { "displayName": "h", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} h", "other": "dentro de {0} h" }, "past": { "one": "hace {0} h", "other": "hace {0} h" } } }, "minute": { "displayName": "minuto", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} minuto", "other": "dentro de {0} minutos" }, "past": { "one": "hace {0} minuto", "other": "hace {0} minutos" } } }, "minute-short": { "displayName": "min", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} min", "other": "dentro de {0} min" }, "past": { "one": "hace {0} min", "other": "hace {0} min" } } }, "second": { "displayName": "segundo", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} segundo", "other": "dentro de {0} segundos" }, "past": { "one": "hace {0} segundo", "other": "hace {0} segundos" } } }, "second-short": { "displayName": "s", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} s", "other": "dentro de {0} s" }, "past": { "one": "hace {0} s", "other": "hace {0} s" } } } } }, { "locale": "es-419", "parentLocale": "es", "fields": { "year": { "displayName": "año", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} año", "other": "dentro de {0} años" }, "past": { "one": "hace {0} año", "other": "hace {0} años" } } }, "year-short": { "displayName": "a", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} a", "other": "dentro de {0} a" }, "past": { "one": "hace {0} a", "other": "hace {0} a" } } }, "month": { "displayName": "mes", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} mes", "other": "dentro de {0} meses" }, "past": { "one": "hace {0} mes", "other": "hace {0} meses" } } }, "month-short": { "displayName": "m", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} m", "other": "dentro de {0} m" }, "past": { "one": "hace {0} m", "other": "hace {0} m" } } }, "week": { "displayName": "semana", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la próxima semana", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} semana", "other": "dentro de {0} semanas" }, "past": { "one": "hace {0} semana", "other": "hace {0} semanas" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la próxima semana", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} sem.", "other": "dentro de {0} sem." }, "past": { "one": "hace {0} sem.", "other": "hace {0} sem." } } }, "day": { "displayName": "día", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "day-short": { "displayName": "d", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "hour": { "displayName": "hora", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} hora", "other": "dentro de {0} horas" }, "past": { "one": "hace {0} hora", "other": "hace {0} horas" } } }, "hour-short": { "displayName": "h", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} h", "other": "dentro de {0} h" }, "past": { "one": "hace {0} h", "other": "hace {0} h" } } }, "minute": { "displayName": "minuto", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} minuto", "other": "dentro de {0} minutos" }, "past": { "one": "hace {0} minuto", "other": "hace {0} minutos" } } }, "minute-short": { "displayName": "min", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} min", "other": "dentro de {0} min" }, "past": { "one": "hace {0} min", "other": "hace {0} min" } } }, "second": { "displayName": "segundo", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} segundo", "other": "dentro de {0} segundos" }, "past": { "one": "hace {0} segundo", "other": "hace {0} segundos" } } }, "second-short": { "displayName": "s", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} s", "other": "dentro de {0} s" }, "past": { "one": "hace {0} s", "other": "hace {0} s" } } } } }, { "locale": "es-AR", "parentLocale": "es-419", "fields": { "year": { "displayName": "año", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} año", "other": "dentro de {0} años" }, "past": { "one": "hace {0} año", "other": "hace {0} años" } } }, "year-short": { "displayName": "a", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} a", "other": "dentro de {0} a" }, "past": { "one": "hace {0} a", "other": "hace {0} a" } } }, "month": { "displayName": "mes", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} mes", "other": "dentro de {0} meses" }, "past": { "one": "hace {0} mes", "other": "hace {0} meses" } } }, "month-short": { "displayName": "m", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} m", "other": "dentro de {0} m" }, "past": { "one": "hace {0} m", "other": "hace {0} m" } } }, "week": { "displayName": "semana", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la próxima semana", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} semana", "other": "dentro de {0} semanas" }, "past": { "one": "hace {0} semana", "other": "hace {0} semanas" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la próxima semana", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} sem.", "other": "dentro de {0} sem." }, "past": { "one": "hace {0} sem.", "other": "hace {0} sem." } } }, "day": { "displayName": "día", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "day-short": { "displayName": "d", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} días", "other": "dentro de {0} días" }, "past": { "one": "hace {0} días", "other": "hace {0} días" } } }, "hour": { "displayName": "hora", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} hora", "other": "dentro de {0} horas" }, "past": { "one": "hace {0} hora", "other": "hace {0} horas" } } }, "hour-short": { "displayName": "h", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} h", "other": "dentro de {0} h" }, "past": { "one": "hace {0} h", "other": "hace {0} h" } } }, "minute": { "displayName": "minuto", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} minuto", "other": "dentro de {0} minutos" }, "past": { "one": "hace {0} minuto", "other": "hace {0} minutos" } } }, "minute-short": { "displayName": "min", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} min", "other": "dentro de {0} min" }, "past": { "one": "hace {0} min", "other": "hace {0} min" } } }, "second": { "displayName": "segundo", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} segundo", "other": "dentro de {0} segundos" }, "past": { "one": "hace {0} segundo", "other": "hace {0} segundos" } } }, "second-short": { "displayName": "seg.", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} seg.", "other": "dentro de {0} seg." }, "past": { "one": "hace {0} seg.", "other": "hace {0} seg." } } } } }, { "locale": "es-BO", "parentLocale": "es-419" }, { "locale": "es-BR", "parentLocale": "es-419" }, { "locale": "es-BZ", "parentLocale": "es-419" }, { "locale": "es-CL", "parentLocale": "es-419" }, { "locale": "es-CO", "parentLocale": "es-419" }, { "locale": "es-CR", "parentLocale": "es-419" }, { "locale": "es-CU", "parentLocale": "es-419" }, { "locale": "es-DO", "parentLocale": "es-419", "fields": { "year": { "displayName": "Año", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} año", "other": "dentro de {0} años" }, "past": { "one": "hace {0} año", "other": "hace {0} años" } } }, "year-short": { "displayName": "a", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} a", "other": "dentro de {0} a" }, "past": { "one": "hace {0} a", "other": "hace {0} a" } } }, "month": { "displayName": "Mes", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} mes", "other": "dentro de {0} meses" }, "past": { "one": "hace {0} mes", "other": "hace {0} meses" } } }, "month-short": { "displayName": "m", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} m", "other": "dentro de {0} m" }, "past": { "one": "hace {0} m", "other": "hace {0} m" } } }, "week": { "displayName": "Semana", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la próxima semana", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} semana", "other": "dentro de {0} semanas" }, "past": { "one": "hace {0} semana", "other": "hace {0} semanas" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la próxima semana", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} sem.", "other": "dentro de {0} sem." }, "past": { "one": "hace {0} sem.", "other": "hace {0} sem." } } }, "day": { "displayName": "Día", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "day-short": { "displayName": "d", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "hour": { "displayName": "hora", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} hora", "other": "dentro de {0} horas" }, "past": { "one": "hace {0} hora", "other": "hace {0} horas" } } }, "hour-short": { "displayName": "h", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} h", "other": "dentro de {0} h" }, "past": { "one": "hace {0} h", "other": "hace {0} h" } } }, "minute": { "displayName": "Minuto", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} minuto", "other": "dentro de {0} minutos" }, "past": { "one": "hace {0} minuto", "other": "hace {0} minutos" } } }, "minute-short": { "displayName": "min", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} min", "other": "dentro de {0} min" }, "past": { "one": "hace {0} min", "other": "hace {0} min" } } }, "second": { "displayName": "Segundo", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} segundo", "other": "dentro de {0} segundos" }, "past": { "one": "hace {0} segundo", "other": "hace {0} segundos" } } }, "second-short": { "displayName": "s", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} s", "other": "dentro de {0} s" }, "past": { "one": "hace {0} s", "other": "hace {0} s" } } } } }, { "locale": "es-EA", "parentLocale": "es" }, { "locale": "es-EC", "parentLocale": "es-419" }, { "locale": "es-GQ", "parentLocale": "es" }, { "locale": "es-GT", "parentLocale": "es-419" }, { "locale": "es-HN", "parentLocale": "es-419" }, { "locale": "es-IC", "parentLocale": "es" }, { "locale": "es-MX", "parentLocale": "es-419", "fields": { "year": { "displayName": "año", "relative": { "0": "este año", "1": "el año próximo", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} año", "other": "dentro de {0} años" }, "past": { "one": "hace {0} año", "other": "hace {0} años" } } }, "year-short": { "displayName": "a", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "en {0} a", "other": "en {0} a" }, "past": { "one": "hace {0} a", "other": "hace {0} a" } } }, "month": { "displayName": "mes", "relative": { "0": "este mes", "1": "el mes próximo", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "en {0} mes", "other": "en {0} meses" }, "past": { "one": "hace {0} mes", "other": "hace {0} meses" } } }, "month-short": { "displayName": "m", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "en {0} m", "other": "en {0} m" }, "past": { "one": "hace {0} m", "other": "hace {0} m" } } }, "week": { "displayName": "semana", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la semana próxima", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} semana", "other": "dentro de {0} semanas" }, "past": { "one": "hace {0} semana", "other": "hace {0} semanas" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la semana próxima", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "en {0} sem.", "other": "en {0} sem." }, "past": { "one": "hace {0} sem.", "other": "hace {0} sem." } } }, "day": { "displayName": "día", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "day-short": { "displayName": "d", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "en {0} día", "other": "en {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "hour": { "displayName": "hora", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} hora", "other": "dentro de {0} horas" }, "past": { "one": "hace {0} hora", "other": "hace {0} horas" } } }, "hour-short": { "displayName": "h", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "en {0} h", "other": "en {0} n" }, "past": { "one": "hace {0} h", "other": "hace {0} h" } } }, "minute": { "displayName": "minuto", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} minuto", "other": "dentro de {0} minutos" }, "past": { "one": "hace {0} minuto", "other": "hace {0} minutos" } } }, "minute-short": { "displayName": "min", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "en {0} min", "other": "en {0} min" }, "past": { "one": "hace {0} min", "other": "hace {0} min" } } }, "second": { "displayName": "segundo", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} segundo", "other": "dentro de {0} segundos" }, "past": { "one": "hace {0} segundo", "other": "hace {0} segundos" } } }, "second-short": { "displayName": "s", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "en {0} s", "other": "en {0} s" }, "past": { "one": "hace {0} s", "other": "hace {0} s" } } } } }, { "locale": "es-NI", "parentLocale": "es-419" }, { "locale": "es-PA", "parentLocale": "es-419" }, { "locale": "es-PE", "parentLocale": "es-419" }, { "locale": "es-PH", "parentLocale": "es" }, { "locale": "es-PR", "parentLocale": "es-419" }, { "locale": "es-PY", "parentLocale": "es-419", "fields": { "year": { "displayName": "año", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} año", "other": "dentro de {0} años" }, "past": { "one": "hace {0} año", "other": "hace {0} años" } } }, "year-short": { "displayName": "a", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} a", "other": "dentro de {0} a" }, "past": { "one": "hace {0} a", "other": "hace {0} a" } } }, "month": { "displayName": "mes", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} mes", "other": "dentro de {0} meses" }, "past": { "one": "hace {0} mes", "other": "hace {0} meses" } } }, "month-short": { "displayName": "m", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} m", "other": "dentro de {0} m" }, "past": { "one": "hace {0} m", "other": "hace {0} m" } } }, "week": { "displayName": "semana", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la próxima semana", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} semana", "other": "dentro de {0} semanas" }, "past": { "one": "hace {0} semana", "other": "hace {0} semanas" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la próxima semana", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} sem.", "other": "dentro de {0} sem." }, "past": { "one": "hace {0} sem.", "other": "hace {0} sem." } } }, "day": { "displayName": "día", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "day-short": { "displayName": "d", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "hour": { "displayName": "hora", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} hora", "other": "dentro de {0} horas" }, "past": { "one": "hace {0} hora", "other": "hace {0} horas" } } }, "hour-short": { "displayName": "h", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} h", "other": "dentro de {0} h" }, "past": { "one": "hace {0} h", "other": "hace {0} h" } } }, "minute": { "displayName": "minuto", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} minuto", "other": "dentro de {0} minutos" }, "past": { "one": "hace {0} minuto", "other": "hace {0} minutos" } } }, "minute-short": { "displayName": "min", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} min", "other": "dentro de {0} min" }, "past": { "one": "hace {0} min", "other": "hace {0} min" } } }, "second": { "displayName": "segundo", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} segundo", "other": "dentro de {0} segundos" }, "past": { "one": "hace {0} segundo", "other": "hace {0} segundos" } } }, "second-short": { "displayName": "seg.", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} seg.", "other": "dentro de {0} seg." }, "past": { "one": "hace {0} seg.", "other": "hace {0} seg." } } } } }, { "locale": "es-SV", "parentLocale": "es-419", "fields": { "year": { "displayName": "año", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} año", "other": "dentro de {0} años" }, "past": { "one": "hace {0} año", "other": "hace {0} años" } } }, "year-short": { "displayName": "a", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} a", "other": "dentro de {0} a" }, "past": { "one": "hace {0} a", "other": "hace {0} a" } } }, "month": { "displayName": "mes", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} mes", "other": "dentro de {0} meses" }, "past": { "one": "hace {0} mes", "other": "hace {0} meses" } } }, "month-short": { "displayName": "m", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} m", "other": "dentro de {0} m" }, "past": { "one": "hace {0} m", "other": "hace {0} m" } } }, "week": { "displayName": "semana", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la próxima semana", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} semana", "other": "dentro de {0} semanas" }, "past": { "one": "hace {0} semana", "other": "hace {0} semanas" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la próxima semana", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} sem.", "other": "dentro de {0} sem." }, "past": { "one": "hace {0} sem.", "other": "hace {0} sem." } } }, "day": { "displayName": "día", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "antier", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "day-short": { "displayName": "d", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "hour": { "displayName": "hora", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} hora", "other": "dentro de {0} horas" }, "past": { "one": "hace {0} hora", "other": "hace {0} horas" } } }, "hour-short": { "displayName": "h", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} h", "other": "dentro de {0} h" }, "past": { "one": "hace {0} h", "other": "hace {0} h" } } }, "minute": { "displayName": "minuto", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} minuto", "other": "dentro de {0} minutos" }, "past": { "one": "hace {0} minuto", "other": "hace {0} minutos" } } }, "minute-short": { "displayName": "min", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} min", "other": "dentro de {0} min" }, "past": { "one": "hace {0} min", "other": "hace {0} min" } } }, "second": { "displayName": "segundo", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} segundo", "other": "dentro de {0} segundos" }, "past": { "one": "hace {0} segundo", "other": "hace {0} segundos" } } }, "second-short": { "displayName": "s", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} s", "other": "dentro de {0} s" }, "past": { "one": "hace {0} s", "other": "hace {0} s" } } } } }, { "locale": "es-US", "parentLocale": "es-419", "fields": { "year": { "displayName": "año", "relative": { "0": "este año", "1": "el año próximo", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} año", "other": "dentro de {0} años" }, "past": { "one": "hace {0} año", "other": "hace {0} años" } } }, "year-short": { "displayName": "a", "relative": { "0": "este año", "1": "el próximo año", "-1": "el año pasado" }, "relativeTime": { "future": { "one": "dentro de {0} a", "other": "dentro de {0} a" }, "past": { "one": "hace {0} a", "other": "hace {0} a" } } }, "month": { "displayName": "mes", "relative": { "0": "este mes", "1": "el mes próximo", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} mes", "other": "dentro de {0} meses" }, "past": { "one": "hace {0} mes", "other": "hace {0} meses" } } }, "month-short": { "displayName": "m", "relative": { "0": "este mes", "1": "el próximo mes", "-1": "el mes pasado" }, "relativeTime": { "future": { "one": "dentro de {0} m", "other": "dentro de {0} m" }, "past": { "one": "hace {0} m", "other": "hace {0} m" } } }, "week": { "displayName": "semana", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la semana próxima", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} semana", "other": "dentro de {0} semanas" }, "past": { "one": "hace {0} semana", "other": "hace {0} semanas" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "la semana del {0}", "relative": { "0": "esta semana", "1": "la semana próxima", "-1": "la semana pasada" }, "relativeTime": { "future": { "one": "dentro de {0} sem.", "other": "dentro de {0} sem." }, "past": { "one": "hace {0} sem.", "other": "hace {0} sem." } } }, "day": { "displayName": "día", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "day-short": { "displayName": "d", "relative": { "0": "hoy", "1": "mañana", "2": "pasado mañana", "-2": "anteayer", "-1": "ayer" }, "relativeTime": { "future": { "one": "dentro de {0} día", "other": "dentro de {0} días" }, "past": { "one": "hace {0} día", "other": "hace {0} días" } } }, "hour": { "displayName": "hora", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} hora", "other": "dentro de {0} horas" }, "past": { "one": "hace {0} hora", "other": "hace {0} horas" } } }, "hour-short": { "displayName": "h", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} h", "other": "dentro de {0} h" }, "past": { "one": "hace {0} h", "other": "hace {0} h" } } }, "minute": { "displayName": "minuto", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} minuto", "other": "dentro de {0} minutos" }, "past": { "one": "hace {0} minuto", "other": "hace {0} minutos" } } }, "minute-short": { "displayName": "min", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} min", "other": "dentro de {0} min" }, "past": { "one": "hace {0} min", "other": "hace {0} min" } } }, "second": { "displayName": "segundo", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} segundo", "other": "dentro de {0} segundos" }, "past": { "one": "hace {0} segundo", "other": "hace {0} segundos" } } }, "second-short": { "displayName": "s", "relative": { "0": "ahora" }, "relativeTime": { "future": { "one": "dentro de {0} s", "other": "dentro de {0} s" }, "past": { "one": "hace {0} s", "other": "hace {0} s" } } } } }, { "locale": "es-UY", "parentLocale": "es-419" }, { "locale": "es-VE", "parentLocale": "es-419" }, { "locale": "et", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1];
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "aasta", "relative": { "0": "käesolev aasta", "1": "järgmine aasta", "-1": "eelmine aasta" }, "relativeTime": { "future": { "one": "{0} aasta pärast", "other": "{0} aasta pärast" }, "past": { "one": "{0} aasta eest", "other": "{0} aasta eest" } } }, "year-short": { "displayName": "a", "relative": { "0": "käesolev aasta", "1": "järgmine aasta", "-1": "eelmine aasta" }, "relativeTime": { "future": { "one": "{0} a pärast", "other": "{0} a pärast" }, "past": { "one": "{0} a eest", "other": "{0} a eest" } } }, "month": { "displayName": "kuu", "relative": { "0": "käesolev kuu", "1": "järgmine kuu", "-1": "eelmine kuu" }, "relativeTime": { "future": { "one": "{0} kuu pärast", "other": "{0} kuu pärast" }, "past": { "one": "{0} kuu eest", "other": "{0} kuu eest" } } }, "month-short": { "displayName": "k", "relative": { "0": "käesolev kuu", "1": "järgmine kuu", "-1": "eelmine kuu" }, "relativeTime": { "future": { "one": "{0} kuu pärast", "other": "{0} kuu pärast" }, "past": { "one": "{0} kuu eest", "other": "{0} kuu eest" } } }, "week": { "displayName": "nädal", "relativePeriod": "{0} nädal", "relative": { "0": "käesolev nädal", "1": "järgmine nädal", "-1": "eelmine nädal" }, "relativeTime": { "future": { "one": "{0} nädala pärast", "other": "{0} nädala pärast" }, "past": { "one": "{0} nädala eest", "other": "{0} nädala eest" } } }, "week-short": { "displayName": "näd", "relativePeriod": "{0} näd", "relative": { "0": "käesolev nädal", "1": "järgmine nädal", "-1": "eelmine nädal" }, "relativeTime": { "future": { "one": "{0} näd pärast", "other": "{0} näd pärast" }, "past": { "one": "{0} näd eest", "other": "{0} näd eest" } } }, "day": { "displayName": "päev", "relative": { "0": "täna", "1": "homme", "2": "ülehomme", "-2": "üleeile", "-1": "eile" }, "relativeTime": { "future": { "one": "{0} päeva pärast", "other": "{0} päeva pärast" }, "past": { "one": "{0} päeva eest", "other": "{0} päeva eest" } } }, "day-short": { "displayName": "p", "relative": { "0": "täna", "1": "homme", "2": "ülehomme", "-2": "üleeile", "-1": "eile" }, "relativeTime": { "future": { "one": "{0} p pärast", "other": "{0} p pärast" }, "past": { "one": "{0} p eest", "other": "{0} p eest" } } }, "hour": { "displayName": "tund", "relative": { "0": "praegusel tunnil" }, "relativeTime": { "future": { "one": "{0} tunni pärast", "other": "{0} tunni pärast" }, "past": { "one": "{0} tunni eest", "other": "{0} tunni eest" } } }, "hour-short": { "displayName": "t", "relative": { "0": "praegusel tunnil" }, "relativeTime": { "future": { "one": "{0} t pärast", "other": "{0} t pärast" }, "past": { "one": "{0} t eest", "other": "{0} t eest" } } }, "minute": { "displayName": "minut", "relative": { "0": "praegusel minutil" }, "relativeTime": { "future": { "one": "{0} minuti pärast", "other": "{0} minuti pärast" }, "past": { "one": "{0} minuti eest", "other": "{0} minuti eest" } } }, "minute-short": { "displayName": "min", "relative": { "0": "praegusel minutil" }, "relativeTime": { "future": { "one": "{0} min pärast", "other": "{0} min pärast" }, "past": { "one": "{0} min eest", "other": "{0} min eest" } } }, "second": { "displayName": "sekund", "relative": { "0": "nüüd" }, "relativeTime": { "future": { "one": "{0} sekundi pärast", "other": "{0} sekundi pärast" }, "past": { "one": "{0} sekundi eest", "other": "{0} sekundi eest" } } }, "second-short": { "displayName": "sek", "relative": { "0": "nüüd" }, "relativeTime": { "future": { "one": "{0} sek pärast", "other": "{0} sek pärast" }, "past": { "one": "{0} sek eest", "other": "{0} sek eest" } } } } }, { "locale": "eu", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "urtea", "relative": { "0": "aurten", "1": "hurrengo urtean", "-1": "iaz" }, "relativeTime": { "future": { "one": "{0} urte barru", "other": "{0} urte barru" }, "past": { "one": "Duela {0} urte", "other": "Duela {0} urte" } } }, "year-short": { "displayName": "urtea", "relative": { "0": "aurten", "1": "hurrengo urtea", "-1": "aurreko urtea" }, "relativeTime": { "future": { "one": "{0} urte barru", "other": "{0} urte barru" }, "past": { "one": "Duela {0} urte", "other": "Duela {0} urte" } } }, "month": { "displayName": "hilabetea", "relative": { "0": "hilabete honetan", "1": "hurrengo hilabetean", "-1": "aurreko hilabetean" }, "relativeTime": { "future": { "one": "{0} hilabete barru", "other": "{0} hilabete barru" }, "past": { "one": "Duela {0} hilabete", "other": "Duela {0} hilabete" } } }, "month-short": { "displayName": "hil.", "relative": { "0": "hilabete honetan", "1": "hurrengo hilabetean", "-1": "aurreko hilabetean" }, "relativeTime": { "future": { "one": "{0} hilabete barru", "other": "{0} hilabete barru" }, "past": { "one": "Duela {0} hilabete", "other": "Duela {0} hilabete" } } }, "week": { "displayName": "astea", "relativePeriod": "{0} astea", "relative": { "0": "aste honetan", "1": "hurrengo astean", "-1": "aurreko astean" }, "relativeTime": { "future": { "one": "{0} aste barru", "other": "{0} aste barru" }, "past": { "one": "Duela {0} aste", "other": "Duela {0} aste" } } }, "week-short": { "displayName": "ast.", "relativePeriod": "{0} astea", "relative": { "0": "aste honetan", "1": "hurrengo astean", "-1": "aurreko astean" }, "relativeTime": { "future": { "one": "{0} aste barru", "other": "{0} aste barru" }, "past": { "one": "Duela {0} aste", "other": "Duela {0} aste" } } }, "day": { "displayName": "eguna", "relative": { "0": "gaur", "1": "bihar", "2": "etzi", "-2": "herenegun", "-1": "atzo" }, "relativeTime": { "future": { "one": "{0} egun barru", "other": "{0} egun barru" }, "past": { "one": "Duela {0} egun", "other": "Duela {0} egun" } } }, "day-short": { "displayName": "eg.", "relative": { "0": "gaur", "1": "bihar", "2": "etzi", "-2": "herenegun", "-1": "atzo" }, "relativeTime": { "future": { "one": "{0} egun barru", "other": "{0} egun barru" }, "past": { "one": "Duela {0} egun", "other": "Duela {0} egun" } } }, "hour": { "displayName": "ordua", "relative": { "0": "ordu honetan" }, "relativeTime": { "future": { "one": "{0} ordu barru", "other": "{0} ordu barru" }, "past": { "one": "Duela {0} ordu", "other": "Duela {0} ordu" } } }, "hour-short": { "displayName": "h", "relative": { "0": "ordu honetan" }, "relativeTime": { "future": { "one": "{0} ordu barru", "other": "{0} ordu barru" }, "past": { "one": "Duela {0} ordu", "other": "Duela {0} ordu" } } }, "minute": { "displayName": "minutua", "relative": { "0": "minutu honetan" }, "relativeTime": { "future": { "one": "{0} minutu barru", "other": "{0} minutu barru" }, "past": { "one": "Duela {0} minutu", "other": "Duela {0} minutu" } } }, "minute-short": { "displayName": "min", "relative": { "0": "minutu honetan" }, "relativeTime": { "future": { "one": "{0} minutu barru", "other": "{0} minutu barru" }, "past": { "one": "Duela {0} minutu", "other": "Duela {0} minutu" } } }, "second": { "displayName": "segundoa", "relative": { "0": "orain" }, "relativeTime": { "future": { "one": "{0} segundo barru", "other": "{0} segundo barru" }, "past": { "one": "Duela {0} segundo", "other": "Duela {0} segundo" } } }, "second-short": { "displayName": "s", "relative": { "0": "orain" }, "relativeTime": { "future": { "one": "{0} segundo barru", "other": "{0} segundo barru" }, "past": { "one": "Duela {0} segundo", "other": "Duela {0} segundo" } } } } }, { "locale": "ewo", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "M̀bú", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "M̀bú", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Ngɔn", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Ngɔn", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Sɔ́ndɔ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Sɔ́ndɔ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Amǒs", "relative": { "0": "Aná", "1": "Okírí", "-1": "Angogé" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Amǒs", "relative": { "0": "Aná", "1": "Okírí", "-1": "Angogé" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Awola", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Awola", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Enútɛn", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Enútɛn", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Akábəga", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Akábəga", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "fa", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n >= 0 && n <= 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "سال", "relative": { "0": "امسال", "1": "سال آینده", "-1": "سال گذشته" }, "relativeTime": { "future": { "one": "{0} سال بعد", "other": "{0} سال بعد" }, "past": { "one": "{0} سال پیش", "other": "{0} سال پیش" } } }, "year-short": { "displayName": "سال", "relative": { "0": "امسال", "1": "سال آینده", "-1": "سال گذشته" }, "relativeTime": { "future": { "one": "{0} سال بعد", "other": "{0} سال بعد" }, "past": { "one": "{0} سال پیش", "other": "{0} سال پیش" } } }, "month": { "displayName": "ماه", "relative": { "0": "این ماه", "1": "ماه آینده", "-1": "ماه گذشته" }, "relativeTime": { "future": { "one": "{0} ماه بعد", "other": "{0} ماه بعد" }, "past": { "one": "{0} ماه پیش", "other": "{0} ماه پیش" } } }, "month-short": { "displayName": "ماه", "relative": { "0": "این ماه", "1": "ماه آینده", "-1": "ماه پیش" }, "relativeTime": { "future": { "one": "{0} ماه بعد", "other": "{0} ماه بعد" }, "past": { "one": "{0} ماه پیش", "other": "{0} ماه پیش" } } }, "week": { "displayName": "هفته", "relativePeriod": "هفتهٔ {0}", "relative": { "0": "این هفته", "1": "هفتهٔ آینده", "-1": "هفتهٔ گذشته" }, "relativeTime": { "future": { "one": "{0} هفته بعد", "other": "{0} هفته بعد" }, "past": { "one": "{0} هفته پیش", "other": "{0} هفته پیش" } } }, "week-short": { "displayName": "هفته", "relativePeriod": "هفتهٔ {0}", "relative": { "0": "این هفته", "1": "هفتهٔ آینده", "-1": "هفتهٔ گذشته" }, "relativeTime": { "future": { "one": "{0} هفته بعد", "other": "{0} هفته بعد" }, "past": { "one": "{0} هفته پیش", "other": "{0} هفته پیش" } } }, "day": { "displayName": "روز", "relative": { "0": "امروز", "1": "فردا", "2": "پس‌فردا", "-2": "پریروز", "-1": "دیروز" }, "relativeTime": { "future": { "one": "{0} روز بعد", "other": "{0} روز بعد" }, "past": { "one": "{0} روز پیش", "other": "{0} روز پیش" } } }, "day-short": { "displayName": "روز", "relative": { "0": "امروز", "1": "فردا", "2": "پس‌فردا", "-2": "پریروز", "-1": "دیروز" }, "relativeTime": { "future": { "one": "{0} روز بعد", "other": "{0} روز بعد" }, "past": { "one": "{0} روز پیش", "other": "{0} روز پیش" } } }, "hour": { "displayName": "ساعت", "relative": { "0": "همین ساعت" }, "relativeTime": { "future": { "one": "{0} ساعت بعد", "other": "{0} ساعت بعد" }, "past": { "one": "{0} ساعت پیش", "other": "{0} ساعت پیش" } } }, "hour-short": { "displayName": "ساعت", "relative": { "0": "همین ساعت" }, "relativeTime": { "future": { "one": "{0} ساعت بعد", "other": "{0} ساعت بعد" }, "past": { "one": "{0} ساعت پیش", "other": "{0} ساعت پیش" } } }, "minute": { "displayName": "دقیقه", "relative": { "0": "همین دقیقه" }, "relativeTime": { "future": { "one": "{0} دقیقه بعد", "other": "{0} دقیقه بعد" }, "past": { "one": "{0} دقیقه پیش", "other": "{0} دقیقه پیش" } } }, "minute-short": { "displayName": "دقیقه", "relative": { "0": "همین دقیقه" }, "relativeTime": { "future": { "one": "{0} دقیقه بعد", "other": "{0} دقیقه بعد" }, "past": { "one": "{0} دقیقه پیش", "other": "{0} دقیقه پیش" } } }, "second": { "displayName": "ثانیه", "relative": { "0": "اکنون" }, "relativeTime": { "future": { "one": "{0} ثانیه بعد", "other": "{0} ثانیه بعد" }, "past": { "one": "{0} ثانیه پیش", "other": "{0} ثانیه پیش" } } }, "second-short": { "displayName": "ثانیه", "relative": { "0": "اکنون" }, "relativeTime": { "future": { "one": "{0} ثانیه بعد", "other": "{0} ثانیه بعد" }, "past": { "one": "{0} ثانیه پیش", "other": "{0} ثانیه پیش" } } } } }, { "locale": "fa-AF", "parentLocale": "fa" }, { "locale": "ff", "pluralRuleFunction": function (n) {
        return (n >= 0 && n < 2) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Hitaande", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Hitaande", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Lewru", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Lewru", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Yontere", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Yontere", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ñalnde", "relative": { "0": "Hannde", "1": "Jaŋngo", "-1": "Haŋki" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ñalnde", "relative": { "0": "Hannde", "1": "Jaŋngo", "-1": "Haŋki" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Waktu", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Waktu", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Hoƴom", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Hoƴom", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Majaango", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Majaango", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ff-Adlm", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ff-Latn", "parentLocale": "ff" }, { "locale": "ff-Latn-BF", "parentLocale": "ff-Latn" }, { "locale": "ff-Latn-CM", "parentLocale": "ff-Latn" }, { "locale": "ff-Latn-GH", "parentLocale": "ff-Latn" }, { "locale": "ff-Latn-GM", "parentLocale": "ff-Latn" }, { "locale": "ff-Latn-GN", "parentLocale": "ff-Latn" }, { "locale": "ff-Latn-GW", "parentLocale": "ff-Latn" }, { "locale": "ff-Latn-LR", "parentLocale": "ff-Latn" }, { "locale": "ff-Latn-MR", "parentLocale": "ff-Latn" }, { "locale": "ff-Latn-NE", "parentLocale": "ff-Latn" }, { "locale": "ff-Latn-NG", "parentLocale": "ff-Latn" }, { "locale": "ff-Latn-SL", "parentLocale": "ff-Latn" }, { "locale": "fi", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1];
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "vuosi", "relative": { "0": "tänä vuonna", "1": "ensi vuonna", "-1": "viime vuonna" }, "relativeTime": { "future": { "one": "{0} vuoden päästä", "other": "{0} vuoden päästä" }, "past": { "one": "{0} vuosi sitten", "other": "{0} vuotta sitten" } } }, "year-short": { "displayName": "v", "relative": { "0": "tänä v", "1": "ensi v", "-1": "viime v" }, "relativeTime": { "future": { "one": "{0} v päästä", "other": "{0} v päästä" }, "past": { "one": "{0} v sitten", "other": "{0} v sitten" } } }, "month": { "displayName": "kuukausi", "relative": { "0": "tässä kuussa", "1": "ensi kuussa", "-1": "viime kuussa" }, "relativeTime": { "future": { "one": "{0} kuukauden päästä", "other": "{0} kuukauden päästä" }, "past": { "one": "{0} kuukausi sitten", "other": "{0} kuukautta sitten" } } }, "month-short": { "displayName": "kk", "relative": { "0": "tässä kk", "1": "ensi kk", "-1": "viime kk" }, "relativeTime": { "future": { "one": "{0} kk päästä", "other": "{0} kk päästä" }, "past": { "one": "{0} kk sitten", "other": "{0} kk sitten" } } }, "week": { "displayName": "viikko", "relativePeriod": "päivän {0} viikolla", "relative": { "0": "tällä viikolla", "1": "ensi viikolla", "-1": "viime viikolla" }, "relativeTime": { "future": { "one": "{0} viikon päästä", "other": "{0} viikon päästä" }, "past": { "one": "{0} viikko sitten", "other": "{0} viikkoa sitten" } } }, "week-short": { "displayName": "vk", "relativePeriod": "päivän {0} viikolla", "relative": { "0": "tällä vk", "1": "ensi vk", "-1": "viime vk" }, "relativeTime": { "future": { "one": "{0} vk päästä", "other": "{0} vk päästä" }, "past": { "one": "{0} vk sitten", "other": "{0} vk sitten" } } }, "day": { "displayName": "päivä", "relative": { "0": "tänään", "1": "huomenna", "2": "ylihuomenna", "-2": "toissa päivänä", "-1": "eilen" }, "relativeTime": { "future": { "one": "{0} päivän päästä", "other": "{0} päivän päästä" }, "past": { "one": "{0} päivä sitten", "other": "{0} päivää sitten" } } }, "day-short": { "displayName": "pv", "relative": { "0": "tänään", "1": "huom.", "2": "ylihuom.", "-2": "toissap.", "-1": "eilen" }, "relativeTime": { "future": { "one": "{0} pv päästä", "other": "{0} pv päästä" }, "past": { "one": "{0} pv sitten", "other": "{0} pv sitten" } } }, "hour": { "displayName": "tunti", "relative": { "0": "tämän tunnin aikana" }, "relativeTime": { "future": { "one": "{0} tunnin päästä", "other": "{0} tunnin päästä" }, "past": { "one": "{0} tunti sitten", "other": "{0} tuntia sitten" } } }, "hour-short": { "displayName": "t", "relative": { "0": "tunnin sisällä" }, "relativeTime": { "future": { "one": "{0} t päästä", "other": "{0} t päästä" }, "past": { "one": "{0} t sitten", "other": "{0} t sitten" } } }, "minute": { "displayName": "minuutti", "relative": { "0": "tämän minuutin aikana" }, "relativeTime": { "future": { "one": "{0} minuutin päästä", "other": "{0} minuutin päästä" }, "past": { "one": "{0} minuutti sitten", "other": "{0} minuuttia sitten" } } }, "minute-short": { "displayName": "min", "relative": { "0": "minuutin sisällä" }, "relativeTime": { "future": { "one": "{0} min päästä", "other": "{0} min päästä" }, "past": { "one": "{0} min sitten", "other": "{0} min sitten" } } }, "second": { "displayName": "sekunti", "relative": { "0": "nyt" }, "relativeTime": { "future": { "one": "{0} sekunnin päästä", "other": "{0} sekunnin päästä" }, "past": { "one": "{0} sekunti sitten", "other": "{0} sekuntia sitten" } } }, "second-short": { "displayName": "s", "relative": { "0": "nyt" }, "relativeTime": { "future": { "one": "{0} s päästä", "other": "{0} s päästä" }, "past": { "one": "{0} s sitten", "other": "{0} s sitten" } } } } }, { "locale": "fil", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i10 = i.slice(-1), f10 = f.slice(-1);
        if (ord)
            return (n == 1) ? 'one' : 'other';
        return (v0 && (i == 1 || i == 2 || i == 3)
            || v0 && i10 != 4 && i10 != 6 && i10 != 9
            || !v0 && f10 != 4 && f10 != 6 && f10 != 9) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "taon", "relative": { "0": "ngayong taon", "1": "susunod na taon", "-1": "nakaraang taon" }, "relativeTime": { "future": { "one": "sa {0} taon", "other": "sa {0} (na) taon" }, "past": { "one": "{0} taon ang nakalipas", "other": "{0} (na) taon ang nakalipas" } } }, "year-short": { "displayName": "taon", "relative": { "0": "ngayong taon", "1": "susunod na taon", "-1": "nakaraang taon" }, "relativeTime": { "future": { "one": "sa {0} taon", "other": "sa {0} (na) taon" }, "past": { "one": "{0} taon ang nakalipas", "other": "{0} (na) taon ang nakalipas" } } }, "month": { "displayName": "buwan", "relative": { "0": "ngayong buwan", "1": "susunod na buwan", "-1": "nakaraang buwan" }, "relativeTime": { "future": { "one": "sa {0} buwan", "other": "sa {0} (na) buwan" }, "past": { "one": "{0} buwan ang nakalipas", "other": "{0} (na) buwan ang nakalipas" } } }, "month-short": { "displayName": "buwan", "relative": { "0": "ngayong buwan", "1": "susunod na buwan", "-1": "nakaraang buwan" }, "relativeTime": { "future": { "one": "sa {0} buwan", "other": "sa {0} (na) buwan" }, "past": { "one": "{0} buwan ang nakalipas", "other": "{0} (na) buwan ang nakalipas" } } }, "week": { "displayName": "linggo", "relativePeriod": "linggo ng {0}", "relative": { "0": "sa linggong ito", "1": "susunod na linggo", "-1": "nakalipas na linggo" }, "relativeTime": { "future": { "one": "sa {0} linggo", "other": "sa {0} (na) linggo" }, "past": { "one": "{0} linggo ang nakalipas", "other": "{0} (na) linggo ang nakalipas" } } }, "week-short": { "displayName": "linggo", "relativePeriod": "linggo ng {0}", "relative": { "0": "ngayong linggo", "1": "susunod na linggo", "-1": "nakaraang linggo" }, "relativeTime": { "future": { "one": "sa {0} linggo", "other": "sa {0} (na) linggo" }, "past": { "one": "{0} linggo ang nakalipas", "other": "{0} (na) linggo ang nakalipas" } } }, "day": { "displayName": "araw", "relative": { "0": "ngayong araw", "1": "bukas", "2": "Samakalawa", "-2": "Araw bago ang kahapon", "-1": "kahapon" }, "relativeTime": { "future": { "one": "sa {0} araw", "other": "sa {0} (na) araw" }, "past": { "one": "{0} araw ang nakalipas", "other": "{0} (na) araw ang nakalipas" } } }, "day-short": { "displayName": "araw", "relative": { "0": "ngayong araw", "1": "bukas", "2": "Samakalawa", "-2": "Araw bago ang kahapon", "-1": "kahapon" }, "relativeTime": { "future": { "one": "sa {0} (na) araw", "other": "sa {0} (na) araw" }, "past": { "one": "{0} (na) araw ang nakalipas", "other": "{0} (na) araw ang nakalipas" } } }, "hour": { "displayName": "oras", "relative": { "0": "ngayong oras" }, "relativeTime": { "future": { "one": "sa {0} oras", "other": "sa {0} (na) oras" }, "past": { "one": "{0} oras ang nakalipas", "other": "{0} (na) oras ang nakalipas" } } }, "hour-short": { "displayName": "oras", "relative": { "0": "ngayong oras" }, "relativeTime": { "future": { "one": "sa {0} oras", "other": "sa {0} (na) oras" }, "past": { "one": "{0} oras ang nakalipas", "other": "{0} (na) oras ang nakalipas" } } }, "minute": { "displayName": "minuto", "relative": { "0": "sa minutong ito" }, "relativeTime": { "future": { "one": "sa {0} minuto", "other": "sa {0} (na) minuto" }, "past": { "one": "{0} minuto ang nakalipas", "other": "{0} (na) minuto ang nakalipas" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "sa minutong ito" }, "relativeTime": { "future": { "one": "sa {0} min.", "other": "sa {0} (na) min." }, "past": { "one": "{0} min. ang nakalipas", "other": "{0} (na) min. ang nakalipas" } } }, "second": { "displayName": "segundo", "relative": { "0": "ngayon" }, "relativeTime": { "future": { "one": "sa {0} segundo", "other": "sa {0} (na) segundo" }, "past": { "one": "{0} segundo ang nakalipas", "other": "{0} (na) segundo ang nakalipas" } } }, "second-short": { "displayName": "seg.", "relative": { "0": "ngayon" }, "relativeTime": { "future": { "one": "sa {0} seg.", "other": "sa {0} (na) seg." }, "past": { "one": "{0} seg. ang nakalipas", "other": "{0} (na) seg. nakalipas" } } } } }, { "locale": "fo", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ár", "relative": { "0": "í ár", "1": "næsta ár", "-1": "í fjør" }, "relativeTime": { "future": { "one": "um {0} ár", "other": "um {0} ár" }, "past": { "one": "{0} ár síðan", "other": "{0} ár síðan" } } }, "year-short": { "displayName": "ár", "relative": { "0": "í ár", "1": "næsta ár", "-1": "í fjør" }, "relativeTime": { "future": { "one": "um {0} ár", "other": "um {0} ár" }, "past": { "one": "{0} ár síðan", "other": "{0} ár síðan" } } }, "month": { "displayName": "mánaður", "relative": { "0": "henda mánaðin", "1": "næsta mánað", "-1": "seinasta mánað" }, "relativeTime": { "future": { "one": "um {0} mánað", "other": "um {0} mánaðir" }, "past": { "one": "{0} mánað síðan", "other": "{0} mánaðir síðan" } } }, "month-short": { "displayName": "mnð.", "relative": { "0": "henda mánaðin", "1": "næsta mánað", "-1": "seinasta mánað" }, "relativeTime": { "future": { "one": "um {0} mnð.", "other": "um {0} mnð." }, "past": { "one": "{0} mnð. síðan", "other": "{0} mnð. síðan" } } }, "week": { "displayName": "vika", "relativePeriod": "vika nummar {0}", "relative": { "0": "hesu viku", "1": "næstu viku", "-1": "seinastu viku" }, "relativeTime": { "future": { "one": "um {0} viku", "other": "um {0} vikur" }, "past": { "one": "{0} vika síðan", "other": "{0} vikur síðan" } } }, "week-short": { "displayName": "vi.", "relativePeriod": "vika nummar {0}", "relative": { "0": "hesu viku", "1": "næstu viku", "-1": "seinastu viku" }, "relativeTime": { "future": { "one": "um {0} vi.", "other": "um {0} vi." }, "past": { "one": "{0} vi. síðan", "other": "{0} vi. síðan" } } }, "day": { "displayName": "dagur", "relative": { "0": "í dag", "1": "í morgin", "2": "í ovurmorgin", "-2": "fyrradagin", "-1": "í gjár" }, "relativeTime": { "future": { "one": "um {0} dag", "other": "um {0} dagar" }, "past": { "one": "{0} dagur síðan", "other": "{0} dagar síðan" } } }, "day-short": { "displayName": "da.", "relative": { "0": "í dag", "1": "í morgin", "2": "í ovurmorgin", "-2": "fyrradagin", "-1": "í gjár" }, "relativeTime": { "future": { "one": "um {0} da.", "other": "um {0} da." }, "past": { "one": "{0} da. síðan", "other": "{0} da. síðan" } } }, "hour": { "displayName": "tími", "relative": { "0": "hendan tíman" }, "relativeTime": { "future": { "one": "um {0} tíma", "other": "um {0} tímar" }, "past": { "one": "{0} tími síðan", "other": "{0} tímar síðan" } } }, "hour-short": { "displayName": "t.", "relative": { "0": "hendan tíman" }, "relativeTime": { "future": { "one": "um {0} t.", "other": "um {0} t." }, "past": { "one": "{0} t. síðan", "other": "{0} t. síðan" } } }, "minute": { "displayName": "minuttur", "relative": { "0": "hendan minuttin" }, "relativeTime": { "future": { "one": "um {0} minutt", "other": "um {0} minuttir" }, "past": { "one": "{0} minutt síðan", "other": "{0} minuttir síðan" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "hendan minuttin" }, "relativeTime": { "future": { "one": "um {0} min.", "other": "um {0} min." }, "past": { "one": "{0} min. síðan", "other": "{0} min. síðan" } } }, "second": { "displayName": "sekund", "relative": { "0": "nú" }, "relativeTime": { "future": { "one": "um {0} sekund", "other": "um {0} sekund" }, "past": { "one": "{0} sekund síðan", "other": "{0} sekund síðan" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "nú" }, "relativeTime": { "future": { "one": "um {0} sek.", "other": "um {0} sek." }, "past": { "one": "{0} sek. síðan", "other": "{0} sek. síðan" } } } } }, { "locale": "fo-DK", "parentLocale": "fo" }, { "locale": "fr", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return (n == 1) ? 'one' : 'other';
        return (n >= 0 && n < 2) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "année", "relative": { "0": "cette année", "1": "l’année prochaine", "-1": "l’année dernière" }, "relativeTime": { "future": { "one": "dans {0} an", "other": "dans {0} ans" }, "past": { "one": "il y a {0} an", "other": "il y a {0} ans" } } }, "year-short": { "displayName": "an", "relative": { "0": "cette année", "1": "l’année prochaine", "-1": "l’année dernière" }, "relativeTime": { "future": { "one": "dans {0} a", "other": "dans {0} a" }, "past": { "one": "il y a {0} a", "other": "il y a {0} a" } } }, "month": { "displayName": "mois", "relative": { "0": "ce mois-ci", "1": "le mois prochain", "-1": "le mois dernier" }, "relativeTime": { "future": { "one": "dans {0} mois", "other": "dans {0} mois" }, "past": { "one": "il y a {0} mois", "other": "il y a {0} mois" } } }, "month-short": { "displayName": "m.", "relative": { "0": "ce mois-ci", "1": "le mois prochain", "-1": "le mois dernier" }, "relativeTime": { "future": { "one": "dans {0} m.", "other": "dans {0} m." }, "past": { "one": "il y a {0} m.", "other": "il y a {0} m." } } }, "week": { "displayName": "semaine", "relativePeriod": "la semaine du {0}", "relative": { "0": "cette semaine", "1": "la semaine prochaine", "-1": "la semaine dernière" }, "relativeTime": { "future": { "one": "dans {0} semaine", "other": "dans {0} semaines" }, "past": { "one": "il y a {0} semaine", "other": "il y a {0} semaines" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "sem. du {0}", "relative": { "0": "cette semaine", "1": "la semaine prochaine", "-1": "la semaine dernière" }, "relativeTime": { "future": { "one": "dans {0} sem.", "other": "dans {0} sem." }, "past": { "one": "il y a {0} sem.", "other": "il y a {0} sem." } } }, "day": { "displayName": "jour", "relative": { "0": "aujourd’hui", "1": "demain", "2": "après-demain", "-2": "avant-hier", "-1": "hier" }, "relativeTime": { "future": { "one": "dans {0} jour", "other": "dans {0} jours" }, "past": { "one": "il y a {0} jour", "other": "il y a {0} jours" } } }, "day-short": { "displayName": "j", "relative": { "0": "aujourd’hui", "1": "demain", "2": "après-demain", "-2": "avant-hier", "-1": "hier" }, "relativeTime": { "future": { "one": "dans {0} j", "other": "dans {0} j" }, "past": { "one": "il y a {0} j", "other": "il y a {0} j" } } }, "hour": { "displayName": "heure", "relative": { "0": "cette heure-ci" }, "relativeTime": { "future": { "one": "dans {0} heure", "other": "dans {0} heures" }, "past": { "one": "il y a {0} heure", "other": "il y a {0} heures" } } }, "hour-short": { "displayName": "h", "relative": { "0": "cette heure-ci" }, "relativeTime": { "future": { "one": "dans {0} h", "other": "dans {0} h" }, "past": { "one": "il y a {0} h", "other": "il y a {0} h" } } }, "minute": { "displayName": "minute", "relative": { "0": "cette minute-ci" }, "relativeTime": { "future": { "one": "dans {0} minute", "other": "dans {0} minutes" }, "past": { "one": "il y a {0} minute", "other": "il y a {0} minutes" } } }, "minute-short": { "displayName": "min", "relative": { "0": "cette minute-ci" }, "relativeTime": { "future": { "one": "dans {0} min", "other": "dans {0} min" }, "past": { "one": "il y a {0} min", "other": "il y a {0} min" } } }, "second": { "displayName": "seconde", "relative": { "0": "maintenant" }, "relativeTime": { "future": { "one": "dans {0} seconde", "other": "dans {0} secondes" }, "past": { "one": "il y a {0} seconde", "other": "il y a {0} secondes" } } }, "second-short": { "displayName": "s", "relative": { "0": "maintenant" }, "relativeTime": { "future": { "one": "dans {0} s", "other": "dans {0} s" }, "past": { "one": "il y a {0} s", "other": "il y a {0} s" } } } } }, { "locale": "fr-BE", "parentLocale": "fr" }, { "locale": "fr-BF", "parentLocale": "fr" }, { "locale": "fr-BI", "parentLocale": "fr" }, { "locale": "fr-BJ", "parentLocale": "fr" }, { "locale": "fr-BL", "parentLocale": "fr" }, { "locale": "fr-CA", "parentLocale": "fr", "fields": { "year": { "displayName": "année", "relative": { "0": "cette année", "1": "l’année prochaine", "-1": "l’année dernière" }, "relativeTime": { "future": { "one": "Dans {0} an", "other": "Dans {0} ans" }, "past": { "one": "Il y a {0} an", "other": "Il y a {0} ans" } } }, "year-short": { "displayName": "a", "relative": { "0": "cette année", "1": "l’année prochaine", "-1": "l’année dernière" }, "relativeTime": { "future": { "one": "dans {0} a", "other": "dans {0} a" }, "past": { "one": "il y a {0} a", "other": "il y a {0} a" } } }, "month": { "displayName": "mois", "relative": { "0": "ce mois-ci", "1": "le mois prochain", "-1": "le mois dernier" }, "relativeTime": { "future": { "one": "dans {0} mois", "other": "dans {0} mois" }, "past": { "one": "il y a {0} mois", "other": "il y a {0} mois" } } }, "month-short": { "displayName": "m.", "relative": { "0": "ce mois-ci", "1": "le mois prochain", "-1": "le mois dernier" }, "relativeTime": { "future": { "one": "dans {0} m.", "other": "dans {0} m." }, "past": { "one": "il y a {0} m.", "other": "il y a {0} m." } } }, "week": { "displayName": "semaine", "relativePeriod": "la semaine du {0}", "relative": { "0": "cette semaine", "1": "la semaine prochaine", "-1": "la semaine dernière" }, "relativeTime": { "future": { "one": "dans {0} semaine", "other": "dans {0} semaines" }, "past": { "one": "il y a {0} semaine", "other": "il y a {0} semaines" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "sem. du {0}", "relative": { "0": "cette semaine", "1": "la semaine prochaine", "-1": "la semaine dernière" }, "relativeTime": { "future": { "one": "dans {0} sem.", "other": "dans {0} sem." }, "past": { "one": "il y a {0} sem.", "other": "il y a {0} sem." } } }, "day": { "displayName": "jour", "relative": { "0": "aujourd’hui", "1": "demain", "2": "après-demain", "-2": "avant-hier", "-1": "hier" }, "relativeTime": { "future": { "one": "dans {0} jour", "other": "dans {0} jours" }, "past": { "one": "il y a {0} jour", "other": "il y a {0} jours" } } }, "day-short": { "displayName": "j", "relative": { "0": "aujourd’hui", "1": "demain", "2": "après-demain", "-2": "avant-hier", "-1": "hier" }, "relativeTime": { "future": { "one": "dans {0} j", "other": "dans {0} j" }, "past": { "one": "il y a {0} j", "other": "il y a {0} j" } } }, "hour": { "displayName": "heure", "relative": { "0": "cette heure-ci" }, "relativeTime": { "future": { "one": "dans {0} heure", "other": "dans {0} heures" }, "past": { "one": "il y a {0} heure", "other": "il y a {0} heures" } } }, "hour-short": { "displayName": "h", "relative": { "0": "cette heure-ci" }, "relativeTime": { "future": { "one": "dans {0} h", "other": "dans {0} h" }, "past": { "one": "il y a {0} h", "other": "il y a {0} h" } } }, "minute": { "displayName": "minute", "relative": { "0": "cette minute-ci" }, "relativeTime": { "future": { "one": "dans {0} minute", "other": "dans {0} minutes" }, "past": { "one": "il y a {0} minute", "other": "il y a {0} minutes" } } }, "minute-short": { "displayName": "min", "relative": { "0": "cette minute-ci" }, "relativeTime": { "future": { "one": "dans {0} min", "other": "dans {0} min" }, "past": { "one": "il y a {0} min", "other": "il y a {0} min" } } }, "second": { "displayName": "seconde", "relative": { "0": "maintenant" }, "relativeTime": { "future": { "one": "dans {0} seconde", "other": "dans {0} secondes" }, "past": { "one": "il y a {0} seconde", "other": "il y a {0} secondes" } } }, "second-short": { "displayName": "s", "relative": { "0": "maintenant" }, "relativeTime": { "future": { "one": "dans {0} s", "other": "dans {0} s" }, "past": { "one": "il y a {0} s", "other": "il y a {0} s" } } } } }, { "locale": "fr-CD", "parentLocale": "fr" }, { "locale": "fr-CF", "parentLocale": "fr" }, { "locale": "fr-CG", "parentLocale": "fr" }, { "locale": "fr-CH", "parentLocale": "fr" }, { "locale": "fr-CI", "parentLocale": "fr" }, { "locale": "fr-CM", "parentLocale": "fr" }, { "locale": "fr-DJ", "parentLocale": "fr" }, { "locale": "fr-DZ", "parentLocale": "fr" }, { "locale": "fr-GA", "parentLocale": "fr" }, { "locale": "fr-GF", "parentLocale": "fr" }, { "locale": "fr-GN", "parentLocale": "fr" }, { "locale": "fr-GP", "parentLocale": "fr" }, { "locale": "fr-GQ", "parentLocale": "fr" }, { "locale": "fr-HT", "parentLocale": "fr", "fields": { "year": { "displayName": "année", "relative": { "0": "cette année", "1": "l’année prochaine", "-1": "l’année dernière" }, "relativeTime": { "future": { "one": "dans {0} an", "other": "dans {0} ans" }, "past": { "one": "il y a {0} an", "other": "il y a {0} ans" } } }, "year-short": { "displayName": "an", "relative": { "0": "cette année", "1": "l’année prochaine", "-1": "l’année dernière" }, "relativeTime": { "future": { "one": "dans {0} a", "other": "dans {0} a" }, "past": { "one": "il y a {0} a", "other": "il y a {0} a" } } }, "month": { "displayName": "mois", "relative": { "0": "ce mois-ci", "1": "le mois prochain", "-1": "le mois dernier" }, "relativeTime": { "future": { "one": "dans {0} mois", "other": "dans {0} mois" }, "past": { "one": "il y a {0} mois", "other": "il y a {0} mois" } } }, "month-short": { "displayName": "m.", "relative": { "0": "ce mois-ci", "1": "le mois prochain", "-1": "le mois dernier" }, "relativeTime": { "future": { "one": "dans {0} m.", "other": "dans {0} m." }, "past": { "one": "il y a {0} m.", "other": "il y a {0} m." } } }, "week": { "displayName": "semaine", "relativePeriod": "la semaine du {0}", "relative": { "0": "cette semaine", "1": "la semaine prochaine", "-1": "la semaine dernière" }, "relativeTime": { "future": { "one": "dans {0} semaine", "other": "dans {0} semaines" }, "past": { "one": "il y a {0} semaine", "other": "il y a {0} semaines" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "sem. du {0}", "relative": { "0": "cette semaine", "1": "la semaine prochaine", "-1": "la semaine dernière" }, "relativeTime": { "future": { "one": "dans {0} sem.", "other": "dans {0} sem." }, "past": { "one": "il y a {0} sem.", "other": "il y a {0} sem." } } }, "day": { "displayName": "jour", "relative": { "0": "aujourd’hui", "1": "demain", "2": "après-demain", "-2": "avant-hier", "-1": "hier" }, "relativeTime": { "future": { "one": "dans {0} jour", "other": "dans {0} jours" }, "past": { "one": "il y a {0} jour", "other": "il y a {0} jours" } } }, "day-short": { "displayName": "jr.", "relative": { "0": "aujourd’hui", "1": "demain", "2": "après-demain", "-2": "avant-hier", "-1": "hier" }, "relativeTime": { "future": { "one": "dans {0} j", "other": "dans {0} j" }, "past": { "one": "il y a {0} j", "other": "il y a {0} j" } } }, "hour": { "displayName": "heure", "relative": { "0": "cette heure-ci" }, "relativeTime": { "future": { "one": "dans {0} heure", "other": "dans {0} heures" }, "past": { "one": "il y a {0} heure", "other": "il y a {0} heures" } } }, "hour-short": { "displayName": "hr", "relative": { "0": "cette heure-ci" }, "relativeTime": { "future": { "one": "dans {0} h", "other": "dans {0} h" }, "past": { "one": "il y a {0} h", "other": "il y a {0} h" } } }, "minute": { "displayName": "minute", "relative": { "0": "cette minute-ci" }, "relativeTime": { "future": { "one": "dans {0} minute", "other": "dans {0} minutes" }, "past": { "one": "il y a {0} minute", "other": "il y a {0} minutes" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "cette minute-ci" }, "relativeTime": { "future": { "one": "dans {0} min", "other": "dans {0} min" }, "past": { "one": "il y a {0} min", "other": "il y a {0} min" } } }, "second": { "displayName": "seconde", "relative": { "0": "maintenant" }, "relativeTime": { "future": { "one": "dans {0} seconde", "other": "dans {0} secondes" }, "past": { "one": "il y a {0} seconde", "other": "il y a {0} secondes" } } }, "second-short": { "displayName": "s", "relative": { "0": "maintenant" }, "relativeTime": { "future": { "one": "dans {0} s", "other": "dans {0} s" }, "past": { "one": "il y a {0} s", "other": "il y a {0} s" } } } } }, { "locale": "fr-KM", "parentLocale": "fr" }, { "locale": "fr-LU", "parentLocale": "fr" }, { "locale": "fr-MA", "parentLocale": "fr" }, { "locale": "fr-MC", "parentLocale": "fr" }, { "locale": "fr-MF", "parentLocale": "fr" }, { "locale": "fr-MG", "parentLocale": "fr" }, { "locale": "fr-ML", "parentLocale": "fr" }, { "locale": "fr-MQ", "parentLocale": "fr" }, { "locale": "fr-MR", "parentLocale": "fr" }, { "locale": "fr-MU", "parentLocale": "fr" }, { "locale": "fr-NC", "parentLocale": "fr" }, { "locale": "fr-NE", "parentLocale": "fr" }, { "locale": "fr-PF", "parentLocale": "fr" }, { "locale": "fr-PM", "parentLocale": "fr" }, { "locale": "fr-RE", "parentLocale": "fr" }, { "locale": "fr-RW", "parentLocale": "fr" }, { "locale": "fr-SC", "parentLocale": "fr" }, { "locale": "fr-SN", "parentLocale": "fr" }, { "locale": "fr-SY", "parentLocale": "fr" }, { "locale": "fr-TD", "parentLocale": "fr" }, { "locale": "fr-TG", "parentLocale": "fr" }, { "locale": "fr-TN", "parentLocale": "fr" }, { "locale": "fr-VU", "parentLocale": "fr" }, { "locale": "fr-WF", "parentLocale": "fr" }, { "locale": "fr-YT", "parentLocale": "fr" }, { "locale": "fur", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "an", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "ca di {0} an", "other": "ca di {0} agns" }, "past": { "one": "{0} an indaûr", "other": "{0} agns indaûr" } } }, "year-short": { "displayName": "an", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "ca di {0} an", "other": "ca di {0} agns" }, "past": { "one": "{0} an indaûr", "other": "{0} agns indaûr" } } }, "month": { "displayName": "mês", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "ca di {0} mês", "other": "ca di {0} mês" }, "past": { "one": "{0} mês indaûr", "other": "{0} mês indaûr" } } }, "month-short": { "displayName": "mês", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "ca di {0} mês", "other": "ca di {0} mês" }, "past": { "one": "{0} mês indaûr", "other": "{0} mês indaûr" } } }, "week": { "displayName": "setemane", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "ca di {0} setemane", "other": "ca di {0} setemanis" }, "past": { "one": "{0} setemane indaûr", "other": "{0} setemanis indaûr" } } }, "week-short": { "displayName": "setemane", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "ca di {0} setemane", "other": "ca di {0} setemanis" }, "past": { "one": "{0} setemane indaûr", "other": "{0} setemanis indaûr" } } }, "day": { "displayName": "dì", "relative": { "0": "vuê", "1": "doman", "2": "passantdoman", "-2": "îr l’altri", "-1": "îr" }, "relativeTime": { "future": { "one": "ca di {0} zornade", "other": "ca di {0} zornadis" }, "past": { "one": "{0} zornade indaûr", "other": "{0} zornadis indaûr" } } }, "day-short": { "displayName": "dì", "relative": { "0": "vuê", "1": "doman", "2": "passantdoman", "-2": "îr l’altri", "-1": "îr" }, "relativeTime": { "future": { "one": "ca di {0} zornade", "other": "ca di {0} zornadis" }, "past": { "one": "{0} zornade indaûr", "other": "{0} zornadis indaûr" } } }, "hour": { "displayName": "ore", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "ca di {0} ore", "other": "ca di {0} oris" }, "past": { "one": "{0} ore indaûr", "other": "{0} oris indaûr" } } }, "hour-short": { "displayName": "ore", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "ca di {0} ore", "other": "ca di {0} oris" }, "past": { "one": "{0} ore indaûr", "other": "{0} oris indaûr" } } }, "minute": { "displayName": "minût", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "ca di {0} minût", "other": "ca di {0} minûts" }, "past": { "one": "{0} minût indaûr", "other": "{0} minûts indaûr" } } }, "minute-short": { "displayName": "minût", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "ca di {0} minût", "other": "ca di {0} minûts" }, "past": { "one": "{0} minût indaûr", "other": "{0} minûts indaûr" } } }, "second": { "displayName": "secont", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "ca di {0} secont", "other": "ca di {0} seconts" }, "past": { "one": "{0} secont indaûr", "other": "{0} seconts indaûr" } } }, "second-short": { "displayName": "secont", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "ca di {0} secont", "other": "ca di {0} seconts" }, "past": { "one": "{0} secont indaûr", "other": "{0} seconts indaûr" } } } } }, { "locale": "fy", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1];
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Jier", "relative": { "0": "dit jier", "1": "folgjend jier", "-1": "foarich jier" }, "relativeTime": { "future": { "one": "Oer {0} jier", "other": "Oer {0} jier" }, "past": { "one": "{0} jier lyn", "other": "{0} jier lyn" } } }, "year-short": { "displayName": "Jier", "relative": { "0": "dit jier", "1": "folgjend jier", "-1": "foarich jier" }, "relativeTime": { "future": { "one": "Oer {0} jier", "other": "Oer {0} jier" }, "past": { "one": "{0} jier lyn", "other": "{0} jier lyn" } } }, "month": { "displayName": "Moanne", "relative": { "0": "dizze moanne", "1": "folgjende moanne", "-1": "foarige moanne" }, "relativeTime": { "future": { "one": "Oer {0} moanne", "other": "Oer {0} moannen" }, "past": { "one": "{0} moanne lyn", "other": "{0} moannen lyn" } } }, "month-short": { "displayName": "Moanne", "relative": { "0": "dizze moanne", "1": "folgjende moanne", "-1": "foarige moanne" }, "relativeTime": { "future": { "one": "Oer {0} moanne", "other": "Oer {0} moannen" }, "past": { "one": "{0} moanne lyn", "other": "{0} moannen lyn" } } }, "week": { "displayName": "Wike", "relativePeriod": "the week of {0}", "relative": { "0": "dizze wike", "1": "folgjende wike", "-1": "foarige wike" }, "relativeTime": { "future": { "one": "Oer {0} wike", "other": "Oer {0} wiken" }, "past": { "one": "{0} wike lyn", "other": "{0} wiken lyn" } } }, "week-short": { "displayName": "Wike", "relativePeriod": "the week of {0}", "relative": { "0": "dizze wike", "1": "folgjende wike", "-1": "foarige wike" }, "relativeTime": { "future": { "one": "Oer {0} wike", "other": "Oer {0} wiken" }, "past": { "one": "{0} wike lyn", "other": "{0} wiken lyn" } } }, "day": { "displayName": "dei", "relative": { "0": "vandaag", "1": "morgen", "2": "Oermorgen", "-2": "eergisteren", "-1": "gisteren" }, "relativeTime": { "future": { "one": "Oer {0} dei", "other": "Oer {0} deien" }, "past": { "one": "{0} dei lyn", "other": "{0} deien lyn" } } }, "day-short": { "displayName": "dei", "relative": { "0": "vandaag", "1": "morgen", "2": "Oermorgen", "-2": "eergisteren", "-1": "gisteren" }, "relativeTime": { "future": { "one": "Oer {0} dei", "other": "Oer {0} deien" }, "past": { "one": "{0} dei lyn", "other": "{0} deien lyn" } } }, "hour": { "displayName": "oere", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "Oer {0} oere", "other": "Oer {0} oere" }, "past": { "one": "{0} oere lyn", "other": "{0} oere lyn" } } }, "hour-short": { "displayName": "oere", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "Oer {0} oere", "other": "Oer {0} oere" }, "past": { "one": "{0} oere lyn", "other": "{0} oere lyn" } } }, "minute": { "displayName": "Minút", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "Oer {0} minút", "other": "Oer {0} minuten" }, "past": { "one": "{0} minút lyn", "other": "{0} minuten lyn" } } }, "minute-short": { "displayName": "Minút", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "Oer {0} minút", "other": "Oer {0} minuten" }, "past": { "one": "{0} minút lyn", "other": "{0} minuten lyn" } } }, "second": { "displayName": "Sekonde", "relative": { "0": "nu" }, "relativeTime": { "future": { "one": "Oer {0} sekonde", "other": "Oer {0} sekonden" }, "past": { "one": "{0} sekonde lyn", "other": "{0} sekonden lyn" } } }, "second-short": { "displayName": "Sekonde", "relative": { "0": "nu" }, "relativeTime": { "future": { "one": "Oer {0} sekonde", "other": "Oer {0} sekonden" }, "past": { "one": "{0} sekonde lyn", "other": "{0} sekonden lyn" } } } } }, { "locale": "ga", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n;
        if (ord)
            return (n == 1) ? 'one' : 'other';
        return (n == 1) ? 'one'
            : (n == 2) ? 'two'
                : ((t0 && n >= 3 && n <= 6)) ? 'few'
                    : ((t0 && n >= 7 && n <= 10)) ? 'many'
                        : 'other';
    }, "fields": { "year": { "displayName": "Bliain", "relative": { "0": "an bhliain seo", "1": "an bhliain seo chugainn", "-1": "anuraidh" }, "relativeTime": { "future": { "one": "i gceann {0} bhliain", "two": "i gceann {0} bhliain", "few": "i gceann {0} bliana", "many": "i gceann {0} mbliana", "other": "i gceann {0} bliain" }, "past": { "one": "{0} bhliain ó shin", "two": "{0} bhliain ó shin", "few": "{0} bliana ó shin", "many": "{0} mbliana ó shin", "other": "{0} bliain ó shin" } } }, "year-short": { "displayName": "bl.", "relative": { "0": "an bhl. seo", "1": "an bhl. seo chugainn", "-1": "anuraidh" }, "relativeTime": { "future": { "one": "i gceann {0} bl.", "two": "i gceann {0} bhl.", "few": "i gceann {0} bl.", "many": "i gceann {0} mbl.", "other": "i gceann {0} bl." }, "past": { "one": "{0} bhl. ó shin", "two": "{0} bhl. ó shin", "few": "{0} bl. ó shin", "many": "{0} mbl. ó shin", "other": "{0} bl. ó shin" } } }, "month": { "displayName": "Mí", "relative": { "0": "an mhí seo", "1": "an mhí seo chugainn", "-1": "an mhí seo caite" }, "relativeTime": { "future": { "one": "i gceann {0} mhí", "two": "i gceann {0} mhí", "few": "i gceann {0} mhí", "many": "i gceann {0} mí", "other": "i gceann {0} mí" }, "past": { "one": "{0} mhí ó shin", "two": "{0} mhí ó shin", "few": "{0} mhí ó shin", "many": "{0} mí ó shin", "other": "{0} mí ó shin" } } }, "month-short": { "displayName": "mí", "relative": { "0": "an mhí seo", "1": "an mhí seo chugainn", "-1": "an mhí seo caite" }, "relativeTime": { "future": { "one": "i gceann {0} mhí", "two": "i gceann {0} mhí", "few": "i gceann {0} mhí", "many": "i gceann {0} mí", "other": "i gceann {0} mí" }, "past": { "one": "{0} mhí ó shin", "two": "{0} mhí ó shin", "few": "{0} mhí ó shin", "many": "{0} mí ó shin", "other": "{0} mí ó shin" } } }, "week": { "displayName": "Seachtain", "relativePeriod": "seachtain {0}", "relative": { "0": "an tseachtain seo", "1": "an tseachtain seo chugainn", "-1": "an tseachtain seo caite" }, "relativeTime": { "future": { "one": "i gceann {0} seachtain", "two": "i gceann {0} sheachtain", "few": "i gceann {0} seachtaine", "many": "i gceann {0} seachtaine", "other": "i gceann {0} seachtain" }, "past": { "one": "{0} seachtain ó shin", "two": "{0} sheachtain ó shin", "few": "{0} seachtaine ó shin", "many": "{0} seachtaine ó shin", "other": "{0} seachtain ó shin" } } }, "week-short": { "displayName": "scht.", "relativePeriod": "seachtain {0}", "relative": { "0": "an tscht. seo", "1": "an tscht. seo chugainn", "-1": "an tscht. seo caite" }, "relativeTime": { "future": { "one": "i gceann {0} scht.", "two": "i gceann {0} shcht.", "few": "i gceann {0} scht.", "many": "i gceann {0} scht.", "other": "i gceann {0} scht." }, "past": { "one": "{0} scht. ó shin", "two": "{0} scht. ó shin", "few": "{0} scht. ó shin", "many": "{0} scht. ó shin", "other": "{0} scht. ó shin" } } }, "day": { "displayName": "Lá", "relative": { "0": "inniu", "1": "amárach", "2": "arú amárach", "-2": "arú inné", "-1": "inné" }, "relativeTime": { "future": { "one": "i gceann {0} lá", "two": "i gceann {0} lá", "few": "i gceann {0} lá", "many": "i gceann {0} lá", "other": "i gceann {0} lá" }, "past": { "one": "{0} lá ó shin", "two": "{0} lá ó shin", "few": "{0} lá ó shin", "many": "{0} lá ó shin", "other": "{0} lá ó shin" } } }, "day-short": { "displayName": "Lá", "relative": { "0": "inniu", "1": "amárach", "2": "arú amárach", "-2": "arú inné", "-1": "inné" }, "relativeTime": { "future": { "one": "i gceann {0} lá", "two": "i gceann {0} lá", "few": "i gceann {0} lá", "many": "i gceann {0} lá", "other": "i gceann {0} lá" }, "past": { "one": "{0} lá ó shin", "two": "{0} lá ó shin", "few": "{0} lá ó shin", "many": "{0} lá ó shin", "other": "{0} lá ó shin" } } }, "hour": { "displayName": "Uair", "relative": { "0": "an uair seo" }, "relativeTime": { "future": { "one": "i gceann {0} uair an chloig", "two": "i gceann {0} uair an chloig", "few": "i gceann {0} huaire an chloig", "many": "i gceann {0} n-uaire an chloig", "other": "i gceann {0} uair an chloig" }, "past": { "one": "{0} uair an chloig ó shin", "two": "{0} uair an chloig ó shin", "few": "{0} huaire an chloig ó shin", "many": "{0} n-uaire an chloig ó shin", "other": "{0} uair an chloig ó shin" } } }, "hour-short": { "displayName": "uair", "relative": { "0": "an uair seo" }, "relativeTime": { "future": { "one": "i gceann {0} uair", "two": "i gceann {0} uair", "few": "i gceann {0} huaire", "many": "i gceann {0} n-uaire", "other": "i gceann {0} uair" }, "past": { "one": "{0} uair ó shin", "two": "{0} uair ó shin", "few": "{0} huaire ó shin", "many": "{0} n-uaire ó shin", "other": "{0} uair ó shin" } } }, "minute": { "displayName": "Nóiméad", "relative": { "0": "an nóiméad seo" }, "relativeTime": { "future": { "one": "i gceann {0} nóiméad", "two": "i gceann {0} nóiméad", "few": "i gceann {0} nóiméad", "many": "i gceann {0} nóiméad", "other": "i gceann {0} nóiméad" }, "past": { "one": "{0} nóiméad ó shin", "two": "{0} nóiméad ó shin", "few": "{0} nóiméad ó shin", "many": "{0} nóiméad ó shin", "other": "{0} nóiméad ó shin" } } }, "minute-short": { "displayName": "nóim.", "relative": { "0": "an nóiméad seo" }, "relativeTime": { "future": { "one": "i gceann {0} nóim.", "two": "i gceann {0} nóim.", "few": "i gceann {0} nóim.", "many": "i gceann {0} nóim.", "other": "i gceann {0} nóim." }, "past": { "one": "{0} nóim. ó shin", "two": "{0} nóim. ó shin", "few": "{0} nóim. ó shin", "many": "{0} nóim. ó shin", "other": "{0} nóim. ó shin" } } }, "second": { "displayName": "Soicind", "relative": { "0": "anois" }, "relativeTime": { "future": { "one": "i gceann {0} soicind", "two": "i gceann {0} shoicind", "few": "i gceann {0} shoicind", "many": "i gceann {0} soicind", "other": "i gceann {0} soicind" }, "past": { "one": "{0} soicind ó shin", "two": "{0} shoicind ó shin", "few": "{0} shoicind ó shin", "many": "{0} soicind ó shin", "other": "{0} soicind ó shin" } } }, "second-short": { "displayName": "soic.", "relative": { "0": "anois" }, "relativeTime": { "future": { "one": "i gceann {0} soic.", "two": "i gceann {0} shoic.", "few": "i gceann {0} shoic.", "many": "i gceann {0} soic.", "other": "i gceann {0} soic." }, "past": { "one": "{0} soic. ó shin", "two": "{0} shoic. ó shin", "few": "{0} shoic. ó shin", "many": "{0} soic. ó shin", "other": "{0} soic. ó shin" } } } } }, { "locale": "gd", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n;
        if (ord)
            return ((n == 1
                || n == 11)) ? 'one'
                : ((n == 2
                    || n == 12)) ? 'two'
                    : ((n == 3
                        || n == 13)) ? 'few'
                        : 'other';
        return ((n == 1
            || n == 11)) ? 'one'
            : ((n == 2
                || n == 12)) ? 'two'
                : (((t0 && n >= 3 && n <= 10)
                    || (t0 && n >= 13 && n <= 19))) ? 'few'
                    : 'other';
    }, "fields": { "year": { "displayName": "bliadhna", "relative": { "0": "am bliadhna", "1": "an ath-bhliadhna", "-2": "a-bhòn-uiridh", "-1": "an-uiridh" }, "relativeTime": { "future": { "one": "an ceann {0} bhliadhna", "two": "an ceann {0} bhliadhna", "few": "an ceann {0} bliadhnaichean", "other": "an ceann {0} bliadhna" }, "past": { "one": "{0} bhliadhna air ais", "two": "{0} bhliadhna air ais", "few": "{0} bhliadhnaichean air ais", "other": "{0} bliadhna air ais" } } }, "year-short": { "displayName": "blia.", "relative": { "0": "am bliadhna", "1": "an ath-bhliadhna", "-2": "a-bhòn-uiridh", "-1": "an-uiridh" }, "relativeTime": { "future": { "one": "an {0} bhlia.", "two": "an {0} bhlia.", "few": "an {0} blia.", "other": "an {0} blia." }, "past": { "one": "o {0} bhlia.", "two": "o {0} bhlia.", "few": "o {0} blia.", "other": "o {0} blia." } } }, "month": { "displayName": "mìos", "relative": { "0": "am mìos seo", "1": "an ath-mhìos", "-1": "am mìos seo chaidh" }, "relativeTime": { "future": { "one": "an ceann {0} mhìosa", "two": "an ceann {0} mhìosa", "few": "an ceann {0} mìosan", "other": "an ceann {0} mìosa" }, "past": { "one": "{0} mhìos air ais", "two": "{0} mhìos air ais", "few": "{0} mìosan air ais", "other": "{0} mìos air ais" } } }, "month-short": { "displayName": "mìos", "relative": { "0": "am mìos seo", "1": "an ath-mhìos", "-1": "am mìos sa chaidh" }, "relativeTime": { "future": { "one": "an {0} mhìos.", "two": "an {0} mhìos.", "few": "an {0} mìos.", "other": "an {0} mìos." }, "past": { "one": "o {0} mhìos.", "two": "o {0} mhìos.", "few": "o {0} mìos.", "other": "o {0} mìos." } } }, "week": { "displayName": "seachdain", "relativePeriod": "an t-seachdain aig {0}", "relative": { "0": "an t-seachdain seo", "1": "an ath-sheachdain", "-1": "an t-seachdain seo chaidh" }, "relativeTime": { "future": { "one": "an ceann {0} seachdain", "two": "an ceann {0} sheachdain", "few": "an ceann {0} seachdainean", "other": "an ceann {0} seachdain" }, "past": { "one": "{0} seachdain air ais", "two": "{0} sheachdain air ais", "few": "{0} seachdainean air ais", "other": "{0} seachdain air ais" } } }, "week-short": { "displayName": "seachd.", "relativePeriod": "an t-seachdain aig {0}", "relative": { "0": "an t-seachd. seo", "1": "an ath-sheachd.", "-1": "seachd. sa chaidh" }, "relativeTime": { "future": { "one": "an {0} sheachd.", "two": "an {0} sheachd.", "few": "an {0} seachd.", "other": "an {0} seachd." }, "past": { "one": "o {0} sheachd.", "two": "o {0} sheachd.", "few": "o {0} seachd.", "other": "o {0} seachd." } } }, "day": { "displayName": "latha", "relative": { "0": "an-diugh", "1": "a-màireach", "2": "an-earar", "3": "an-eararais", "-2": "a-bhòin-dè", "-1": "an-dè" }, "relativeTime": { "future": { "one": "an ceann {0} latha", "two": "an ceann {0} latha", "few": "an ceann {0} làithean", "other": "an ceann {0} latha" }, "past": { "one": "{0} latha air ais", "two": "{0} latha air ais", "few": "{0} làithean air ais", "other": "{0} latha air ais" } } }, "day-short": { "displayName": "là", "relative": { "0": "an-diugh", "1": "a-màireach", "2": "an-earar", "3": "an-eararais", "-2": "a-bhòin-dè", "-1": "an-dè" }, "relativeTime": { "future": { "one": "an {0} là", "two": "an {0} là", "few": "an {0} là.", "other": "an {0} là" }, "past": { "one": "o {0} là", "two": "o {0} là", "few": "o {0} là.", "other": "o {0} là" } } }, "hour": { "displayName": "uair a thìde", "relative": { "0": "am broinn uair a thìde" }, "relativeTime": { "future": { "one": "an ceann {0} uair a thìde", "two": "an ceann {0} uair a thìde", "few": "an ceann {0} uairean a thìde", "other": "an ceann {0} uair a thìde" }, "past": { "one": "{0} uair a thìde air ais", "two": "{0} uair a thìde air ais", "few": "{0} uairean a thìde air ais", "other": "{0} uair a thìde air ais" } } }, "hour-short": { "displayName": "uair", "relative": { "0": "am broinn uair" }, "relativeTime": { "future": { "one": "an {0} uair", "two": "an {0} uair", "few": "an {0} uair.", "other": "an {0} uair" }, "past": { "one": "o {0} uair", "two": "o {0} uair", "few": "o {0} uair.", "other": "o {0} uair" } } }, "minute": { "displayName": "mionaid", "relative": { "0": "am broinn mionaid" }, "relativeTime": { "future": { "one": "an ceann {0} mhionaid", "two": "an ceann {0} mhionaid", "few": "an ceann {0} mionaidean", "other": "an ceann {0} mionaid" }, "past": { "one": "{0} mhionaid air ais", "two": "{0} mhionaid air ais", "few": "{0} mionaidean air ais", "other": "{0} mionaid air ais" } } }, "minute-short": { "displayName": "mion.", "relative": { "0": "am broinn mion." }, "relativeTime": { "future": { "one": "an {0} mhion.", "two": "an {0} mhion.", "few": "an {0} mion.", "other": "an {0} mion." }, "past": { "one": "o {0} mhion.", "two": "o {0} mhion.", "few": "o {0} mion.", "other": "o {0} mion." } } }, "second": { "displayName": "diog", "relative": { "0": "an-dràsta" }, "relativeTime": { "future": { "one": "an ceann {0} diog", "two": "an ceann {0} dhiog", "few": "an ceann {0} diogan", "other": "an ceann {0} diog" }, "past": { "one": "{0} diog air ais", "two": "{0} dhiog air ais", "few": "{0} diogan air ais", "other": "{0} diog air ais" } } }, "second-short": { "displayName": "diog", "relative": { "0": "an-dràsta" }, "relativeTime": { "future": { "one": "an {0} diog", "two": "an {0} dhiog", "few": "an {0} diog.", "other": "an {0} diog" }, "past": { "one": "o {0} diog", "two": "o {0} dhiog", "few": "o {0} diog.", "other": "o {0} diog" } } } } }, { "locale": "gl", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1];
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ano", "relative": { "0": "este ano", "1": "o próximo ano", "-1": "o ano pasado" }, "relativeTime": { "future": { "one": "en {0} ano", "other": "en {0} anos" }, "past": { "one": "hai {0} ano", "other": "hai {0} anos" } } }, "year-short": { "displayName": "ano", "relative": { "0": "este ano", "1": "seguinte ano", "-1": "ano pasado" }, "relativeTime": { "future": { "one": "en {0} ano", "other": "en {0} anos" }, "past": { "one": "hai {0} ano", "other": "hai {0} anos" } } }, "month": { "displayName": "mes", "relative": { "0": "este mes", "1": "o próximo mes", "-1": "o mes pasado" }, "relativeTime": { "future": { "one": "en {0} mes", "other": "en {0} meses" }, "past": { "one": "hai {0} mes", "other": "hai {0} meses" } } }, "month-short": { "displayName": "mes", "relative": { "0": "este m.", "1": "m. seguinte", "-1": "m. pasado" }, "relativeTime": { "future": { "one": "en {0} mes", "other": "en {0} meses" }, "past": { "one": "hai {0} mes", "other": "hai {0} meses" } } }, "week": { "displayName": "semana", "relativePeriod": "a semana do {0}", "relative": { "0": "esta semana", "1": "a próxima semana", "-1": "a semana pasada" }, "relativeTime": { "future": { "one": "en {0} semana", "other": "en {0} semanas" }, "past": { "one": "hai {0} semana", "other": "hai {0} semanas" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "a semana do {0}", "relative": { "0": "esta sem.", "1": "sem. seguinte", "-1": "sem. pasada" }, "relativeTime": { "future": { "one": "en {0} sem.", "other": "en {0} sem." }, "past": { "one": "hai {0} sem.", "other": "hai {0} sem." } } }, "day": { "displayName": "día", "relative": { "0": "hoxe", "1": "mañá", "2": "pasadomañá", "-2": "antonte", "-1": "onte" }, "relativeTime": { "future": { "one": "en {0} día", "other": "en {0} días" }, "past": { "one": "hai {0} día", "other": "hai {0} días" } } }, "day-short": { "displayName": "día", "relative": { "0": "hoxe", "1": "mañá", "2": "pasadomañá", "-2": "antonte", "-1": "onte" }, "relativeTime": { "future": { "one": "en {0} día", "other": "en {0} días" }, "past": { "one": "hai {0} día", "other": "hai {0} días" } } }, "hour": { "displayName": "hora", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "en {0} hora", "other": "en {0} horas" }, "past": { "one": "hai {0} hora", "other": "hai {0} horas" } } }, "hour-short": { "displayName": "h", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "en {0} h", "other": "en {0} h" }, "past": { "one": "hai {0} h", "other": "hai {0} h" } } }, "minute": { "displayName": "minuto", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "en {0} minuto", "other": "en {0} minutos" }, "past": { "one": "hai {0} minuto", "other": "hai {0} minutos" } } }, "minute-short": { "displayName": "min", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "en {0} min", "other": "en {0} min" }, "past": { "one": "hai {0} min", "other": "hai {0} min" } } }, "second": { "displayName": "segundo", "relative": { "0": "agora" }, "relativeTime": { "future": { "one": "en {0} segundo", "other": "en {0} segundos" }, "past": { "one": "hai {0} segundo", "other": "hai {0} segundos" } } }, "second-short": { "displayName": "s", "relative": { "0": "agora" }, "relativeTime": { "future": { "one": "en {0} s", "other": "en {0} s" }, "past": { "one": "hai {0} s", "other": "hai {0} s" } } } } }, { "locale": "gsw", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Jaar", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Jaar", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Monet", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Monet", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Wuche", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Wuche", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Tag", "relative": { "0": "hüt", "1": "moorn", "2": "übermoorn", "-2": "vorgeschter", "-1": "geschter" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Tag", "relative": { "0": "hüt", "1": "moorn", "2": "übermoorn", "-2": "vorgeschter", "-1": "geschter" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Schtund", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Schtund", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minuute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minuute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "gsw-FR", "parentLocale": "gsw" }, { "locale": "gsw-LI", "parentLocale": "gsw" }, { "locale": "gu", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return (n == 1) ? 'one'
                : ((n == 2
                    || n == 3)) ? 'two'
                    : (n == 4) ? 'few'
                        : (n == 6) ? 'many'
                            : 'other';
        return (n >= 0 && n <= 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "વર્ષ", "relative": { "0": "આ વર્ષે", "1": "આવતા વર્ષે", "-1": "ગયા વર્ષે" }, "relativeTime": { "future": { "one": "{0} વર્ષમાં", "other": "{0} વર્ષમાં" }, "past": { "one": "{0} વર્ષ પહેલાં", "other": "{0} વર્ષ પહેલાં" } } }, "year-short": { "displayName": "વ.", "relative": { "0": "આ વર્ષે", "1": "આવતા વર્ષે", "-1": "ગયા વર્ષે" }, "relativeTime": { "future": { "one": "{0} વર્ષમાં", "other": "{0} વર્ષમાં" }, "past": { "one": "{0} વર્ષ પહેલાં", "other": "{0} વર્ષ પહેલાં" } } }, "month": { "displayName": "મહિનો", "relative": { "0": "આ મહિને", "1": "આવતા મહિને", "-1": "ગયા મહિને" }, "relativeTime": { "future": { "one": "{0} મહિનામાં", "other": "{0} મહિનામાં" }, "past": { "one": "{0} મહિના પહેલાં", "other": "{0} મહિના પહેલાં" } } }, "month-short": { "displayName": "મ.", "relative": { "0": "આ મહિને", "1": "આવતા મહિને", "-1": "ગયા મહિને" }, "relativeTime": { "future": { "one": "{0} મહિનામાં", "other": "{0} મહિનામાં" }, "past": { "one": "{0} મહિના પહેલાં", "other": "{0} મહિના પહેલાં" } } }, "week": { "displayName": "અઠવાડિયું", "relativePeriod": "{0} નું અઠવાડિયું", "relative": { "0": "આ અઠવાડિયે", "1": "આવતા અઠવાડિયે", "-1": "ગયા અઠવાડિયે" }, "relativeTime": { "future": { "one": "{0} અઠવાડિયામાં", "other": "{0} અઠવાડિયામાં" }, "past": { "one": "{0} અઠવાડિયા પહેલાં", "other": "{0} અઠવાડિયા પહેલાં" } } }, "week-short": { "displayName": "અઠ.", "relativePeriod": "{0} નું અઠવાડિયું", "relative": { "0": "આ અઠવાડિયે", "1": "આવતા અઠવાડિયે", "-1": "ગયા અઠવાડિયે" }, "relativeTime": { "future": { "one": "{0} અઠ. માં", "other": "{0} અઠ. માં" }, "past": { "one": "{0} અઠ. પહેલાં", "other": "{0} અઠ. પહેલાં" } } }, "day": { "displayName": "દિવસ", "relative": { "0": "આજે", "1": "આવતીકાલે", "2": "પરમદિવસે", "-2": "ગયા પરમદિવસે", "-1": "ગઈકાલે" }, "relativeTime": { "future": { "one": "{0} દિવસમાં", "other": "{0} દિવસમાં" }, "past": { "one": "{0} દિવસ પહેલાં", "other": "{0} દિવસ પહેલાં" } } }, "day-short": { "displayName": "દિવસ", "relative": { "0": "આજે", "1": "આવતીકાલે", "2": "પરમદિવસે", "-2": "ગયા પરમદિવસે", "-1": "ગઈકાલે" }, "relativeTime": { "future": { "one": "{0} દિવસમાં", "other": "{0} દિવસમાં" }, "past": { "one": "{0} દિવસ પહેલાં", "other": "{0} દિવસ પહેલાં" } } }, "hour": { "displayName": "કલાક", "relative": { "0": "આ કલાક" }, "relativeTime": { "future": { "one": "{0} કલાકમાં", "other": "{0} કલાકમાં" }, "past": { "one": "{0} કલાક પહેલાં", "other": "{0} કલાક પહેલાં" } } }, "hour-short": { "displayName": "ક.", "relative": { "0": "આ કલાક" }, "relativeTime": { "future": { "one": "{0} કલાકમાં", "other": "{0} કલાકમાં" }, "past": { "one": "{0} કલાક પહેલાં", "other": "{0} કલાક પહેલાં" } } }, "minute": { "displayName": "મિનિટ", "relative": { "0": "આ મિનિટ" }, "relativeTime": { "future": { "one": "{0} મિનિટમાં", "other": "{0} મિનિટમાં" }, "past": { "one": "{0} મિનિટ પહેલાં", "other": "{0} મિનિટ પહેલાં" } } }, "minute-short": { "displayName": "મિ.", "relative": { "0": "આ મિનિટ" }, "relativeTime": { "future": { "one": "{0} મિનિટમાં", "other": "{0} મિનિટમાં" }, "past": { "one": "{0} મિનિટ પહેલાં", "other": "{0} મિનિટ પહેલાં" } } }, "second": { "displayName": "સેકન્ડ", "relative": { "0": "હમણાં" }, "relativeTime": { "future": { "one": "{0} સેકંડમાં", "other": "{0} સેકંડમાં" }, "past": { "one": "{0} સેકંડ પહેલાં", "other": "{0} સેકંડ પહેલાં" } } }, "second-short": { "displayName": "સે.", "relative": { "0": "હમણાં" }, "relativeTime": { "future": { "one": "{0} સેકંડમાં", "other": "{0} સેકંડમાં" }, "past": { "one": "{0} સેકંડ પહેલાં", "other": "{0} સેકંડ પહેલાં" } } } } }, { "locale": "guw", "pluralRuleFunction": function (n) {
        return ((n == 0
            || n == 1)) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "guz", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Omwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Omwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Omotienyi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Omotienyi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Omokubio", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Omokubio", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Rituko", "relative": { "0": "Rero", "1": "Mambia", "-1": "Igoro" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Rituko", "relative": { "0": "Rero", "1": "Mambia", "-1": "Igoro" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Ensa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Ensa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Edakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Edakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Esekendi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Esekendi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "gv", "pluralRuleFunction": function (n) {
        var s = String(n).split('.'), i = s[0], v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2);
        return (v0 && i10 == 1) ? 'one'
            : (v0 && i10 == 2) ? 'two'
                : (v0 && (i100 == 0 || i100 == 20 || i100 == 40 || i100 == 60
                    || i100 == 80)) ? 'few'
                    : (!v0) ? 'many'
                        : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ha", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Shekara", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Shekara", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Wata", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Wata", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Mako", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Mako", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Kwana", "relative": { "0": "Yau", "1": "Gobe", "-1": "Jiya" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Kwana", "relative": { "0": "Yau", "1": "Gobe", "-1": "Jiya" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Awa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Awa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Daƙiƙa", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Daƙiƙa", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ha-Arab", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ha-GH", "parentLocale": "ha" }, { "locale": "ha-NE", "parentLocale": "ha" }, { "locale": "haw", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "he", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], v0 = !s[1], t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1);
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one'
            : (i == 2 && v0) ? 'two'
                : (v0 && (n < 0
                    || n > 10) && t0 && n10 == 0) ? 'many'
                    : 'other';
    }, "fields": { "year": { "displayName": "שנה", "relative": { "0": "השנה", "1": "השנה הבאה", "-1": "השנה שעברה" }, "relativeTime": { "future": { "one": "בעוד שנה", "two": "בעוד שנתיים", "many": "בעוד {0} שנה", "other": "בעוד {0} שנים" }, "past": { "one": "לפני שנה", "two": "לפני שנתיים", "many": "לפני {0} שנה", "other": "לפני {0} שנים" } } }, "year-short": { "displayName": "שנ׳", "relative": { "0": "השנה", "1": "השנה הבאה", "-1": "השנה שעברה" }, "relativeTime": { "future": { "one": "בעוד שנה", "two": "בעוד שנתיים", "many": "בעוד {0} שנה", "other": "בעוד {0} שנים" }, "past": { "one": "לפני שנה", "two": "לפני שנתיים", "many": "לפני {0} שנה", "other": "לפני {0} שנים" } } }, "month": { "displayName": "חודש", "relative": { "0": "החודש", "1": "החודש הבא", "-1": "החודש שעבר" }, "relativeTime": { "future": { "one": "בעוד חודש", "two": "בעוד חודשיים", "many": "בעוד {0} חודשים", "other": "בעוד {0} חודשים" }, "past": { "one": "לפני חודש", "two": "לפני חודשיים", "many": "לפני {0} חודשים", "other": "לפני {0} חודשים" } } }, "month-short": { "displayName": "חו׳", "relative": { "0": "החודש", "1": "החודש הבא", "-1": "החודש שעבר" }, "relativeTime": { "future": { "one": "בעוד חודש", "two": "בעוד חודשיים", "many": "בעוד {0} חודשים", "other": "בעוד {0} חודשים" }, "past": { "one": "לפני חודש", "two": "לפני חודשיים", "many": "לפני {0} חודשים", "other": "לפני {0} חודשים" } } }, "week": { "displayName": "שבוע", "relativePeriod": "השבוע של", "relative": { "0": "השבוע", "1": "השבוע הבא", "-1": "השבוע שעבר" }, "relativeTime": { "future": { "one": "בעוד שבוע", "two": "בעוד שבועיים", "many": "בעוד {0} שבועות", "other": "בעוד {0} שבועות" }, "past": { "one": "לפני שבוע", "two": "לפני שבועיים", "many": "לפני {0} שבועות", "other": "לפני {0} שבועות" } } }, "week-short": { "displayName": "שב׳", "relativePeriod": "השבוע של {0}", "relative": { "0": "השבוע", "1": "השבוע הבא", "-1": "השבוע שעבר" }, "relativeTime": { "future": { "one": "בעוד שב׳", "two": "בעוד שבועיים", "many": "בעוד {0} שב׳", "other": "בעוד {0} שב׳" }, "past": { "one": "לפני שב׳", "two": "לפני שבועיים", "many": "לפני {0} שב׳", "other": "לפני {0} שב׳" } } }, "day": { "displayName": "יום", "relative": { "0": "היום", "1": "מחר", "2": "מחרתיים", "-2": "שלשום", "-1": "אתמול" }, "relativeTime": { "future": { "one": "בעוד יום {0}", "two": "בעוד יומיים", "many": "בעוד {0} ימים", "other": "בעוד {0} ימים" }, "past": { "one": "לפני יום {0}", "two": "לפני יומיים", "many": "לפני {0} ימים", "other": "לפני {0} ימים" } } }, "day-short": { "displayName": "יום", "relative": { "0": "היום", "1": "מחר", "2": "מחרתיים", "-2": "שלשום", "-1": "אתמול" }, "relativeTime": { "future": { "one": "מחר", "two": "בעוד יומיים", "many": "בעוד {0} ימים", "other": "בעוד {0} ימים" }, "past": { "one": "אתמול", "two": "לפני יומיים", "many": "לפני {0} ימים", "other": "לפני {0} ימים" } } }, "hour": { "displayName": "שעה", "relative": { "0": "בשעה זו" }, "relativeTime": { "future": { "one": "בעוד שעה", "two": "בעוד שעתיים", "many": "בעוד {0} שעות", "other": "בעוד {0} שעות" }, "past": { "one": "לפני שעה", "two": "לפני שעתיים", "many": "לפני {0} שעות", "other": "לפני {0} שעות" } } }, "hour-short": { "displayName": "שעה", "relative": { "0": "בשעה זו" }, "relativeTime": { "future": { "one": "בעוד שעה", "two": "בעוד שעתיים", "many": "בעוד {0} שע׳", "other": "בעוד {0} שע׳" }, "past": { "one": "לפני שעה", "two": "לפני שעתיים", "many": "לפני {0} שע׳", "other": "לפני {0} שע׳" } } }, "minute": { "displayName": "דקה", "relative": { "0": "בדקה זו" }, "relativeTime": { "future": { "one": "בעוד דקה", "two": "בעוד שתי דקות", "many": "בעוד {0} דקות", "other": "בעוד {0} דקות" }, "past": { "one": "לפני דקה", "two": "לפני שתי דקות", "many": "לפני {0} דקות", "other": "לפני {0} דקות" } } }, "minute-short": { "displayName": "דק׳", "relative": { "0": "בדקה זו" }, "relativeTime": { "future": { "one": "בעוד דקה", "two": "בעוד שתי דק׳", "many": "בעוד {0} דק׳", "other": "בעוד {0} דק׳" }, "past": { "one": "לפני דקה", "two": "לפני {0} דק׳", "many": "לפני {0} דק׳", "other": "לפני {0} דק׳" } } }, "second": { "displayName": "שנייה", "relative": { "0": "עכשיו" }, "relativeTime": { "future": { "one": "בעוד שנייה", "two": "בעוד שתי שניות", "many": "בעוד {0} שניות", "other": "בעוד {0} שניות" }, "past": { "one": "לפני שנייה", "two": "לפני שתי שניות", "many": "לפני {0} שניות", "other": "לפני {0} שניות" } } }, "second-short": { "displayName": "שנ׳", "relative": { "0": "עכשיו" }, "relativeTime": { "future": { "one": "בעוד שנ׳", "two": "בעוד שתי שנ׳", "many": "בעוד {0} שנ׳", "other": "בעוד {0} שנ׳" }, "past": { "one": "לפני שנ׳", "two": "לפני שתי שנ׳", "many": "לפני {0} שנ׳", "other": "לפני {0} שנ׳" } } } } }, { "locale": "hi", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return (n == 1) ? 'one'
                : ((n == 2
                    || n == 3)) ? 'two'
                    : (n == 4) ? 'few'
                        : (n == 6) ? 'many'
                            : 'other';
        return (n >= 0 && n <= 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "वर्ष", "relative": { "0": "इस वर्ष", "1": "अगला वर्ष", "-1": "पिछला वर्ष" }, "relativeTime": { "future": { "one": "{0} वर्ष में", "other": "{0} वर्ष में" }, "past": { "one": "{0} वर्ष पहले", "other": "{0} वर्ष पहले" } } }, "year-short": { "displayName": "वर्ष", "relative": { "0": "इस वर्ष", "1": "अगला वर्ष", "-1": "पिछला वर्ष" }, "relativeTime": { "future": { "one": "{0} वर्ष में", "other": "{0} वर्ष में" }, "past": { "one": "{0} वर्ष पहले", "other": "{0} वर्ष पहले" } } }, "month": { "displayName": "माह", "relative": { "0": "इस माह", "1": "अगला माह", "-1": "पिछला माह" }, "relativeTime": { "future": { "one": "{0} माह में", "other": "{0} माह में" }, "past": { "one": "{0} माह पहले", "other": "{0} माह पहले" } } }, "month-short": { "displayName": "माह", "relative": { "0": "इस माह", "1": "अगला माह", "-1": "पिछला माह" }, "relativeTime": { "future": { "one": "{0} माह में", "other": "{0} माह में" }, "past": { "one": "{0} माह पहले", "other": "{0} माह पहले" } } }, "week": { "displayName": "सप्ताह", "relativePeriod": "{0} के सप्ताह", "relative": { "0": "इस सप्ताह", "1": "अगला सप्ताह", "-1": "पिछला सप्ताह" }, "relativeTime": { "future": { "one": "{0} सप्ताह में", "other": "{0} सप्ताह में" }, "past": { "one": "{0} सप्ताह पहले", "other": "{0} सप्ताह पहले" } } }, "week-short": { "displayName": "सप्ताह", "relativePeriod": "{0} के सप्ताह", "relative": { "0": "इस सप्ताह", "1": "अगला सप्ताह", "-1": "पिछला सप्ताह" }, "relativeTime": { "future": { "one": "{0} सप्ताह में", "other": "{0} सप्ताह में" }, "past": { "one": "{0} सप्ताह पहले", "other": "{0} सप्ताह पहले" } } }, "day": { "displayName": "दिन", "relative": { "0": "आज", "1": "कल", "2": "परसों", "-2": "परसों", "-1": "कल" }, "relativeTime": { "future": { "one": "{0} दिन में", "other": "{0} दिन में" }, "past": { "one": "{0} दिन पहले", "other": "{0} दिन पहले" } } }, "day-short": { "displayName": "दिन", "relative": { "0": "आज", "1": "कल", "2": "परसों", "-2": "परसों", "-1": "कल" }, "relativeTime": { "future": { "one": "{0} दिन में", "other": "{0} दिन में" }, "past": { "one": "{0} दिन पहले", "other": "{0} दिन पहले" } } }, "hour": { "displayName": "घंटा", "relative": { "0": "यह घंटा" }, "relativeTime": { "future": { "one": "{0} घंटे में", "other": "{0} घंटे में" }, "past": { "one": "{0} घंटे पहले", "other": "{0} घंटे पहले" } } }, "hour-short": { "displayName": "घं॰", "relative": { "0": "यह घंटा" }, "relativeTime": { "future": { "one": "{0} घं॰ में", "other": "{0} घं॰ में" }, "past": { "one": "{0} घं॰ पहले", "other": "{0} घं॰ पहले" } } }, "minute": { "displayName": "मिनट", "relative": { "0": "यह मिनट" }, "relativeTime": { "future": { "one": "{0} मिनट में", "other": "{0} मिनट में" }, "past": { "one": "{0} मिनट पहले", "other": "{0} मिनट पहले" } } }, "minute-short": { "displayName": "मि॰", "relative": { "0": "यह मिनट" }, "relativeTime": { "future": { "one": "{0} मि॰ में", "other": "{0} मि॰ में" }, "past": { "one": "{0} मि॰ पहले", "other": "{0} मि॰ पहले" } } }, "second": { "displayName": "सेकंड", "relative": { "0": "अब" }, "relativeTime": { "future": { "one": "{0} सेकंड में", "other": "{0} सेकंड में" }, "past": { "one": "{0} सेकंड पहले", "other": "{0} सेकंड पहले" } } }, "second-short": { "displayName": "से॰", "relative": { "0": "अब" }, "relativeTime": { "future": { "one": "{0} से॰ में", "other": "{0} से॰ में" }, "past": { "one": "{0} से॰ पहले", "other": "{0} से॰ पहले" } } } } }, { "locale": "hr", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2), f10 = f.slice(-1), f100 = f.slice(-2);
        if (ord)
            return 'other';
        return (v0 && i10 == 1 && i100 != 11
            || f10 == 1 && f100 != 11) ? 'one'
            : (v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14)
                || (f10 >= 2 && f10 <= 4) && (f100 < 12
                    || f100 > 14)) ? 'few'
                : 'other';
    }, "fields": { "year": { "displayName": "godina", "relative": { "0": "ove godine", "1": "sljedeće godine", "-1": "prošle godine" }, "relativeTime": { "future": { "one": "za {0} godinu", "few": "za {0} godine", "other": "za {0} godina" }, "past": { "one": "prije {0} godinu", "few": "prije {0} godine", "other": "prije {0} godina" } } }, "year-short": { "displayName": "g.", "relative": { "0": "ove god.", "1": "sljedeće god.", "-1": "prošle god." }, "relativeTime": { "future": { "one": "za {0} g.", "few": "za {0} g.", "other": "za {0} g." }, "past": { "one": "prije {0} g.", "few": "prije {0} g.", "other": "prije {0} g." } } }, "month": { "displayName": "mjesec", "relative": { "0": "ovaj mjesec", "1": "sljedeći mjesec", "-1": "prošli mjesec" }, "relativeTime": { "future": { "one": "za {0} mjesec", "few": "za {0} mjeseca", "other": "za {0} mjeseci" }, "past": { "one": "prije {0} mjesec", "few": "prije {0} mjeseca", "other": "prije {0} mjeseci" } } }, "month-short": { "displayName": "mj.", "relative": { "0": "ovaj mj.", "1": "sljedeći mj.", "-1": "prošli mj." }, "relativeTime": { "future": { "one": "za {0} mj.", "few": "za {0} mj.", "other": "za {0} mj." }, "past": { "one": "prije {0} mj.", "few": "prije {0} mj.", "other": "prije {0} mj." } } }, "week": { "displayName": "tjedan", "relativePeriod": "tjedan od {0}", "relative": { "0": "ovaj tjedan", "1": "sljedeći tjedan", "-1": "prošli tjedan" }, "relativeTime": { "future": { "one": "za {0} tjedan", "few": "za {0} tjedna", "other": "za {0} tjedana" }, "past": { "one": "prije {0} tjedan", "few": "prije {0} tjedna", "other": "prije {0} tjedana" } } }, "week-short": { "displayName": "tj.", "relativePeriod": "tjedan od {0}", "relative": { "0": "ovaj tj.", "1": "sljedeći tj.", "-1": "prošli tj." }, "relativeTime": { "future": { "one": "za {0} tj.", "few": "za {0} tj.", "other": "za {0} tj." }, "past": { "one": "prije {0} tj.", "few": "prije {0} tj.", "other": "prije {0} tj." } } }, "day": { "displayName": "dan", "relative": { "0": "danas", "1": "sutra", "2": "prekosutra", "-2": "prekjučer", "-1": "jučer" }, "relativeTime": { "future": { "one": "za {0} dan", "few": "za {0} dana", "other": "za {0} dana" }, "past": { "one": "prije {0} dan", "few": "prije {0} dana", "other": "prije {0} dana" } } }, "day-short": { "displayName": "d.", "relative": { "0": "danas", "1": "sutra", "2": "prekosutra", "-2": "prekjučer", "-1": "jučer" }, "relativeTime": { "future": { "one": "za {0} dan", "few": "za {0} dana", "other": "za {0} dana" }, "past": { "one": "prije {0} dan", "few": "prije {0} dana", "other": "prije {0} dana" } } }, "hour": { "displayName": "sat", "relative": { "0": "ovaj sat" }, "relativeTime": { "future": { "one": "za {0} sat", "few": "za {0} sata", "other": "za {0} sati" }, "past": { "one": "prije {0} sat", "few": "prije {0} sata", "other": "prije {0} sati" } } }, "hour-short": { "displayName": "h", "relative": { "0": "ovaj sat" }, "relativeTime": { "future": { "one": "za {0} h", "few": "za {0} h", "other": "za {0} h" }, "past": { "one": "prije {0} h", "few": "prije {0} h", "other": "prije {0} h" } } }, "minute": { "displayName": "minuta", "relative": { "0": "ova minuta" }, "relativeTime": { "future": { "one": "za {0} minutu", "few": "za {0} minute", "other": "za {0} minuta" }, "past": { "one": "prije {0} minutu", "few": "prije {0} minute", "other": "prije {0} minuta" } } }, "minute-short": { "displayName": "min", "relative": { "0": "ova minuta" }, "relativeTime": { "future": { "one": "za {0} min", "few": "za {0} min", "other": "za {0} min" }, "past": { "one": "prije {0} min", "few": "prije {0} min", "other": "prije {0} min" } } }, "second": { "displayName": "sekunda", "relative": { "0": "sad" }, "relativeTime": { "future": { "one": "za {0} sekundu", "few": "za {0} sekunde", "other": "za {0} sekundi" }, "past": { "one": "prije {0} sekundu", "few": "prije {0} sekunde", "other": "prije {0} sekundi" } } }, "second-short": { "displayName": "s", "relative": { "0": "sad" }, "relativeTime": { "future": { "one": "za {0} s", "few": "za {0} s", "other": "za {0} s" }, "past": { "one": "prije {0} s", "few": "prije {0} s", "other": "prije {0} s" } } } } }, { "locale": "hr-BA", "parentLocale": "hr" }, { "locale": "hsb", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i100 = i.slice(-2), f100 = f.slice(-2);
        if (ord)
            return 'other';
        return (v0 && i100 == 1
            || f100 == 1) ? 'one'
            : (v0 && i100 == 2
                || f100 == 2) ? 'two'
                : (v0 && (i100 == 3 || i100 == 4) || (f100 == 3
                    || f100 == 4)) ? 'few'
                    : 'other';
    }, "fields": { "year": { "displayName": "lěto", "relative": { "0": "lětsa", "1": "klětu", "-1": "loni" }, "relativeTime": { "future": { "one": "za {0} lěto", "two": "za {0} lěće", "few": "za {0} lěta", "other": "za {0} lět" }, "past": { "one": "před {0} lětom", "two": "před {0} lětomaj", "few": "před {0} lětami", "other": "před {0} lětami" } } }, "year-short": { "displayName": "l.", "relative": { "0": "lětsa", "1": "klětu", "-1": "loni" }, "relativeTime": { "future": { "one": "za {0} l.", "two": "za {0} l.", "few": "za {0} l.", "other": "za {0} l." }, "past": { "one": "před {0} l.", "two": "před {0} l.", "few": "před {0} l.", "other": "před {0} l." } } }, "month": { "displayName": "měsac", "relative": { "0": "tutón měsac", "1": "přichodny měsac", "-1": "zašły měsac" }, "relativeTime": { "future": { "one": "za {0} měsac", "two": "za {0} měsacaj", "few": "za {0} měsacy", "other": "za {0} měsacow" }, "past": { "one": "před {0} měsacom", "two": "před {0} měsacomaj", "few": "před {0} měsacami", "other": "před {0} měsacami" } } }, "month-short": { "displayName": "měs.", "relative": { "0": "tutón měsac", "1": "přichodny měsac", "-1": "zašły měsac" }, "relativeTime": { "future": { "one": "za {0} měs.", "two": "za {0} měs.", "few": "za {0} měs.", "other": "za {0} měs." }, "past": { "one": "před {0} měs.", "two": "před {0} měs.", "few": "před {0} měs.", "other": "před {0} měs." } } }, "week": { "displayName": "tydźeń", "relativePeriod": "the week of {0}", "relative": { "0": "tutón tydźeń", "1": "přichodny tydźeń", "-1": "zašły tydźeń" }, "relativeTime": { "future": { "one": "za {0} tydźeń", "two": "za {0} tydźenjej", "few": "za {0} tydźenje", "other": "za {0} tydźenjow" }, "past": { "one": "před {0} tydźenjom", "two": "před {0} tydźenjomaj", "few": "před {0} tydźenjemi", "other": "před {0} tydźenjemi" } } }, "week-short": { "displayName": "tydź.", "relativePeriod": "the week of {0}", "relative": { "0": "tutón tydźeń", "1": "přichodny tydźeń", "-1": "zašły tydźeń" }, "relativeTime": { "future": { "one": "za {0} tydź.", "two": "za {0} tydź.", "few": "za {0} tydź.", "other": "za {0} tydź." }, "past": { "one": "před {0} tydź.", "two": "před {0} tydź.", "few": "před {0} tydź.", "other": "před {0} tydź." } } }, "day": { "displayName": "dźeń", "relative": { "0": "dźensa", "1": "jutře", "-1": "wčera" }, "relativeTime": { "future": { "one": "za {0} dźeń", "two": "za {0} dnjej", "few": "za {0} dny", "other": "za {0} dnjow" }, "past": { "one": "před {0} dnjom", "two": "před {0} dnjomaj", "few": "před {0} dnjemi", "other": "před {0} dnjemi" } } }, "day-short": { "displayName": "dźeń", "relative": { "0": "dźensa", "1": "jutře", "-1": "wčera" }, "relativeTime": { "future": { "one": "za {0} dźeń", "two": "za {0} dnj.", "few": "za {0} dny", "other": "za {0} dnj." }, "past": { "one": "před {0} dnj.", "two": "před {0} dnj.", "few": "před {0} dnj.", "other": "před {0} dnj." } } }, "hour": { "displayName": "hodźina", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "za {0} hodźinu", "two": "za {0} hodźinje", "few": "za {0} hodźiny", "other": "za {0} hodźin" }, "past": { "one": "před {0} hodźinu", "two": "před {0} hodźinomaj", "few": "před {0} hodźinami", "other": "před {0} hodźinami" } } }, "hour-short": { "displayName": "hodź.", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "za {0} hodź.", "two": "za {0} hodź.", "few": "za {0} hodź.", "other": "za {0} hodź." }, "past": { "one": "před {0} hodź.", "two": "před {0} hodź.", "few": "před {0} hodź.", "other": "před {0} hodź." } } }, "minute": { "displayName": "minuta", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "za {0} minutu", "two": "za {0} minuće", "few": "za {0} minuty", "other": "za {0} minutow" }, "past": { "one": "před {0} minutu", "two": "před {0} minutomaj", "few": "před {0} minutami", "other": "před {0} minutami" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "za {0} min.", "two": "za {0} min.", "few": "za {0} min.", "other": "za {0} min." }, "past": { "one": "před {0} min.", "two": "před {0} min.", "few": "před {0} min.", "other": "před {0} min." } } }, "second": { "displayName": "sekunda", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "za {0} sekundu", "two": "za {0} sekundźe", "few": "za {0} sekundy", "other": "za {0} sekundow" }, "past": { "one": "před {0} sekundu", "two": "před {0} sekundomaj", "few": "před {0} sekundami", "other": "před {0} sekundami" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "za {0} sek.", "two": "za {0} sek.", "few": "za {0} sek.", "other": "za {0} sek." }, "past": { "one": "před {0} sek.", "two": "před {0} sek.", "few": "před {0} sek.", "other": "před {0} sek." } } } } }, { "locale": "hu", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return ((n == 1
                || n == 5)) ? 'one' : 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "év", "relative": { "0": "ez az év", "1": "következő év", "-1": "előző év" }, "relativeTime": { "future": { "one": "{0} év múlva", "other": "{0} év múlva" }, "past": { "one": "{0} évvel ezelőtt", "other": "{0} évvel ezelőtt" } } }, "year-short": { "displayName": "év", "relative": { "0": "ez az év", "1": "következő év", "-1": "előző év" }, "relativeTime": { "future": { "one": "{0} év múlva", "other": "{0} év múlva" }, "past": { "one": "{0} évvel ezelőtt", "other": "{0} évvel ezelőtt" } } }, "month": { "displayName": "hónap", "relative": { "0": "ez a hónap", "1": "következő hónap", "-1": "előző hónap" }, "relativeTime": { "future": { "one": "{0} hónap múlva", "other": "{0} hónap múlva" }, "past": { "one": "{0} hónappal ezelőtt", "other": "{0} hónappal ezelőtt" } } }, "month-short": { "displayName": "hónap", "relative": { "0": "ez a hónap", "1": "következő hónap", "-1": "előző hónap" }, "relativeTime": { "future": { "one": "{0} hónap múlva", "other": "{0} hónap múlva" }, "past": { "one": "{0} hónappal ezelőtt", "other": "{0} hónappal ezelőtt" } } }, "week": { "displayName": "hét", "relativePeriod": "{0} hete", "relative": { "0": "ez a hét", "1": "következő hét", "-1": "előző hét" }, "relativeTime": { "future": { "one": "{0} hét múlva", "other": "{0} hét múlva" }, "past": { "one": "{0} héttel ezelőtt", "other": "{0} héttel ezelőtt" } } }, "week-short": { "displayName": "hét", "relativePeriod": "{0} hete", "relative": { "0": "ez a hét", "1": "következő hét", "-1": "előző hét" }, "relativeTime": { "future": { "one": "{0} hét múlva", "other": "{0} hét múlva" }, "past": { "one": "{0} héttel ezelőtt", "other": "{0} héttel ezelőtt" } } }, "day": { "displayName": "nap", "relative": { "0": "ma", "1": "holnap", "2": "holnapután", "-2": "tegnapelőtt", "-1": "tegnap" }, "relativeTime": { "future": { "one": "{0} nap múlva", "other": "{0} nap múlva" }, "past": { "one": "{0} nappal ezelőtt", "other": "{0} nappal ezelőtt" } } }, "day-short": { "displayName": "nap", "relative": { "0": "ma", "1": "holnap", "2": "holnapután", "-2": "tegnapelőtt", "-1": "tegnap" }, "relativeTime": { "future": { "one": "{0} nap múlva", "other": "{0} nap múlva" }, "past": { "one": "{0} napja", "other": "{0} napja" } } }, "hour": { "displayName": "óra", "relative": { "0": "ebben az órában" }, "relativeTime": { "future": { "one": "{0} óra múlva", "other": "{0} óra múlva" }, "past": { "one": "{0} órával ezelőtt", "other": "{0} órával ezelőtt" } } }, "hour-short": { "displayName": "óra", "relative": { "0": "ebben az órában" }, "relativeTime": { "future": { "one": "{0} óra múlva", "other": "{0} óra múlva" }, "past": { "one": "{0} órával ezelőtt", "other": "{0} órával ezelőtt" } } }, "minute": { "displayName": "perc", "relative": { "0": "ebben a percben" }, "relativeTime": { "future": { "one": "{0} perc múlva", "other": "{0} perc múlva" }, "past": { "one": "{0} perccel ezelőtt", "other": "{0} perccel ezelőtt" } } }, "minute-short": { "displayName": "perc", "relative": { "0": "ebben a percben" }, "relativeTime": { "future": { "one": "{0} perc múlva", "other": "{0} perc múlva" }, "past": { "one": "{0} perccel ezelőtt", "other": "{0} perccel ezelőtt" } } }, "second": { "displayName": "másodperc", "relative": { "0": "most" }, "relativeTime": { "future": { "one": "{0} másodperc múlva", "other": "{0} másodperc múlva" }, "past": { "one": "{0} másodperccel ezelőtt", "other": "{0} másodperccel ezelőtt" } } }, "second-short": { "displayName": "másodperc", "relative": { "0": "most" }, "relativeTime": { "future": { "one": "{0} másodperc múlva", "other": "{0} másodperc múlva" }, "past": { "one": "{0} másodperccel ezelőtt", "other": "{0} másodperccel ezelőtt" } } } } }, { "locale": "hy", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return (n == 1) ? 'one' : 'other';
        return (n >= 0 && n < 2) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "տարի", "relative": { "0": "այս տարի", "1": "հաջորդ տարի", "-1": "նախորդ տարի" }, "relativeTime": { "future": { "one": "{0} տարուց", "other": "{0} տարուց" }, "past": { "one": "{0} տարի առաջ", "other": "{0} տարի առաջ" } } }, "year-short": { "displayName": "տ", "relative": { "0": "այս տարի", "1": "հաջորդ տարի", "-1": "նախորդ տարի" }, "relativeTime": { "future": { "one": "{0} տարուց", "other": "{0} տարուց" }, "past": { "one": "{0} տ առաջ", "other": "{0} տ առաջ" } } }, "month": { "displayName": "ամիս", "relative": { "0": "այս ամիս", "1": "հաջորդ ամիս", "-1": "նախորդ ամիս" }, "relativeTime": { "future": { "one": "{0} ամսից", "other": "{0} ամսից" }, "past": { "one": "{0} ամիս առաջ", "other": "{0} ամիս առաջ" } } }, "month-short": { "displayName": "ամս", "relative": { "0": "այս ամիս", "1": "հաջորդ ամիս", "-1": "անցյալ ամիս" }, "relativeTime": { "future": { "one": "{0} ամսից", "other": "{0} ամսից" }, "past": { "one": "{0} ամիս առաջ", "other": "{0} ամիս առաջ" } } }, "week": { "displayName": "շաբաթ", "relativePeriod": "{0} շաբաթում", "relative": { "0": "այս շաբաթ", "1": "հաջորդ շաբաթ", "-1": "նախորդ շաբաթ" }, "relativeTime": { "future": { "one": "{0} շաբաթից", "other": "{0} շաբաթից" }, "past": { "one": "{0} շաբաթ առաջ", "other": "{0} շաբաթ առաջ" } } }, "week-short": { "displayName": "շաբ", "relativePeriod": "{0} շաբ-ում", "relative": { "0": "այս շաբաթ", "1": "հաջորդ շաբաթ", "-1": "նախորդ շաբաթ" }, "relativeTime": { "future": { "one": "{0} շաբ-ից", "other": "{0} շաբ-ից" }, "past": { "one": "{0} շաբ առաջ", "other": "{0} շաբ առաջ" } } }, "day": { "displayName": "օր", "relative": { "0": "այսօր", "1": "վաղը", "2": "վաղը չէ մյուս օրը", "-2": "երեկ չէ առաջի օրը", "-1": "երեկ" }, "relativeTime": { "future": { "one": "{0} օրից", "other": "{0} օրից" }, "past": { "one": "{0} օր առաջ", "other": "{0} օր առաջ" } } }, "day-short": { "displayName": "օր", "relative": { "0": "այսօր", "1": "վաղը", "2": "վաղը չէ մյուս օրը", "-2": "երեկ չէ առաջի օրը", "-1": "երեկ" }, "relativeTime": { "future": { "one": "{0} օրից", "other": "{0} օրից" }, "past": { "one": "{0} օր առաջ", "other": "{0} օր առաջ" } } }, "hour": { "displayName": "ժամ", "relative": { "0": "այս ժամին" }, "relativeTime": { "future": { "one": "{0} ժամից", "other": "{0} ժամից" }, "past": { "one": "{0} ժամ առաջ", "other": "{0} ժամ առաջ" } } }, "hour-short": { "displayName": "ժ", "relative": { "0": "այս ժամին" }, "relativeTime": { "future": { "one": "{0} ժ-ից", "other": "{0} ժ-ից" }, "past": { "one": "{0} ժ առաջ", "other": "{0} ժ առաջ" } } }, "minute": { "displayName": "րոպե", "relative": { "0": "այս րոպեին" }, "relativeTime": { "future": { "one": "{0} րոպեից", "other": "{0} րոպեից" }, "past": { "one": "{0} րոպե առաջ", "other": "{0} րոպե առաջ" } } }, "minute-short": { "displayName": "ր", "relative": { "0": "այս րոպեին" }, "relativeTime": { "future": { "one": "{0} ր-ից", "other": "{0} ր-ից" }, "past": { "one": "{0} ր առաջ", "other": "{0} ր առաջ" } } }, "second": { "displayName": "վայրկյան", "relative": { "0": "հիմա" }, "relativeTime": { "future": { "one": "{0} վայրկյանից", "other": "{0} վայրկյանից" }, "past": { "one": "{0} վայրկյան առաջ", "other": "{0} վայրկյան առաջ" } } }, "second-short": { "displayName": "վ", "relative": { "0": "հիմա" }, "relativeTime": { "future": { "one": "{0} վրկ-ից", "other": "{0} վրկ-ից" }, "past": { "one": "{0} վրկ առաջ", "other": "{0} վրկ առաջ" } } } } }, { "locale": "ia", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1];
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "anno", "relative": { "0": "iste anno", "1": "le anno proxime", "-1": "le anno passate" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "an.", "relative": { "0": "iste anno", "1": "le anno proxime", "-1": "le anno passate" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "mense", "relative": { "0": "iste mense", "1": "le mense proxime", "-1": "le mense passate" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "mns.", "relative": { "0": "iste mense", "1": "le mense proxime", "-1": "le mense passate" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "septimana", "relativePeriod": "le septimana de {0}", "relative": { "0": "iste septimana", "1": "le septimana proxime", "-1": "le septimana passate" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "sept.", "relativePeriod": "le sept. de {0}", "relative": { "0": "iste septimana", "1": "le septimana proxime", "-1": "le septimana passate" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "die", "relative": { "0": "hodie", "1": "deman", "-1": "heri" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "die", "relative": { "0": "hodie", "1": "deman", "-1": "heri" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "hora", "relative": { "0": "iste hora" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "hr.", "relative": { "0": "iste hora" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "minuta", "relative": { "0": "iste minuta" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "iste minuta" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "secunda", "relative": { "0": "ora" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "sec.", "relative": { "0": "ora" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "id", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return 'other';
    }, "fields": { "year": { "displayName": "tahun", "relative": { "0": "tahun ini", "1": "tahun depan", "-1": "tahun lalu" }, "relativeTime": { "future": { "other": "dalam {0} tahun" }, "past": { "other": "{0} tahun yang lalu" } } }, "year-short": { "displayName": "thn.", "relative": { "0": "tahun ini", "1": "tahun depan", "-1": "tahun lalu" }, "relativeTime": { "future": { "other": "dlm {0} thn" }, "past": { "other": "{0} thn lalu" } } }, "month": { "displayName": "bulan", "relative": { "0": "bulan ini", "1": "bulan berikutnya", "-1": "bulan lalu" }, "relativeTime": { "future": { "other": "dalam {0} bulan" }, "past": { "other": "{0} bulan yang lalu" } } }, "month-short": { "displayName": "bln.", "relative": { "0": "bulan ini", "1": "bulan berikutnya", "-1": "bulan lalu" }, "relativeTime": { "future": { "other": "dlm {0} bln" }, "past": { "other": "{0} bln lalu" } } }, "week": { "displayName": "minggu", "relativePeriod": "minggu ke-{0}", "relative": { "0": "minggu ini", "1": "minggu depan", "-1": "minggu lalu" }, "relativeTime": { "future": { "other": "dalam {0} minggu" }, "past": { "other": "{0} minggu yang lalu" } } }, "week-short": { "displayName": "mgg.", "relativePeriod": "mgg ke-{0}", "relative": { "0": "minggu ini", "1": "minggu depan", "-1": "minggu lalu" }, "relativeTime": { "future": { "other": "dlm {0} mgg" }, "past": { "other": "{0} mgg lalu" } } }, "day": { "displayName": "hari", "relative": { "0": "hari ini", "1": "besok", "2": "lusa", "-2": "kemarin dulu", "-1": "kemarin" }, "relativeTime": { "future": { "other": "dalam {0} hari" }, "past": { "other": "{0} hari yang lalu" } } }, "day-short": { "displayName": "h", "relative": { "0": "hari ini", "1": "besok", "2": "lusa", "-2": "kemarin dulu", "-1": "kemarin" }, "relativeTime": { "future": { "other": "dalam {0} h" }, "past": { "other": "{0} h lalu" } } }, "hour": { "displayName": "Jam", "relative": { "0": "jam ini" }, "relativeTime": { "future": { "other": "dalam {0} jam" }, "past": { "other": "{0} jam yang lalu" } } }, "hour-short": { "displayName": "jam", "relative": { "0": "jam ini" }, "relativeTime": { "future": { "other": "dalam {0} jam" }, "past": { "other": "{0} jam lalu" } } }, "minute": { "displayName": "menit", "relative": { "0": "menit ini" }, "relativeTime": { "future": { "other": "dalam {0} menit" }, "past": { "other": "{0} menit yang lalu" } } }, "minute-short": { "displayName": "mnt.", "relative": { "0": "menit ini" }, "relativeTime": { "future": { "other": "dlm {0} mnt" }, "past": { "other": "{0} mnt lalu" } } }, "second": { "displayName": "detik", "relative": { "0": "sekarang" }, "relativeTime": { "future": { "other": "dalam {0} detik" }, "past": { "other": "{0} detik yang lalu" } } }, "second-short": { "displayName": "dtk.", "relative": { "0": "sekarang" }, "relativeTime": { "future": { "other": "dlm {0} dtk" }, "past": { "other": "{0} dtk lalu" } } } } }, { "locale": "ig", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Afọ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Afọ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Ọnwa", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Ọnwa", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Izu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Izu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ụbọchị", "relative": { "0": "Taata", "1": "Echi", "-1": "Nnyaafụ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ụbọchị", "relative": { "0": "Taata", "1": "Echi", "-1": "Nnyaafụ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Elekere", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Elekere", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Nkeji", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Nkeji", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Nkejinta", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Nkejinta", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ii", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "ꈎ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "ꈎ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "ꆪ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "ꆪ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "ꑭꆏ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "ꑭꆏ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "ꑍ", "relative": { "0": "ꀃꑍ", "1": "ꃆꏂꑍ", "2": "ꌕꀿꑍ", "-2": "ꎴꂿꋍꑍ", "-1": "ꀋꅔꉈ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "ꑍ", "relative": { "0": "ꀃꑍ", "1": "ꃆꏂꑍ", "2": "ꌕꀿꑍ", "-2": "ꎴꂿꋍꑍ", "-1": "ꀋꅔꉈ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "ꄮꈉ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "ꄮꈉ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "ꃏ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "ꃏ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "ꇙ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "ꇙ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "in", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "io", "pluralRuleFunction": function (n) {
        var s = String(n).split('.'), v0 = !s[1];
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "is", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], t0 = Number(s[0]) == n, i10 = i.slice(-1), i100 = i.slice(-2);
        if (ord)
            return 'other';
        return (t0 && i10 == 1 && i100 != 11
            || !t0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ár", "relative": { "0": "á þessu ári", "1": "á næsta ári", "-1": "á síðasta ári" }, "relativeTime": { "future": { "one": "eftir {0} ár", "other": "eftir {0} ár" }, "past": { "one": "fyrir {0} ári", "other": "fyrir {0} árum" } } }, "year-short": { "displayName": "ár", "relative": { "0": "á þessu ári", "1": "á næsta ári", "-1": "á síðasta ári" }, "relativeTime": { "future": { "one": "eftir {0} ár", "other": "eftir {0} ár" }, "past": { "one": "fyrir {0} ári", "other": "fyrir {0} árum" } } }, "month": { "displayName": "mánuður", "relative": { "0": "í þessum mánuði", "1": "í næsta mánuði", "-1": "í síðasta mánuði" }, "relativeTime": { "future": { "one": "eftir {0} mánuð", "other": "eftir {0} mánuði" }, "past": { "one": "fyrir {0} mánuði", "other": "fyrir {0} mánuðum" } } }, "month-short": { "displayName": "mán.", "relative": { "0": "í þessum mán.", "1": "í næsta mán.", "-1": "í síðasta mán." }, "relativeTime": { "future": { "one": "eftir {0} mán.", "other": "eftir {0} mán." }, "past": { "one": "fyrir {0} mán.", "other": "fyrir {0} mán." } } }, "week": { "displayName": "vika", "relativePeriod": "vika {0}", "relative": { "0": "í þessari viku", "1": "í næstu viku", "-1": "í síðustu viku" }, "relativeTime": { "future": { "one": "eftir {0} viku", "other": "eftir {0} vikur" }, "past": { "one": "fyrir {0} viku", "other": "fyrir {0} vikum" } } }, "week-short": { "displayName": "vika", "relativePeriod": "vika {0}", "relative": { "0": "í þessari viku", "1": "í næstu viku", "-1": "í síðustu viku" }, "relativeTime": { "future": { "one": "eftir {0} viku", "other": "eftir {0} vikur" }, "past": { "one": "fyrir {0} viku", "other": "fyrir {0} vikum" } } }, "day": { "displayName": "dagur", "relative": { "0": "í dag", "1": "á morgun", "2": "eftir tvo daga", "-2": "í fyrradag", "-1": "í gær" }, "relativeTime": { "future": { "one": "eftir {0} dag", "other": "eftir {0} daga" }, "past": { "one": "fyrir {0} degi", "other": "fyrir {0} dögum" } } }, "day-short": { "displayName": "dagur", "relative": { "0": "í dag", "1": "á morgun", "2": "eftir tvo daga", "-2": "í fyrradag", "-1": "í gær" }, "relativeTime": { "future": { "one": "eftir {0} dag", "other": "eftir {0} daga" }, "past": { "one": "fyrir {0} degi", "other": "fyrir {0} dögum" } } }, "hour": { "displayName": "klukkustund", "relative": { "0": "þessa stundina" }, "relativeTime": { "future": { "one": "eftir {0} klukkustund", "other": "eftir {0} klukkustundir" }, "past": { "one": "fyrir {0} klukkustund", "other": "fyrir {0} klukkustundum" } } }, "hour-short": { "displayName": "klst.", "relative": { "0": "þessa stundina" }, "relativeTime": { "future": { "one": "eftir {0} klst.", "other": "eftir {0} klst." }, "past": { "one": "fyrir {0} klst.", "other": "fyrir {0} klst." } } }, "minute": { "displayName": "mínúta", "relative": { "0": "á þessari mínútu" }, "relativeTime": { "future": { "one": "eftir {0} mínútu", "other": "eftir {0} mínútur" }, "past": { "one": "fyrir {0} mínútu", "other": "fyrir {0} mínútum" } } }, "minute-short": { "displayName": "mín.", "relative": { "0": "á þessari mínútu" }, "relativeTime": { "future": { "one": "eftir {0} mín.", "other": "eftir {0} mín." }, "past": { "one": "fyrir {0} mín.", "other": "fyrir {0} mín." } } }, "second": { "displayName": "sekúnda", "relative": { "0": "núna" }, "relativeTime": { "future": { "one": "eftir {0} sekúndu", "other": "eftir {0} sekúndur" }, "past": { "one": "fyrir {0} sekúndu", "other": "fyrir {0} sekúndum" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "núna" }, "relativeTime": { "future": { "one": "eftir {0} sek.", "other": "eftir {0} sek." }, "past": { "one": "fyrir {0} sek.", "other": "fyrir {0} sek." } } } } }, { "locale": "it", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1];
        if (ord)
            return ((n == 11 || n == 8 || n == 80
                || n == 800)) ? 'many' : 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "anno", "relative": { "0": "quest’anno", "1": "anno prossimo", "-1": "anno scorso" }, "relativeTime": { "future": { "one": "tra {0} anno", "other": "tra {0} anni" }, "past": { "one": "{0} anno fa", "other": "{0} anni fa" } } }, "year-short": { "displayName": "anno", "relative": { "0": "quest’anno", "1": "anno prossimo", "-1": "anno scorso" }, "relativeTime": { "future": { "one": "tra {0} anno", "other": "tra {0} anni" }, "past": { "one": "{0} anno fa", "other": "{0} anni fa" } } }, "month": { "displayName": "mese", "relative": { "0": "questo mese", "1": "mese prossimo", "-1": "mese scorso" }, "relativeTime": { "future": { "one": "tra {0} mese", "other": "tra {0} mesi" }, "past": { "one": "{0} mese fa", "other": "{0} mesi fa" } } }, "month-short": { "displayName": "mese", "relative": { "0": "questo mese", "1": "mese prossimo", "-1": "mese scorso" }, "relativeTime": { "future": { "one": "tra {0} mese", "other": "tra {0} mesi" }, "past": { "one": "{0} mese fa", "other": "{0} mesi fa" } } }, "week": { "displayName": "settimana", "relativePeriod": "la settimana del {0}", "relative": { "0": "questa settimana", "1": "settimana prossima", "-1": "settimana scorsa" }, "relativeTime": { "future": { "one": "tra {0} settimana", "other": "tra {0} settimane" }, "past": { "one": "{0} settimana fa", "other": "{0} settimane fa" } } }, "week-short": { "displayName": "sett.", "relativePeriod": "la settimana del {0}", "relative": { "0": "questa settimana", "1": "settimana prossima", "-1": "settimana scorsa" }, "relativeTime": { "future": { "one": "tra {0} sett.", "other": "tra {0} sett." }, "past": { "one": "{0} sett. fa", "other": "{0} sett. fa" } } }, "day": { "displayName": "giorno", "relative": { "0": "oggi", "1": "domani", "2": "dopodomani", "-2": "l’altro ieri", "-1": "ieri" }, "relativeTime": { "future": { "one": "tra {0} giorno", "other": "tra {0} giorni" }, "past": { "one": "{0} giorno fa", "other": "{0} giorni fa" } } }, "day-short": { "displayName": "g", "relative": { "0": "oggi", "1": "domani", "2": "dopodomani", "-2": "l’altro ieri", "-1": "ieri" }, "relativeTime": { "future": { "one": "tra {0} g", "other": "tra {0} gg" }, "past": { "one": "{0} g fa", "other": "{0} gg fa" } } }, "hour": { "displayName": "ora", "relative": { "0": "quest’ora" }, "relativeTime": { "future": { "one": "tra {0} ora", "other": "tra {0} ore" }, "past": { "one": "{0} ora fa", "other": "{0} ore fa" } } }, "hour-short": { "displayName": "h.", "relative": { "0": "quest’ora" }, "relativeTime": { "future": { "one": "tra {0} h", "other": "tra {0} h" }, "past": { "one": "{0} h fa", "other": "{0} h fa" } } }, "minute": { "displayName": "minuto", "relative": { "0": "questo minuto" }, "relativeTime": { "future": { "one": "tra {0} minuto", "other": "tra {0} minuti" }, "past": { "one": "{0} minuto fa", "other": "{0} minuti fa" } } }, "minute-short": { "displayName": "min", "relative": { "0": "questo minuto" }, "relativeTime": { "future": { "one": "tra {0} min", "other": "tra {0} min" }, "past": { "one": "{0} min fa", "other": "{0} min fa" } } }, "second": { "displayName": "secondo", "relative": { "0": "ora" }, "relativeTime": { "future": { "one": "tra {0} secondo", "other": "tra {0} secondi" }, "past": { "one": "{0} secondo fa", "other": "{0} secondi fa" } } }, "second-short": { "displayName": "s", "relative": { "0": "ora" }, "relativeTime": { "future": { "one": "tra {0} s", "other": "tra {0} sec." }, "past": { "one": "{0} s fa", "other": "{0} sec. fa" } } } } }, { "locale": "it-CH", "parentLocale": "it" }, { "locale": "it-SM", "parentLocale": "it" }, { "locale": "it-VA", "parentLocale": "it" }, { "locale": "iu", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one'
            : (n == 2) ? 'two'
                : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "iu-Latn", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "iw", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], v0 = !s[1], t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1);
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one'
            : (i == 2 && v0) ? 'two'
                : (v0 && (n < 0
                    || n > 10) && t0 && n10 == 0) ? 'many'
                    : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ja", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return 'other';
    }, "fields": { "year": { "displayName": "年", "relative": { "0": "今年", "1": "翌年", "-1": "昨年" }, "relativeTime": { "future": { "other": "{0} 年後" }, "past": { "other": "{0} 年前" } } }, "year-short": { "displayName": "年", "relative": { "0": "今年", "1": "翌年", "-1": "昨年" }, "relativeTime": { "future": { "other": "{0} 年後" }, "past": { "other": "{0} 年前" } } }, "month": { "displayName": "月", "relative": { "0": "今月", "1": "翌月", "-1": "先月" }, "relativeTime": { "future": { "other": "{0} か月後" }, "past": { "other": "{0} か月前" } } }, "month-short": { "displayName": "月", "relative": { "0": "今月", "1": "翌月", "-1": "先月" }, "relativeTime": { "future": { "other": "{0} か月後" }, "past": { "other": "{0} か月前" } } }, "week": { "displayName": "週", "relativePeriod": "{0} 日の週", "relative": { "0": "今週", "1": "翌週", "-1": "先週" }, "relativeTime": { "future": { "other": "{0} 週間後" }, "past": { "other": "{0} 週間前" } } }, "week-short": { "displayName": "週", "relativePeriod": "{0} 日の週", "relative": { "0": "今週", "1": "翌週", "-1": "先週" }, "relativeTime": { "future": { "other": "{0} 週間後" }, "past": { "other": "{0} 週間前" } } }, "day": { "displayName": "日", "relative": { "0": "今日", "1": "明日", "2": "明後日", "-2": "一昨日", "-1": "昨日" }, "relativeTime": { "future": { "other": "{0} 日後" }, "past": { "other": "{0} 日前" } } }, "day-short": { "displayName": "日", "relative": { "0": "今日", "1": "明日", "2": "明後日", "-2": "一昨日", "-1": "昨日" }, "relativeTime": { "future": { "other": "{0} 日後" }, "past": { "other": "{0} 日前" } } }, "hour": { "displayName": "時", "relative": { "0": "1 時間以内" }, "relativeTime": { "future": { "other": "{0} 時間後" }, "past": { "other": "{0} 時間前" } } }, "hour-short": { "displayName": "時", "relative": { "0": "1 時間以内" }, "relativeTime": { "future": { "other": "{0} 時間後" }, "past": { "other": "{0} 時間前" } } }, "minute": { "displayName": "分", "relative": { "0": "1 分以内" }, "relativeTime": { "future": { "other": "{0} 分後" }, "past": { "other": "{0} 分前" } } }, "minute-short": { "displayName": "分", "relative": { "0": "1 分以内" }, "relativeTime": { "future": { "other": "{0} 分後" }, "past": { "other": "{0} 分前" } } }, "second": { "displayName": "秒", "relative": { "0": "今" }, "relativeTime": { "future": { "other": "{0} 秒後" }, "past": { "other": "{0} 秒前" } } }, "second-short": { "displayName": "秒", "relative": { "0": "今" }, "relativeTime": { "future": { "other": "{0} 秒後" }, "past": { "other": "{0} 秒前" } } } } }, { "locale": "jbo", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "jgo", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "Nǔu ŋguꞋ {0}", "other": "Nǔu ŋguꞋ {0}" }, "past": { "one": "Ɛ́gɛ́ mɔ́ ŋguꞋ {0}", "other": "Ɛ́gɛ́ mɔ́ ŋguꞋ {0}" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "Nǔu ŋguꞋ {0}", "other": "Nǔu ŋguꞋ {0}" }, "past": { "one": "Ɛ́gɛ́ mɔ́ ŋguꞋ {0}", "other": "Ɛ́gɛ́ mɔ́ ŋguꞋ {0}" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "Nǔu {0} saŋ", "other": "Nǔu {0} saŋ" }, "past": { "one": "ɛ́ gɛ́ mɔ́ pɛsaŋ {0}", "other": "ɛ́ gɛ́ mɔ́ pɛsaŋ {0}" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "Nǔu {0} saŋ", "other": "Nǔu {0} saŋ" }, "past": { "one": "ɛ́ gɛ́ mɔ́ pɛsaŋ {0}", "other": "ɛ́ gɛ́ mɔ́ pɛsaŋ {0}" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "Nǔu ŋgap-mbi {0}", "other": "Nǔu ŋgap-mbi {0}" }, "past": { "one": "Ɛ́ gɛ́ mɔ {0} ŋgap-mbi", "other": "Ɛ́ gɛ́ mɔ {0} ŋgap-mbi" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "Nǔu ŋgap-mbi {0}", "other": "Nǔu ŋgap-mbi {0}" }, "past": { "one": "Ɛ́ gɛ́ mɔ {0} ŋgap-mbi", "other": "Ɛ́ gɛ́ mɔ {0} ŋgap-mbi" } } }, "day": { "displayName": "Day", "relative": { "0": "lɔꞋɔ", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "Nǔu lɛ́Ꞌ {0}", "other": "Nǔu lɛ́Ꞌ {0}" }, "past": { "one": "Ɛ́ gɛ́ mɔ́ lɛ́Ꞌ {0}", "other": "Ɛ́ gɛ́ mɔ́ lɛ́Ꞌ {0}" } } }, "day-short": { "displayName": "Day", "relative": { "0": "lɔꞋɔ", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "Nǔu lɛ́Ꞌ {0}", "other": "Nǔu lɛ́Ꞌ {0}" }, "past": { "one": "Ɛ́ gɛ́ mɔ́ lɛ́Ꞌ {0}", "other": "Ɛ́ gɛ́ mɔ́ lɛ́Ꞌ {0}" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "nǔu háwa {0}", "other": "nǔu háwa {0}" }, "past": { "one": "ɛ́ gɛ mɔ́ {0} háwa", "other": "ɛ́ gɛ mɔ́ {0} háwa" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "nǔu háwa {0}", "other": "nǔu háwa {0}" }, "past": { "one": "ɛ́ gɛ mɔ́ {0} háwa", "other": "ɛ́ gɛ mɔ́ {0} háwa" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "nǔu {0} minút", "other": "nǔu {0} minút" }, "past": { "one": "ɛ́ gɛ́ mɔ́ minút {0}", "other": "ɛ́ gɛ́ mɔ́ minút {0}" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "nǔu {0} minút", "other": "nǔu {0} minút" }, "past": { "one": "ɛ́ gɛ́ mɔ́ minút {0}", "other": "ɛ́ gɛ́ mɔ́ minút {0}" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ji", "pluralRuleFunction": function (n) {
        var s = String(n).split('.'), v0 = !s[1];
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "jmc", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Maka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Maka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mori", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mori", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Wiikyi", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Wiikyi", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Mfiri", "relative": { "0": "Inu", "1": "Ngama", "-1": "Ukou" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Mfiri", "relative": { "0": "Inu", "1": "Ngama", "-1": "Ukou" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Dakyika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Dakyika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "jv", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "taun", "relative": { "0": "taun iki", "1": "taun ngarep", "-1": "taun wingi" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "taun", "relative": { "0": "taun iki", "1": "taun ngarep", "-1": "taun wingi" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "sasi", "relative": { "0": "sasi iki", "1": "sasi ngarep", "-1": "sasi wingi" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "sasi", "relative": { "0": "sasi iki", "1": "sasi ngarep", "-1": "sasi wingi" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "pekan", "relativePeriod": "pekan kaping {0}", "relative": { "0": "pekan iki", "1": "pekan ngarep", "-1": "pekan wingi" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "pekan", "relativePeriod": "pekan kaping {0}", "relative": { "0": "pekan iki", "1": "pekan ngarep", "-1": "pekan wingi" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "dino", "relative": { "0": "saiki", "1": "sesuk", "-1": "wingi" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "dino", "relative": { "0": "saiki", "1": "sesuk", "-1": "wingi" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "jam", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "jam", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "menit", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "menit", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "detik", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "detik", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "jw", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ka", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], i100 = i.slice(-2);
        if (ord)
            return (i == 1) ? 'one'
                : (i == 0 || ((i100 >= 2 && i100 <= 20) || i100 == 40 || i100 == 60
                    || i100 == 80)) ? 'many'
                    : 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "წელი", "relative": { "0": "ამ წელს", "1": "მომავალ წელს", "-1": "გასულ წელს" }, "relativeTime": { "future": { "one": "{0} წელიწადში", "other": "{0} წელიწადში" }, "past": { "one": "{0} წლის წინ", "other": "{0} წლის წინ" } } }, "year-short": { "displayName": "წ.", "relative": { "0": "ამ წელს", "1": "მომავალ წელს", "-1": "გასულ წელს" }, "relativeTime": { "future": { "one": "{0} წელში", "other": "{0} წელში" }, "past": { "one": "{0} წლის წინ", "other": "{0} წლის წინ" } } }, "month": { "displayName": "თვე", "relative": { "0": "ამ თვეში", "1": "მომავალ თვეს", "-1": "გასულ თვეს" }, "relativeTime": { "future": { "one": "{0} თვეში", "other": "{0} თვეში" }, "past": { "one": "{0} თვის წინ", "other": "{0} თვის წინ" } } }, "month-short": { "displayName": "თვე", "relative": { "0": "ამ თვეში", "1": "მომავალ თვეს", "-1": "გასულ თვეს" }, "relativeTime": { "future": { "one": "{0} თვეში", "other": "{0} თვეში" }, "past": { "one": "{0} თვის წინ", "other": "{0} თვის წინ" } } }, "week": { "displayName": "კვირა", "relativePeriod": "{0}-ის კვირაში", "relative": { "0": "ამ კვირაში", "1": "მომავალ კვირაში", "-1": "გასულ კვირაში" }, "relativeTime": { "future": { "one": "{0} კვირაში", "other": "{0} კვირაში" }, "past": { "one": "{0} კვირის წინ", "other": "{0} კვირის წინ" } } }, "week-short": { "displayName": "კვ.", "relativePeriod": "{0}-ის კვირაში", "relative": { "0": "ამ კვირაში", "1": "მომავალ კვირაში", "-1": "გასულ კვირაში" }, "relativeTime": { "future": { "one": "{0} კვირაში", "other": "{0} კვირაში" }, "past": { "one": "{0} კვ. წინ", "other": "{0} კვ. წინ" } } }, "day": { "displayName": "დღე", "relative": { "0": "დღეს", "1": "ხვალ", "2": "ზეგ", "-2": "გუშინწინ", "-1": "გუშინ" }, "relativeTime": { "future": { "one": "{0} დღეში", "other": "{0} დღეში" }, "past": { "one": "{0} დღის წინ", "other": "{0} დღის წინ" } } }, "day-short": { "displayName": "დღე", "relative": { "0": "დღეს", "1": "ხვალ", "2": "ზეგ", "-2": "გუშინწინ", "-1": "გუშინ" }, "relativeTime": { "future": { "one": "{0} დღეში", "other": "{0} დღეში" }, "past": { "one": "{0} დღის წინ", "other": "{0} დღის წინ" } } }, "hour": { "displayName": "საათი", "relative": { "0": "ამ საათში" }, "relativeTime": { "future": { "one": "{0} საათში", "other": "{0} საათში" }, "past": { "one": "{0} საათის წინ", "other": "{0} საათის წინ" } } }, "hour-short": { "displayName": "სთ.", "relative": { "0": "ამ საათში" }, "relativeTime": { "future": { "one": "{0} საათში", "other": "{0} საათში" }, "past": { "one": "{0} სთ წინ", "other": "{0} სთ წინ" } } }, "minute": { "displayName": "წუთი", "relative": { "0": "ამ წუთში" }, "relativeTime": { "future": { "one": "{0} წუთში", "other": "{0} წუთში" }, "past": { "one": "{0} წუთის წინ", "other": "{0} წუთის წინ" } } }, "minute-short": { "displayName": "წთ.", "relative": { "0": "ამ წუთში" }, "relativeTime": { "future": { "one": "{0} წუთში", "other": "{0} წუთში" }, "past": { "one": "{0} წთ წინ", "other": "{0} წთ წინ" } } }, "second": { "displayName": "წამი", "relative": { "0": "ახლა" }, "relativeTime": { "future": { "one": "{0} წამში", "other": "{0} წამში" }, "past": { "one": "{0} წამის წინ", "other": "{0} წამის წინ" } } }, "second-short": { "displayName": "წმ.", "relative": { "0": "ახლა" }, "relativeTime": { "future": { "one": "{0} წამში", "other": "{0} წამში" }, "past": { "one": "{0} წმ წინ", "other": "{0} წმ წინ" } } } } }, { "locale": "kab", "pluralRuleFunction": function (n) {
        return (n >= 0 && n < 2) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Aseggas", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Aseggas", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Aggur", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Aggur", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Ddurt", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Ddurt", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ass", "relative": { "0": "Ass-a", "1": "Azekka", "-1": "Iḍelli" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ass", "relative": { "0": "Ass-a", "1": "Azekka", "-1": "Iḍelli" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Tamert", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Tamert", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Tamrect", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Tamrect", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Tasint", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Tasint", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "kaj", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "kam", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mwai", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mwai", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Kyumwa", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Kyumwa", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Mũthenya", "relative": { "0": "Ũmũnthĩ", "1": "Ũnĩ", "-1": "Ĩyoo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Mũthenya", "relative": { "0": "Ũmũnthĩ", "1": "Ũnĩ", "-1": "Ĩyoo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Ndatĩka", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Ndatĩka", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "sekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "sekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "kcg", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "kde", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mwedi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mwedi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Lijuma", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Lijuma", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Lihiku", "relative": { "0": "Nelo", "1": "Nundu", "-1": "Lido" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Lihiku", "relative": { "0": "Nelo", "1": "Nundu", "-1": "Lido" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "kea", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Anu", "relative": { "0": "es anu li", "1": "prósimu anu", "-1": "anu pasadu" }, "relativeTime": { "future": { "other": "di li {0} anu" }, "past": { "other": "a ten {0} anu" } } }, "year-short": { "displayName": "anu", "relative": { "0": "es anu li", "1": "prósimu anu", "-1": "anu pasadu" }, "relativeTime": { "future": { "other": "di li {0} anu" }, "past": { "other": "a ten {0} anu" } } }, "month": { "displayName": "Mes", "relative": { "0": "es mes li", "1": "prósimu mes", "-1": "mes pasadu" }, "relativeTime": { "future": { "other": "di li {0} mes" }, "past": { "other": "a ten {0} mes" } } }, "month-short": { "displayName": "mes", "relative": { "0": "es mes li", "1": "prósimu mes", "-1": "mes pasadu" }, "relativeTime": { "future": { "other": "di li {0} mes" }, "past": { "other": "a ten {0} mes" } } }, "week": { "displayName": "Simana", "relativePeriod": "the week of {0}", "relative": { "0": "es simana li", "1": "prósimu simana", "-1": "simana pasadu" }, "relativeTime": { "future": { "other": "di li {0} simana" }, "past": { "other": "a ten {0} simana" } } }, "week-short": { "displayName": "sim.", "relativePeriod": "the week of {0}", "relative": { "0": "es simana li", "1": "prósimu simana", "-1": "simana pasadu" }, "relativeTime": { "future": { "other": "di li {0} sim." }, "past": { "other": "a ten {0} sim." } } }, "day": { "displayName": "Dia", "relative": { "0": "oji", "1": "manha", "-1": "onti" }, "relativeTime": { "future": { "other": "di li {0} dia" }, "past": { "other": "a ten {0} dia" } } }, "day-short": { "displayName": "dia", "relative": { "0": "oji", "1": "manha", "-1": "onti" }, "relativeTime": { "future": { "other": "di li {0} dia" }, "past": { "other": "a ten {0} dia" } } }, "hour": { "displayName": "Ora", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "di li {0} ora" }, "past": { "other": "a ten {0} ora" } } }, "hour-short": { "displayName": "ora", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "di li {0} ora" }, "past": { "other": "a ten {0} ora" } } }, "minute": { "displayName": "Minutu", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "di li {0} minutu" }, "past": { "other": "a ten {0} minutu" } } }, "minute-short": { "displayName": "min", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "di li {0} min" }, "past": { "other": "a ten {0} min" } } }, "second": { "displayName": "Sigundu", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "di li {0} sigundu" }, "past": { "other": "a ten {0} sigundu" } } }, "second-short": { "displayName": "sig", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "di li {0} sig" }, "past": { "other": "a ten {0} sig" } } } } }, { "locale": "khq", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Jiiri", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Jiiri", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Handu", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Handu", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Hebu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Hebu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Jaari", "relative": { "0": "Hõo", "1": "Suba", "-1": "Bi" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Jaari", "relative": { "0": "Hõo", "1": "Suba", "-1": "Bi" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Guuru", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Guuru", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Miniti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Miniti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Miti", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Miti", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ki", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mweri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mweri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Kiumia", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Kiumia", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Mũthenya", "relative": { "0": "Ũmũthĩ", "1": "Rũciũ", "-1": "Ira" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Mũthenya", "relative": { "0": "Ũmũthĩ", "1": "Rũciũ", "-1": "Ira" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Ithaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Ithaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Ndagĩka", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Ndagĩka", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "kk", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1);
        if (ord)
            return (n10 == 6 || n10 == 9
                || t0 && n10 == 0 && n != 0) ? 'many' : 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "жыл", "relative": { "0": "биылғы жыл", "1": "келесі жыл", "-1": "былтырғы жыл" }, "relativeTime": { "future": { "one": "{0} жылдан кейін", "other": "{0} жылдан кейін" }, "past": { "one": "{0} жыл бұрын", "other": "{0} жыл бұрын" } } }, "year-short": { "displayName": "ж.", "relative": { "0": "биылғы жыл", "1": "келесі жыл", "-1": "былтырғы жыл" }, "relativeTime": { "future": { "one": "{0} ж. кейін", "other": "{0} ж. кейін" }, "past": { "one": "{0} ж. бұрын", "other": "{0} ж. бұрын" } } }, "month": { "displayName": "ай", "relative": { "0": "осы ай", "1": "келесі ай", "-1": "өткен ай" }, "relativeTime": { "future": { "one": "{0} айдан кейін", "other": "{0} айдан кейін" }, "past": { "one": "{0} ай бұрын", "other": "{0} ай бұрын" } } }, "month-short": { "displayName": "ай", "relative": { "0": "осы ай", "1": "келесі ай", "-1": "өткен ай" }, "relativeTime": { "future": { "one": "{0} айдан кейін", "other": "{0} айдан кейін" }, "past": { "one": "{0} ай бұрын", "other": "{0} ай бұрын" } } }, "week": { "displayName": "апта", "relativePeriod": "{0} аптасы", "relative": { "0": "осы апта", "1": "келесі апта", "-1": "өткен апта" }, "relativeTime": { "future": { "one": "{0} аптадан кейін", "other": "{0} аптадан кейін" }, "past": { "one": "{0} апта бұрын", "other": "{0} апта бұрын" } } }, "week-short": { "displayName": "ап.", "relativePeriod": "{0} аптасы", "relative": { "0": "осы апта", "1": "келесі апта", "-1": "өткен апта" }, "relativeTime": { "future": { "one": "{0} ап. кейін", "other": "{0} ап. кейін" }, "past": { "one": "{0} ап. бұрын", "other": "{0} ап. бұрын" } } }, "day": { "displayName": "күн", "relative": { "0": "бүгін", "1": "ертең", "2": "бүрсігүні", "-2": "алдыңгүні", "-1": "кеше" }, "relativeTime": { "future": { "one": "{0} күннен кейін", "other": "{0} күннен кейін" }, "past": { "one": "{0} күн бұрын", "other": "{0} күн бұрын" } } }, "day-short": { "displayName": "күн", "relative": { "0": "бүгін", "1": "ертең", "2": "бүрсігүні", "-2": "алдыңғы күні", "-1": "кеше" }, "relativeTime": { "future": { "one": "{0} күннен кейін", "other": "{0} күннен кейін" }, "past": { "one": "{0} күн бұрын", "other": "{0} күн бұрын" } } }, "hour": { "displayName": "сағат", "relative": { "0": "осы сағат" }, "relativeTime": { "future": { "one": "{0} сағаттан кейін", "other": "{0} сағаттан кейін" }, "past": { "one": "{0} сағат бұрын", "other": "{0} сағат бұрын" } } }, "hour-short": { "displayName": "сағ", "relative": { "0": "осы сағат" }, "relativeTime": { "future": { "one": "{0} сағ. кейін", "other": "{0} сағ. кейін" }, "past": { "one": "{0} сағ. бұрын", "other": "{0} сағ. бұрын" } } }, "minute": { "displayName": "минут", "relative": { "0": "осы минут" }, "relativeTime": { "future": { "one": "{0} минуттан кейін", "other": "{0} минуттан кейін" }, "past": { "one": "{0} минут бұрын", "other": "{0} минут бұрын" } } }, "minute-short": { "displayName": "мин", "relative": { "0": "осы минут" }, "relativeTime": { "future": { "one": "{0} мин. кейін", "other": "{0} мин. кейін" }, "past": { "one": "{0} мин. бұрын", "other": "{0} мин. бұрын" } } }, "second": { "displayName": "секунд", "relative": { "0": "қазір" }, "relativeTime": { "future": { "one": "{0} секундтан кейін", "other": "{0} секундтан кейін" }, "past": { "one": "{0} секунд бұрын", "other": "{0} секунд бұрын" } } }, "second-short": { "displayName": "с", "relative": { "0": "қазір" }, "relativeTime": { "future": { "one": "{0} сек. кейін", "other": "{0} сек. кейін" }, "past": { "one": "{0} сек. бұрын", "other": "{0} сек. бұрын" } } } } }, { "locale": "kkj", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "muka", "1": "nɛmɛnɔ", "-1": "kwey" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "muka", "1": "nɛmɛnɔ", "-1": "kwey" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "kl", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "om {0} ukioq", "other": "om {0} ukioq" }, "past": { "one": "for {0} ukioq siden", "other": "for {0} ukioq siden" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "om {0} ukioq", "other": "om {0} ukioq" }, "past": { "one": "for {0} ukioq siden", "other": "for {0} ukioq siden" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "om {0} qaammat", "other": "om {0} qaammat" }, "past": { "one": "for {0} qaammat siden", "other": "for {0} qaammat siden" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "om {0} qaammat", "other": "om {0} qaammat" }, "past": { "one": "for {0} qaammat siden", "other": "for {0} qaammat siden" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "om {0} sapaatip-akunnera", "other": "om {0} sapaatip-akunnera" }, "past": { "one": "for {0} sapaatip-akunnera siden", "other": "for {0} sapaatip-akunnera siden" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "om {0} sapaatip-akunnera", "other": "om {0} sapaatip-akunnera" }, "past": { "one": "for {0} sapaatip-akunnera siden", "other": "for {0} sapaatip-akunnera siden" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "om {0} ulloq unnuarlu", "other": "om {0} ulloq unnuarlu" }, "past": { "one": "for {0} ulloq unnuarlu siden", "other": "for {0} ulloq unnuarlu siden" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "om {0} ulloq unnuarlu", "other": "om {0} ulloq unnuarlu" }, "past": { "one": "for {0} ulloq unnuarlu siden", "other": "for {0} ulloq unnuarlu siden" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "om {0} nalunaaquttap-akunnera", "other": "om {0} nalunaaquttap-akunnera" }, "past": { "one": "for {0} nalunaaquttap-akunnera siden", "other": "for {0} nalunaaquttap-akunnera siden" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "om {0} nalunaaquttap-akunnera", "other": "om {0} nalunaaquttap-akunnera" }, "past": { "one": "for {0} nalunaaquttap-akunnera siden", "other": "for {0} nalunaaquttap-akunnera siden" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "om {0} minutsi", "other": "om {0} minutsi" }, "past": { "one": "for {0} minutsi siden", "other": "for {0} minutsi siden" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "om {0} minutsi", "other": "om {0} minutsi" }, "past": { "one": "for {0} minutsi siden", "other": "for {0} minutsi siden" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "om {0} sekundi", "other": "om {0} sekundi" }, "past": { "one": "for {0} sekundi siden", "other": "for {0} sekundi siden" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "om {0} sekundi", "other": "om {0} sekundi" }, "past": { "one": "for {0} sekundi siden", "other": "for {0} sekundi siden" } } } } }, { "locale": "kln", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Kenyit", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Kenyit", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Arawet", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Arawet", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Wikit", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Wikit", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Betut", "relative": { "0": "Raini", "1": "Mutai", "-1": "Amut" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Betut", "relative": { "0": "Raini", "1": "Mutai", "-1": "Amut" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Sait", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Sait", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minitit", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minitit", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekondit", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekondit", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "km", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return 'other';
    }, "fields": { "year": { "displayName": "ឆ្នាំ", "relative": { "0": "ឆ្នាំ​នេះ", "1": "ឆ្នាំ​ក្រោយ", "-1": "ឆ្នាំ​មុន" }, "relativeTime": { "future": { "other": "{0} ឆ្នាំទៀត" }, "past": { "other": "{0} ឆ្នាំ​មុន" } } }, "year-short": { "displayName": "ឆ្នាំ", "relative": { "0": "ឆ្នាំ​នេះ", "1": "ឆ្នាំ​ក្រោយ", "-1": "ឆ្នាំ​មុន" }, "relativeTime": { "future": { "other": "{0} ឆ្នាំទៀត" }, "past": { "other": "{0} ឆ្នាំ​មុន" } } }, "month": { "displayName": "ខែ", "relative": { "0": "ខែ​នេះ", "1": "ខែ​ក្រោយ", "-1": "ខែ​មុន" }, "relativeTime": { "future": { "other": "{0} ខែទៀត" }, "past": { "other": "{0} ខែមុន" } } }, "month-short": { "displayName": "ខែ", "relative": { "0": "ខែ​នេះ", "1": "ខែ​ក្រោយ", "-1": "ខែ​មុន" }, "relativeTime": { "future": { "other": "{0} ខែទៀត" }, "past": { "other": "{0} ខែមុន" } } }, "week": { "displayName": "សប្ដាហ៍", "relativePeriod": "សប្តាហ៍នៃ {0}", "relative": { "0": "សប្ដាហ៍​នេះ", "1": "សប្ដាហ៍​ក្រោយ", "-1": "សប្ដាហ៍​មុន" }, "relativeTime": { "future": { "other": "{0} សប្ដាហ៍ទៀត" }, "past": { "other": "{0} សប្ដាហ៍​មុន" } } }, "week-short": { "displayName": "សប្ដាហ៍", "relativePeriod": "សប្តាហ៍នៃ {0}", "relative": { "0": "សប្ដាហ៍​នេះ", "1": "សប្ដាហ៍​ក្រោយ", "-1": "សប្ដាហ៍​មុន" }, "relativeTime": { "future": { "other": "{0} សប្ដាហ៍ទៀត" }, "past": { "other": "{0} សប្ដាហ៍​មុន" } } }, "day": { "displayName": "ថ្ងៃ", "relative": { "0": "ថ្ងៃ​នេះ", "1": "ថ្ងៃ​ស្អែក", "2": "​ខាន​ស្អែក", "-2": "ម្សិល​ម៉្ងៃ", "-1": "ម្សិលមិញ" }, "relativeTime": { "future": { "other": "{0} ថ្ងៃទៀត" }, "past": { "other": "{0} ថ្ងៃ​មុន" } } }, "day-short": { "displayName": "ថ្ងៃ", "relative": { "0": "ថ្ងៃ​នេះ", "1": "ថ្ងៃស្អែក", "2": "​ខាន​ស្អែក", "-2": "ម្សិល​ម៉្ងៃ", "-1": "ម្សិលមិញ" }, "relativeTime": { "future": { "other": "{0} ថ្ងៃទៀត" }, "past": { "other": "{0} ថ្ងៃ​​មុន" } } }, "hour": { "displayName": "ម៉ោង", "relative": { "0": "ម៉ោងនេះ" }, "relativeTime": { "future": { "other": "ក្នុង​រយៈ​ពេល {0} ម៉ោង" }, "past": { "other": "{0} ម៉ោង​មុន" } } }, "hour-short": { "displayName": "ម៉ោង", "relative": { "0": "ម៉ោងនេះ" }, "relativeTime": { "future": { "other": "{0} ម៉ោងទៀត" }, "past": { "other": "{0} ម៉ោង​មុន" } } }, "minute": { "displayName": "នាទី", "relative": { "0": "នាទីនេះ" }, "relativeTime": { "future": { "other": "{0} នាទីទៀត" }, "past": { "other": "{0} នាទី​មុន" } } }, "minute-short": { "displayName": "នាទី", "relative": { "0": "នាទីនេះ" }, "relativeTime": { "future": { "other": "{0} នាទីទៀត" }, "past": { "other": "{0} នាទី​​មុន" } } }, "second": { "displayName": "វិនាទី", "relative": { "0": "ឥឡូវ" }, "relativeTime": { "future": { "other": "{0} វិនាទីទៀត" }, "past": { "other": "{0} វិនាទី​មុន" } } }, "second-short": { "displayName": "វិនាទី", "relative": { "0": "ឥឡូវ" }, "relativeTime": { "future": { "other": "{0} វិនាទីទៀត" }, "past": { "other": "{0} វិនាទី​មុន" } } } } }, { "locale": "kn", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n >= 0 && n <= 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ವರ್ಷ", "relative": { "0": "ಈ ವರ್ಷ", "1": "ಮುಂದಿನ ವರ್ಷ", "-1": "ಹಿಂದಿನ ವರ್ಷ" }, "relativeTime": { "future": { "one": "{0} ವರ್ಷದಲ್ಲಿ", "other": "{0} ವರ್ಷಗಳಲ್ಲಿ" }, "past": { "one": "{0} ವರ್ಷದ ಹಿಂದೆ", "other": "{0} ವರ್ಷಗಳ ಹಿಂದೆ" } } }, "year-short": { "displayName": "ವರ್ಷ", "relative": { "0": "ಈ ವರ್ಷ", "1": "ಮುಂದಿನ ವರ್ಷ", "-1": "ಕಳೆದ ವರ್ಷ" }, "relativeTime": { "future": { "one": "{0} ವರ್ಷದಲ್ಲಿ", "other": "{0} ವರ್ಷಗಳಲ್ಲಿ" }, "past": { "one": "{0} ವರ್ಷದ ಹಿಂದೆ", "other": "{0} ವರ್ಷಗಳ ಹಿಂದೆ" } } }, "month": { "displayName": "ತಿಂಗಳು", "relative": { "0": "ಈ ತಿಂಗಳು", "1": "ಮುಂದಿನ ತಿಂಗಳು", "-1": "ಕಳೆದ ತಿಂಗಳು" }, "relativeTime": { "future": { "one": "{0} ತಿಂಗಳಲ್ಲಿ", "other": "{0} ತಿಂಗಳುಗಳಲ್ಲಿ" }, "past": { "one": "{0} ತಿಂಗಳ ಹಿಂದೆ", "other": "{0} ತಿಂಗಳುಗಳ ಹಿಂದೆ" } } }, "month-short": { "displayName": "ತಿಂಗಳು", "relative": { "0": "ಈ ತಿಂಗಳು", "1": "ಮುಂದಿನ ತಿಂಗಳು", "-1": "ಕಳೆದ ತಿಂಗಳು" }, "relativeTime": { "future": { "one": "{0} ತಿಂಗಳಲ್ಲಿ", "other": "{0} ತಿಂಗಳುಗಳಲ್ಲಿ" }, "past": { "one": "{0} ತಿಂಗಳು ಹಿಂದೆ", "other": "{0} ತಿಂಗಳುಗಳ ಹಿಂದೆ" } } }, "week": { "displayName": "ವಾರ", "relativePeriod": "{0} ವಾರ", "relative": { "0": "ಈ ವಾರ", "1": "ಮುಂದಿನ ವಾರ", "-1": "ಕಳೆದ ವಾರ" }, "relativeTime": { "future": { "one": "{0} ವಾರದಲ್ಲಿ", "other": "{0} ವಾರಗಳಲ್ಲಿ" }, "past": { "one": "{0} ವಾರದ ಹಿಂದೆ", "other": "{0} ವಾರಗಳ ಹಿಂದೆ" } } }, "week-short": { "displayName": "ವಾರ", "relativePeriod": "{0} ವಾರ", "relative": { "0": "ಈ ವಾರ", "1": "ಮುಂದಿನ ವಾರ", "-1": "ಕಳೆದ ವಾರ" }, "relativeTime": { "future": { "one": "{0} ವಾರದಲ್ಲಿ", "other": "{0} ವಾರಗಳಲ್ಲಿ" }, "past": { "one": "{0} ವಾರದ ಹಿಂದೆ", "other": "{0} ವಾರಗಳ ಹಿಂದೆ" } } }, "day": { "displayName": "ದಿನ", "relative": { "0": "ಇಂದು", "1": "ನಾಳೆ", "2": "ನಾಡಿದ್ದು", "-2": "ಮೊನ್ನೆ", "-1": "ನಿನ್ನೆ" }, "relativeTime": { "future": { "one": "{0} ದಿನದಲ್ಲಿ", "other": "{0} ದಿನಗಳಲ್ಲಿ" }, "past": { "one": "{0} ದಿನದ ಹಿಂದೆ", "other": "{0} ದಿನಗಳ ಹಿಂದೆ" } } }, "day-short": { "displayName": "ದಿನ", "relative": { "0": "ಇಂದು", "1": "ನಾಳೆ", "2": "ನಾಡಿದ್ದು", "-2": "ಮೊನ್ನೆ", "-1": "ನಿನ್ನೆ" }, "relativeTime": { "future": { "one": "{0} ದಿನದಲ್ಲಿ", "other": "{0} ದಿನಗಳಲ್ಲಿ" }, "past": { "one": "{0} ದಿನದ ಹಿಂದೆ", "other": "{0} ದಿನಗಳ ಹಿಂದೆ" } } }, "hour": { "displayName": "ಗಂಟೆ", "relative": { "0": "ಈ ಗಂಟೆ" }, "relativeTime": { "future": { "one": "{0} ಗಂಟೆಯಲ್ಲಿ", "other": "{0} ಗಂಟೆಗಳಲ್ಲಿ" }, "past": { "one": "{0} ಗಂಟೆ ಹಿಂದೆ", "other": "{0} ಗಂಟೆಗಳ ಹಿಂದೆ" } } }, "hour-short": { "displayName": "ಗಂಟೆ", "relative": { "0": "ಈ ಗಂಟೆ" }, "relativeTime": { "future": { "one": "{0} ಗಂಟೆಯಲ್ಲಿ", "other": "{0} ಗಂಟೆಗಳಲ್ಲಿ" }, "past": { "one": "{0} ಗಂಟೆ ಹಿಂದೆ", "other": "{0} ಗಂಟೆಗಳ ಹಿಂದೆ" } } }, "minute": { "displayName": "ನಿಮಿಷ", "relative": { "0": "ಈ ನಿಮಿಷ" }, "relativeTime": { "future": { "one": "{0} ನಿಮಿಷದಲ್ಲಿ", "other": "{0} ನಿಮಿಷಗಳಲ್ಲಿ" }, "past": { "one": "{0} ನಿಮಿಷದ ಹಿಂದೆ", "other": "{0} ನಿಮಿಷಗಳ ಹಿಂದೆ" } } }, "minute-short": { "displayName": "ನಿಮಿಷ", "relative": { "0": "ಈ ನಿಮಿಷ" }, "relativeTime": { "future": { "one": "{0} ನಿಮಿಷದಲ್ಲಿ", "other": "{0} ನಿಮಿಷಗಳಲ್ಲಿ" }, "past": { "one": "{0} ನಿಮಿಷದ ಹಿಂದೆ", "other": "{0} ನಿಮಿಷಗಳ ಹಿಂದೆ" } } }, "second": { "displayName": "ಸೆಕೆಂಡ್", "relative": { "0": "ಈಗ" }, "relativeTime": { "future": { "one": "{0} ಸೆಕೆಂಡ್‌ನಲ್ಲಿ", "other": "{0} ಸೆಕೆಂಡ್‌ಗಳಲ್ಲಿ" }, "past": { "one": "{0} ಸೆಕೆಂಡ್ ಹಿಂದೆ", "other": "{0} ಸೆಕೆಂಡುಗಳ ಹಿಂದೆ" } } }, "second-short": { "displayName": "ಸೆಕೆಂಡ್", "relative": { "0": "ಈಗ" }, "relativeTime": { "future": { "one": "{0} ಸೆಕೆಂಡ್‌ನಲ್ಲಿ", "other": "{0} ಸೆಕೆಂಡ್‌ಗಳಲ್ಲಿ" }, "past": { "one": "{0} ಸೆಕೆಂಡ್ ಹಿಂದೆ", "other": "{0} ಸೆಕೆಂಡುಗಳ ಹಿಂದೆ" } } } } }, { "locale": "ko", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return 'other';
    }, "fields": { "year": { "displayName": "년", "relative": { "0": "올해", "1": "내년", "-1": "작년" }, "relativeTime": { "future": { "other": "{0}년 후" }, "past": { "other": "{0}년 전" } } }, "year-short": { "displayName": "년", "relative": { "0": "올해", "1": "내년", "-1": "작년" }, "relativeTime": { "future": { "other": "{0}년 후" }, "past": { "other": "{0}년 전" } } }, "month": { "displayName": "월", "relative": { "0": "이번 달", "1": "다음 달", "-1": "지난달" }, "relativeTime": { "future": { "other": "{0}개월 후" }, "past": { "other": "{0}개월 전" } } }, "month-short": { "displayName": "월", "relative": { "0": "이번 달", "1": "다음 달", "-1": "지난달" }, "relativeTime": { "future": { "other": "{0}개월 후" }, "past": { "other": "{0}개월 전" } } }, "week": { "displayName": "주", "relativePeriod": "{0}번째 주", "relative": { "0": "이번 주", "1": "다음 주", "-1": "지난주" }, "relativeTime": { "future": { "other": "{0}주 후" }, "past": { "other": "{0}주 전" } } }, "week-short": { "displayName": "주", "relativePeriod": "{0}번째 주", "relative": { "0": "이번 주", "1": "다음 주", "-1": "지난주" }, "relativeTime": { "future": { "other": "{0}주 후" }, "past": { "other": "{0}주 전" } } }, "day": { "displayName": "일", "relative": { "0": "오늘", "1": "내일", "2": "모레", "-2": "그저께", "-1": "어제" }, "relativeTime": { "future": { "other": "{0}일 후" }, "past": { "other": "{0}일 전" } } }, "day-short": { "displayName": "일", "relative": { "0": "오늘", "1": "내일", "2": "모레", "-2": "그저께", "-1": "어제" }, "relativeTime": { "future": { "other": "{0}일 후" }, "past": { "other": "{0}일 전" } } }, "hour": { "displayName": "시", "relative": { "0": "현재 시간" }, "relativeTime": { "future": { "other": "{0}시간 후" }, "past": { "other": "{0}시간 전" } } }, "hour-short": { "displayName": "시", "relative": { "0": "현재 시간" }, "relativeTime": { "future": { "other": "{0}시간 후" }, "past": { "other": "{0}시간 전" } } }, "minute": { "displayName": "분", "relative": { "0": "현재 분" }, "relativeTime": { "future": { "other": "{0}분 후" }, "past": { "other": "{0}분 전" } } }, "minute-short": { "displayName": "분", "relative": { "0": "현재 분" }, "relativeTime": { "future": { "other": "{0}분 후" }, "past": { "other": "{0}분 전" } } }, "second": { "displayName": "초", "relative": { "0": "지금" }, "relativeTime": { "future": { "other": "{0}초 후" }, "past": { "other": "{0}초 전" } } }, "second-short": { "displayName": "초", "relative": { "0": "지금" }, "relativeTime": { "future": { "other": "{0}초 후" }, "past": { "other": "{0}초 전" } } } } }, { "locale": "ko-KP", "parentLocale": "ko" }, { "locale": "kok", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "वर्स", "relative": { "0": "हें वर्स", "1": "फुडलें वर्स", "-1": "फाटलें वर्स" }, "relativeTime": { "future": { "other": "{0} वर्सांनीं" }, "past": { "other": "{0} वर्सां आदीं" } } }, "year-short": { "displayName": "वर्स", "relative": { "0": "हें वर्स", "1": "फुडलें वर्स", "-1": "फाटलें वर्स" }, "relativeTime": { "future": { "other": "{0} वर्सांनीं" }, "past": { "other": "{0} वर्स आदीं" } } }, "month": { "displayName": "म्हयनो", "relative": { "0": "हो म्हयनो", "1": "फुडलो म्हयनो", "-1": "फाटलो म्हयनो" }, "relativeTime": { "future": { "other": "{0} म्हयन्यानीं" }, "past": { "other": "{0} म्हयन्यां आदीं" } } }, "month-short": { "displayName": "म्हयनो", "relative": { "0": "हो म्हयनो", "1": "फुडलो म्हयनो", "-1": "फाटलो म्हयनो" }, "relativeTime": { "future": { "other": "{0} म्हयन्यानीं" }, "past": { "other": "{0} म्हयन्यां आदीं" } } }, "week": { "displayName": "सप्तक", "relativePeriod": "{0} चो सप्तक", "relative": { "0": "हो सप्तक", "1": "फुडलो सप्तक", "-1": "निमाणो सप्तक" }, "relativeTime": { "future": { "other": "{0} सप्तकांनीं" }, "past": { "other": "{0} सप्तकां आदीं" } } }, "week-short": { "displayName": "सप्तक", "relativePeriod": "{0} चो सप्तक", "relative": { "0": "हो सप्तक", "1": "फुडलो सप्तक", "-1": "निमाणो सप्तक" }, "relativeTime": { "future": { "other": "{0} सप्त." }, "past": { "other": "{0} सप्तकां आदीं" } } }, "day": { "displayName": "दीस", "relative": { "0": "आयज", "1": "फाल्यां", "-1": "काल" }, "relativeTime": { "future": { "other": "{0} दिसानीं" }, "past": { "other": "{0} दीस आदीं" } } }, "day-short": { "displayName": "दीस", "relative": { "0": "आयज", "1": "फाल्यां", "-1": "काल" }, "relativeTime": { "future": { "other": "{0} दिसानीं" }, "past": { "other": "{0} दीस आदीं" } } }, "hour": { "displayName": "वर", "relative": { "0": "हें वर" }, "relativeTime": { "future": { "other": "{0} वरांनीं" }, "past": { "other": "{0} वरा आदीं" } } }, "hour-short": { "displayName": "वर", "relative": { "0": "हें वर" }, "relativeTime": { "future": { "other": "{0} वरांनीं" }, "past": { "other": "{0} वरा आदीं" } } }, "minute": { "displayName": "मिनीट", "relative": { "0": "हें मिनीट" }, "relativeTime": { "future": { "other": "{0} मिन्टां" }, "past": { "other": "{0} मिन्टां आदीं" } } }, "minute-short": { "displayName": "मिनीट", "relative": { "0": "हें मिनीट" }, "relativeTime": { "future": { "other": "{0} मिन्टां" }, "past": { "other": "{0} मिन्टां आदीं" } } }, "second": { "displayName": "सेकंद", "relative": { "0": "आतां" }, "relativeTime": { "future": { "other": "{0} सेकंदानीं" }, "past": { "other": "{0} सेकंद आदीं" } } }, "second-short": { "displayName": "सेकंद", "relative": { "0": "आतां" }, "relativeTime": { "future": { "other": "{0} सेकंदानीं" }, "past": { "other": "{0} से. आदीं" } } } } }, { "locale": "ks", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ؤری", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "ؤری", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "رٮ۪تھ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "رٮ۪تھ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "ہفتہٕ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "ہفتہٕ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "دۄہ", "relative": { "0": "اَز", "1": "پگاہ", "-1": "راتھ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "دۄہ", "relative": { "0": "اَز", "1": "پگاہ", "-1": "راتھ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "گٲنٛٹہٕ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "گٲنٛٹہٕ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "مِنَٹ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "مِنَٹ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "سٮ۪کَنڑ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "سٮ۪کَنڑ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ksb", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Ng’waka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Ng’waka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Ng’ezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Ng’ezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Niki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Niki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Siku", "relative": { "0": "Evi eo", "1": "Keloi", "-1": "Ghuo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Siku", "relative": { "0": "Evi eo", "1": "Keloi", "-1": "Ghuo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ksf", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Bǝk", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Bǝk", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Ŋwíí", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Ŋwíí", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Sɔ́ndǝ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Sɔ́ndǝ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ŋwós", "relative": { "0": "Gɛ́ɛnǝ", "1": "Ridúrǝ́", "-1": "Rinkɔɔ́" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ŋwós", "relative": { "0": "Gɛ́ɛnǝ", "1": "Ridúrǝ́", "-1": "Rinkɔɔ́" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Cámɛɛn", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Cámɛɛn", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Mǝnít", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Mǝnít", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Háu", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Háu", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ksh", "pluralRuleFunction": function (n) {
        return (n == 0) ? 'zero'
            : (n == 1) ? 'one'
                : 'other';
    }, "fields": { "year": { "displayName": "Johr", "relative": { "0": "diß Johr", "1": "näx Johr", "-1": "läz Johr" }, "relativeTime": { "future": { "zero": "en keinem Johr", "one": "en {0} Johr", "other": "en {0} Johre" }, "past": { "zero": "vör keijnem Johr", "one": "vör {0} Johr", "other": "vör {0} Johre" } } }, "year-short": { "displayName": "J.", "relative": { "0": "diß Johr", "1": "näx Johr", "-1": "läz Johr" }, "relativeTime": { "future": { "zero": "en keinem Johr", "one": "en {0} Johr", "other": "en {0} Johre" }, "past": { "zero": "vör keijnem Johr", "one": "vör {0} Johr", "other": "vör {0} Johre" } } }, "month": { "displayName": "Mohnd", "relative": { "0": "diese Mohnd", "1": "nächste Mohnd", "-1": "lätzde Mohnd" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mohnd", "relative": { "0": "diese Mohnd", "1": "nächste Mohnd", "-1": "lätzde Mohnd" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Woch", "relativePeriod": "the week of {0}", "relative": { "0": "di Woch", "1": "nächste Woche", "-1": "läz Woch" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "W.", "relativePeriod": "the week of {0}", "relative": { "0": "di Woch", "1": "nächste Woche", "-1": "läz Woch" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Daach", "relative": { "0": "hück", "1": "morje", "2": "övvermorje", "-2": "vörjestere", "-1": "jestere" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "D.", "relative": { "0": "hück", "1": "morje", "2": "övvermorje", "-2": "vörjestere", "-1": "jestere" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Schtund", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Std.", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Menutt", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekond", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ku", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "sal", "relative": { "0": "îsal", "1": "sala piştî", "-1": "par" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "sal", "relative": { "0": "îsal", "1": "sala piştî", "-1": "par" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "meh", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "m.", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "hefte", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "hf.", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "roj", "relative": { "0": "îro", "1": "sibe", "-1": "duh" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "r.", "relative": { "0": "îro", "1": "sibe", "-1": "duh" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "saet", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "st.", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "deqîqe", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "d.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "saniye", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "s.", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "kw", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one'
            : (n == 2) ? 'two'
                : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ky", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "жыл", "relative": { "0": "быйыл", "1": "эмдиги жылы", "-1": "былтыр" }, "relativeTime": { "future": { "one": "{0} жылдан кийин", "other": "{0} жылдан кийин" }, "past": { "one": "{0} жыл мурун", "other": "{0} жыл мурун" } } }, "year-short": { "displayName": "ж.", "relative": { "0": "быйыл", "1": "эмдиги жылы", "-1": "былтыр" }, "relativeTime": { "future": { "one": "{0} жыл. кийин", "other": "{0} жыл. кийин" }, "past": { "one": "{0} жыл мурун", "other": "{0} жыл мурун" } } }, "month": { "displayName": "ай", "relative": { "0": "бул айда", "1": "эмдиги айда", "-1": "өткөн айда" }, "relativeTime": { "future": { "one": "{0} айдан кийин", "other": "{0} айдан кийин" }, "past": { "one": "{0} ай мурун", "other": "{0} ай мурун" } } }, "month-short": { "displayName": "ай", "relative": { "0": "бул айда", "1": "эмдиги айда", "-1": "өткөн айда" }, "relativeTime": { "future": { "one": "{0} айд. кийин", "other": "{0} айд. кийин" }, "past": { "one": "{0} ай мурун", "other": "{0} ай мурун" } } }, "week": { "displayName": "апта", "relativePeriod": "{0} апта ичинде", "relative": { "0": "ушул аптада", "1": "келерки аптада", "-1": "өткөн аптада" }, "relativeTime": { "future": { "one": "{0} аптадан кийин", "other": "{0} аптадан кийин" }, "past": { "one": "{0} апта мурун", "other": "{0} апта мурун" } } }, "week-short": { "displayName": "апт", "relativePeriod": "{0} апта ичинде", "relative": { "0": "ушул апт.", "1": "келерки апт.", "-1": "өткөн апт." }, "relativeTime": { "future": { "one": "{0} апт. кийин", "other": "{0} апт. кийин" }, "past": { "one": "{0} апт. мурун", "other": "{0} апт. мурун" } } }, "day": { "displayName": "күн", "relative": { "0": "бүгүн", "1": "эртең", "2": "бүрсүгүнү", "-2": "мурдагы күнү", "-1": "кечээ" }, "relativeTime": { "future": { "one": "{0} күндөн кийин", "other": "{0} күндөн кийин" }, "past": { "one": "{0} күн мурун", "other": "{0} күн мурун" } } }, "day-short": { "displayName": "күн", "relative": { "0": "бүгүн", "1": "эртең", "2": "бүрсүгүнү", "-2": "мурдагы күнү", "-1": "кечээ" }, "relativeTime": { "future": { "one": "{0} күн. кийин", "other": "{0} күн. кийин" }, "past": { "one": "{0} күн мурун", "other": "{0} күн мурун" } } }, "hour": { "displayName": "саат", "relative": { "0": "ушул саатта" }, "relativeTime": { "future": { "one": "{0} сааттан кийин", "other": "{0} сааттан кийин" }, "past": { "one": "{0} саат мурун", "other": "{0} саат мурун" } } }, "hour-short": { "displayName": "ст", "relative": { "0": "ушул саатта" }, "relativeTime": { "future": { "one": "{0} саат. кийин", "other": "{0} саат. кийин" }, "past": { "one": "{0} саат. мурун", "other": "{0} саат. мурун" } } }, "minute": { "displayName": "мүнөт", "relative": { "0": "ушул мүнөттө" }, "relativeTime": { "future": { "one": "{0} мүнөттөн кийин", "other": "{0} мүнөттөн кийин" }, "past": { "one": "{0} мүнөт мурун", "other": "{0} мүнөт мурун" } } }, "minute-short": { "displayName": "мүн.", "relative": { "0": "ушул мүнөттө" }, "relativeTime": { "future": { "one": "{0} мүн. кийин", "other": "{0} мүн. кийин" }, "past": { "one": "{0} мүн. мурун", "other": "{0} мүн. мурун" } } }, "second": { "displayName": "секунд", "relative": { "0": "азыр" }, "relativeTime": { "future": { "one": "{0} секунддан кийин", "other": "{0} секунддан кийин" }, "past": { "one": "{0} секунд мурун", "other": "{0} секунд мурун" } } }, "second-short": { "displayName": "сек.", "relative": { "0": "азыр" }, "relativeTime": { "future": { "one": "{0} сек. кийин", "other": "{0} сек. кийин" }, "past": { "one": "{0} сек. мурун", "other": "{0} сек. мурун" } } } } }, { "locale": "lag", "pluralRuleFunction": function (n) {
        var s = String(n).split('.'), i = s[0];
        return (n == 0) ? 'zero'
            : ((i == 0
                || i == 1) && n != 0) ? 'one'
                : 'other';
    }, "fields": { "year": { "displayName": "Mwaáka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Mwaáka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mweéri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mweéri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Wíiki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Wíiki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Sikʉ", "relative": { "0": "Isikʉ", "1": "Lamʉtoondo", "-1": "Niijo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Sikʉ", "relative": { "0": "Isikʉ", "1": "Lamʉtoondo", "-1": "Niijo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Sáa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Sáa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Dakíka", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Dakíka", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekúunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekúunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "lb", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Joer", "relative": { "0": "dëst Joer", "1": "nächst Joer", "-1": "lescht Joer" }, "relativeTime": { "future": { "one": "an {0} Joer", "other": "a(n) {0} Joer" }, "past": { "one": "virun {0} Joer", "other": "viru(n) {0} Joer" } } }, "year-short": { "displayName": "J.", "relative": { "0": "dëst Joer", "1": "nächst Joer", "-1": "lescht Joer" }, "relativeTime": { "future": { "one": "an {0} J.", "other": "a(n) {0} J." }, "past": { "one": "virun {0} J.", "other": "viru(n) {0} J." } } }, "month": { "displayName": "Mount", "relative": { "0": "dëse Mount", "1": "nächste Mount", "-1": "leschte Mount" }, "relativeTime": { "future": { "one": "an {0} Mount", "other": "a(n) {0} Méint" }, "past": { "one": "virun {0} Mount", "other": "viru(n) {0} Méint" } } }, "month-short": { "displayName": "M.", "relative": { "0": "dëse Mount", "1": "nächste Mount", "-1": "leschte Mount" }, "relativeTime": { "future": { "one": "an {0} M.", "other": "a(n) {0} M." }, "past": { "one": "virun {0} M.", "other": "viru(n) {0} M." } } }, "week": { "displayName": "Woch", "relativePeriod": "the week of {0}", "relative": { "0": "dës Woch", "1": "nächst Woch", "-1": "lescht Woch" }, "relativeTime": { "future": { "one": "an {0} Woch", "other": "a(n) {0} Wochen" }, "past": { "one": "virun {0} Woch", "other": "viru(n) {0} Wochen" } } }, "week-short": { "displayName": "W.", "relativePeriod": "the week of {0}", "relative": { "0": "dës Woch", "1": "nächst Woch", "-1": "lescht Woch" }, "relativeTime": { "future": { "one": "an {0} W.", "other": "a(n) {0} W." }, "past": { "one": "virun {0} W.", "other": "viru(n) {0} W." } } }, "day": { "displayName": "Dag", "relative": { "0": "haut", "1": "muer", "-1": "gëschter" }, "relativeTime": { "future": { "one": "an {0} Dag", "other": "a(n) {0} Deeg" }, "past": { "one": "virun {0} Dag", "other": "viru(n) {0} Deeg" } } }, "day-short": { "displayName": "D.", "relative": { "0": "haut", "1": "muer", "-1": "gëschter" }, "relativeTime": { "future": { "one": "an {0} D.", "other": "a(n) {0} D." }, "past": { "one": "virun {0} D.", "other": "viru(n) {0} D." } } }, "hour": { "displayName": "Stonn", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "an {0} Stonn", "other": "a(n) {0} Stonnen" }, "past": { "one": "virun {0} Stonn", "other": "viru(n) {0} Stonnen" } } }, "hour-short": { "displayName": "St.", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "an {0} St.", "other": "a(n) {0} St." }, "past": { "one": "virun {0} St.", "other": "viru(n) {0} St." } } }, "minute": { "displayName": "Minutt", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "an {0} Minutt", "other": "a(n) {0} Minutten" }, "past": { "one": "virun {0} Minutt", "other": "viru(n) {0} Minutten" } } }, "minute-short": { "displayName": "Min.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "an {0} Min.", "other": "a(n) {0} Min." }, "past": { "one": "virun {0} Min.", "other": "viru(n) {0} Min." } } }, "second": { "displayName": "Sekonn", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "an {0} Sekonn", "other": "a(n) {0} Sekonnen" }, "past": { "one": "virun {0} Sekonn", "other": "viru(n) {0} Sekonnen" } } }, "second-short": { "displayName": "Sek.", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "an {0} Sek.", "other": "a(n) {0} Sek." }, "past": { "one": "virun {0} Sek.", "other": "viru(n) {0} Sek." } } } } }, { "locale": "lg", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mwezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mwezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Sabbiiti", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Sabbiiti", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Lunaku", "relative": { "0": "Lwaleero", "1": "Nkya", "-1": "Ggulo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Lunaku", "relative": { "0": "Lwaleero", "1": "Nkya", "-1": "Ggulo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Saawa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Saawa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Dakiika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Dakiika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Kasikonda", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Kasikonda", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "lkt", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Ómakȟa", "relative": { "0": "Lé ómakȟa kiŋ", "1": "Tȟokáta ómakȟa kiŋháŋ", "-1": "Ómakȟa kʼuŋ héhaŋ" }, "relativeTime": { "future": { "other": "Letáŋhaŋ ómakȟa {0} kiŋháŋ" }, "past": { "other": "Hékta ómakȟa {0} kʼuŋ héhaŋ" } } }, "year-short": { "displayName": "Ómakȟa", "relative": { "0": "Lé ómakȟa kiŋ", "1": "Tȟokáta ómakȟa kiŋháŋ", "-1": "Ómakȟa kʼuŋ héhaŋ" }, "relativeTime": { "future": { "other": "Letáŋhaŋ ómakȟa {0} kiŋháŋ" }, "past": { "other": "Hékta ómakȟa {0} kʼuŋ héhaŋ" } } }, "month": { "displayName": "Wí", "relative": { "0": "Lé wí kiŋ", "1": "Tȟokáta wí kiŋháŋ", "-1": "Wí kʼuŋ héhaŋ" }, "relativeTime": { "future": { "other": "Letáŋhaŋ wíyawapi {0} kiŋháŋ" }, "past": { "other": "Hékta wíyawapi {0} kʼuŋ héhaŋ" } } }, "month-short": { "displayName": "Wí", "relative": { "0": "Lé wí kiŋ", "1": "Tȟokáta wí kiŋháŋ", "-1": "Wí kʼuŋ héhaŋ" }, "relativeTime": { "future": { "other": "Letáŋhaŋ wíyawapi {0} kiŋháŋ" }, "past": { "other": "Hékta wíyawapi {0} kʼuŋ héhaŋ" } } }, "week": { "displayName": "Okó", "relativePeriod": "the week of {0}", "relative": { "0": "Lé okó kiŋ", "1": "Tȟokáta okó kiŋháŋ", "-1": "Okó kʼuŋ héhaŋ" }, "relativeTime": { "future": { "other": "Letáŋhaŋ okó {0} kiŋháŋ" }, "past": { "other": "Hékta okó {0} kʼuŋ héhaŋ" } } }, "week-short": { "displayName": "Okó", "relativePeriod": "the week of {0}", "relative": { "0": "Lé okó kiŋ", "1": "Tȟokáta okó kiŋháŋ", "-1": "Okó kʼuŋ héhaŋ" }, "relativeTime": { "future": { "other": "Letáŋhaŋ okó {0} kiŋháŋ" }, "past": { "other": "Hékta okó {0} kʼuŋ héhaŋ" } } }, "day": { "displayName": "Aŋpétu", "relative": { "0": "Lé aŋpétu kiŋ", "1": "Híŋhaŋni kiŋháŋ", "-1": "Ȟtálehaŋ" }, "relativeTime": { "future": { "other": "Letáŋhaŋ {0}-čháŋ kiŋháŋ" }, "past": { "other": "Hékta {0}-čháŋ k’uŋ héhaŋ" } } }, "day-short": { "displayName": "Aŋpétu", "relative": { "0": "Lé aŋpétu kiŋ", "1": "Híŋhaŋni kiŋháŋ", "-1": "Ȟtálehaŋ" }, "relativeTime": { "future": { "other": "Letáŋhaŋ {0}-čháŋ kiŋháŋ" }, "past": { "other": "Hékta {0}-čháŋ k’uŋ héhaŋ" } } }, "hour": { "displayName": "Owápȟe", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "Letáŋhaŋ owápȟe {0} kiŋháŋ" }, "past": { "other": "Hékta owápȟe {0} kʼuŋ héhaŋ" } } }, "hour-short": { "displayName": "Owápȟe", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "Letáŋhaŋ owápȟe {0} kiŋháŋ" }, "past": { "other": "Hékta owápȟe {0} kʼuŋ héhaŋ" } } }, "minute": { "displayName": "Owápȟe oȟʼáŋkȟo", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "Letáŋhaŋ oȟ’áŋkȟo {0} kiŋháŋ" }, "past": { "other": "Hékta oȟ’áŋkȟo {0} k’uŋ héhaŋ" } } }, "minute-short": { "displayName": "Owápȟe oȟʼáŋkȟo", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "Letáŋhaŋ oȟ’áŋkȟo {0} kiŋháŋ" }, "past": { "other": "Hékta oȟ’áŋkȟo {0} k’uŋ héhaŋ" } } }, "second": { "displayName": "Okpí", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "Letáŋhaŋ okpí {0} kiŋháŋ" }, "past": { "other": "Hékta okpí {0} k’uŋ héhaŋ" } } }, "second-short": { "displayName": "Okpí", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "Letáŋhaŋ okpí {0} kiŋháŋ" }, "past": { "other": "Hékta okpí {0} k’uŋ héhaŋ" } } } } }, { "locale": "ln", "pluralRuleFunction": function (n) {
        return ((n == 0
            || n == 1)) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Mobú", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Mobú", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Sánzá", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Sánzá", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Pɔ́sɔ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Pɔ́sɔ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Mokɔlɔ", "relative": { "0": "Lɛlɔ́", "1": "Lóbi ekoyâ", "-1": "Lóbi elékí" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Mokɔlɔ", "relative": { "0": "Lɛlɔ́", "1": "Lóbi ekoyâ", "-1": "Lóbi elékí" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Ngonga", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Ngonga", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Monúti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Monúti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sɛkɔ́ndɛ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sɛkɔ́ndɛ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ln-AO", "parentLocale": "ln" }, { "locale": "ln-CF", "parentLocale": "ln" }, { "locale": "ln-CG", "parentLocale": "ln" }, { "locale": "lo", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return (n == 1) ? 'one' : 'other';
        return 'other';
    }, "fields": { "year": { "displayName": "ປີ", "relative": { "0": "ປີນີ້", "1": "ປີໜ້າ", "-1": "ປີກາຍ" }, "relativeTime": { "future": { "other": "ໃນອີກ {0} ປີ" }, "past": { "other": "{0} ປີກ່ອນ" } } }, "year-short": { "displayName": "ປີ", "relative": { "0": "ປີນີ້", "1": "ປີໜ້າ", "-1": "ປີກາຍ" }, "relativeTime": { "future": { "other": "ໃນອີກ {0} ປີ" }, "past": { "other": "{0} ປີກ່ອນ" } } }, "month": { "displayName": "ເດືອນ", "relative": { "0": "ເດືອນນີ້", "1": "ເດືອນໜ້າ", "-1": "ເດືອນແລ້ວ" }, "relativeTime": { "future": { "other": "ໃນອີກ {0} ເດືອນ" }, "past": { "other": "{0} ເດືອນກ່ອນ" } } }, "month-short": { "displayName": "ດ.", "relative": { "0": "ເດືອນນີ້", "1": "ເດືອນໜ້າ", "-1": "ເດືອນແລ້ວ" }, "relativeTime": { "future": { "other": "ໃນອີກ {0} ດ." }, "past": { "other": "{0} ດ. ກ່ອນ" } } }, "week": { "displayName": "ອາທິດ", "relativePeriod": "ອາທິດທີ {0}", "relative": { "0": "ອາທິດນີ້", "1": "ອາທິດໜ້າ", "-1": "ອາທິດແລ້ວ" }, "relativeTime": { "future": { "other": "ໃນອີກ {0} ອາທິດ" }, "past": { "other": "{0} ອາທິດກ່ອນ" } } }, "week-short": { "displayName": "ອ.", "relativePeriod": "ອາທິດທີ {0}", "relative": { "0": "ອາທິດນີ້", "1": "ອາທິດໜ້າ", "-1": "ອາທິດແລ້ວ" }, "relativeTime": { "future": { "other": "ໃນອີກ {0} ອທ." }, "past": { "other": "{0} ອທ. ກ່ອນ" } } }, "day": { "displayName": "ມື້", "relative": { "0": "ມື້ນີ້", "1": "ມື້ອື່ນ", "2": "ມື້ຮື", "-2": "ມື້ກ່ອນ", "-1": "ມື້ວານ" }, "relativeTime": { "future": { "other": "ໃນອີກ {0} ມື້" }, "past": { "other": "{0} ມື້ກ່ອນ" } } }, "day-short": { "displayName": "ມື້", "relative": { "0": "ມື້ນີ້", "1": "ມື້ອື່ນ", "2": "ມື້ຮື", "-2": "ມື້ກ່ອນ", "-1": "ມື້ວານ" }, "relativeTime": { "future": { "other": "ໃນອີກ {0} ມື້" }, "past": { "other": "{0} ມື້ກ່ອນ" } } }, "hour": { "displayName": "ຊົ່ວໂມງ", "relative": { "0": "ຊົ່ວໂມງນີ້" }, "relativeTime": { "future": { "other": "ໃນອີກ {0} ຊົ່ວໂມງ" }, "past": { "other": "{0} ຊົ່ວໂມງກ່ອນ" } } }, "hour-short": { "displayName": "ຊມ.", "relative": { "0": "ຊົ່ວໂມງນີ້" }, "relativeTime": { "future": { "other": "ໃນອີກ {0} ຊມ." }, "past": { "other": "{0} ຊມ. ກ່ອນ" } } }, "minute": { "displayName": "ນາທີ", "relative": { "0": "ນາທີນີ້" }, "relativeTime": { "future": { "other": "{0} ໃນອີກ 0 ນາທີ" }, "past": { "other": "{0} ນາທີກ່ອນ" } } }, "minute-short": { "displayName": "ນທ.", "relative": { "0": "ນາທີນີ້" }, "relativeTime": { "future": { "other": "ໃນ {0} ນທ." }, "past": { "other": "{0} ນທ. ກ່ອນ" } } }, "second": { "displayName": "ວິນາທີ", "relative": { "0": "ຕອນນີ້" }, "relativeTime": { "future": { "other": "ໃນອີກ {0} ວິນາທີ" }, "past": { "other": "{0} ວິນາທີກ່ອນ" } } }, "second-short": { "displayName": "ວິ.", "relative": { "0": "ຕອນນີ້" }, "relativeTime": { "future": { "other": "ໃນ {0} ວິ." }, "past": { "other": "{0} ວິ. ກ່ອນ" } } } } }, { "locale": "lrc", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "سال", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "سال", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "ما", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "ما", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "ھأفتە", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "ھأفتە", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "روٙز", "relative": { "0": "أمروٙ", "1": "شوٙصوٙ", "-1": "دیروٙز" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "روٙز", "relative": { "0": "أمروٙ", "1": "شوٙصوٙ", "-1": "دیروٙز" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "ساأت", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "ساأت", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "دئیقە", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "دئیقە", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "ثانیە", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "ثانیە", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "lrc-IQ", "parentLocale": "lrc" }, { "locale": "lt", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), f = s[1] || '', t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2);
        if (ord)
            return 'other';
        return (n10 == 1 && (n100 < 11
            || n100 > 19)) ? 'one'
            : ((n10 >= 2 && n10 <= 9) && (n100 < 11
                || n100 > 19)) ? 'few'
                : (f != 0) ? 'many'
                    : 'other';
    }, "fields": { "year": { "displayName": "metai", "relative": { "0": "šiais metais", "1": "kitais metais", "-1": "praėjusiais metais" }, "relativeTime": { "future": { "one": "po {0} metų", "few": "po {0} metų", "many": "po {0} metų", "other": "po {0} metų" }, "past": { "one": "prieš {0} metus", "few": "prieš {0} metus", "many": "prieš {0} metų", "other": "prieš {0} metų" } } }, "year-short": { "displayName": "m.", "relative": { "0": "šiais metais", "1": "kitais metais", "-1": "praėjusiais metais" }, "relativeTime": { "future": { "one": "po {0} m.", "few": "po {0} m.", "many": "po {0} m.", "other": "po {0} m." }, "past": { "one": "prieš {0} m.", "few": "prieš {0} m.", "many": "prieš {0} m.", "other": "prieš {0} m." } } }, "month": { "displayName": "mėnuo", "relative": { "0": "šį mėnesį", "1": "kitą mėnesį", "-1": "praėjusį mėnesį" }, "relativeTime": { "future": { "one": "po {0} mėnesio", "few": "po {0} mėnesių", "many": "po {0} mėnesio", "other": "po {0} mėnesių" }, "past": { "one": "prieš {0} mėnesį", "few": "prieš {0} mėnesius", "many": "prieš {0} mėnesio", "other": "prieš {0} mėnesių" } } }, "month-short": { "displayName": "mėn.", "relative": { "0": "šį mėnesį", "1": "kitą mėnesį", "-1": "praėjusį mėnesį" }, "relativeTime": { "future": { "one": "po {0} mėn.", "few": "po {0} mėn.", "many": "po {0} mėn.", "other": "po {0} mėn." }, "past": { "one": "prieš {0} mėn.", "few": "prieš {0} mėn.", "many": "prieš {0} mėn.", "other": "prieš {0} mėn." } } }, "week": { "displayName": "savaitė", "relativePeriod": "{0} savaitę", "relative": { "0": "šią savaitę", "1": "kitą savaitę", "-1": "praėjusią savaitę" }, "relativeTime": { "future": { "one": "po {0} savaitės", "few": "po {0} savaičių", "many": "po {0} savaitės", "other": "po {0} savaičių" }, "past": { "one": "prieš {0} savaitę", "few": "prieš {0} savaites", "many": "prieš {0} savaitės", "other": "prieš {0} savaičių" } } }, "week-short": { "displayName": "sav.", "relativePeriod": "{0} savaitę", "relative": { "0": "šią savaitę", "1": "kitą savaitę", "-1": "praėjusią savaitę" }, "relativeTime": { "future": { "one": "po {0} sav.", "few": "po {0} sav.", "many": "po {0} sav.", "other": "po {0} sav." }, "past": { "one": "prieš {0} sav.", "few": "prieš {0} sav.", "many": "prieš {0} sav.", "other": "prieš {0} sav." } } }, "day": { "displayName": "diena", "relative": { "0": "šiandien", "1": "rytoj", "2": "poryt", "-2": "užvakar", "-1": "vakar" }, "relativeTime": { "future": { "one": "po {0} dienos", "few": "po {0} dienų", "many": "po {0} dienos", "other": "po {0} dienų" }, "past": { "one": "prieš {0} dieną", "few": "prieš {0} dienas", "many": "prieš {0} dienos", "other": "prieš {0} dienų" } } }, "day-short": { "displayName": "d.", "relative": { "0": "šiandien", "1": "rytoj", "2": "poryt", "-2": "užvakar", "-1": "vakar" }, "relativeTime": { "future": { "one": "po {0} d.", "few": "po {0} d.", "many": "po {0} d.", "other": "po {0} d." }, "past": { "one": "prieš {0} d.", "few": "prieš {0} d.", "many": "prieš {0} d.", "other": "prieš {0} d." } } }, "hour": { "displayName": "valanda", "relative": { "0": "šią valandą" }, "relativeTime": { "future": { "one": "po {0} valandos", "few": "po {0} valandų", "many": "po {0} valandos", "other": "po {0} valandų" }, "past": { "one": "prieš {0} valandą", "few": "prieš {0} valandas", "many": "prieš {0} valandos", "other": "prieš {0} valandų" } } }, "hour-short": { "displayName": "val.", "relative": { "0": "šią valandą" }, "relativeTime": { "future": { "one": "po {0} val.", "few": "po {0} val.", "many": "po {0} val.", "other": "po {0} val." }, "past": { "one": "prieš {0} val.", "few": "prieš {0} val.", "many": "prieš {0} val.", "other": "prieš {0} val." } } }, "minute": { "displayName": "minutė", "relative": { "0": "šią minutę" }, "relativeTime": { "future": { "one": "po {0} minutės", "few": "po {0} minučių", "many": "po {0} minutės", "other": "po {0} minučių" }, "past": { "one": "prieš {0} minutę", "few": "prieš {0} minutes", "many": "prieš {0} minutės", "other": "prieš {0} minučių" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "šią minutę" }, "relativeTime": { "future": { "one": "po {0} min.", "few": "po {0} min.", "many": "po {0} min.", "other": "po {0} min." }, "past": { "one": "prieš {0} min.", "few": "prieš {0} min.", "many": "prieš {0} min.", "other": "prieš {0} min." } } }, "second": { "displayName": "sekundė", "relative": { "0": "dabar" }, "relativeTime": { "future": { "one": "po {0} sekundės", "few": "po {0} sekundžių", "many": "po {0} sekundės", "other": "po {0} sekundžių" }, "past": { "one": "prieš {0} sekundę", "few": "prieš {0} sekundes", "many": "prieš {0} sekundės", "other": "prieš {0} sekundžių" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "dabar" }, "relativeTime": { "future": { "one": "po {0} sek.", "few": "po {0} sek.", "many": "po {0} sek.", "other": "po {0} sek." }, "past": { "one": "prieš {0} sek.", "few": "prieš {0} sek.", "many": "prieš {0} sek.", "other": "prieš {0} sek." } } } } }, { "locale": "lu", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Tshidimu", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Tshidimu", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Ngondo", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Ngondo", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Lubingu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Lubingu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Dituku", "relative": { "0": "Lelu", "1": "Malaba", "-1": "Makelela" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Dituku", "relative": { "0": "Lelu", "1": "Malaba", "-1": "Makelela" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Diba", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Diba", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Kasunsu", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Kasunsu", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Kasunsukusu", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Kasunsukusu", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "luo", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "higa", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "higa", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "dwe", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "dwe", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "juma", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "juma", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "chieng’", "relative": { "0": "kawuono", "1": "kiny", "-1": "nyoro" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "chieng’", "relative": { "0": "kawuono", "1": "kiny", "-1": "nyoro" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "nyiriri mar saa", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "nyiriri mar saa", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "luy", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Muhiga", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Muhiga", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mweri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mweri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Risiza", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Risiza", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ridiku", "relative": { "0": "Lero", "1": "Mgamba", "-1": "Mgorova" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ridiku", "relative": { "0": "Lero", "1": "Mgamba", "-1": "Mgorova" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Isaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Isaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Idagika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Idagika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "lv", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), f = s[1] || '', v = f.length, t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2), f100 = f.slice(-2), f10 = f.slice(-1);
        if (ord)
            return 'other';
        return (t0 && n10 == 0 || (n100 >= 11 && n100 <= 19)
            || v == 2 && (f100 >= 11 && f100 <= 19)) ? 'zero'
            : (n10 == 1 && n100 != 11 || v == 2 && f10 == 1 && f100 != 11
                || v != 2 && f10 == 1) ? 'one'
                : 'other';
    }, "fields": { "year": { "displayName": "gads", "relative": { "0": "šajā gadā", "1": "nākamajā gadā", "-1": "pagājušajā gadā" }, "relativeTime": { "future": { "zero": "pēc {0} gadiem", "one": "pēc {0} gada", "other": "pēc {0} gadiem" }, "past": { "zero": "pirms {0} gadiem", "one": "pirms {0} gada", "other": "pirms {0} gadiem" } } }, "year-short": { "displayName": "g.", "relative": { "0": "šajā gadā", "1": "nākamajā gadā", "-1": "pagājušajā gadā" }, "relativeTime": { "future": { "zero": "pēc {0} g.", "one": "pēc {0} g.", "other": "pēc {0} g." }, "past": { "zero": "pirms {0} g.", "one": "pirms {0} g.", "other": "pirms {0} g." } } }, "month": { "displayName": "mēnesis", "relative": { "0": "šajā mēnesī", "1": "nākamajā mēnesī", "-1": "pagājušajā mēnesī" }, "relativeTime": { "future": { "zero": "pēc {0} mēnešiem", "one": "pēc {0} mēneša", "other": "pēc {0} mēnešiem" }, "past": { "zero": "pirms {0} mēnešiem", "one": "pirms {0} mēneša", "other": "pirms {0} mēnešiem" } } }, "month-short": { "displayName": "mēn.", "relative": { "0": "šajā mēnesī", "1": "nākamajā mēnesī", "-1": "pagājušajā mēnesī" }, "relativeTime": { "future": { "zero": "pēc {0} mēn.", "one": "pēc {0} mēn.", "other": "pēc {0} mēn." }, "past": { "zero": "pirms {0} mēn.", "one": "pirms {0} mēn.", "other": "pirms {0} mēn." } } }, "week": { "displayName": "nedēļa", "relativePeriod": "{0}. nedēļa", "relative": { "0": "šajā nedēļā", "1": "nākamajā nedēļā", "-1": "pagājušajā nedēļā" }, "relativeTime": { "future": { "zero": "pēc {0} nedēļām", "one": "pēc {0} nedēļas", "other": "pēc {0} nedēļām" }, "past": { "zero": "pirms {0} nedēļām", "one": "pirms {0} nedēļas", "other": "pirms {0} nedēļām" } } }, "week-short": { "displayName": "ned.", "relativePeriod": "{0}. ned.", "relative": { "0": "šajā nedēļā", "1": "nākamajā nedēļā", "-1": "pagājušajā nedēļā" }, "relativeTime": { "future": { "zero": "pēc {0} ned.", "one": "pēc {0} ned.", "other": "pēc {0} ned." }, "past": { "zero": "pirms {0} ned.", "one": "pirms {0} ned.", "other": "pirms {0} ned." } } }, "day": { "displayName": "diena", "relative": { "0": "šodien", "1": "rīt", "2": "parīt", "-2": "aizvakar", "-1": "vakar" }, "relativeTime": { "future": { "zero": "pēc {0} dienām", "one": "pēc {0} dienas", "other": "pēc {0} dienām" }, "past": { "zero": "pirms {0} dienām", "one": "pirms {0} dienas", "other": "pirms {0} dienām" } } }, "day-short": { "displayName": "d.", "relative": { "0": "šodien", "1": "rīt", "2": "parīt", "-2": "aizvakar", "-1": "vakar" }, "relativeTime": { "future": { "zero": "pēc {0} d.", "one": "pēc {0} d.", "other": "pēc {0} d." }, "past": { "zero": "pirms {0} d.", "one": "pirms {0} d.", "other": "pirms {0} d." } } }, "hour": { "displayName": "stundas", "relative": { "0": "šajā stundā" }, "relativeTime": { "future": { "zero": "pēc {0} stundām", "one": "pēc {0} stundas", "other": "pēc {0} stundām" }, "past": { "zero": "pirms {0} stundām", "one": "pirms {0} stundas", "other": "pirms {0} stundām" } } }, "hour-short": { "displayName": "st.", "relative": { "0": "šajā stundā" }, "relativeTime": { "future": { "zero": "pēc {0} st.", "one": "pēc {0} st.", "other": "pēc {0} st." }, "past": { "zero": "pirms {0} st.", "one": "pirms {0} st.", "other": "pirms {0} st." } } }, "minute": { "displayName": "minūtes", "relative": { "0": "šajā minūtē" }, "relativeTime": { "future": { "zero": "pēc {0} minūtēm", "one": "pēc {0} minūtes", "other": "pēc {0} minūtēm" }, "past": { "zero": "pirms {0} minūtēm", "one": "pirms {0} minūtes", "other": "pirms {0} minūtēm" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "šajā minūtē" }, "relativeTime": { "future": { "zero": "pēc {0} min.", "one": "pēc {0} min.", "other": "pēc {0} min." }, "past": { "zero": "pirms {0} min.", "one": "pirms {0} min.", "other": "pirms {0} min." } } }, "second": { "displayName": "sekundes", "relative": { "0": "tagad" }, "relativeTime": { "future": { "zero": "pēc {0} sekundēm", "one": "pēc {0} sekundes", "other": "pēc {0} sekundēm" }, "past": { "zero": "pirms {0} sekundēm", "one": "pirms {0} sekundes", "other": "pirms {0} sekundēm" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "tagad" }, "relativeTime": { "future": { "zero": "pēc {0} sek.", "one": "pēc {0} sek.", "other": "pēc {0} sek." }, "past": { "zero": "pirms {0} sek.", "one": "pirms {0} sek.", "other": "pirms {0} sek." } } } } }, { "locale": "mas", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Ɔlárì", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Ɔlárì", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Ɔlápà", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Ɔlápà", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Ewíkî", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Ewíkî", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ɛnkɔlɔ́ŋ", "relative": { "0": "Táatá", "1": "Tááisérè", "-1": "Ŋolé" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ɛnkɔlɔ́ŋ", "relative": { "0": "Táatá", "1": "Tááisérè", "-1": "Ŋolé" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Ɛ́sáâ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Ɛ́sáâ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Oldákikaè", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Oldákikaè", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "mas-TZ", "parentLocale": "mas" }, { "locale": "mer", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Mwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mweri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mweri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Kiumia", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Kiumia", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ntukũ", "relative": { "0": "Narua", "1": "Rũjũ", "-1": "Ĩgoro" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ntukũ", "relative": { "0": "Narua", "1": "Rũjũ", "-1": "Ĩgoro" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Ĩthaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Ĩthaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Ndagika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Ndagika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "mfe", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Lane", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Lane", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mwa", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mwa", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Semenn", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Semenn", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Zour", "relative": { "0": "Zordi", "1": "Demin", "-1": "Yer" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Zour", "relative": { "0": "Zordi", "1": "Demin", "-1": "Yer" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Ler", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Ler", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minit", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minit", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Segonn", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Segonn", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "mg", "pluralRuleFunction": function (n) {
        return ((n == 0
            || n == 1)) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Taona", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Taona", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Volana", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Volana", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Herinandro", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Herinandro", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Andro", "relative": { "0": "Anio", "1": "Rahampitso", "-1": "Omaly" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Andro", "relative": { "0": "Anio", "1": "Rahampitso", "-1": "Omaly" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Ora", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Ora", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minitra", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minitra", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Segondra", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Segondra", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "mgh", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "yaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "yaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "mweri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "mweri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "iwiki mocha", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "iwiki mocha", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "nihuku", "relative": { "0": "lel’lo", "1": "me’llo", "-1": "n’chana" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "nihuku", "relative": { "0": "lel’lo", "1": "me’llo", "-1": "n’chana" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "isaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "isaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "idakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "idakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "isekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "isekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "mgo", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "fituʼ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "fituʼ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "iməg", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "+{0} m", "other": "+{0} m" }, "past": { "one": "-{0} m", "other": "-{0} m" } } }, "month-short": { "displayName": "iməg", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "+{0} m", "other": "+{0} m" }, "past": { "one": "-{0} m", "other": "-{0} m" } } }, "week": { "displayName": "nkap", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "nkap", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "anəg", "relative": { "0": "tèchɔ̀ŋ", "1": "isu", "2": "isu ywi", "-1": "ikwiri" }, "relativeTime": { "future": { "one": "+{0} d", "other": "+{0} d" }, "past": { "one": "-{0} d", "other": "-{0} d" } } }, "day-short": { "displayName": "anəg", "relative": { "0": "tèchɔ̀ŋ", "1": "isu", "2": "isu ywi", "-1": "ikwiri" }, "relativeTime": { "future": { "one": "+{0} d", "other": "+{0} d" }, "past": { "one": "-{0} d", "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "+{0} h", "other": "+{0} h" }, "past": { "one": "-{0} h", "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "+{0} h", "other": "+{0} h" }, "past": { "one": "-{0} h", "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "+{0} min", "other": "+{0} min" }, "past": { "one": "-{0} min", "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "+{0} min", "other": "+{0} min" }, "past": { "one": "-{0} min", "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "+{0} s", "other": "+{0} s" }, "past": { "one": "-{0} s", "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "+{0} s", "other": "+{0} s" }, "past": { "one": "-{0} s", "other": "-{0} s" } } } } }, { "locale": "mi", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "tau", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "t", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "marama", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "m", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "wiki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "w", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "rā", "relative": { "0": "āianei", "1": "āpōpō", "-1": "inanahi" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "rā", "relative": { "0": "āianei", "1": "āpōpō", "-1": "inanahi" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "hāora", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "hr", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "meneti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "men", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "hēkona", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "hēk", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "mk", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2), f10 = f.slice(-1), f100 = f.slice(-2);
        if (ord)
            return (i10 == 1 && i100 != 11) ? 'one'
                : (i10 == 2 && i100 != 12) ? 'two'
                    : ((i10 == 7
                        || i10 == 8) && i100 != 17 && i100 != 18) ? 'many'
                        : 'other';
        return (v0 && i10 == 1 && i100 != 11
            || f10 == 1 && f100 != 11) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "година", "relative": { "0": "оваа година", "1": "следната година", "-1": "минатата година" }, "relativeTime": { "future": { "one": "за {0} година", "other": "за {0} години" }, "past": { "one": "пред {0} година", "other": "пред {0} години" } } }, "year-short": { "displayName": "год.", "relative": { "0": "оваа година", "1": "следната година", "-1": "минатата година" }, "relativeTime": { "future": { "one": "за {0} год.", "other": "за {0} год." }, "past": { "one": "пред {0} год.", "other": "пред {0} год." } } }, "month": { "displayName": "месец", "relative": { "0": "овој месец", "1": "следниот месец", "-1": "минатиот месец" }, "relativeTime": { "future": { "one": "за {0} месец", "other": "за {0} месеци" }, "past": { "one": "пред {0} месец", "other": "пред {0} месеци" } } }, "month-short": { "displayName": "мес.", "relative": { "0": "овој месец", "1": "следниот месец", "-1": "минатиот месец" }, "relativeTime": { "future": { "one": "за {0} месец", "other": "за {0} месеци" }, "past": { "one": "пред {0} месец", "other": "пред {0} месеци" } } }, "week": { "displayName": "седмица", "relativePeriod": "{0} седмица", "relative": { "0": "оваа седмица", "1": "следната седмица", "-1": "минатата седмица" }, "relativeTime": { "future": { "one": "за {0} седмица", "other": "за {0} седмици" }, "past": { "one": "пред {0} седмица", "other": "пред {0} седмици" } } }, "week-short": { "displayName": "сед.", "relativePeriod": "{0} седмица", "relative": { "0": "оваа седмица", "1": "следната седмица", "-1": "минатата седмица" }, "relativeTime": { "future": { "one": "за {0} седмица", "other": "за {0} седмици" }, "past": { "one": "пред {0} седмица", "other": "пред {0} седмици" } } }, "day": { "displayName": "ден", "relative": { "0": "денес", "1": "утре", "2": "задутре", "-2": "завчера", "-1": "вчера" }, "relativeTime": { "future": { "one": "за {0} ден", "other": "за {0} дена" }, "past": { "one": "пред {0} ден", "other": "пред {0} дена" } } }, "day-short": { "displayName": "ден", "relative": { "0": "денес", "1": "утре", "2": "задутре", "-2": "завчера", "-1": "вчера" }, "relativeTime": { "future": { "one": "за {0} ден", "other": "за {0} дена" }, "past": { "one": "пред {0} ден", "other": "пред {0} дена" } } }, "hour": { "displayName": "час", "relative": { "0": "часов" }, "relativeTime": { "future": { "one": "за {0} час", "other": "за {0} часа" }, "past": { "one": "пред {0} час", "other": "пред {0} часа" } } }, "hour-short": { "displayName": "ч.", "relative": { "0": "часов" }, "relativeTime": { "future": { "one": "за {0} час", "other": "за {0} часа" }, "past": { "one": "пред {0} час", "other": "пред {0} часа" } } }, "minute": { "displayName": "минута", "relative": { "0": "оваа минута" }, "relativeTime": { "future": { "one": "за {0} минута", "other": "за {0} минути" }, "past": { "one": "пред {0} минута", "other": "пред {0} минути" } } }, "minute-short": { "displayName": "мин.", "relative": { "0": "оваа минута" }, "relativeTime": { "future": { "one": "за {0} мин.", "other": "за {0} мин." }, "past": { "one": "пред {0} мин.", "other": "пред {0} мин." } } }, "second": { "displayName": "секунда", "relative": { "0": "сега" }, "relativeTime": { "future": { "one": "за {0} секунда", "other": "за {0} секунди" }, "past": { "one": "пред {0} секунда", "other": "пред {0} секунди" } } }, "second-short": { "displayName": "сек.", "relative": { "0": "сега" }, "relativeTime": { "future": { "one": "за {0} сек.", "other": "за {0} сек." }, "past": { "one": "пред {0} сек.", "other": "пред {0} сек." } } } } }, { "locale": "ml", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "വർഷം", "relative": { "0": "ഈ വർ‌ഷം", "1": "അടുത്തവർഷം", "-1": "കഴിഞ്ഞ വർഷം" }, "relativeTime": { "future": { "one": "{0} വർഷത്തിൽ", "other": "{0} വർഷത്തിൽ" }, "past": { "one": "{0} വർഷം മുമ്പ്", "other": "{0} വർഷം മുമ്പ്" } } }, "year-short": { "displayName": "വ.", "relative": { "0": "ഈ വർ‌ഷം", "1": "അടുത്തവർഷം", "-1": "കഴിഞ്ഞ വർഷം" }, "relativeTime": { "future": { "one": "{0} വർഷത്തിൽ", "other": "{0} വർഷത്തിൽ" }, "past": { "one": "{0} വർഷം മുമ്പ്", "other": "{0} വർഷം മുമ്പ്" } } }, "month": { "displayName": "മാസം", "relative": { "0": "ഈ മാസം", "1": "അടുത്ത മാസം", "-1": "കഴിഞ്ഞ മാസം" }, "relativeTime": { "future": { "one": "{0} മാസത്തിൽ", "other": "{0} മാസത്തിൽ" }, "past": { "one": "{0} മാസം മുമ്പ്", "other": "{0} മാസം മുമ്പ്" } } }, "month-short": { "displayName": "മാ.", "relative": { "0": "ഈ മാസം", "1": "അടുത്ത മാസം", "-1": "കഴിഞ്ഞ മാസം" }, "relativeTime": { "future": { "one": "{0} മാസത്തിൽ", "other": "{0} മാസത്തിൽ" }, "past": { "one": "{0} മാസം മുമ്പ്", "other": "{0} മാസം മുമ്പ്" } } }, "week": { "displayName": "ആഴ്ച", "relativePeriod": "{0} വരുന്ന ആഴ്ച", "relative": { "0": "ഈ ആഴ്ച", "1": "അടുത്ത ആഴ്ച", "-1": "കഴിഞ്ഞ ആഴ്‌ച" }, "relativeTime": { "future": { "one": "{0} ആഴ്ചയിൽ", "other": "{0} ആഴ്ചയിൽ" }, "past": { "one": "{0} ആഴ്ച മുമ്പ്", "other": "{0} ആഴ്ച മുമ്പ്" } } }, "week-short": { "displayName": "ആ.", "relativePeriod": "{0} വരുന്ന ആഴ്ച", "relative": { "0": "ഈ ആഴ്ച", "1": "അടുത്ത ആഴ്ച", "-1": "കഴിഞ്ഞ ആഴ്‌ച" }, "relativeTime": { "future": { "one": "{0} ആഴ്ചയിൽ", "other": "{0} ആഴ്ചയിൽ" }, "past": { "one": "{0} ആഴ്ച മുമ്പ്", "other": "{0} ആഴ്ച മുമ്പ്" } } }, "day": { "displayName": "ദിവസം", "relative": { "0": "ഇന്ന്", "1": "നാളെ", "2": "മറ്റന്നാൾ", "-2": "മിനിഞ്ഞാന്ന്", "-1": "ഇന്നലെ" }, "relativeTime": { "future": { "one": "{0} ദിവസത്തിൽ", "other": "{0} ദിവസത്തിൽ" }, "past": { "one": "{0} ദിവസം മുമ്പ്", "other": "{0} ദിവസം മുമ്പ്" } } }, "day-short": { "displayName": "ദിവസം", "relative": { "0": "ഇന്ന്", "1": "നാളെ", "2": "മറ്റന്നാൾ", "-2": "മിനിഞ്ഞാന്ന്", "-1": "ഇന്നലെ" }, "relativeTime": { "future": { "one": "{0} ദിവസത്തിൽ", "other": "{0} ദിവസത്തിൽ" }, "past": { "one": "{0} ദിവസം മുമ്പ്", "other": "{0} ദിവസം മുമ്പ്" } } }, "hour": { "displayName": "മണിക്കൂർ", "relative": { "0": "ഈ മണിക്കൂറിൽ" }, "relativeTime": { "future": { "one": "{0} മണിക്കൂറിൽ", "other": "{0} മണിക്കൂറിൽ" }, "past": { "one": "{0} മണിക്കൂർ മുമ്പ്", "other": "{0} മണിക്കൂർ മുമ്പ്" } } }, "hour-short": { "displayName": "മ.", "relative": { "0": "ഈ മണിക്കൂറിൽ" }, "relativeTime": { "future": { "one": "{0} മണിക്കൂറിൽ", "other": "{0} മണിക്കൂറിൽ" }, "past": { "one": "{0} മണിക്കൂർ മുമ്പ്", "other": "{0} മണിക്കൂർ മുമ്പ്" } } }, "minute": { "displayName": "മിനിറ്റ്", "relative": { "0": "ഈ മിനിറ്റിൽ" }, "relativeTime": { "future": { "one": "{0} മിനിറ്റിൽ", "other": "{0} മിനിറ്റിൽ" }, "past": { "one": "{0} മിനിറ്റ് മുമ്പ്", "other": "{0} മിനിറ്റ് മുമ്പ്" } } }, "minute-short": { "displayName": "മി.", "relative": { "0": "ഈ മിനിറ്റിൽ" }, "relativeTime": { "future": { "one": "{0} മിനിറ്റിൽ", "other": "{0} മിനിറ്റിൽ" }, "past": { "one": "{0} മിനിറ്റ് മുമ്പ്", "other": "{0} മിനിറ്റ് മുമ്പ്" } } }, "second": { "displayName": "സെക്കൻഡ്", "relative": { "0": "ഇപ്പോൾ" }, "relativeTime": { "future": { "one": "{0} സെക്കൻഡിൽ", "other": "{0} സെക്കൻഡിൽ" }, "past": { "one": "{0} സെക്കൻഡ് മുമ്പ്", "other": "{0} സെക്കൻഡ് മുമ്പ്" } } }, "second-short": { "displayName": "സെ.", "relative": { "0": "ഇപ്പോൾ" }, "relativeTime": { "future": { "one": "{0} സെക്കൻഡിൽ", "other": "{0} സെക്കൻഡിൽ" }, "past": { "one": "{0} സെക്കൻഡ് മുമ്പ്", "other": "{0} സെക്കൻഡ് മുമ്പ്" } } } } }, { "locale": "mn", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "жил", "relative": { "0": "энэ жил", "1": "ирэх жил", "-1": "өнгөрсөн жил" }, "relativeTime": { "future": { "one": "{0} жилийн дараа", "other": "{0} жилийн дараа" }, "past": { "one": "{0} жилийн өмнө", "other": "{0} жилийн өмнө" } } }, "year-short": { "displayName": "жил", "relative": { "0": "энэ жил", "1": "ирэх жил", "-1": "өнгөрсөн жил" }, "relativeTime": { "future": { "one": "{0} жилийн дараа", "other": "{0} жилийн дараа" }, "past": { "one": "{0} жилийн өмнө", "other": "{0} жилийн өмнө" } } }, "month": { "displayName": "сар", "relative": { "0": "энэ сар", "1": "ирэх сар", "-1": "өнгөрсөн сар" }, "relativeTime": { "future": { "one": "{0} сарын дараа", "other": "{0} сарын дараа" }, "past": { "one": "{0} сарын өмнө", "other": "{0} сарын өмнө" } } }, "month-short": { "displayName": "сар", "relative": { "0": "энэ сар", "1": "ирэх сар", "-1": "өнгөрсөн сар" }, "relativeTime": { "future": { "one": "{0} сарын дараа", "other": "{0} сарын дараа" }, "past": { "one": "{0} сарын өмнө", "other": "{0} сарын өмнө" } } }, "week": { "displayName": "долоо хоног", "relativePeriod": "{0}-н долоо хоног", "relative": { "0": "энэ долоо хоног", "1": "ирэх долоо хоног", "-1": "өнгөрсөн долоо хоног" }, "relativeTime": { "future": { "one": "{0} долоо хоногийн дараа", "other": "{0} долоо хоногийн дараа" }, "past": { "one": "{0} долоо хоногийн өмнө", "other": "{0} долоо хоногийн өмнө" } } }, "week-short": { "displayName": "7 хоног", "relativePeriod": "{0}-н 7 хоног", "relative": { "0": "энэ долоо хоног", "1": "ирэх долоо хоног", "-1": "өнгөрсөн долоо хоног" }, "relativeTime": { "future": { "one": "{0} 7 хоногийн дараа", "other": "{0} 7 хоногийн дараа" }, "past": { "one": "{0} 7 хоногийн өмнө", "other": "{0} 7 хоногийн өмнө" } } }, "day": { "displayName": "өдөр", "relative": { "0": "өнөөдөр", "1": "маргааш", "2": "нөгөөдөр", "-2": "уржигдар", "-1": "өчигдөр" }, "relativeTime": { "future": { "one": "{0} өдрийн дараа", "other": "{0} өдрийн дараа" }, "past": { "one": "{0} өдрийн өмнө", "other": "{0} өдрийн өмнө" } } }, "day-short": { "displayName": "өдөр", "relative": { "0": "өнөөдөр", "1": "маргааш", "2": "нөгөөдөр", "-2": "уржигдар", "-1": "өчигдөр" }, "relativeTime": { "future": { "one": "{0} өдрийн дараа", "other": "{0} өдрийн дараа" }, "past": { "one": "{0} өдрийн өмнө", "other": "{0} өдрийн өмнө" } } }, "hour": { "displayName": "цаг", "relative": { "0": "энэ цаг" }, "relativeTime": { "future": { "one": "{0} цагийн дараа", "other": "{0} цагийн дараа" }, "past": { "one": "{0} цагийн өмнө", "other": "{0} цагийн өмнө" } } }, "hour-short": { "displayName": "ц", "relative": { "0": "энэ цаг" }, "relativeTime": { "future": { "one": "{0} ц дараа", "other": "{0} ц дараа" }, "past": { "one": "{0} ц өмнө", "other": "{0} ц өмнө" } } }, "minute": { "displayName": "минут", "relative": { "0": "энэ минут" }, "relativeTime": { "future": { "one": "{0} минутын дараа", "other": "{0} минутын дараа" }, "past": { "one": "{0} минутын өмнө", "other": "{0} минутын өмнө" } } }, "minute-short": { "displayName": "мин", "relative": { "0": "энэ минут" }, "relativeTime": { "future": { "one": "{0} мин дараа", "other": "{0} мин дараа" }, "past": { "one": "{0} мин өмнө", "other": "{0} мин өмнө" } } }, "second": { "displayName": "секунд", "relative": { "0": "одоо" }, "relativeTime": { "future": { "one": "{0} секундын дараа", "other": "{0} секундын дараа" }, "past": { "one": "{0} секундын өмнө", "other": "{0} секундын өмнө" } } }, "second-short": { "displayName": "сек", "relative": { "0": "одоо" }, "relativeTime": { "future": { "one": "{0} сек дараа", "other": "{0} сек дараа" }, "past": { "one": "{0} сек өмнө", "other": "{0} сек өмнө" } } } } }, { "locale": "mn-Mong", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "mo", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1], t0 = Number(s[0]) == n, n100 = t0 && s[0].slice(-2);
        if (ord)
            return (n == 1) ? 'one' : 'other';
        return (n == 1 && v0) ? 'one'
            : (!v0 || n == 0
                || n != 1 && (n100 >= 1 && n100 <= 19)) ? 'few'
                : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "mr", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return (n == 1) ? 'one'
                : ((n == 2
                    || n == 3)) ? 'two'
                    : (n == 4) ? 'few'
                        : 'other';
        return (n >= 0 && n <= 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "वर्ष", "relative": { "0": "हे वर्ष", "1": "पुढील वर्ष", "-1": "मागील वर्ष" }, "relativeTime": { "future": { "one": "येत्या {0} वर्षामध्ये", "other": "येत्या {0} वर्षांमध्ये" }, "past": { "one": "{0} वर्षापूर्वी", "other": "{0} वर्षांपूर्वी" } } }, "year-short": { "displayName": "वर्ष", "relative": { "0": "हे वर्ष", "1": "पुढील वर्ष", "-1": "मागील वर्ष" }, "relativeTime": { "future": { "one": "{0} वर्षामध्ये", "other": "{0} वर्षांमध्ये" }, "past": { "one": "{0} वर्षापूर्वी", "other": "{0} वर्षांपूर्वी" } } }, "month": { "displayName": "महिना", "relative": { "0": "हा महिना", "1": "पुढील महिना", "-1": "मागील महिना" }, "relativeTime": { "future": { "one": "येत्या {0} महिन्यामध्ये", "other": "येत्या {0} महिन्यांमध्ये" }, "past": { "one": "{0} महिन्यापूर्वी", "other": "{0} महिन्यांपूर्वी" } } }, "month-short": { "displayName": "महिना", "relative": { "0": "हा महिना", "1": "पुढील महिना", "-1": "मागील महिना" }, "relativeTime": { "future": { "one": "{0} महिन्यामध्ये", "other": "{0} महिन्यामध्ये" }, "past": { "one": "{0} महिन्यापूर्वी", "other": "{0} महिन्यांपूर्वी" } } }, "week": { "displayName": "आठवडा", "relativePeriod": "{0} चा आठवडा", "relative": { "0": "हा आठवडा", "1": "पुढील आठवडा", "-1": "मागील आठवडा" }, "relativeTime": { "future": { "one": "{0} आठवड्यामध्ये", "other": "{0} आठवड्यांमध्ये" }, "past": { "one": "{0} आठवड्यापूर्वी", "other": "{0} आठवड्यांपूर्वी" } } }, "week-short": { "displayName": "आठवडा", "relativePeriod": "{0} चा आठवडा", "relative": { "0": "हा आठवडा", "1": "पुढील आठवडा", "-1": "मागील आठवडा" }, "relativeTime": { "future": { "one": "येत्या {0} आठवड्यामध्ये", "other": "येत्या {0} आठवड्यांमध्ये" }, "past": { "one": "{0} आठवड्यापूर्वी", "other": "{0} आठवड्यांपूर्वी" } } }, "day": { "displayName": "दिवस", "relative": { "0": "आज", "1": "उद्या", "-1": "काल" }, "relativeTime": { "future": { "one": "येत्या {0} दिवसामध्ये", "other": "येत्या {0} दिवसांमध्ये" }, "past": { "one": "{0} दिवसापूर्वी", "other": "{0} दिवसांपूर्वी" } } }, "day-short": { "displayName": "दिवस", "relative": { "0": "आज", "1": "उद्या", "-1": "काल" }, "relativeTime": { "future": { "one": "{0} दिवसामध्ये", "other": "येत्या {0} दिवसांमध्ये" }, "past": { "one": "{0} दिवसापूर्वी", "other": "{0} दिवसांपूर्वी" } } }, "hour": { "displayName": "तास", "relative": { "0": "तासात" }, "relativeTime": { "future": { "one": "{0} तासामध्ये", "other": "{0} तासांमध्ये" }, "past": { "one": "{0} तासापूर्वी", "other": "{0} तासांपूर्वी" } } }, "hour-short": { "displayName": "तास", "relative": { "0": "तासात" }, "relativeTime": { "future": { "one": "{0} तासामध्ये", "other": "{0} तासांमध्ये" }, "past": { "one": "{0} तासापूर्वी", "other": "{0} तासांपूर्वी" } } }, "minute": { "displayName": "मिनिट", "relative": { "0": "या मिनिटात" }, "relativeTime": { "future": { "one": "{0} मिनिटामध्ये", "other": "{0} मिनिटांमध्ये" }, "past": { "one": "{0} मिनिटापूर्वी", "other": "{0} मिनिटांपूर्वी" } } }, "minute-short": { "displayName": "मि.", "relative": { "0": "या मिनिटात" }, "relativeTime": { "future": { "one": "{0} मिनि. मध्ये", "other": "{0} मिनि. मध्ये" }, "past": { "one": "{0} मिनि. पूर्वी", "other": "{0} मिनि. पूर्वी" } } }, "second": { "displayName": "सेकंद", "relative": { "0": "आत्ता" }, "relativeTime": { "future": { "one": "{0} सेकंदामध्ये", "other": "{0} सेकंदांमध्ये" }, "past": { "one": "{0} सेकंदापूर्वी", "other": "{0} सेकंदांपूर्वी" } } }, "second-short": { "displayName": "से.", "relative": { "0": "आत्ता" }, "relativeTime": { "future": { "one": "{0} से. मध्ये", "other": "{0} से. मध्ये" }, "past": { "one": "{0} से. पूर्वी", "other": "{0} से. पूर्वी" } } } } }, { "locale": "ms", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return (n == 1) ? 'one' : 'other';
        return 'other';
    }, "fields": { "year": { "displayName": "tahun", "relative": { "0": "tahun ini", "1": "tahun depan", "-1": "tahun lalu" }, "relativeTime": { "future": { "other": "dalam {0} tahun" }, "past": { "other": "{0} tahun lalu" } } }, "year-short": { "displayName": "thn", "relative": { "0": "thn ini", "1": "thn depan", "-1": "thn lepas" }, "relativeTime": { "future": { "other": "dalam {0} thn" }, "past": { "other": "{0} thn lalu" } } }, "month": { "displayName": "bulan", "relative": { "0": "bulan ini", "1": "bulan depan", "-1": "bulan lalu" }, "relativeTime": { "future": { "other": "dalam {0} bulan" }, "past": { "other": "{0} bulan lalu" } } }, "month-short": { "displayName": "bln", "relative": { "0": "bln ini", "1": "bln depan", "-1": "bln lalu" }, "relativeTime": { "future": { "other": "dlm {0} bln" }, "past": { "other": "{0} bln lalu" } } }, "week": { "displayName": "minggu", "relativePeriod": "minggu ke-{0}", "relative": { "0": "minggu ini", "1": "minggu depan", "-1": "minggu lalu" }, "relativeTime": { "future": { "other": "dalam {0} minggu" }, "past": { "other": "{0} minggu lalu" } } }, "week-short": { "displayName": "mgu", "relativePeriod": "minggu ke-{0}", "relative": { "0": "mng ini", "1": "mng depan", "-1": "mng lepas" }, "relativeTime": { "future": { "other": "dlm {0} mgu" }, "past": { "other": "{0} mgu lalu" } } }, "day": { "displayName": "hari", "relative": { "0": "hari ini", "1": "esok", "2": "lusa", "-2": "kelmarin", "-1": "semalam" }, "relativeTime": { "future": { "other": "dalam {0} hari" }, "past": { "other": "{0} hari lalu" } } }, "day-short": { "displayName": "hari", "relative": { "0": "hari ini", "1": "esok", "2": "lusa", "-2": "kelmarin", "-1": "semlm" }, "relativeTime": { "future": { "other": "dlm {0} hari" }, "past": { "other": "{0} hari lalu" } } }, "hour": { "displayName": "jam", "relative": { "0": "jam ini" }, "relativeTime": { "future": { "other": "dalam {0} jam" }, "past": { "other": "{0} jam lalu" } } }, "hour-short": { "displayName": "jam", "relative": { "0": "jam ini" }, "relativeTime": { "future": { "other": "dlm {0} jam" }, "past": { "other": "{0} jam lalu" } } }, "minute": { "displayName": "minit", "relative": { "0": "pada minit ini" }, "relativeTime": { "future": { "other": "dalam {0} minit" }, "past": { "other": "{0} minit lalu" } } }, "minute-short": { "displayName": "min", "relative": { "0": "pada minit ini" }, "relativeTime": { "future": { "other": "dlm {0} min" }, "past": { "other": "{0} min lalu" } } }, "second": { "displayName": "saat", "relative": { "0": "sekarang" }, "relativeTime": { "future": { "other": "dalam {0} saat" }, "past": { "other": "{0} saat lalu" } } }, "second-short": { "displayName": "saat", "relative": { "0": "sekarang" }, "relativeTime": { "future": { "other": "dlm {0} saat" }, "past": { "other": "{0} saat lalu" } } } } }, { "locale": "ms-Arab", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ms-BN", "parentLocale": "ms" }, { "locale": "ms-SG", "parentLocale": "ms" }, { "locale": "mt", "pluralRuleFunction": function (n) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n, n100 = t0 && s[0].slice(-2);
        return (n == 1) ? 'one'
            : (n == 0
                || (n100 >= 2 && n100 <= 10)) ? 'few'
                : ((n100 >= 11 && n100 <= 19)) ? 'many'
                    : 'other';
    }, "fields": { "year": { "displayName": "Sena", "relative": { "0": "din is-sena", "1": "is-sena d-dieħla", "-1": "is-sena l-oħra" }, "relativeTime": { "future": { "one": "fi żmien sena", "few": "fi żmien {0} snin oħra", "many": "fi żmien {0} snin oħra", "other": "fi żmien {0} snin oħra" }, "past": { "one": "sena ilu", "few": "{0} snin ilu", "many": "{0} snin ilu", "other": "{0} snin ilu" } } }, "year-short": { "displayName": "Sena", "relative": { "0": "din is-sena", "1": "is-sena d-dieħla", "-1": "is-sena l-oħra" }, "relativeTime": { "future": { "one": "fi żmien sena", "few": "fi żmien {0} snin oħra", "many": "fi żmien {0} snin oħra", "other": "fi żmien {0} snin oħra" }, "past": { "one": "sa sena ilu", "few": "{0} snin ilu", "many": "{0} snin ilu", "other": "{0} snin ilu" } } }, "month": { "displayName": "xahar", "relative": { "0": "Dan ix-xahar", "1": "Ix-xahar id-dieħel", "-1": "Ix-xahar li għadda" }, "relativeTime": { "future": { "one": "sa xahar ieħor", "few": "fi {0} xhur oħra", "many": "fi {0} xhur oħra", "other": "fi {0} xhur oħra" }, "past": { "one": "xahar ilu", "few": "{0} xhur ilu", "many": "{0} xhur ilu", "other": "{0} xhur ilu" } } }, "month-short": { "displayName": "Xahar", "relative": { "0": "Dan ix-xahar", "1": "Ix-xahar id-dieħel", "-1": "Ix-xahar li għadda" }, "relativeTime": { "future": { "one": "sa xahar ieħor", "few": "sa {0} xhur oħra", "many": "sa {0} xhur oħra", "other": "sa {0} xhur oħra" }, "past": { "one": "{0} xahar ilu", "few": "{0} xhur ilu", "many": "{0} xhur ilu", "other": "{0} xhur ilu" } } }, "week": { "displayName": "ġimgħa", "relativePeriod": "fil-ġimgħa ta’ {0}", "relative": { "0": "din il-ġimgħa", "1": "il-ġimgħa d-dieħla", "-1": "il-ġimgħa li għaddiet" }, "relativeTime": { "future": { "one": "sa ġimgħa oħra", "few": "sa {0} ġimgħat oħra", "many": "sa {0} ġimgħat oħra", "other": "sa {0} ġimgħat oħra" }, "past": { "one": "ġimgħa ilu", "few": "{0} ġimgħat ilu", "many": "{0} ġimgħat ilu", "other": "{0} ġimgħat ilu" } } }, "week-short": { "displayName": "ġimgħa", "relativePeriod": "fil-ġimgħa ta’ {0}", "relative": { "0": "din il-ġimgħa", "1": "il-ġimgħa d-dieħla", "-1": "il-ġimgħa li għaddiet" }, "relativeTime": { "future": { "one": "sa ġimgħa oħra", "few": "sa {0} ġimgħat oħra", "many": "sa {0} ġimgħat oħra", "other": "+{0} w" }, "past": { "one": "ġimgħa ilu", "few": "{0} ġimgħat ilu", "many": "{0} ġimgħat ilu", "other": "{0} ġimgħat ilu" } } }, "day": { "displayName": "jum", "relative": { "0": "illum", "1": "għada", "-1": "lbieraħ" }, "relativeTime": { "future": { "one": "fi żmien ġurnata", "few": "fi żmien {0} ġurnata oħra", "many": "fi żmien {0} ġurnata oħra", "other": "fi żmien {0} ġurnata oħra" }, "past": { "one": "ġurnata ilu", "few": "{0} ġranet ilu", "many": "{0}-il ġurnata ilu", "other": "{0}-il ġurnata ilu" } } }, "day-short": { "displayName": "Jum", "relative": { "0": "illum", "1": "għada", "-1": "lbieraħ" }, "relativeTime": { "future": { "one": "fi żmien ġurnata", "few": "fi żmien {0} ġurnata oħra", "many": "fi żmien {0} ġurnata oħra", "other": "fi żmien {0} ġurnata oħra" }, "past": { "one": "ġurnata ilu", "few": "{0} ġranet ilu", "many": "{0}-il ġurnata ilu", "other": "{0}-il ġurnata ilu" } } }, "hour": { "displayName": "siegħa", "relative": { "0": "din is-siegħa" }, "relativeTime": { "future": { "one": "fi żmien siegħa oħra", "few": "fi żmien {0} sigħat", "many": "fi żmien{0} sigħat", "other": "fi żmien {0} sigħat" }, "past": { "one": "siegħa ilu", "few": "{0} sigħat ilu", "many": "{0} sigħat ilu", "other": "{0} sigħat ilu" } } }, "hour-short": { "displayName": "siegħa", "relative": { "0": "din is-siegħa" }, "relativeTime": { "future": { "one": "fi żmien siegħa oħra", "few": "fi żmien {0} sigħat", "many": "+{0} h", "other": "fi żmien {0} sigħat" }, "past": { "one": "siegħa ilu", "few": "{0} sigħat ilu", "many": "{0} sigħat ilu", "other": "{0} sigħat ilu" } } }, "minute": { "displayName": "minuta", "relative": { "0": "din il-minuta" }, "relativeTime": { "future": { "one": "sa minuta oħra", "few": "sa {0} minuti oħra", "many": "sa {0} minuti oħra", "other": "sa {0} minuti oħra" }, "past": { "one": "minuta ilu", "few": "{0} minuti ilu", "many": "{0} minuti ilu", "other": "{0} minuti ilu" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "din il-minuta" }, "relativeTime": { "future": { "one": "sa min. oħra", "few": "sa {0} min. oħra", "many": "sa {0} min. oħra", "other": "sa {0} min. oħra" }, "past": { "one": "min. ilu", "few": "{0} min. ilu", "many": "{0} minuti ilu", "other": "{0} min. ilu" } } }, "second": { "displayName": "sekonda", "relative": { "0": "issa" }, "relativeTime": { "future": { "one": "sa {0} sekondi oħra", "few": "sa {0} sekondi oħra", "many": "sa {0} sekondi oħra", "other": "sa {0} sekondi oħra" }, "past": { "one": "sekonda ilu", "few": "{0} sekondi ilu", "many": "{0} sekondi ilu", "other": "{0} sekondi ilu" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "issa" }, "relativeTime": { "future": { "one": "sa {0} sekondi oħra", "few": "sa {0} sek. oħra", "many": "sa {0} sek. oħra", "other": "sa {0} sekondi oħra" }, "past": { "one": "sek. ilu", "few": "{0} sek. ilu", "many": "{0} sek. ilu", "other": "{0} sek. ilu" } } } } }, { "locale": "mua", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Syii", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Syii", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Fĩi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Fĩi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Luma", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Luma", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Zah’nane\u002F Comme", "relative": { "0": "Tǝ’nahko", "1": "Tǝ’nane", "-1": "Tǝsoo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Zah’nane\u002F Comme", "relative": { "0": "Tǝ’nahko", "1": "Tǝ’nane", "-1": "Tǝsoo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Cok comme", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Cok comme", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Cok comme ma laŋne", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Cok comme ma laŋne", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Cok comme ma laŋ tǝ biŋ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Cok comme ma laŋ tǝ biŋ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "my", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return 'other';
    }, "fields": { "year": { "displayName": "နှစ်", "relative": { "0": "ယခုနှစ်", "1": "လာမည့်နှစ်", "-1": "ယမန်နှစ်" }, "relativeTime": { "future": { "other": "{0} နှစ်အတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} နှစ်" } } }, "year-short": { "displayName": "နှစ်", "relative": { "0": "ယခုနှစ်", "1": "လာမည့်နှစ်", "-1": "ယမန်နှစ်" }, "relativeTime": { "future": { "other": "{0} နှစ်အတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} နှစ်" } } }, "month": { "displayName": "လ", "relative": { "0": "ယခုလ", "1": "လာမည့်လ", "-1": "ပြီးခဲ့သည့်လ" }, "relativeTime": { "future": { "other": "{0} လအတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} လ" } } }, "month-short": { "displayName": "လ", "relative": { "0": "ယခုလ", "1": "လာမည့်လ", "-1": "ပြီးခဲ့သည့်လ" }, "relativeTime": { "future": { "other": "{0} လအတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} လ" } } }, "week": { "displayName": "ပတ်", "relativePeriod": "{0} ပတ်မြောက် သီတင်းပတ်", "relative": { "0": "ယခု သီတင်းပတ်", "1": "လာမည့် သီတင်းပတ်", "-1": "ပြီးခဲ့သည့် သီတင်းပတ်" }, "relativeTime": { "future": { "other": "{0} ပတ်အတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} ပတ်" } } }, "week-short": { "displayName": "ပတ်", "relativePeriod": "{0} ပတ်မြောက် သီတင်းပတ်", "relative": { "0": "ယခု သီတင်းပတ်", "1": "လာမည့် သီတင်းပတ်", "-1": "ပြီးခဲ့သည့် သီတင်းပတ်" }, "relativeTime": { "future": { "other": "{0} ပတ်အတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} ပတ်" } } }, "day": { "displayName": "ရက်", "relative": { "0": "ယနေ့", "1": "မနက်ဖြန်", "2": "သန်ဘက်ခါ", "-2": "တစ်နေ့က", "-1": "မနေ့က" }, "relativeTime": { "future": { "other": "{0} ရက်အတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} ရက်" } } }, "day-short": { "displayName": "ရက်", "relative": { "0": "ယနေ့", "1": "မနက်ဖြန်", "2": "သန်ဘက်ခါ", "-2": "တစ်နေ့က", "-1": "မနေ့က" }, "relativeTime": { "future": { "other": "{0} ရက်အတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} ရက်" } } }, "hour": { "displayName": "နာရီ", "relative": { "0": "ဤအချိန်" }, "relativeTime": { "future": { "other": "{0} နာရီအတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} နာရီ" } } }, "hour-short": { "displayName": "နာရီ", "relative": { "0": "ဤအချိန်" }, "relativeTime": { "future": { "other": "{0} နာရီအတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} နာရီ" } } }, "minute": { "displayName": "မိနစ်", "relative": { "0": "ဤမိနစ်" }, "relativeTime": { "future": { "other": "{0} မိနစ်အတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} မိနစ်" } } }, "minute-short": { "displayName": "မိနစ်", "relative": { "0": "ဤမိနစ်" }, "relativeTime": { "future": { "other": "{0} မိနစ်အတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} မိနစ်" } } }, "second": { "displayName": "စက္ကန့်", "relative": { "0": "ယခု" }, "relativeTime": { "future": { "other": "{0} စက္ကန့်အတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} စက္ကန့်" } } }, "second-short": { "displayName": "စက္ကန့်", "relative": { "0": "ယခု" }, "relativeTime": { "future": { "other": "{0} စက္ကန့်အတွင်း" }, "past": { "other": "ပြီးခဲ့သည့် {0} စက္ကန့်" } } } } }, { "locale": "mzn", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "سال", "relative": { "0": "امسال", "1": "سال دیگه", "-1": "پارسال" }, "relativeTime": { "future": { "other": "{0} سال دله" }, "past": { "other": "{0} سال پیش" } } }, "year-short": { "displayName": "سال", "relative": { "0": "امسال", "1": "سال دیگه", "-1": "پارسال" }, "relativeTime": { "future": { "other": "{0} سال دله" }, "past": { "other": "{0} سال پیش" } } }, "month": { "displayName": "ماه", "relative": { "0": "این ماه", "1": "ماه ِبعد", "-1": "ماه قبل" }, "relativeTime": { "future": { "other": "{0} ماه دله" }, "past": { "other": "{0} ماه پیش" } } }, "month-short": { "displayName": "ماه", "relative": { "0": "این ماه", "1": "ماه ِبعد", "-1": "ماه قبل" }, "relativeTime": { "future": { "other": "{0} ماه دله" }, "past": { "other": "{0} ماه پیش" } } }, "week": { "displayName": "هفته", "relativePeriod": "the week of {0}", "relative": { "0": "این هفته", "1": "بعدی هفته", "-1": "قبلی هفته" }, "relativeTime": { "future": { "other": "{0} هفته دله" }, "past": { "other": "{0} هفته پیش" } } }, "week-short": { "displayName": "هفته", "relativePeriod": "the week of {0}", "relative": { "0": "این هفته", "1": "بعدی هفته", "-1": "قبلی هفته" }, "relativeTime": { "future": { "other": "{0} هفته دله" }, "past": { "other": "{0} هفته پیش" } } }, "day": { "displayName": "روز", "relative": { "0": "اَمروز", "1": "فِردا", "-1": "دیروز" }, "relativeTime": { "future": { "other": "{0} روز دله" }, "past": { "other": "{0} روز پیش" } } }, "day-short": { "displayName": "روز", "relative": { "0": "اَمروز", "1": "فِردا", "-1": "دیروز" }, "relativeTime": { "future": { "other": "{0} روز دله" }, "past": { "other": "{0} روز پیش" } } }, "hour": { "displayName": "ساعِت", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "{0} ساعِت دله" }, "past": { "other": "{0} ساعِت پیش" } } }, "hour-short": { "displayName": "ساعت", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "{0} ساعت دله" }, "past": { "other": "{0} ساعت پیش" } } }, "minute": { "displayName": "دقیقه", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "{0} دقیقه دله" }, "past": { "other": "{0} دَقه پیش" } } }, "minute-short": { "displayName": "دَقه", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "{0} دَقه دله" }, "past": { "other": "{0} دَقه پیش" } } }, "second": { "displayName": "ثانیه", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "{0} ثانیه دله" }, "past": { "other": "{0} ثانیه پیش" } } }, "second-short": { "displayName": "ثانیه", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "{0} ثانیه دله" }, "past": { "other": "{0} ثانیه پیش" } } } } }, { "locale": "nah", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "naq", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one'
            : (n == 2) ? 'two'
                : 'other';
    }, "fields": { "year": { "displayName": "Kurib", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Kurib", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "ǁKhâb", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "ǁKhâb", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Wekheb", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Wekheb", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Tsees", "relative": { "0": "Neetsee", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Tsees", "relative": { "0": "Neetsee", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Iiri", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Iiri", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Haib", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Haib", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "ǀGâub", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "ǀGâub", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "nb", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "år", "relative": { "0": "i år", "1": "neste år", "-1": "i fjor" }, "relativeTime": { "future": { "one": "om {0} år", "other": "om {0} år" }, "past": { "one": "for {0} år siden", "other": "for {0} år siden" } } }, "year-short": { "displayName": "år", "relative": { "0": "i år", "1": "neste år", "-1": "i fjor" }, "relativeTime": { "future": { "one": "om {0} år", "other": "om {0} år" }, "past": { "one": "for {0} år siden", "other": "for {0} år siden" } } }, "month": { "displayName": "måned", "relative": { "0": "denne måneden", "1": "neste måned", "-1": "forrige måned" }, "relativeTime": { "future": { "one": "om {0} måned", "other": "om {0} måneder" }, "past": { "one": "for {0} måned siden", "other": "for {0} måneder siden" } } }, "month-short": { "displayName": "mnd.", "relative": { "0": "denne md.", "1": "neste md.", "-1": "forrige md." }, "relativeTime": { "future": { "one": "om {0} md.", "other": "om {0} md." }, "past": { "one": "for {0} md. siden", "other": "for {0} md. siden" } } }, "week": { "displayName": "uke", "relativePeriod": "uken som inneholder {0}", "relative": { "0": "denne uken", "1": "neste uke", "-1": "forrige uke" }, "relativeTime": { "future": { "one": "om {0} uke", "other": "om {0} uker" }, "past": { "one": "for {0} uke siden", "other": "for {0} uker siden" } } }, "week-short": { "displayName": "uke", "relativePeriod": "uken med {0}", "relative": { "0": "denne uken", "1": "neste uke", "-1": "forrige uke" }, "relativeTime": { "future": { "one": "om {0} u.", "other": "om {0} u." }, "past": { "one": "for {0} u. siden", "other": "for {0} u. siden" } } }, "day": { "displayName": "dag", "relative": { "0": "i dag", "1": "i morgen", "2": "i overmorgen", "-2": "i forgårs", "-1": "i går" }, "relativeTime": { "future": { "one": "om {0} døgn", "other": "om {0} døgn" }, "past": { "one": "for {0} døgn siden", "other": "for {0} døgn siden" } } }, "day-short": { "displayName": "dag", "relative": { "0": "i dag", "1": "i morgen", "2": "i overmorgen", "-2": "i forgårs", "-1": "i går" }, "relativeTime": { "future": { "one": "om {0} d.", "other": "om {0} d." }, "past": { "one": "for {0} d. siden", "other": "for {0} d. siden" } } }, "hour": { "displayName": "time", "relative": { "0": "denne timen" }, "relativeTime": { "future": { "one": "om {0} time", "other": "om {0} timer" }, "past": { "one": "for {0} time siden", "other": "for {0} timer siden" } } }, "hour-short": { "displayName": "t", "relative": { "0": "denne timen" }, "relativeTime": { "future": { "one": "om {0} t", "other": "om {0} t" }, "past": { "one": "for {0} t siden", "other": "for {0} t siden" } } }, "minute": { "displayName": "minutt", "relative": { "0": "dette minuttet" }, "relativeTime": { "future": { "one": "om {0} minutt", "other": "om {0} minutter" }, "past": { "one": "for {0} minutt siden", "other": "for {0} minutter siden" } } }, "minute-short": { "displayName": "min", "relative": { "0": "dette minuttet" }, "relativeTime": { "future": { "one": "om {0} min", "other": "om {0} min" }, "past": { "one": "for {0} min siden", "other": "for {0} min siden" } } }, "second": { "displayName": "sekund", "relative": { "0": "nå" }, "relativeTime": { "future": { "one": "om {0} sekund", "other": "om {0} sekunder" }, "past": { "one": "for {0} sekund siden", "other": "for {0} sekunder siden" } } }, "second-short": { "displayName": "sek", "relative": { "0": "nå" }, "relativeTime": { "future": { "one": "om {0} sek", "other": "om {0} sek" }, "past": { "one": "for {0} sek siden", "other": "for {0} sek siden" } } } } }, { "locale": "nb-SJ", "parentLocale": "nb" }, { "locale": "nd", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Umnyaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Umnyaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Inyangacale", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Inyangacale", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Iviki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Iviki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ilanga", "relative": { "0": "Lamuhla", "1": "Kusasa", "-1": "Izolo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ilanga", "relative": { "0": "Lamuhla", "1": "Kusasa", "-1": "Izolo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Ihola", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Ihola", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Umuzuzu", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Umuzuzu", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Isekendi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Isekendi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "nds", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "nds-NL", "parentLocale": "nds" }, { "locale": "ne", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n;
        if (ord)
            return ((t0 && n >= 1 && n <= 4)) ? 'one' : 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "वर्ष", "relative": { "0": "यो वर्ष", "1": "आगामी वर्ष", "-1": "गत वर्ष" }, "relativeTime": { "future": { "one": "{0} वर्षमा", "other": "{0} वर्षमा" }, "past": { "one": "{0} वर्ष अघि", "other": "{0} वर्ष अघि" } } }, "year-short": { "displayName": "वर्ष", "relative": { "0": "यो वर्ष", "1": "आगामी वर्ष", "-1": "गत वर्ष" }, "relativeTime": { "future": { "one": "{0} वर्षमा", "other": "{0} वर्षमा" }, "past": { "one": "{0} वर्ष अघि", "other": "{0} वर्ष अघि" } } }, "month": { "displayName": "महिना", "relative": { "0": "यो महिना", "1": "अर्को महिना", "-1": "गत महिना" }, "relativeTime": { "future": { "one": "{0} महिनामा", "other": "{0} महिनामा" }, "past": { "one": "{0} महिना पहिले", "other": "{0} महिना पहिले" } } }, "month-short": { "displayName": "महिना", "relative": { "0": "यो महिना", "1": "अर्को महिना", "-1": "गत महिना" }, "relativeTime": { "future": { "one": "{0} महिनामा", "other": "{0} महिनामा" }, "past": { "one": "{0} महिना पहिले", "other": "{0} महिना पहिले" } } }, "week": { "displayName": "हप्ता", "relativePeriod": "{0}को हप्ता", "relative": { "0": "यो हप्ता", "1": "आउने हप्ता", "-1": "गत हप्ता" }, "relativeTime": { "future": { "one": "{0} हप्तामा", "other": "{0} हप्तामा" }, "past": { "one": "{0} हप्ता पहिले", "other": "{0} हप्ता पहिले" } } }, "week-short": { "displayName": "हप्ता", "relativePeriod": "{0} को हप्ता", "relative": { "0": "यो हप्ता", "1": "आउने हप्ता", "-1": "गत हप्ता" }, "relativeTime": { "future": { "one": "{0} हप्तामा", "other": "{0} हप्तामा" }, "past": { "one": "{0} हप्ता पहिले", "other": "{0} हप्ता पहिले" } } }, "day": { "displayName": "बार", "relative": { "0": "आज", "1": "भोलि", "2": "पर्सि", "-2": "अस्ति", "-1": "हिजो" }, "relativeTime": { "future": { "one": "{0} दिनमा", "other": "{0} दिनमा" }, "past": { "one": "{0} दिन पहिले", "other": "{0} दिन पहिले" } } }, "day-short": { "displayName": "बार", "relative": { "0": "आज", "1": "भोलि", "2": "पर्सि", "-2": "अस्ति", "-1": "हिजो" }, "relativeTime": { "future": { "one": "{0} दिनमा", "other": "{0} दिनमा" }, "past": { "one": "{0} दिन पहिले", "other": "{0} दिन पहिले" } } }, "hour": { "displayName": "घण्टा", "relative": { "0": "यस घडीमा" }, "relativeTime": { "future": { "one": "{0} घण्टामा", "other": "{0} घण्टामा" }, "past": { "one": "{0} घण्टा पहिले", "other": "{0} घण्टा पहिले" } } }, "hour-short": { "displayName": "घण्टा", "relative": { "0": "यस घडीमा" }, "relativeTime": { "future": { "one": "{0} घण्टामा", "other": "{0} घण्टामा" }, "past": { "one": "{0} घण्टा पहिले", "other": "{0} घण्टा पहिले" } } }, "minute": { "displayName": "मिनेट", "relative": { "0": "यही मिनेटमा" }, "relativeTime": { "future": { "one": "{0} मिनेटमा", "other": "{0} मिनेटमा" }, "past": { "one": "{0} मिनेट पहिले", "other": "{0} मिनेट पहिले" } } }, "minute-short": { "displayName": "मिनेट", "relative": { "0": "यही मिनेटमा" }, "relativeTime": { "future": { "one": "{0} मिनेटमा", "other": "{0} मिनेटमा" }, "past": { "one": "{0} मिनेट पहिले", "other": "{0} मिनेट पहिले" } } }, "second": { "displayName": "सेकेन्ड", "relative": { "0": "अहिले" }, "relativeTime": { "future": { "one": "{0} सेकेन्डमा", "other": "{0} सेकेन्डमा" }, "past": { "one": "{0} सेकेन्ड पहिले", "other": "{0} सेकेन्ड पहिले" } } }, "second-short": { "displayName": "सेकेन्ड", "relative": { "0": "अहिले" }, "relativeTime": { "future": { "one": "{0} सेकेन्डमा", "other": "{0} सेकेन्डमा" }, "past": { "one": "{0} सेकेन्ड पहिले", "other": "{0} सेकेन्ड पहिले" } } } } }, { "locale": "ne-IN", "parentLocale": "ne" }, { "locale": "nl", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1];
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "jaar", "relative": { "0": "dit jaar", "1": "volgend jaar", "-1": "vorig jaar" }, "relativeTime": { "future": { "one": "over {0} jaar", "other": "over {0} jaar" }, "past": { "one": "{0} jaar geleden", "other": "{0} jaar geleden" } } }, "year-short": { "displayName": "jr", "relative": { "0": "dit jaar", "1": "volgend jaar", "-1": "vorig jaar" }, "relativeTime": { "future": { "one": "over {0} jaar", "other": "over {0} jaar" }, "past": { "one": "{0} jaar geleden", "other": "{0} jaar geleden" } } }, "month": { "displayName": "maand", "relative": { "0": "deze maand", "1": "volgende maand", "-1": "vorige maand" }, "relativeTime": { "future": { "one": "over {0} maand", "other": "over {0} maanden" }, "past": { "one": "{0} maand geleden", "other": "{0} maanden geleden" } } }, "month-short": { "displayName": "mnd", "relative": { "0": "deze maand", "1": "volgende maand", "-1": "vorige maand" }, "relativeTime": { "future": { "one": "over {0} maand", "other": "over {0} maanden" }, "past": { "one": "{0} maand geleden", "other": "{0} maanden geleden" } } }, "week": { "displayName": "week", "relativePeriod": "de week van {0}", "relative": { "0": "deze week", "1": "volgende week", "-1": "vorige week" }, "relativeTime": { "future": { "one": "over {0} week", "other": "over {0} weken" }, "past": { "one": "{0} week geleden", "other": "{0} weken geleden" } } }, "week-short": { "displayName": "wk", "relativePeriod": "de week van {0}", "relative": { "0": "deze week", "1": "volgende week", "-1": "vorige week" }, "relativeTime": { "future": { "one": "over {0} week", "other": "over {0} weken" }, "past": { "one": "{0} week geleden", "other": "{0} weken geleden" } } }, "day": { "displayName": "dag", "relative": { "0": "vandaag", "1": "morgen", "2": "overmorgen", "-2": "eergisteren", "-1": "gisteren" }, "relativeTime": { "future": { "one": "over {0} dag", "other": "over {0} dagen" }, "past": { "one": "{0} dag geleden", "other": "{0} dagen geleden" } } }, "day-short": { "displayName": "dag", "relative": { "0": "vandaag", "1": "morgen", "2": "overmorgen", "-2": "eergisteren", "-1": "gisteren" }, "relativeTime": { "future": { "one": "over {0} dag", "other": "over {0} dgn" }, "past": { "one": "{0} dag geleden", "other": "{0} dgn geleden" } } }, "hour": { "displayName": "uur", "relative": { "0": "binnen een uur" }, "relativeTime": { "future": { "one": "over {0} uur", "other": "over {0} uur" }, "past": { "one": "{0} uur geleden", "other": "{0} uur geleden" } } }, "hour-short": { "displayName": "uur", "relative": { "0": "binnen een uur" }, "relativeTime": { "future": { "one": "over {0} uur", "other": "over {0} uur" }, "past": { "one": "{0} uur geleden", "other": "{0} uur geleden" } } }, "minute": { "displayName": "minuut", "relative": { "0": "binnen een minuut" }, "relativeTime": { "future": { "one": "over {0} minuut", "other": "over {0} minuten" }, "past": { "one": "{0} minuut geleden", "other": "{0} minuten geleden" } } }, "minute-short": { "displayName": "min", "relative": { "0": "binnen een minuut" }, "relativeTime": { "future": { "one": "over {0} min.", "other": "over {0} min." }, "past": { "one": "{0} min. geleden", "other": "{0} min. geleden" } } }, "second": { "displayName": "seconde", "relative": { "0": "nu" }, "relativeTime": { "future": { "one": "over {0} seconde", "other": "over {0} seconden" }, "past": { "one": "{0} seconde geleden", "other": "{0} seconden geleden" } } }, "second-short": { "displayName": "sec", "relative": { "0": "nu" }, "relativeTime": { "future": { "one": "over {0} sec.", "other": "over {0} sec." }, "past": { "one": "{0} sec. geleden", "other": "{0} sec. geleden" } } } } }, { "locale": "nl-AW", "parentLocale": "nl" }, { "locale": "nl-BE", "parentLocale": "nl" }, { "locale": "nl-BQ", "parentLocale": "nl" }, { "locale": "nl-CW", "parentLocale": "nl" }, { "locale": "nl-SR", "parentLocale": "nl" }, { "locale": "nl-SX", "parentLocale": "nl" }, { "locale": "nmg", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Mbvu", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Mbvu", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Ngwɛn", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Ngwɛn", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Sɔ́ndɔ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Sɔ́ndɔ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Duö", "relative": { "0": "Dɔl", "1": "Namáná", "-1": "Nakugú" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Duö", "relative": { "0": "Dɔl", "1": "Namáná", "-1": "Nakugú" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Wulā", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Wulā", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Mpálâ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Mpálâ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Nyiɛl", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Nyiɛl", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "nn", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "år", "relative": { "0": "i år", "1": "neste år", "-1": "i fjor" }, "relativeTime": { "future": { "one": "om {0} år", "other": "om {0} år" }, "past": { "one": "for {0} år sidan", "other": "for {0} år sidan" } } }, "year-short": { "displayName": "år", "relative": { "0": "i år", "1": "neste år", "-1": "i fjor" }, "relativeTime": { "future": { "one": "om {0} år", "other": "om {0} år" }, "past": { "one": "for {0} år sidan", "other": "for {0} år sidan" } } }, "month": { "displayName": "månad", "relative": { "0": "denne månaden", "1": "neste månad", "-1": "førre månad" }, "relativeTime": { "future": { "one": "om {0} månad", "other": "om {0} månadar" }, "past": { "one": "for {0} månad sidan", "other": "for {0} månadar sidan" } } }, "month-short": { "displayName": "mnd.", "relative": { "0": "denne månaden", "1": "neste månad", "-1": "førre månad" }, "relativeTime": { "future": { "one": "om {0} md.", "other": "om {0} md." }, "past": { "one": "for {0} md. sidan", "other": "for {0} md. sidan" } } }, "week": { "displayName": "veke", "relativePeriod": "veka som inneheld {0}", "relative": { "0": "denne veka", "1": "neste veke", "-1": "førre veke" }, "relativeTime": { "future": { "one": "om {0} veke", "other": "om {0} veker" }, "past": { "one": "for {0} veke sidan", "other": "for {0} veker sidan" } } }, "week-short": { "displayName": "veke", "relativePeriod": "veka med {0}", "relative": { "0": "denne veka", "1": "neste veke", "-1": "førre veke" }, "relativeTime": { "future": { "one": "om {0} v.", "other": "om {0} v." }, "past": { "one": "for {0} v. sidan", "other": "for {0} v. sidan" } } }, "day": { "displayName": "dag", "relative": { "0": "i dag", "1": "i morgon", "2": "i overmorgon", "-2": "i førgår", "-1": "i går" }, "relativeTime": { "future": { "one": "om {0} døgn", "other": "om {0} døgn" }, "past": { "one": "for {0} døgn sidan", "other": "for {0} døgn sidan" } } }, "day-short": { "displayName": "dag", "relative": { "0": "i dag", "1": "i morgon", "2": "i overmorgon", "-2": "i førgår", "-1": "i går" }, "relativeTime": { "future": { "one": "om {0} d.", "other": "om {0} d." }, "past": { "one": "for {0} d. sidan", "other": "for {0} d. sidan" } } }, "hour": { "displayName": "time", "relative": { "0": "denne timen" }, "relativeTime": { "future": { "one": "om {0} time", "other": "om {0} timar" }, "past": { "one": "for {0} time sidan", "other": "for {0} timar sidan" } } }, "hour-short": { "displayName": "t", "relative": { "0": "denne timen" }, "relativeTime": { "future": { "one": "om {0} t", "other": "om {0} t" }, "past": { "one": "for {0} t sidan", "other": "for {0} t sidan" } } }, "minute": { "displayName": "minutt", "relative": { "0": "dette minuttet" }, "relativeTime": { "future": { "one": "om {0} minutt", "other": "om {0} minutt" }, "past": { "one": "for {0} minutt sidan", "other": "for {0} minutt sidan" } } }, "minute-short": { "displayName": "min", "relative": { "0": "dette minuttet" }, "relativeTime": { "future": { "one": "om {0} min", "other": "om {0} min" }, "past": { "one": "for {0} min sidan", "other": "for {0} min sidan" } } }, "second": { "displayName": "sekund", "relative": { "0": "no" }, "relativeTime": { "future": { "one": "om {0} sekund", "other": "om {0} sekund" }, "past": { "one": "for {0} sekund sidan", "other": "for {0} sekund sidan" } } }, "second-short": { "displayName": "sek", "relative": { "0": "no" }, "relativeTime": { "future": { "one": "om {0} sek", "other": "om {0} sek" }, "past": { "one": "for {0} sek sidan", "other": "for {0} sek sidan" } } } } }, { "locale": "nnh", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ngùʼ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "ngùʼ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "lyɛ̌ʼ", "relative": { "0": "lyɛ̌ʼɔɔn", "1": "jǔɔ gẅie à ne ntóo", "-1": "jǔɔ gẅie à ka tɔ̌g" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "lyɛ̌ʼ", "relative": { "0": "lyɛ̌ʼɔɔn", "1": "jǔɔ gẅie à ne ntóo", "-1": "jǔɔ gẅie à ka tɔ̌g" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "fʉ̀ʼ nèm", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "fʉ̀ʼ nèm", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "no", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "nqo", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "nr", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "nso", "pluralRuleFunction": function (n) {
        return ((n == 0
            || n == 1)) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "nus", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Ruɔ̱n", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Ruɔ̱n", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Pay", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Pay", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Jiɔk", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Jiɔk", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Cäŋ", "relative": { "0": "Walɛ", "1": "Ruun", "-1": "Pan" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Cäŋ", "relative": { "0": "Walɛ", "1": "Ruun", "-1": "Pan" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Thaak", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Thaak", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minit", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minit", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Thɛkɛni", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Thɛkɛni", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ny", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "nyn", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Omwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Omwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Omwezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Omwezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Esande", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Esande", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Eizooba", "relative": { "0": "Erizooba", "1": "Nyenkyakare", "-1": "Nyomwabazyo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Eizooba", "relative": { "0": "Erizooba", "1": "Nyenkyakare", "-1": "Nyomwabazyo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Shaaha", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Shaaha", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Edakiika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Edakiika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Obucweka\u002FEsekendi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Obucweka\u002FEsekendi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "om", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "om-KE", "parentLocale": "om" }, { "locale": "or", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n;
        if (ord)
            return ((n == 1 || n == 5
                || (t0 && n >= 7 && n <= 9))) ? 'one'
                : ((n == 2
                    || n == 3)) ? 'two'
                    : (n == 4) ? 'few'
                        : (n == 6) ? 'many'
                            : 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ବର୍ଷ", "relative": { "0": "ଏହି ବର୍ଷ", "1": "ଆଗାମୀ ବର୍ଷ", "-1": "ଗତ ବର୍ଷ" }, "relativeTime": { "future": { "one": "{0} ବର୍ଷରେ", "other": "{0} ବର୍ଷରେ" }, "past": { "one": "{0} ବର୍ଷ ପୂର୍ବେ", "other": "{0} ବର୍ଷ ପୂର୍ବେ" } } }, "year-short": { "displayName": "ବ.", "relative": { "0": "ଏହି ବର୍ଷ", "1": "ଆଗାମୀ ବର୍ଷ", "-1": "ଗତ ବର୍ଷ" }, "relativeTime": { "future": { "one": "{0} ବ. ରେ", "other": "{0} ବ. ରେ" }, "past": { "one": "{0} ବ. ପୂର୍ବେ", "other": "{0} ବ. ପୂର୍ବେ" } } }, "month": { "displayName": "ମାସ", "relative": { "0": "ଏହି ମାସ", "1": "ଆଗାମୀ ମାସ", "-1": "ଗତ ମାସ" }, "relativeTime": { "future": { "one": "{0} ମାସରେ", "other": "{0} ମାସରେ" }, "past": { "one": "{0} ମାସ ପୂର୍ବେ", "other": "{0} ମାସ ପୂର୍ବେ" } } }, "month-short": { "displayName": "ମା.", "relative": { "0": "ଏହି ମାସ", "1": "ଆଗାମୀ ମାସ", "-1": "ଗତ ମାସ" }, "relativeTime": { "future": { "one": "{0} ମା. ରେ", "other": "{0} ମା. ରେ" }, "past": { "one": "{0} ମା. ପୂର୍ବେ", "other": "{0} ମା. ପୂର୍ବେ" } } }, "week": { "displayName": "ସପ୍ତାହ", "relativePeriod": "{0} ର ସପ୍ତାହ", "relative": { "0": "ଏହି ସପ୍ତାହ", "1": "ଆଗାମୀ ସପ୍ତାହ", "-1": "ଗତ ସପ୍ତାହ" }, "relativeTime": { "future": { "one": "{0} ସପ୍ତାହରେ", "other": "{0} ସପ୍ତାହରେ" }, "past": { "one": "{0} ସପ୍ତାହରେ", "other": "{0} ସପ୍ତାହ ପୂର୍ବେ" } } }, "week-short": { "displayName": "ସ.", "relativePeriod": "{0} ର ସପ୍ତାହ", "relative": { "0": "ଏହି ସପ୍ତାହ", "1": "ଆଗାମୀ ସପ୍ତାହ", "-1": "ଗତ ସପ୍ତାହ" }, "relativeTime": { "future": { "one": "{0} ସପ୍ତା. ରେ", "other": "{0} ସପ୍ତା. ରେ" }, "past": { "one": "{0} ସପ୍ତା. ପୂର୍ବେ", "other": "{0} ସପ୍ତା. ପୂର୍ବେ" } } }, "day": { "displayName": "ଦିନ", "relative": { "0": "ଆଜି", "1": "ଆସନ୍ତାକାଲି", "-1": "ଗତକାଲି" }, "relativeTime": { "future": { "one": "{0} ଦିନରେ", "other": "{0} ଦିନରେ" }, "past": { "one": "{0} ଦିନ ପୂର୍ବେ", "other": "{0} ଦିନ ପୂର୍ବେ" } } }, "day-short": { "displayName": "ଦିନ", "relative": { "0": "ଆଜି", "1": "ଆସନ୍ତାକାଲି", "-1": "ଗତକାଲି" }, "relativeTime": { "future": { "one": "{0} ଦିନରେ", "other": "{0} ଦିନରେ" }, "past": { "one": "{0} ଦିନ ପୂର୍ବେ", "other": "{0} ଦିନ ପୂର୍ବେ" } } }, "hour": { "displayName": "ଘଣ୍ଟା", "relative": { "0": "ଏହି ଘଣ୍ଟା" }, "relativeTime": { "future": { "one": "{0} ଘଣ୍ଟାରେ", "other": "{0} ଘଣ୍ଟାରେ" }, "past": { "one": "{0} ଘଣ୍ଟା ପୂର୍ବେ", "other": "{0} ଘଣ୍ଟା ପୂର୍ବେ" } } }, "hour-short": { "displayName": "ଘ.", "relative": { "0": "ଏହି ଘଣ୍ଟା" }, "relativeTime": { "future": { "one": "{0} ଘ. ରେ", "other": "{0} ଘ. ରେ" }, "past": { "one": "{0} ଘ. ପୂର୍ବେ", "other": "{0} ଘ. ପୂର୍ବେ" } } }, "minute": { "displayName": "ମିନିଟ୍", "relative": { "0": "ଏହି ମିନିଟ୍" }, "relativeTime": { "future": { "one": "{0} ମିନିଟ୍‌‌ରେ", "other": "{0} ମିନିଟ୍‌‌ରେ" }, "past": { "one": "{0} ମିନିଟ୍ ପୂର୍ବେ", "other": "{0} ମିନିଟ୍ ପୂର୍ବେ" } } }, "minute-short": { "displayName": "ମି.", "relative": { "0": "ଏହି ମିନିଟ୍" }, "relativeTime": { "future": { "one": "{0} ମି. ରେ", "other": "{0} ମି. ରେ" }, "past": { "one": "{0} ମି. ପୂର୍ବେ", "other": "{0} ମି. ପୂର୍ବେ" } } }, "second": { "displayName": "ସେକେଣ୍ଡ୍", "relative": { "0": "ବର୍ତ୍ତମାନ" }, "relativeTime": { "future": { "one": "{0} ସେକେଣ୍ଡରେ", "other": "{0} ସେକେଣ୍ଡରେ" }, "past": { "one": "{0} ସେକେଣ୍ଡ ପୂର୍ବେ", "other": "{0} ସେକେଣ୍ଡ ପୂର୍ବେ" } } }, "second-short": { "displayName": "ସେକେଣ୍ଡ୍", "relative": { "0": "ବର୍ତ୍ତମାନ" }, "relativeTime": { "future": { "one": "{0} ସେ. ରେ", "other": "{0} ସେ. ରେ" }, "past": { "one": "{0} ସେ. ପୂର୍ବେ", "other": "{0} ସେ. ପୂର୍ବେ" } } } } }, { "locale": "os", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Аз", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Аз", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Мӕй", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Мӕй", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Къуыри", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Къуыри", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Бон", "relative": { "0": "Абон", "1": "Сом", "2": "Иннӕбон", "-2": "Ӕндӕрӕбон", "-1": "Знон" }, "relativeTime": { "future": { "one": "{0} боны фӕстӕ", "other": "{0} боны фӕстӕ" }, "past": { "one": "{0} бон раздӕр", "other": "{0} боны размӕ" } } }, "day-short": { "displayName": "Бон", "relative": { "0": "Абон", "1": "Сом", "2": "Иннӕбон", "-2": "Ӕндӕрӕбон", "-1": "Знон" }, "relativeTime": { "future": { "one": "{0} боны фӕстӕ", "other": "{0} боны фӕстӕ" }, "past": { "one": "{0} бон раздӕр", "other": "{0} боны размӕ" } } }, "hour": { "displayName": "Сахат", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "{0} сахаты фӕстӕ", "other": "{0} сахаты фӕстӕ" }, "past": { "one": "{0} сахаты размӕ", "other": "{0} сахаты размӕ" } } }, "hour-short": { "displayName": "Сахат", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "{0} сахаты фӕстӕ", "other": "{0} сахаты фӕстӕ" }, "past": { "one": "{0} сахаты размӕ", "other": "{0} сахаты размӕ" } } }, "minute": { "displayName": "Минут", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Минут", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Секунд", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Секунд", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "os-RU", "parentLocale": "os" }, { "locale": "pa", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return ((n == 0
            || n == 1)) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ਸਾਲ", "relative": { "0": "ਇਹ ਸਾਲ", "1": "ਅਗਲਾ ਸਾਲ", "-1": "ਪਿਛਲਾ ਸਾਲ" }, "relativeTime": { "future": { "one": "{0} ਸਾਲ ਵਿੱਚ", "other": "{0} ਸਾਲਾਂ ਵਿੱਚ" }, "past": { "one": "{0} ਸਾਲ ਪਹਿਲਾਂ", "other": "{0} ਸਾਲ ਪਹਿਲਾਂ" } } }, "year-short": { "displayName": "ਸਾਲ", "relative": { "0": "ਇਹ ਸਾਲ", "1": "ਅਗਲਾ ਸਾਲ", "-1": "ਪਿਛਲਾ ਸਾਲ" }, "relativeTime": { "future": { "one": "{0} ਸਾਲ ਵਿੱਚ", "other": "{0} ਸਾਲਾਂ ਵਿੱਚ" }, "past": { "one": "{0} ਸਾਲ ਪਹਿਲਾਂ", "other": "{0} ਸਾਲ ਪਹਿਲਾਂ" } } }, "month": { "displayName": "ਮਹੀਨਾ", "relative": { "0": "ਇਹ ਮਹੀਨਾ", "1": "ਅਗਲਾ ਮਹੀਨਾ", "-1": "ਪਿਛਲਾ ਮਹੀਨਾ" }, "relativeTime": { "future": { "one": "{0} ਮਹੀਨੇ ਵਿੱਚ", "other": "{0} ਮਹੀਨਿਆਂ ਵਿੱਚ" }, "past": { "one": "{0} ਮਹੀਨਾ ਪਹਿਲਾਂ", "other": "{0} ਮਹੀਨੇ ਪਹਿਲਾਂ" } } }, "month-short": { "displayName": "ਮਹੀਨਾ", "relative": { "0": "ਇਹ ਮਹੀਨਾ", "1": "ਅਗਲਾ ਮਹੀਨਾ", "-1": "ਪਿਛਲਾ ਮਹੀਨਾ" }, "relativeTime": { "future": { "one": "{0} ਮਹੀਨੇ ਵਿੱਚ", "other": "{0} ਮਹੀਨਿਆਂ ਵਿੱਚ" }, "past": { "one": "{0} ਮਹੀਨਾ ਪਹਿਲਾਂ", "other": "{0} ਮਹੀਨੇ ਪਹਿਲਾਂ" } } }, "week": { "displayName": "ਹਫ਼ਤਾ", "relativePeriod": "{0} ਦਾ ਹਫ਼ਤਾ", "relative": { "0": "ਇਹ ਹਫ਼ਤਾ", "1": "ਅਗਲਾ ਹਫ਼ਤਾ", "-1": "ਪਿਛਲਾ ਹਫ਼ਤਾ" }, "relativeTime": { "future": { "one": "{0} ਹਫ਼ਤੇ ਵਿੱਚ", "other": "{0} ਹਫ਼ਤਿਆਂ ਵਿੱਚ" }, "past": { "one": "{0} ਹਫ਼ਤਾ ਪਹਿਲਾਂ", "other": "{0} ਹਫ਼ਤੇ ਪਹਿਲਾਂ" } } }, "week-short": { "displayName": "ਹਫ਼ਤਾ", "relativePeriod": "{0} ਦਾ ਹਫ਼ਤਾ", "relative": { "0": "ਇਹ ਹਫ਼ਤਾ", "1": "ਅਗਲਾ ਹਫ਼ਤਾ", "-1": "ਪਿਛਲਾ ਹਫ਼ਤਾ" }, "relativeTime": { "future": { "one": "{0} ਹਫ਼ਤੇ ਵਿੱਚ", "other": "{0} ਹਫ਼ਤਿਆਂ ਵਿੱਚ" }, "past": { "one": "{0} ਹਫ਼ਤਾ ਪਹਿਲਾਂ", "other": "{0} ਹਫ਼ਤੇ ਪਹਿਲਾਂ" } } }, "day": { "displayName": "ਦਿਨ", "relative": { "0": "ਅੱਜ", "1": "ਭਲਕੇ", "-1": "ਬੀਤਿਆ ਕੱਲ੍ਹ" }, "relativeTime": { "future": { "one": "{0} ਦਿਨ ਵਿੱਚ", "other": "{0} ਦਿਨਾਂ ਵਿੱਚ" }, "past": { "one": "{0} ਦਿਨ ਪਹਿਲਾਂ", "other": "{0} ਦਿਨ ਪਹਿਲਾਂ" } } }, "day-short": { "displayName": "ਦਿਨ", "relative": { "0": "ਅੱਜ", "1": "ਭਲਕੇ", "-1": "ਬੀਤਿਆ ਕੱਲ੍ਹ" }, "relativeTime": { "future": { "one": "{0} ਦਿਨ ਵਿੱਚ", "other": "{0} ਦਿਨਾਂ ਵਿੱਚ" }, "past": { "one": "{0} ਦਿਨ ਪਹਿਲਾਂ", "other": "{0} ਦਿਨ ਪਹਿਲਾਂ" } } }, "hour": { "displayName": "ਘੰਟਾ", "relative": { "0": "ਇਸ ਘੰਟੇ" }, "relativeTime": { "future": { "one": "{0} ਘੰਟੇ ਵਿੱਚ", "other": "{0} ਘੰਟਿਆਂ ਵਿੱਚ" }, "past": { "one": "{0} ਘੰਟਾ ਪਹਿਲਾਂ", "other": "{0} ਘੰਟੇ ਪਹਿਲਾਂ" } } }, "hour-short": { "displayName": "ਘੰਟਾ", "relative": { "0": "ਇਸ ਘੰਟੇ" }, "relativeTime": { "future": { "one": "{0} ਘੰਟੇ ਵਿੱਚ", "other": "{0} ਘੰਟਿਆਂ ਵਿੱਚ" }, "past": { "one": "{0} ਘੰਟਾ ਪਹਿਲਾਂ", "other": "{0} ਘੰਟੇ ਪਹਿਲਾਂ" } } }, "minute": { "displayName": "ਮਿੰਟ", "relative": { "0": "ਇਸ ਮਿੰਟ" }, "relativeTime": { "future": { "one": "{0} ਮਿੰਟ ਵਿੱਚ", "other": "{0} ਮਿੰਟਾਂ ਵਿੱਚ" }, "past": { "one": "{0} ਮਿੰਟ ਪਹਿਲਾਂ", "other": "{0} ਮਿੰਟ ਪਹਿਲਾਂ" } } }, "minute-short": { "displayName": "ਮਿੰਟ", "relative": { "0": "ਇਸ ਮਿੰਟ" }, "relativeTime": { "future": { "one": "{0} ਮਿੰਟ ਵਿੱਚ", "other": "{0} ਮਿੰਟਾਂ ਵਿੱਚ" }, "past": { "one": "{0} ਮਿੰਟ ਪਹਿਲਾਂ", "other": "{0} ਮਿੰਟ ਪਹਿਲਾਂ" } } }, "second": { "displayName": "ਸਕਿੰਟ", "relative": { "0": "ਹੁਣ" }, "relativeTime": { "future": { "one": "{0} ਸਕਿੰਟ ਵਿੱਚ", "other": "{0} ਸਕਿੰਟਾਂ ਵਿੱਚ" }, "past": { "one": "{0} ਸਕਿੰਟ ਪਹਿਲਾਂ", "other": "{0} ਸਕਿੰਟ ਪਹਿਲਾਂ" } } }, "second-short": { "displayName": "ਸਕਿੰਟ", "relative": { "0": "ਹੁਣ" }, "relativeTime": { "future": { "one": "{0} ਸਕਿੰਟ ਵਿੱਚ", "other": "{0} ਸਕਿੰਟਾਂ ਵਿੱਚ" }, "past": { "one": "{0} ਸਕਿੰਟ ਪਹਿਲਾਂ", "other": "{0} ਸਕਿੰਟ ਪਹਿਲਾਂ" } } } } }, { "locale": "pa-Arab", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "ورھا", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "ورھا", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "مہينا", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "مہينا", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "ہفتہ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "ہفتہ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "دئن", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "دئن", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "گھنٹا", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "گھنٹا", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "منٹ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "منٹ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "pa-Guru", "parentLocale": "pa" }, { "locale": "pap", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "pl", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2);
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one'
            : (v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12
                || i100 > 14)) ? 'few'
                : (v0 && i != 1 && (i10 == 0 || i10 == 1)
                    || v0 && (i10 >= 5 && i10 <= 9)
                    || v0 && (i100 >= 12 && i100 <= 14)) ? 'many'
                    : 'other';
    }, "fields": { "year": { "displayName": "rok", "relative": { "0": "w tym roku", "1": "w przyszłym roku", "-1": "w zeszłym roku" }, "relativeTime": { "future": { "one": "za {0} rok", "few": "za {0} lata", "many": "za {0} lat", "other": "za {0} roku" }, "past": { "one": "{0} rok temu", "few": "{0} lata temu", "many": "{0} lat temu", "other": "{0} roku temu" } } }, "year-short": { "displayName": "r.", "relative": { "0": "w tym roku", "1": "w przyszłym roku", "-1": "w zeszłym roku" }, "relativeTime": { "future": { "one": "za {0} rok", "few": "za {0} lata", "many": "za {0} lat", "other": "za {0} roku" }, "past": { "one": "{0} rok temu", "few": "{0} lata temu", "many": "{0} lat temu", "other": "{0} roku temu" } } }, "month": { "displayName": "miesiąc", "relative": { "0": "w tym miesiącu", "1": "w przyszłym miesiącu", "-1": "w zeszłym miesiącu" }, "relativeTime": { "future": { "one": "za {0} miesiąc", "few": "za {0} miesiące", "many": "za {0} miesięcy", "other": "za {0} miesiąca" }, "past": { "one": "{0} miesiąc temu", "few": "{0} miesiące temu", "many": "{0} miesięcy temu", "other": "{0} miesiąca temu" } } }, "month-short": { "displayName": "mies.", "relative": { "0": "w tym miesiącu", "1": "w przyszłym miesiącu", "-1": "w zeszłym miesiącu" }, "relativeTime": { "future": { "one": "za {0} mies.", "few": "za {0} mies.", "many": "za {0} mies.", "other": "za {0} mies." }, "past": { "one": "{0} mies. temu", "few": "{0} mies. temu", "many": "{0} mies. temu", "other": "{0} mies. temu" } } }, "week": { "displayName": "tydzień", "relativePeriod": "tydzień {0}", "relative": { "0": "w tym tygodniu", "1": "w przyszłym tygodniu", "-1": "w zeszłym tygodniu" }, "relativeTime": { "future": { "one": "za {0} tydzień", "few": "za {0} tygodnie", "many": "za {0} tygodni", "other": "za {0} tygodnia" }, "past": { "one": "{0} tydzień temu", "few": "{0} tygodnie temu", "many": "{0} tygodni temu", "other": "{0} tygodnia temu" } } }, "week-short": { "displayName": "tydz.", "relativePeriod": "tydzień {0}", "relative": { "0": "w tym tygodniu", "1": "w przyszłym tygodniu", "-1": "w zeszłym tygodniu" }, "relativeTime": { "future": { "one": "za {0} tydz.", "few": "za {0} tyg.", "many": "za {0} tyg.", "other": "za {0} tyg." }, "past": { "one": "{0} tydz. temu", "few": "{0} tyg. temu", "many": "{0} tyg. temu", "other": "{0} tyg. temu" } } }, "day": { "displayName": "dzień", "relative": { "0": "dzisiaj", "1": "jutro", "2": "pojutrze", "-2": "przedwczoraj", "-1": "wczoraj" }, "relativeTime": { "future": { "one": "za {0} dzień", "few": "za {0} dni", "many": "za {0} dni", "other": "za {0} dnia" }, "past": { "one": "{0} dzień temu", "few": "{0} dni temu", "many": "{0} dni temu", "other": "{0} dnia temu" } } }, "day-short": { "displayName": "dzień", "relative": { "0": "dzisiaj", "1": "jutro", "2": "pojutrze", "-2": "przedwczoraj", "-1": "wczoraj" }, "relativeTime": { "future": { "one": "za {0} dzień", "few": "za {0} dni", "many": "za {0} dni", "other": "za {0} dnia" }, "past": { "one": "{0} dzień temu", "few": "{0} dni temu", "many": "{0} dni temu", "other": "{0} dnia temu" } } }, "hour": { "displayName": "godzina", "relative": { "0": "ta godzina" }, "relativeTime": { "future": { "one": "za {0} godzinę", "few": "za {0} godziny", "many": "za {0} godzin", "other": "za {0} godziny" }, "past": { "one": "{0} godzinę temu", "few": "{0} godziny temu", "many": "{0} godzin temu", "other": "{0} godziny temu" } } }, "hour-short": { "displayName": "godz.", "relative": { "0": "ta godzina" }, "relativeTime": { "future": { "one": "za {0} godz.", "few": "za {0} godz.", "many": "za {0} godz.", "other": "za {0} godz." }, "past": { "one": "{0} godz. temu", "few": "{0} godz. temu", "many": "{0} godz. temu", "other": "{0} godz. temu" } } }, "minute": { "displayName": "minuta", "relative": { "0": "ta minuta" }, "relativeTime": { "future": { "one": "za {0} minutę", "few": "za {0} minuty", "many": "za {0} minut", "other": "za {0} minuty" }, "past": { "one": "{0} minutę temu", "few": "{0} minuty temu", "many": "{0} minut temu", "other": "{0} minuty temu" } } }, "minute-short": { "displayName": "min", "relative": { "0": "ta minuta" }, "relativeTime": { "future": { "one": "za {0} min", "few": "za {0} min", "many": "za {0} min", "other": "za {0} min" }, "past": { "one": "{0} min temu", "few": "{0} min temu", "many": "{0} min temu", "other": "{0} min temu" } } }, "second": { "displayName": "sekunda", "relative": { "0": "teraz" }, "relativeTime": { "future": { "one": "za {0} sekundę", "few": "za {0} sekundy", "many": "za {0} sekund", "other": "za {0} sekundy" }, "past": { "one": "{0} sekundę temu", "few": "{0} sekundy temu", "many": "{0} sekund temu", "other": "{0} sekundy temu" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "teraz" }, "relativeTime": { "future": { "one": "za {0} sek.", "few": "za {0} sek.", "many": "za {0} sek.", "other": "za {0} sek." }, "past": { "one": "{0} sek. temu", "few": "{0} sek. temu", "many": "{0} sek. temu", "other": "{0} sek. temu" } } } } }, { "locale": "prg", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), f = s[1] || '', v = f.length, t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2), f100 = f.slice(-2), f10 = f.slice(-1);
        if (ord)
            return 'other';
        return (t0 && n10 == 0 || (n100 >= 11 && n100 <= 19)
            || v == 2 && (f100 >= 11 && f100 <= 19)) ? 'zero'
            : (n10 == 1 && n100 != 11 || v == 2 && f10 == 1 && f100 != 11
                || v != 2 && f10 == 1) ? 'one'
                : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ps", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "کال", "relative": { "0": "سږکال", "1": "بل کال", "-1": "پروسږکال" }, "relativeTime": { "future": { "one": "په {0} کال کې", "other": "په {0} کالونو کې" }, "past": { "one": "{0} کال مخکې", "other": "{0} کاله مخکې" } } }, "year-short": { "displayName": "کال", "relative": { "0": "سږکال", "1": "بل کال", "-1": "پروسږکال" }, "relativeTime": { "future": { "one": "په {0} کال کې", "other": "په {0} کالونو کې" }, "past": { "one": "{0} کال مخکې", "other": "{0} کاله مخکې" } } }, "month": { "displayName": "مياشت", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "+{0} m", "other": "+{0} m" }, "past": { "one": "-{0} m", "other": "-{0} m" } } }, "month-short": { "displayName": "مياشت", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "+{0} m", "other": "+{0} m" }, "past": { "one": "-{0} m", "other": "-{0} m" } } }, "week": { "displayName": "اونۍ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "+{0} w", "other": "+{0} w" }, "past": { "one": "-{0} w", "other": "-{0} w" } } }, "week-short": { "displayName": "اونۍ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "+{0} w", "other": "+{0} w" }, "past": { "one": "-{0} w", "other": "-{0} w" } } }, "day": { "displayName": "ورځ", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "+{0} d", "other": "+{0} d" }, "past": { "one": "-{0} d", "other": "-{0} d" } } }, "day-short": { "displayName": "ورځ", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "+{0} d", "other": "+{0} d" }, "past": { "one": "-{0} d", "other": "-{0} d" } } }, "hour": { "displayName": "ساعت", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "+{0} h", "other": "+{0} h" }, "past": { "one": "-{0} h", "other": "-{0} h" } } }, "hour-short": { "displayName": "ساعت", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "+{0} h", "other": "+{0} h" }, "past": { "one": "-{0} h", "other": "-{0} h" } } }, "minute": { "displayName": "دقيقه", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "+{0} min", "other": "+{0} min" }, "past": { "one": "-{0} min", "other": "-{0} min" } } }, "minute-short": { "displayName": "دقيقه", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "+{0} min", "other": "+{0} min" }, "past": { "one": "-{0} min", "other": "-{0} min" } } }, "second": { "displayName": "ثانيه", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "+{0} s", "other": "+{0} s" }, "past": { "one": "-{0} s", "other": "-{0} s" } } }, "second-short": { "displayName": "ثانيه", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "+{0} s", "other": "+{0} s" }, "past": { "one": "-{0} s", "other": "-{0} s" } } } } }, { "locale": "pt", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0];
        if (ord)
            return 'other';
        return ((i == 0
            || i == 1)) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ano", "relative": { "0": "este ano", "1": "próximo ano", "-1": "ano passado" }, "relativeTime": { "future": { "one": "em {0} ano", "other": "em {0} anos" }, "past": { "one": "há {0} ano", "other": "há {0} anos" } } }, "year-short": { "displayName": "ano", "relative": { "0": "este ano", "1": "próximo ano", "-1": "ano passado" }, "relativeTime": { "future": { "one": "em {0} ano", "other": "em {0} anos" }, "past": { "one": "há {0} ano", "other": "há {0} anos" } } }, "month": { "displayName": "mês", "relative": { "0": "este mês", "1": "próximo mês", "-1": "mês passado" }, "relativeTime": { "future": { "one": "em {0} mês", "other": "em {0} meses" }, "past": { "one": "há {0} mês", "other": "há {0} meses" } } }, "month-short": { "displayName": "mês", "relative": { "0": "este mês", "1": "próximo mês", "-1": "mês passado" }, "relativeTime": { "future": { "one": "em {0} mês", "other": "em {0} meses" }, "past": { "one": "há {0} mês", "other": "há {0} meses" } } }, "week": { "displayName": "semana", "relativePeriod": "a semana de {0}", "relative": { "0": "esta semana", "1": "próxima semana", "-1": "semana passada" }, "relativeTime": { "future": { "one": "em {0} semana", "other": "em {0} semanas" }, "past": { "one": "há {0} semana", "other": "há {0} semanas" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "a semana de {0}", "relative": { "0": "esta semana", "1": "próxima semana", "-1": "semana passada" }, "relativeTime": { "future": { "one": "em {0} sem.", "other": "em {0} sem." }, "past": { "one": "há {0} sem.", "other": "há {0} sem." } } }, "day": { "displayName": "dia", "relative": { "0": "hoje", "1": "amanhã", "2": "depois de amanhã", "-2": "anteontem", "-1": "ontem" }, "relativeTime": { "future": { "one": "em {0} dia", "other": "em {0} dias" }, "past": { "one": "há {0} dia", "other": "há {0} dias" } } }, "day-short": { "displayName": "dia", "relative": { "0": "hoje", "1": "amanhã", "2": "depois de amanhã", "-2": "anteontem", "-1": "ontem" }, "relativeTime": { "future": { "one": "em {0} dia", "other": "em {0} dias" }, "past": { "one": "há {0} dia", "other": "há {0} dias" } } }, "hour": { "displayName": "hora", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "em {0} hora", "other": "em {0} horas" }, "past": { "one": "há {0} hora", "other": "há {0} horas" } } }, "hour-short": { "displayName": "h", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "em {0} h", "other": "em {0} h" }, "past": { "one": "há {0} h", "other": "há {0} h" } } }, "minute": { "displayName": "minuto", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "em {0} minuto", "other": "em {0} minutos" }, "past": { "one": "há {0} minuto", "other": "há {0} minutos" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "em {0} min.", "other": "em {0} min." }, "past": { "one": "há {0} min.", "other": "há {0} min." } } }, "second": { "displayName": "segundo", "relative": { "0": "agora" }, "relativeTime": { "future": { "one": "em {0} segundo", "other": "em {0} segundos" }, "past": { "one": "há {0} segundo", "other": "há {0} segundos" } } }, "second-short": { "displayName": "seg.", "relative": { "0": "agora" }, "relativeTime": { "future": { "one": "em {0} seg.", "other": "em {0} seg." }, "past": { "one": "há {0} seg.", "other": "há {0} seg." } } } } }, { "locale": "pt-AO", "parentLocale": "pt-PT" }, { "locale": "pt-PT", "parentLocale": "pt", "pluralRuleFunction": function (n) {
        var s = String(n).split('.'), v0 = !s[1];
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ano", "relative": { "0": "este ano", "1": "próximo ano", "-1": "ano passado" }, "relativeTime": { "future": { "one": "dentro de {0} ano", "other": "dentro de {0} anos" }, "past": { "one": "há {0} ano", "other": "há {0} anos" } } }, "year-short": { "displayName": "ano", "relative": { "0": "este ano", "1": "próximo ano", "-1": "ano passado" }, "relativeTime": { "future": { "one": "dentro de {0} ano", "other": "dentro de {0} anos" }, "past": { "one": "há {0} ano", "other": "há {0} anos" } } }, "month": { "displayName": "mês", "relative": { "0": "este mês", "1": "próximo mês", "-1": "mês passado" }, "relativeTime": { "future": { "one": "dentro de {0} mês", "other": "dentro de {0} meses" }, "past": { "one": "há {0} mês", "other": "há {0} meses" } } }, "month-short": { "displayName": "mês", "relative": { "0": "este mês", "1": "próximo mês", "-1": "mês passado" }, "relativeTime": { "future": { "one": "dentro de {0} mês", "other": "dentro de {0} meses" }, "past": { "one": "há {0} mês", "other": "há {0} meses" } } }, "week": { "displayName": "semana", "relativePeriod": "a semana de {0}", "relative": { "0": "esta semana", "1": "próxima semana", "-1": "semana passada" }, "relativeTime": { "future": { "one": "dentro de {0} semana", "other": "dentro de {0} semanas" }, "past": { "one": "há {0} semana", "other": "há {0} semanas" } } }, "week-short": { "displayName": "sem.", "relativePeriod": "a sem. de {0}", "relative": { "0": "esta semana", "1": "próxima semana", "-1": "semana passada" }, "relativeTime": { "future": { "one": "dentro de {0} sem.", "other": "dentro de {0} sem." }, "past": { "one": "há {0} sem.", "other": "há {0} sem." } } }, "day": { "displayName": "dia", "relative": { "0": "hoje", "1": "amanhã", "2": "depois de amanhã", "-2": "anteontem", "-1": "ontem" }, "relativeTime": { "future": { "one": "dentro de {0} dia", "other": "dentro de {0} dias" }, "past": { "one": "há {0} dia", "other": "há {0} dias" } } }, "day-short": { "displayName": "dia", "relative": { "0": "hoje", "1": "amanhã", "2": "depois de amanhã", "-2": "anteontem", "-1": "ontem" }, "relativeTime": { "future": { "one": "dentro de {0} dia", "other": "dentro de {0} dias" }, "past": { "one": "há {0} dia", "other": "há {0} dias" } } }, "hour": { "displayName": "hora", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} hora", "other": "dentro de {0} horas" }, "past": { "one": "há {0} hora", "other": "há {0} horas" } } }, "hour-short": { "displayName": "h", "relative": { "0": "esta hora" }, "relativeTime": { "future": { "one": "dentro de {0} h", "other": "dentro de {0} h" }, "past": { "one": "há {0} h", "other": "há {0} h" } } }, "minute": { "displayName": "minuto", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} minuto", "other": "dentro de {0} minutos" }, "past": { "one": "há {0} minuto", "other": "há {0} minutos" } } }, "minute-short": { "displayName": "min", "relative": { "0": "este minuto" }, "relativeTime": { "future": { "one": "dentro de {0} min", "other": "dentro de {0} min" }, "past": { "one": "há {0} min", "other": "há {0} min" } } }, "second": { "displayName": "segundo", "relative": { "0": "agora" }, "relativeTime": { "future": { "one": "dentro de {0} segundo", "other": "dentro de {0} segundos" }, "past": { "one": "há {0} segundo", "other": "há {0} segundos" } } }, "second-short": { "displayName": "s", "relative": { "0": "agora" }, "relativeTime": { "future": { "one": "dentro de {0} s", "other": "dentro de {0} s" }, "past": { "one": "há {0} s", "other": "há {0} s" } } } } }, { "locale": "pt-CH", "parentLocale": "pt-PT" }, { "locale": "pt-CV", "parentLocale": "pt-PT" }, { "locale": "pt-GQ", "parentLocale": "pt-PT" }, { "locale": "pt-GW", "parentLocale": "pt-PT" }, { "locale": "pt-LU", "parentLocale": "pt-PT" }, { "locale": "pt-MO", "parentLocale": "pt-PT" }, { "locale": "pt-MZ", "parentLocale": "pt-PT" }, { "locale": "pt-ST", "parentLocale": "pt-PT" }, { "locale": "pt-TL", "parentLocale": "pt-PT" }, { "locale": "qu", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "kunan wata", "1": "hamuq wata", "-1": "qayna wata" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "kunan wata", "1": "hamuq wata", "-1": "qayna wata" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "kunan killa", "1": "hamuq killa", "-1": "qayna killa" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "kunan killa", "1": "hamuq killa", "-1": "qayna killa" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "{0} semanapi", "relative": { "0": "kunan semana", "1": "hamuq semana", "-1": "qayna semana" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "{0} semanapi", "relative": { "0": "kunan semana", "1": "hamuq semana", "-1": "qayna semana" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "kunan punchaw", "1": "paqarin", "-1": "qayna punchaw" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "kunan punchaw", "1": "paqarin", "-1": "qayna punchaw" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "kay hora" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "kay hora" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "kay minuto" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "kay minuto" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "qu-BO", "parentLocale": "qu" }, { "locale": "qu-EC", "parentLocale": "qu" }, { "locale": "rm", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "onn", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "onn", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "mais", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "mais", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "emna", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "emna", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Tag", "relative": { "0": "oz", "1": "damaun", "2": "puschmaun", "-2": "stersas", "-1": "ier" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Tag", "relative": { "0": "oz", "1": "damaun", "2": "puschmaun", "-2": "stersas", "-1": "ier" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "ura", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "ura", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "minuta", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "minuta", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "secunda", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "secunda", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "rn", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Umwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Umwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Ukwezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Ukwezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Indwi, Iyinga", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Indwi, Iyinga", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Umusi", "relative": { "0": "Uyu musi", "1": "Ejo (hazoza)", "-1": "Ejo (haheze)" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Umusi", "relative": { "0": "Uyu musi", "1": "Ejo (hazoza)", "-1": "Ejo (haheze)" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Isaha", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Isaha", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Umunota", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Umunota", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Isegonda", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Isegonda", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ro", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1], t0 = Number(s[0]) == n, n100 = t0 && s[0].slice(-2);
        if (ord)
            return (n == 1) ? 'one' : 'other';
        return (n == 1 && v0) ? 'one'
            : (!v0 || n == 0
                || n != 1 && (n100 >= 1 && n100 <= 19)) ? 'few'
                : 'other';
    }, "fields": { "year": { "displayName": "an", "relative": { "0": "anul acesta", "1": "anul viitor", "-1": "anul trecut" }, "relativeTime": { "future": { "one": "peste {0} an", "few": "peste {0} ani", "other": "peste {0} de ani" }, "past": { "one": "acum {0} an", "few": "acum {0} ani", "other": "acum {0} de ani" } } }, "year-short": { "displayName": "an", "relative": { "0": "anul acesta", "1": "anul viitor", "-1": "anul trecut" }, "relativeTime": { "future": { "one": "peste {0} an", "few": "peste {0} ani", "other": "peste {0} de ani" }, "past": { "one": "acum {0} an", "few": "acum {0} ani", "other": "acum {0} de ani" } } }, "month": { "displayName": "lună", "relative": { "0": "luna aceasta", "1": "luna viitoare", "-1": "luna trecută" }, "relativeTime": { "future": { "one": "peste {0} lună", "few": "peste {0} luni", "other": "peste {0} de luni" }, "past": { "one": "acum {0} lună", "few": "acum {0} luni", "other": "acum {0} de luni" } } }, "month-short": { "displayName": "lună", "relative": { "0": "luna aceasta", "1": "luna viitoare", "-1": "luna trecută" }, "relativeTime": { "future": { "one": "peste {0} lună", "few": "peste {0} luni", "other": "peste {0} luni" }, "past": { "one": "acum {0} lună", "few": "acum {0} luni", "other": "acum {0} luni" } } }, "week": { "displayName": "săptămână", "relativePeriod": "săptămâna cu {0}", "relative": { "0": "săptămâna aceasta", "1": "săptămâna viitoare", "-1": "săptămâna trecută" }, "relativeTime": { "future": { "one": "peste {0} săptămână", "few": "peste {0} săptămâni", "other": "peste {0} de săptămâni" }, "past": { "one": "acum {0} săptămână", "few": "acum {0} săptămâni", "other": "acum {0} de săptămâni" } } }, "week-short": { "displayName": "săpt.", "relativePeriod": "săpt. cu {0}", "relative": { "0": "săpt. aceasta", "1": "săpt. viitoare", "-1": "săpt. trecută" }, "relativeTime": { "future": { "one": "peste {0} săpt.", "few": "peste {0} săpt.", "other": "peste {0} săpt." }, "past": { "one": "acum {0} săpt.", "few": "acum {0} săpt.", "other": "acum {0} săpt." } } }, "day": { "displayName": "zi", "relative": { "0": "azi", "1": "mâine", "2": "poimâine", "-2": "alaltăieri", "-1": "ieri" }, "relativeTime": { "future": { "one": "peste {0} zi", "few": "peste {0} zile", "other": "peste {0} de zile" }, "past": { "one": "acum {0} zi", "few": "acum {0} zile", "other": "acum {0} de zile" } } }, "day-short": { "displayName": "zi", "relative": { "0": "azi", "1": "mâine", "2": "poimâine", "-2": "alaltăieri", "-1": "ieri" }, "relativeTime": { "future": { "one": "peste {0} zi", "few": "peste {0} zile", "other": "peste {0} de zile" }, "past": { "one": "acum {0} zi", "few": "acum {0} zile", "other": "acum {0} de zile" } } }, "hour": { "displayName": "oră", "relative": { "0": "ora aceasta" }, "relativeTime": { "future": { "one": "peste {0} oră", "few": "peste {0} ore", "other": "peste {0} de ore" }, "past": { "one": "acum {0} oră", "few": "acum {0} ore", "other": "acum {0} de ore" } } }, "hour-short": { "displayName": "h", "relative": { "0": "ora aceasta" }, "relativeTime": { "future": { "one": "peste {0} h", "few": "peste {0} h", "other": "peste {0} h" }, "past": { "one": "acum {0} h", "few": "acum {0} h", "other": "acum {0} h" } } }, "minute": { "displayName": "minut", "relative": { "0": "minutul acesta" }, "relativeTime": { "future": { "one": "peste {0} minut", "few": "peste {0} minute", "other": "peste {0} de minute" }, "past": { "one": "acum {0} minut", "few": "acum {0} minute", "other": "acum {0} de minute" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "minutul acesta" }, "relativeTime": { "future": { "one": "peste {0} min.", "few": "peste {0} min.", "other": "peste {0} min." }, "past": { "one": "acum {0} min.", "few": "acum {0} min.", "other": "acum {0} min." } } }, "second": { "displayName": "secundă", "relative": { "0": "acum" }, "relativeTime": { "future": { "one": "peste {0} secundă", "few": "peste {0} secunde", "other": "peste {0} de secunde" }, "past": { "one": "acum {0} secundă", "few": "acum {0} secunde", "other": "acum {0} de secunde" } } }, "second-short": { "displayName": "sec.", "relative": { "0": "acum" }, "relativeTime": { "future": { "one": "peste {0} sec.", "few": "peste {0} sec.", "other": "peste {0} sec." }, "past": { "one": "acum {0} sec.", "few": "acum {0} sec.", "other": "acum {0} sec." } } } } }, { "locale": "ro-MD", "parentLocale": "ro" }, { "locale": "rof", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Muaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Muaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mweri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mweri", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Iwiki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Iwiki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Mfiri", "relative": { "0": "Linu", "1": "Ng’ama", "-1": "Hiyo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Mfiri", "relative": { "0": "Linu", "1": "Ng’ama", "-1": "Hiyo" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Isaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Isaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Dakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ru", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2);
        if (ord)
            return 'other';
        return (v0 && i10 == 1 && i100 != 11) ? 'one'
            : (v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12
                || i100 > 14)) ? 'few'
                : (v0 && i10 == 0 || v0 && (i10 >= 5 && i10 <= 9)
                    || v0 && (i100 >= 11 && i100 <= 14)) ? 'many'
                    : 'other';
    }, "fields": { "year": { "displayName": "год", "relative": { "0": "в этом году", "1": "в следующем году", "-1": "в прошлом году" }, "relativeTime": { "future": { "one": "через {0} год", "few": "через {0} года", "many": "через {0} лет", "other": "через {0} года" }, "past": { "one": "{0} год назад", "few": "{0} года назад", "many": "{0} лет назад", "other": "{0} года назад" } } }, "year-short": { "displayName": "г.", "relative": { "0": "в этом г.", "1": "в след. г.", "-1": "в прошлом г." }, "relativeTime": { "future": { "one": "через {0} г.", "few": "через {0} г.", "many": "через {0} л.", "other": "через {0} г." }, "past": { "one": "{0} г. назад", "few": "{0} г. назад", "many": "{0} л. назад", "other": "{0} г. назад" } } }, "month": { "displayName": "месяц", "relative": { "0": "в этом месяце", "1": "в следующем месяце", "-1": "в прошлом месяце" }, "relativeTime": { "future": { "one": "через {0} месяц", "few": "через {0} месяца", "many": "через {0} месяцев", "other": "через {0} месяца" }, "past": { "one": "{0} месяц назад", "few": "{0} месяца назад", "many": "{0} месяцев назад", "other": "{0} месяца назад" } } }, "month-short": { "displayName": "мес.", "relative": { "0": "в этом мес.", "1": "в следующем мес.", "-1": "в прошлом мес." }, "relativeTime": { "future": { "one": "через {0} мес.", "few": "через {0} мес.", "many": "через {0} мес.", "other": "через {0} мес." }, "past": { "one": "{0} мес. назад", "few": "{0} мес. назад", "many": "{0} мес. назад", "other": "{0} мес. назад" } } }, "week": { "displayName": "неделя", "relativePeriod": "на неделе {0}", "relative": { "0": "на этой неделе", "1": "на следующей неделе", "-1": "на прошлой неделе" }, "relativeTime": { "future": { "one": "через {0} неделю", "few": "через {0} недели", "many": "через {0} недель", "other": "через {0} недели" }, "past": { "one": "{0} неделю назад", "few": "{0} недели назад", "many": "{0} недель назад", "other": "{0} недели назад" } } }, "week-short": { "displayName": "нед.", "relativePeriod": "на нед. {0}", "relative": { "0": "на этой нед.", "1": "на следующей нед.", "-1": "на прошлой нед." }, "relativeTime": { "future": { "one": "через {0} нед.", "few": "через {0} нед.", "many": "через {0} нед.", "other": "через {0} нед." }, "past": { "one": "{0} нед. назад", "few": "{0} нед. назад", "many": "{0} нед. назад", "other": "{0} нед. назад" } } }, "day": { "displayName": "день", "relative": { "0": "сегодня", "1": "завтра", "2": "послезавтра", "-2": "позавчера", "-1": "вчера" }, "relativeTime": { "future": { "one": "через {0} день", "few": "через {0} дня", "many": "через {0} дней", "other": "через {0} дня" }, "past": { "one": "{0} день назад", "few": "{0} дня назад", "many": "{0} дней назад", "other": "{0} дня назад" } } }, "day-short": { "displayName": "дн.", "relative": { "0": "сегодня", "1": "завтра", "2": "послезавтра", "-2": "позавчера", "-1": "вчера" }, "relativeTime": { "future": { "one": "через {0} дн.", "few": "через {0} дн.", "many": "через {0} дн.", "other": "через {0} дн." }, "past": { "one": "{0} дн. назад", "few": "{0} дн. назад", "many": "{0} дн. назад", "other": "{0} дн. назад" } } }, "hour": { "displayName": "час", "relative": { "0": "в этот час" }, "relativeTime": { "future": { "one": "через {0} час", "few": "через {0} часа", "many": "через {0} часов", "other": "через {0} часа" }, "past": { "one": "{0} час назад", "few": "{0} часа назад", "many": "{0} часов назад", "other": "{0} часа назад" } } }, "hour-short": { "displayName": "ч", "relative": { "0": "в этот час" }, "relativeTime": { "future": { "one": "через {0} ч.", "few": "через {0} ч.", "many": "через {0} ч.", "other": "через {0} ч." }, "past": { "one": "{0} ч. назад", "few": "{0} ч. назад", "many": "{0} ч. назад", "other": "{0} ч. назад" } } }, "minute": { "displayName": "минута", "relative": { "0": "в эту минуту" }, "relativeTime": { "future": { "one": "через {0} минуту", "few": "через {0} минуты", "many": "через {0} минут", "other": "через {0} минуты" }, "past": { "one": "{0} минуту назад", "few": "{0} минуты назад", "many": "{0} минут назад", "other": "{0} минуты назад" } } }, "minute-short": { "displayName": "мин.", "relative": { "0": "в эту минуту" }, "relativeTime": { "future": { "one": "через {0} мин.", "few": "через {0} мин.", "many": "через {0} мин.", "other": "через {0} мин." }, "past": { "one": "{0} мин. назад", "few": "{0} мин. назад", "many": "{0} мин. назад", "other": "{0} мин. назад" } } }, "second": { "displayName": "секунда", "relative": { "0": "сейчас" }, "relativeTime": { "future": { "one": "через {0} секунду", "few": "через {0} секунды", "many": "через {0} секунд", "other": "через {0} секунды" }, "past": { "one": "{0} секунду назад", "few": "{0} секунды назад", "many": "{0} секунд назад", "other": "{0} секунды назад" } } }, "second-short": { "displayName": "сек.", "relative": { "0": "сейчас" }, "relativeTime": { "future": { "one": "через {0} сек.", "few": "через {0} сек.", "many": "через {0} сек.", "other": "через {0} сек." }, "past": { "one": "{0} сек. назад", "few": "{0} сек. назад", "many": "{0} сек. назад", "other": "{0} сек. назад" } } } } }, { "locale": "ru-BY", "parentLocale": "ru" }, { "locale": "ru-KG", "parentLocale": "ru" }, { "locale": "ru-KZ", "parentLocale": "ru" }, { "locale": "ru-MD", "parentLocale": "ru" }, { "locale": "ru-UA", "parentLocale": "ru" }, { "locale": "rw", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "rwk", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Maka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Maka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mori", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mori", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Wiikyi", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Wiikyi", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Mfiri", "relative": { "0": "Inu", "1": "Ngama", "-1": "Ukou" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Mfiri", "relative": { "0": "Inu", "1": "Ngama", "-1": "Ukou" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Dakyika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Dakyika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "sah", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Сыл", "relative": { "0": "быйыл", "1": "эһиил", "-1": "Былырыын" }, "relativeTime": { "future": { "other": "{0} сылынан" }, "past": { "other": "{0} сыл ынараа өттүгэр" } } }, "year-short": { "displayName": "Сыл", "relative": { "0": "быйыл", "1": "эһиил", "-1": "Былырыын" }, "relativeTime": { "future": { "other": "{0} сылынан" }, "past": { "other": "{0} сыл ынараа өттүгэр" } } }, "month": { "displayName": "Ый", "relative": { "0": "бу ый", "1": "аныгыскы ый", "-1": "ааспыт ый" }, "relativeTime": { "future": { "other": "{0} ыйынан" }, "past": { "other": "{0} ый ынараа өттүгэр" } } }, "month-short": { "displayName": "Ый", "relative": { "0": "бу ый", "1": "аныгыскы ый", "-1": "ааспыт ый" }, "relativeTime": { "future": { "other": "{0} ыйынан" }, "past": { "other": "{0} ый ынараа өттүгэр" } } }, "week": { "displayName": "Нэдиэлэ", "relativePeriod": "the week of {0}", "relative": { "0": "бу нэдиэлэ", "1": "кэлэр нэдиэлэ", "-1": "ааспыт нэдиэлэ" }, "relativeTime": { "future": { "other": "{0} нэдиэлэннэн" }, "past": { "other": "{0} нэдиэлэ анараа өттүгэр" } } }, "week-short": { "displayName": "Нэдиэлэ", "relativePeriod": "the week of {0}", "relative": { "0": "бу нэдиэлэ", "1": "кэлэр нэдиэлэ", "-1": "ааспыт нэдиэлэ" }, "relativeTime": { "future": { "other": "{0} нэдиэлэннэн" }, "past": { "other": "{0} нэдиэлэ анараа өттүгэр" } } }, "day": { "displayName": "Күн", "relative": { "0": "Бүгүн", "1": "Сарсын", "2": "Өйүүн", "-2": "Иллэрээ күн", "-1": "Бэҕэһээ" }, "relativeTime": { "future": { "other": "{0} күнүнэн" }, "past": { "other": "{0} күн ынараа өттүгэр" } } }, "day-short": { "displayName": "Күн", "relative": { "0": "Бүгүн", "1": "Сарсын", "2": "Өйүүн", "-2": "Иллэрээ күн", "-1": "Бэҕэһээ" }, "relativeTime": { "future": { "other": "{0} күнүнэн" }, "past": { "other": "{0} күн ынараа өттүгэр" } } }, "hour": { "displayName": "Чаас", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "{0} чааһынан" }, "past": { "other": "{0} чаас ынараа өттүгэр" } } }, "hour-short": { "displayName": "Чаас", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "{0} чааһынан" }, "past": { "other": "{0} чаас ынараа өттүгэр" } } }, "minute": { "displayName": "Мүнүүтэ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "{0} мүнүүтэннэн" }, "past": { "other": "{0} мүнүүтэ ынараа өттүгэр" } } }, "minute-short": { "displayName": "Мүнүүтэ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "{0} мүнүүтэннэн" }, "past": { "other": "{0} мүнүүтэ ынараа өттүгэр" } } }, "second": { "displayName": "Сөкүүндэ", "relative": { "0": "билигин" }, "relativeTime": { "future": { "other": "{0} сөкүүндэннэн" }, "past": { "other": "{0} сөкүүндэ ынараа өттүгэр" } } }, "second-short": { "displayName": "Сөкүүндэ", "relative": { "0": "билигин" }, "relativeTime": { "future": { "other": "{0} сөкүүндэннэн" }, "past": { "other": "{0} сөк. анараа өттүгэр" } } } } }, { "locale": "saq", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Lari", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Lari", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Lapa", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Lapa", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Saipa napo", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Saipa napo", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Mpari", "relative": { "0": "Duo", "1": "Taisere", "-1": "Ng’ole" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Mpari", "relative": { "0": "Duo", "1": "Taisere", "-1": "Ng’ole" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Saai", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Saai", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Idakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Idakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Isekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Isekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "sbp", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Mwakha", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Mwakha", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mwesi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mwesi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Ilijuma", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Ilijuma", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Lusiku", "relative": { "0": "Ineng’uni", "1": "Pamulaawu", "-1": "Imehe" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Lusiku", "relative": { "0": "Ineng’uni", "1": "Pamulaawu", "-1": "Imehe" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Ilisala", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Ilisala", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Idakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Idakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Isekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Isekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "sc", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1];
        if (ord)
            return ((n == 11 || n == 8 || n == 80
                || n == 800)) ? 'many' : 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "scn", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1];
        if (ord)
            return ((n == 11 || n == 8 || n == 80
                || n == 800)) ? 'many' : 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "sd", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "سال", "relative": { "0": "پويون سال", "1": "پويون سال", "-1": "پويون سال" }, "relativeTime": { "future": { "one": "{0} سالن ۾", "other": "{0} سالن ۾" }, "past": { "one": "{0} سال پهرين", "other": "{0} سال پهرين" } } }, "year-short": { "displayName": "سال", "relative": { "0": "پويون سال", "1": "پويون سال", "-1": "پويون سال" }, "relativeTime": { "future": { "one": "{0} سالن ۾", "other": "{0} سالن ۾" }, "past": { "one": "{0} سال پهرين", "other": "{0} سال پهرين" } } }, "month": { "displayName": "مهينو", "relative": { "0": "هن مهيني", "1": "اڳين مهيني", "-1": "پوئين مهيني" }, "relativeTime": { "future": { "one": "{0} مهينن ۾", "other": "{0} مهينن ۾" }, "past": { "one": "{0} مهينا پهرين", "other": "{0} مهينا پهرين" } } }, "month-short": { "displayName": "مهينو", "relative": { "0": "هن مهيني", "1": "اڳين مهيني", "-1": "پوئين مهيني" }, "relativeTime": { "future": { "one": "{0} مهينن ۾", "other": "{0} مهينن ۾" }, "past": { "one": "{0} مهينا پهرين", "other": "{0} مهينا پهرين" } } }, "week": { "displayName": "هفتو", "relativePeriod": "{0} جي هفتي", "relative": { "0": "هن هفتي", "1": "اڳين هفتي", "-1": "پوئين هفتي" }, "relativeTime": { "future": { "one": "{0} هفتن ۾", "other": "{0} هفتن ۾" }, "past": { "one": "{0} هفتا پهرين", "other": "{0} هفتا پهرين" } } }, "week-short": { "displayName": "هفتو", "relativePeriod": "{0} جي هفتي", "relative": { "0": "هن هفتي", "1": "اڳين هفتي", "-1": "پوئين هفتي" }, "relativeTime": { "future": { "one": "{0} هفتن ۾", "other": "{0} هفتن ۾" }, "past": { "one": "{0} هفتا پهرين", "other": "{0} هفتا پهرين" } } }, "day": { "displayName": "ڏينهن", "relative": { "0": "اڄ", "1": "سڀاڻي", "-1": "ڪل" }, "relativeTime": { "future": { "one": "{0} ڏينهن ۾", "other": "{0} ڏينهن ۾" }, "past": { "one": "{0} ڏينهن پهرين", "other": "{0} ڏينهن پهرين" } } }, "day-short": { "displayName": "ڏينهن", "relative": { "0": "اڄ", "1": "سڀاڻي", "-1": "ڪل" }, "relativeTime": { "future": { "one": "{0} ڏينهن ۾", "other": "{0} ڏينهن ۾" }, "past": { "one": "{0} ڏينهن پهرين", "other": "{0} ڏينهن پهرين" } } }, "hour": { "displayName": "ڪلاڪ", "relative": { "0": "هن ڪلڪ" }, "relativeTime": { "future": { "one": "{0} ڪلاڪ ۾", "other": "{0} ڪلاڪ ۾" }, "past": { "one": "{0} ڪلاڪ پهرين", "other": "{0} ڪلاڪ پهرين" } } }, "hour-short": { "displayName": "ڪلاڪ", "relative": { "0": "هن ڪلڪ" }, "relativeTime": { "future": { "one": "{0} ڪلاڪ ۾", "other": "{0} ڪلاڪ ۾" }, "past": { "one": "{0} ڪلاڪ پهرين", "other": "{0} ڪلاڪ پهرين" } } }, "minute": { "displayName": "منٽ", "relative": { "0": "هن منٽ" }, "relativeTime": { "future": { "one": "{0} منٽن ۾", "other": "+{0} min" }, "past": { "one": "{0} منٽ پهرين", "other": "{0} منٽ پهرين" } } }, "minute-short": { "displayName": "منٽ", "relative": { "0": "هن منٽ" }, "relativeTime": { "future": { "one": "{0} منٽن ۾", "other": "{0} منٽن ۾" }, "past": { "one": "{0} منٽ پهرين", "other": "{0} منٽ پهرين" } } }, "second": { "displayName": "سيڪنڊ", "relative": { "0": "هاڻي" }, "relativeTime": { "future": { "one": "{0} سيڪنڊن ۾", "other": "{0} سيڪنڊن ۾" }, "past": { "one": "{0} سيڪنڊ پهرين", "other": "{0} سيڪنڊ پهرين" } } }, "second-short": { "displayName": "سيڪنڊ", "relative": { "0": "هاڻي" }, "relativeTime": { "future": { "one": "{0} سيڪنڊن ۾", "other": "{0} سيڪنڊن ۾" }, "past": { "one": "{0} سيڪنڊ پهرين", "other": "{0} سيڪنڊ پهرين" } } } } }, { "locale": "sdh", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "se", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one'
            : (n == 2) ? 'two'
                : 'other';
    }, "fields": { "year": { "displayName": "jáhki", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "{0} jahki maŋŋilit", "two": "{0} jahkki maŋŋilit", "other": "{0} jahkki maŋŋilit" }, "past": { "one": "{0} jahki árat", "two": "{0} jahkki árat", "other": "{0} jahkki árat" } } }, "year-short": { "displayName": "jáhki", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "{0} jahki maŋŋilit", "two": "{0} jahkki maŋŋilit", "other": "{0} jahkki maŋŋilit" }, "past": { "one": "{0} jahki árat", "two": "{0} jahkki árat", "other": "{0} jahkki árat" } } }, "month": { "displayName": "mánnu", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "{0} mánotbadji maŋŋilit", "two": "{0} mánotbadji maŋŋilit", "other": "{0} mánotbadji maŋŋilit" }, "past": { "one": "{0} mánotbadji árat", "two": "{0} mánotbadji árat", "other": "{0} mánotbadji árat" } } }, "month-short": { "displayName": "mánnu", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "{0} mánotbadji maŋŋilit", "two": "{0} mánotbadji maŋŋilit", "other": "{0} mánotbadji maŋŋilit" }, "past": { "one": "{0} mánotbadji árat", "two": "{0} mánotbadji árat", "other": "{0} mánotbadji árat" } } }, "week": { "displayName": "váhkku", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "{0} vahku maŋŋilit", "two": "{0} vahkku maŋŋilit", "other": "{0} vahkku maŋŋilit" }, "past": { "one": "{0} vahku árat", "two": "{0} vahkku árat", "other": "{0} vahkku árat" } } }, "week-short": { "displayName": "váhkku", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "{0} vahku maŋŋilit", "two": "{0} vahkku maŋŋilit", "other": "{0} vahkku maŋŋilit" }, "past": { "one": "{0} vahku árat", "two": "{0} vahkku árat", "other": "{0} vahkku árat" } } }, "day": { "displayName": "beaivi", "relative": { "0": "odne", "1": "ihttin", "2": "paijeelittáá", "-2": "oovdebpeivvi", "-1": "ikte" }, "relativeTime": { "future": { "one": "{0} jándor maŋŋilit", "two": "{0} jándor amaŋŋilit", "other": "{0} jándora maŋŋilit" }, "past": { "one": "{0} jándor árat", "two": "{0} jándora árat", "other": "{0} jándora árat" } } }, "day-short": { "displayName": "beaivi", "relative": { "0": "odne", "1": "ihttin", "2": "paijeelittáá", "-2": "oovdebpeivvi", "-1": "ikte" }, "relativeTime": { "future": { "one": "{0} jándor maŋŋilit", "two": "{0} jándor amaŋŋilit", "other": "{0} jándora maŋŋilit" }, "past": { "one": "{0} jándor árat", "two": "{0} jándora árat", "other": "{0} jándora árat" } } }, "hour": { "displayName": "diibmu", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "{0} diibmu maŋŋilit", "two": "{0} diibmur maŋŋilit", "other": "{0} diibmur maŋŋilit" }, "past": { "one": "{0} diibmu árat", "two": "{0} diibmur árat", "other": "{0} diibmur árat" } } }, "hour-short": { "displayName": "diibmu", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "{0} diibmu maŋŋilit", "two": "{0} diibmur maŋŋilit", "other": "{0} diibmur maŋŋilit" }, "past": { "one": "{0} diibmu árat", "two": "{0} diibmur árat", "other": "{0} diibmur árat" } } }, "minute": { "displayName": "minuhtta", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "{0} minuhta maŋŋilit", "two": "{0} minuhtta maŋŋilit", "other": "{0} minuhtta maŋŋilit" }, "past": { "one": "{0} minuhta árat", "two": "{0} minuhtta árat", "other": "{0} minuhtta árat" } } }, "minute-short": { "displayName": "minuhtta", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "{0} minuhta maŋŋilit", "two": "{0} minuhtta maŋŋilit", "other": "{0} minuhtta maŋŋilit" }, "past": { "one": "{0} minuhta árat", "two": "{0} minuhtta árat", "other": "{0} minuhtta árat" } } }, "second": { "displayName": "sekunda", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "{0} sekunda maŋŋilit", "two": "{0} sekundda maŋŋilit", "other": "{0} sekundda maŋŋilit" }, "past": { "one": "{0} sekunda árat", "two": "{0} sekundda árat", "other": "{0} sekundda árat" } } }, "second-short": { "displayName": "sekunda", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "{0} sekunda maŋŋilit", "two": "{0} sekundda maŋŋilit", "other": "{0} sekundda maŋŋilit" }, "past": { "one": "{0} sekunda árat", "two": "{0} sekundda árat", "other": "{0} sekundda árat" } } } } }, { "locale": "se-FI", "parentLocale": "se", "fields": { "year": { "displayName": "jahki", "relative": { "0": "dán jagi", "1": "boahtte jagi", "-1": "diibmá" }, "relativeTime": { "future": { "one": "{0} jagi siste", "two": "{0} jagi siste", "other": "{0} jagi siste" }, "past": { "one": "diibmá", "two": "ovddet jagi", "other": "{0} jagi dás ovdal" } } }, "year-short": { "displayName": "j.", "relative": { "0": "dán jagi", "1": "boahtte jagi", "-1": "diibmá" }, "relativeTime": { "future": { "one": "{0} j. siste", "two": "{0} jagi siste", "other": "{0} j. siste" }, "past": { "one": "diibmá", "two": "ovddet jagi", "other": "{0} j. dás ovdal" } } }, "month": { "displayName": "mánnu", "relative": { "0": "dán mánu", "1": "boahtte mánu", "-1": "mannan mánu" }, "relativeTime": { "future": { "one": "{0} mánu siste", "two": "{0} mánu siste", "other": "{0} mánu siste" }, "past": { "one": "{0} mánnu dás ovdal", "two": "{0} mánu dás ovdal", "other": "{0} mánu dás ovdal" } } }, "month-short": { "displayName": "m.", "relative": { "0": "dán mánu", "1": "boahtte mánu", "-1": "mannan mánu" }, "relativeTime": { "future": { "one": "{0} mánu siste", "two": "{0} mánu siste", "other": "{0} mánu siste" }, "past": { "one": "{0} mánnu dás ovdal", "two": "{0} mánu dás ovdal", "other": "{0} mánu dás ovdal" } } }, "week": { "displayName": "vahkku", "relativePeriod": "{0} vahkku", "relative": { "0": "dán vahku", "1": "boahtte vahku", "-1": "mannan vahku" }, "relativeTime": { "future": { "one": "{0} vahku geahčen", "two": "{0} vahku geahčen", "other": "{0} vahku geahčen" }, "past": { "one": "{0} vahkku dás ovdal", "two": "{0} vahku dás ovdal", "other": "{0} vahku dás ovdal" } } }, "week-short": { "displayName": "v(k)", "relativePeriod": "{0} vahkku", "relative": { "0": "dán vahku", "1": "boahtte vahku", "-1": "mannan vahku" }, "relativeTime": { "future": { "one": "{0} v(k) siste", "two": "{0} vahku siste", "other": "{0} v(k) siste" }, "past": { "one": "{0} v(k) dás ovdal", "two": "{0} vahku dás ovdal", "other": "{0} v(k) dás ovdal" } } }, "day": { "displayName": "beaivi", "relative": { "0": "odne", "1": "ihttin", "2": "don beaivve", "-2": "ovddet beaivvi", "-1": "ikte" }, "relativeTime": { "future": { "one": "{0} beaivve siste", "two": "{0} beaivve siste", "other": "{0} beaivve siste" }, "past": { "one": "ikte", "two": "ovddet beaivve", "other": "{0} beaivve dás ovdal" } } }, "day-short": { "displayName": "b.", "relative": { "0": "odne", "1": "ihttin", "2": "don beaivve", "-2": "ovddet beaivvi", "-1": "ikte" }, "relativeTime": { "future": { "one": "{0} beaivve siste", "two": "{0} beaivve siste", "other": "{0} beaivve siste" }, "past": { "one": "ikte", "two": "ovddet beaivve", "other": "{0} beaivve dás ovdal" } } }, "hour": { "displayName": "diibmu", "relative": { "0": "dán diimmu" }, "relativeTime": { "future": { "one": "{0} diimmu siste", "two": "{0} diimmu siste", "other": "{0} diimmu siste" }, "past": { "one": "{0} diibmu áigi", "two": "{0} diimmu áigi", "other": "{0} diimmu áigi" } } }, "hour-short": { "displayName": "dmu", "relative": { "0": "dán diimmu" }, "relativeTime": { "future": { "one": "{0} dmu siste", "two": "{0} diimmu siste", "other": "{0} dmu siste" }, "past": { "one": "{0} dmu áigi", "two": "{0} diimmu áigi", "other": "{0} dmu áigi" } } }, "minute": { "displayName": "minuhtta", "relative": { "0": "dán minuhta" }, "relativeTime": { "future": { "one": "{0} minuhta siste", "two": "{0} minuhta siste", "other": "{0} minuhta siste" }, "past": { "one": "{0} minuhtta áigi", "two": "{0} minuhta áigi", "other": "{0} minuhta áigi" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "dán minuhta" }, "relativeTime": { "future": { "one": "{0} min. siste", "two": "{0} minuhta siste", "other": "{0} min. siste" }, "past": { "one": "{0} min. áigi", "two": "{0} minuhta áigi", "other": "{0} min. áigi" } } }, "second": { "displayName": "sekunda", "relative": { "0": "dál" }, "relativeTime": { "future": { "one": "{0} sekundda siste", "two": "{0} sekundda siste", "other": "{0} sekundda siste" }, "past": { "one": "{0} sekunda áigi", "two": "{0} sekundda áigi", "other": "{0} sekundda áigi" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "dál" }, "relativeTime": { "future": { "one": "{0} sek. siste", "two": "{0} sekundda siste", "other": "{0} sek. siste" }, "past": { "one": "{0} sek. áigi", "two": "{0} sekundda áigi", "other": "{0} sek. áigi" } } } } }, { "locale": "se-SE", "parentLocale": "se" }, { "locale": "seh", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Chaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Chaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mwezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mwezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ntsiku", "relative": { "0": "Lero", "1": "Manguana", "-1": "Zuro" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ntsiku", "relative": { "0": "Lero", "1": "Manguana", "-1": "Zuro" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hora", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hora", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minuto", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minuto", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Segundo", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Segundo", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ses", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Jiiri", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Jiiri", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Handu", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Handu", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Hebu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Hebu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Zaari", "relative": { "0": "Hõo", "1": "Suba", "-1": "Bi" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Zaari", "relative": { "0": "Hõo", "1": "Suba", "-1": "Bi" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Guuru", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Guuru", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Miniti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Miniti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Miti", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Miti", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "sg", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Ngû", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Ngû", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Nze", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Nze", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Dimâsi", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Dimâsi", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Lâ", "relative": { "0": "Lâsô", "1": "Kêkerêke", "-1": "Bîrï" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Lâ", "relative": { "0": "Lâsô", "1": "Kêkerêke", "-1": "Bîrï" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Ngbonga", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Ngbonga", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Ndurü ngbonga", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Ndurü ngbonga", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Nzîna ngbonga", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Nzîna ngbonga", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "sh", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2), f10 = f.slice(-1), f100 = f.slice(-2);
        if (ord)
            return 'other';
        return (v0 && i10 == 1 && i100 != 11
            || f10 == 1 && f100 != 11) ? 'one'
            : (v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14)
                || (f10 >= 2 && f10 <= 4) && (f100 < 12
                    || f100 > 14)) ? 'few'
                : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "shi", "pluralRuleFunction": function (n) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n;
        return (n >= 0 && n <= 1) ? 'one'
            : ((t0 && n >= 2 && n <= 10)) ? 'few'
                : 'other';
    }, "fields": { "year": { "displayName": "ⴰⵙⴳⴳⵯⴰⵙ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "ⴰⵙⴳⴳⵯⴰⵙ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "ⴰⵢⵢⵓⵔ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "ⴰⵢⵢⵓⵔ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "ⵉⵎⴰⵍⴰⵙⵙ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "ⵉⵎⴰⵍⴰⵙⵙ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "ⴰⵙⵙ", "relative": { "0": "ⴰⵙⵙⴰ", "1": "ⴰⵙⴽⴽⴰ", "-1": "ⵉⴹⵍⵍⵉ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "ⴰⵙⵙ", "relative": { "0": "ⴰⵙⵙⴰ", "1": "ⴰⵙⴽⴽⴰ", "-1": "ⵉⴹⵍⵍⵉ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "ⵜⴰⵙⵔⴰⴳⵜ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "ⵜⴰⵙⵔⴰⴳⵜ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "ⵜⵓⵙⴷⵉⴷⵜ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "ⵜⵓⵙⴷⵉⴷⵜ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "ⵜⴰⵙⵉⵏⵜ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "ⵜⴰⵙⵉⵏⵜ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "shi-Latn", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "asggʷas", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "asggʷas", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "ayyur", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "ayyur", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "imalass", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "imalass", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "ass", "relative": { "0": "assa", "1": "askka", "-1": "iḍlli" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "ass", "relative": { "0": "assa", "1": "askka", "-1": "iḍlli" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "tasragt", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "tasragt", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "tusdidt", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "tusdidt", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "tasint", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "tasint", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "shi-Tfng", "parentLocale": "shi" }, { "locale": "si", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], f = s[1] || '';
        if (ord)
            return 'other';
        return ((n == 0 || n == 1)
            || i == 0 && f == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "වර්ෂය", "relative": { "0": "මෙම වසර", "1": "ඊළඟ වසර", "-1": "පසුගිය වසර" }, "relativeTime": { "future": { "one": "වසර {0}කින්", "other": "වසර {0}කින්" }, "past": { "one": "වසර {0}කට පෙර", "other": "වසර {0}කට පෙර" } } }, "year-short": { "displayName": "වර්.", "relative": { "0": "මෙම වසර", "1": "ඊළඟ වසර", "-1": "පසුගිය වසර" }, "relativeTime": { "future": { "one": "වසර {0}කින්", "other": "වසර {0}කින්" }, "past": { "one": "වසර {0}කට පෙර", "other": "වසර {0}කට පෙර" } } }, "month": { "displayName": "මාසය", "relative": { "0": "මෙම මාසය", "1": "ඊළඟ මාසය", "-1": "පසුගිය මාසය" }, "relativeTime": { "future": { "one": "මාස {0}කින්", "other": "මාස {0}කින්" }, "past": { "one": "මාස {0}කට පෙර", "other": "මාස {0}කට පෙර" } } }, "month-short": { "displayName": "මාස.", "relative": { "0": "මෙම මාස.", "1": "ඊළඟ මාස.", "-1": "පසුගිය මාස." }, "relativeTime": { "future": { "one": "මාස {0}කින්", "other": "මාස {0}කින්" }, "past": { "one": "මාස {0}කට පෙර", "other": "මාස {0}කට පෙර" } } }, "week": { "displayName": "සතිය", "relativePeriod": "{0} වෙනි සතිය", "relative": { "0": "මෙම සතිය", "1": "ඊළඟ සතිය", "-1": "පසුගිය සතිය" }, "relativeTime": { "future": { "one": "සති {0}කින්", "other": "සති {0}කින්" }, "past": { "one": "සති {0}කට පෙර", "other": "සති {0}කට පෙර" } } }, "week-short": { "displayName": "සති.", "relativePeriod": "{0} වෙනි සතිය", "relative": { "0": "මෙම සති.", "1": "ඊළඟ සති.", "-1": "පසුගිය සති." }, "relativeTime": { "future": { "one": "සති {0}කින්", "other": "සති {0}කින්" }, "past": { "one": "සති {0}කට පෙර", "other": "සති {0}කට පෙර" } } }, "day": { "displayName": "දිනය", "relative": { "0": "අද", "1": "හෙට", "2": "අනිද්දා", "-2": "පෙරේදා", "-1": "ඊයේ" }, "relativeTime": { "future": { "one": "දින {0}න්", "other": "දින {0}න්" }, "past": { "one": "දින {0}කට පෙර", "other": "දින {0}කට පෙර" } } }, "day-short": { "displayName": "දිනය", "relative": { "0": "අද", "1": "හෙට", "2": "අනිද්දා", "-2": "පෙරේදා", "-1": "ඊයේ" }, "relativeTime": { "future": { "one": "දින {0}න්", "other": "දින {0}න්" }, "past": { "one": "දින {0}කට පෙර", "other": "දින {0}කට පෙර" } } }, "hour": { "displayName": "පැය", "relative": { "0": "මෙම පැය" }, "relativeTime": { "future": { "one": "පැය {0}කින්", "other": "පැය {0}කින්" }, "past": { "one": "පැය {0}කට පෙර", "other": "පැය {0}කට පෙර" } } }, "hour-short": { "displayName": "පැය", "relative": { "0": "මෙම පැය" }, "relativeTime": { "future": { "one": "පැය {0}කින්", "other": "පැය {0}කින්" }, "past": { "one": "පැය {0}කට පෙර", "other": "පැය {0}කට පෙර" } } }, "minute": { "displayName": "මිනිත්තුව", "relative": { "0": "මෙම මිනිත්තුව" }, "relativeTime": { "future": { "one": "මිනිත්තු {0}කින්", "other": "මිනිත්තු {0}කින්" }, "past": { "one": "මිනිත්තු {0}කට පෙර", "other": "මිනිත්තු {0}කට පෙර" } } }, "minute-short": { "displayName": "මිනි.", "relative": { "0": "මෙම මිනිත්තුව" }, "relativeTime": { "future": { "one": "මිනිත්තු {0}කින්", "other": "මිනිත්තු {0}කින්" }, "past": { "one": "මිනිත්තු {0}කට පෙර", "other": "මිනිත්තු {0}කට පෙර" } } }, "second": { "displayName": "තත්පරය", "relative": { "0": "දැන්" }, "relativeTime": { "future": { "one": "තත්පර {0}කින්", "other": "තත්පර {0}කින්" }, "past": { "one": "තත්පර {0}කට පෙර", "other": "තත්පර {0}කට පෙර" } } }, "second-short": { "displayName": "තත්.", "relative": { "0": "දැන්" }, "relativeTime": { "future": { "one": "තත්පර {0}කින්", "other": "තත්පර {0}කින්" }, "past": { "one": "තත්පර {0}කට පෙර", "other": "තත්පර {0}කට පෙර" } } } } }, { "locale": "sk", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], v0 = !s[1];
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one'
            : ((i >= 2 && i <= 4) && v0) ? 'few'
                : (!v0) ? 'many'
                    : 'other';
    }, "fields": { "year": { "displayName": "rok", "relative": { "0": "tento rok", "1": "budúci rok", "-1": "minulý rok" }, "relativeTime": { "future": { "one": "o {0} rok", "few": "o {0} roky", "many": "o {0} roka", "other": "o {0} rokov" }, "past": { "one": "pred {0} rokom", "few": "pred {0} rokmi", "many": "pred {0} roka", "other": "pred {0} rokmi" } } }, "year-short": { "displayName": "r.", "relative": { "0": "tento rok", "1": "budúci rok", "-1": "minulý rok" }, "relativeTime": { "future": { "one": "o {0} r.", "few": "o {0} r.", "many": "o {0} r.", "other": "o {0} r." }, "past": { "one": "pred {0} r.", "few": "pred {0} r.", "many": "pred {0} r.", "other": "pred {0} r." } } }, "month": { "displayName": "mesiac", "relative": { "0": "tento mesiac", "1": "budúci mesiac", "-1": "minulý mesiac" }, "relativeTime": { "future": { "one": "o {0} mesiac", "few": "o {0} mesiace", "many": "o {0} mesiaca", "other": "o {0} mesiacov" }, "past": { "one": "pred {0} mesiacom", "few": "pred {0} mesiacmi", "many": "pred {0} mesiaca", "other": "pred {0} mesiacmi" } } }, "month-short": { "displayName": "mes.", "relative": { "0": "tento mes.", "1": "budúci mes.", "-1": "minulý mes." }, "relativeTime": { "future": { "one": "o {0} mes.", "few": "o {0} mes.", "many": "o {0} mes.", "other": "o {0} mes." }, "past": { "one": "pred {0} mes.", "few": "pred {0} mes.", "many": "pred {0} mes.", "other": "pred {0} mes." } } }, "week": { "displayName": "týždeň", "relativePeriod": "týždeň dňa {0}", "relative": { "0": "tento týždeň", "1": "budúci týždeň", "-1": "minulý týždeň" }, "relativeTime": { "future": { "one": "o {0} týždeň", "few": "o {0} týždne", "many": "o {0} týždňa", "other": "o {0} týždňov" }, "past": { "one": "pred {0} týždňom", "few": "pred {0} týždňami", "many": "pred {0} týždňa", "other": "pred {0} týždňami" } } }, "week-short": { "displayName": "týž.", "relativePeriod": "týž. dňa {0}", "relative": { "0": "tento týž.", "1": "budúci týž.", "-1": "minulý týž." }, "relativeTime": { "future": { "one": "o {0} týž.", "few": "o {0} týž.", "many": "o {0} týž.", "other": "o {0} týž." }, "past": { "one": "pred {0} týž.", "few": "pred {0} týž.", "many": "pred {0} týž.", "other": "pred {0} týž." } } }, "day": { "displayName": "deň", "relative": { "0": "dnes", "1": "zajtra", "2": "pozajtra", "-2": "predvčerom", "-1": "včera" }, "relativeTime": { "future": { "one": "o {0} deň", "few": "o {0} dni", "many": "o {0} dňa", "other": "o {0} dní" }, "past": { "one": "pred {0} dňom", "few": "pred {0} dňami", "many": "pred {0} dňa", "other": "pred {0} dňami" } } }, "day-short": { "displayName": "d.", "relative": { "0": "dnes", "1": "zajtra", "2": "pozajtra", "-2": "predvčerom", "-1": "včera" }, "relativeTime": { "future": { "one": "o {0} d.", "few": "o {0} d.", "many": "o {0} d.", "other": "o {0} d." }, "past": { "one": "pred {0} d.", "few": "pred {0} d.", "many": "pred {0} d.", "other": "pred {0} d." } } }, "hour": { "displayName": "hodina", "relative": { "0": "v tejto hodine" }, "relativeTime": { "future": { "one": "o {0} hodinu", "few": "o {0} hodiny", "many": "o {0} hodiny", "other": "o {0} hodín" }, "past": { "one": "pred {0} hodinou", "few": "pred {0} hodinami", "many": "pred {0} hodinou", "other": "pred {0} hodinami" } } }, "hour-short": { "displayName": "h", "relative": { "0": "v tejto hodine" }, "relativeTime": { "future": { "one": "o {0} h", "few": "o {0} h", "many": "o {0} h", "other": "o {0} h" }, "past": { "one": "pred {0} h", "few": "pred {0} h", "many": "pred {0} h", "other": "pred {0} h" } } }, "minute": { "displayName": "minúta", "relative": { "0": "v tejto minúte" }, "relativeTime": { "future": { "one": "o {0} minútu", "few": "o {0} minúty", "many": "o {0} minúty", "other": "o {0} minút" }, "past": { "one": "pred {0} minútou", "few": "pred {0} minútami", "many": "pred {0} minúty", "other": "pred {0} minútami" } } }, "minute-short": { "displayName": "min", "relative": { "0": "v tejto minúte" }, "relativeTime": { "future": { "one": "o {0} min", "few": "o {0} min", "many": "o {0} min", "other": "o {0} min" }, "past": { "one": "pred {0} min", "few": "pred {0} min", "many": "pred {0} min", "other": "pred {0} min" } } }, "second": { "displayName": "sekunda", "relative": { "0": "teraz" }, "relativeTime": { "future": { "one": "o {0} sekundu", "few": "o {0} sekundy", "many": "o {0} sekundy", "other": "o {0} sekúnd" }, "past": { "one": "pred {0} sekundou", "few": "pred {0} sekundami", "many": "pred {0} sekundy", "other": "pred {0} sekundami" } } }, "second-short": { "displayName": "s", "relative": { "0": "teraz" }, "relativeTime": { "future": { "one": "o {0} s", "few": "o {0} s", "many": "o {0} s", "other": "o {0} s" }, "past": { "one": "pred {0} s", "few": "pred {0} s", "many": "pred {0} s", "other": "pred {0} s" } } } } }, { "locale": "sl", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], v0 = !s[1], i100 = i.slice(-2);
        if (ord)
            return 'other';
        return (v0 && i100 == 1) ? 'one'
            : (v0 && i100 == 2) ? 'two'
                : (v0 && (i100 == 3 || i100 == 4)
                    || !v0) ? 'few'
                    : 'other';
    }, "fields": { "year": { "displayName": "leto", "relative": { "0": "letos", "1": "naslednje leto", "-1": "lani" }, "relativeTime": { "future": { "one": "čez {0} leto", "two": "čez {0} leti", "few": "čez {0} leta", "other": "čez {0} let" }, "past": { "one": "pred {0} letom", "two": "pred {0} letoma", "few": "pred {0} leti", "other": "pred {0} leti" } } }, "year-short": { "displayName": "leto", "relative": { "0": "letos", "1": "naslednje leto", "-1": "lani" }, "relativeTime": { "future": { "one": "čez {0} leto", "two": "čez {0} leti", "few": "čez {0} leta", "other": "čez {0} let" }, "past": { "one": "pred {0} letom", "two": "pred {0} letoma", "few": "pred {0} leti", "other": "pred {0} leti" } } }, "month": { "displayName": "mesec", "relative": { "0": "ta mesec", "1": "naslednji mesec", "-1": "prejšnji mesec" }, "relativeTime": { "future": { "one": "čez {0} mesec", "two": "čez {0} meseca", "few": "čez {0} mesece", "other": "čez {0} mesecev" }, "past": { "one": "pred {0} mesecem", "two": "pred {0} mesecema", "few": "pred {0} meseci", "other": "pred {0} meseci" } } }, "month-short": { "displayName": "mes.", "relative": { "0": "ta mesec", "1": "naslednji mesec", "-1": "prejšnji mesec" }, "relativeTime": { "future": { "one": "čez {0} mes.", "two": "čez {0} mes.", "few": "čez {0} mes.", "other": "čez {0} mes." }, "past": { "one": "pred {0} mes.", "two": "pred {0} mes.", "few": "pred {0} mes.", "other": "pred {0} mes." } } }, "week": { "displayName": "teden", "relativePeriod": "v tednu {0}", "relative": { "0": "ta teden", "1": "naslednji teden", "-1": "prejšnji teden" }, "relativeTime": { "future": { "one": "čez {0} teden", "two": "čez {0} tedna", "few": "čez {0} tedne", "other": "čez {0} tednov" }, "past": { "one": "pred {0} tednom", "two": "pred {0} tednoma", "few": "pred {0} tedni", "other": "pred {0} tedni" } } }, "week-short": { "displayName": "ted.", "relativePeriod": "v tednu {0}", "relative": { "0": "ta teden", "1": "naslednji teden", "-1": "prejšnji teden" }, "relativeTime": { "future": { "one": "čez {0} ted.", "two": "čez {0} ted.", "few": "čez {0} ted.", "other": "čez {0} ted." }, "past": { "one": "pred {0} ted.", "two": "pred {0} ted.", "few": "pred {0} ted.", "other": "pred {0} ted." } } }, "day": { "displayName": "dan", "relative": { "0": "danes", "1": "jutri", "2": "pojutrišnjem", "-2": "predvčerajšnjim", "-1": "včeraj" }, "relativeTime": { "future": { "one": "čez {0} dan", "two": "čez {0} dneva", "few": "čez {0} dni", "other": "čez {0} dni" }, "past": { "one": "pred {0} dnevom", "two": "pred {0} dnevoma", "few": "pred {0} dnevi", "other": "pred {0} dnevi" } } }, "day-short": { "displayName": "dan", "relative": { "0": "danes", "1": "jutri", "2": "pojutrišnjem", "-2": "predvčerajšnjim", "-1": "včeraj" }, "relativeTime": { "future": { "one": "čez {0} dan", "two": "čez {0} dneva", "few": "čez {0} dni", "other": "čez {0} dni" }, "past": { "one": "pred {0} dnevom", "two": "pred {0} dnevoma", "few": "pred {0} dnevi", "other": "pred {0} dnevi" } } }, "hour": { "displayName": "ura", "relative": { "0": "v tej uri" }, "relativeTime": { "future": { "one": "čez {0} uro", "two": "čez {0} uri", "few": "čez {0} ure", "other": "čez {0} ur" }, "past": { "one": "pred {0} uro", "two": "pred {0} urama", "few": "pred {0} urami", "other": "pred {0} urami" } } }, "hour-short": { "displayName": "ura", "relative": { "0": "v tej uri" }, "relativeTime": { "future": { "one": "čez {0} uro", "two": "čez {0} uri", "few": "čez {0} ure", "other": "čez {0} ur" }, "past": { "one": "pred {0} uro", "two": "pred {0} urama", "few": "pred {0} urami", "other": "pred {0} urami" } } }, "minute": { "displayName": "minuta", "relative": { "0": "to minuto" }, "relativeTime": { "future": { "one": "čez {0} minuto", "two": "čez {0} minuti", "few": "čez {0} minute", "other": "čez {0} minut" }, "past": { "one": "pred {0} minuto", "two": "pred {0} minutama", "few": "pred {0} minutami", "other": "pred {0} minutami" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "to minuto" }, "relativeTime": { "future": { "one": "čez {0} min.", "two": "čez {0} min.", "few": "čez {0} min.", "other": "čez {0} min." }, "past": { "one": "pred {0} min.", "two": "pred {0} min.", "few": "pred {0} min.", "other": "pred {0} min." } } }, "second": { "displayName": "sekunda", "relative": { "0": "zdaj" }, "relativeTime": { "future": { "one": "čez {0} sekundo", "two": "čez {0} sekundi", "few": "čez {0} sekunde", "other": "čez {0} sekund" }, "past": { "one": "pred {0} sekundo", "two": "pred {0} sekundama", "few": "pred {0} sekundami", "other": "pred {0} sekundami" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "zdaj" }, "relativeTime": { "future": { "one": "čez {0} s", "two": "čez {0} s", "few": "čez {0} s", "other": "čez {0} s" }, "past": { "one": "pred {0} s", "two": "pred {0} s", "few": "pred {0} s", "other": "pred {0} s" } } } } }, { "locale": "sma", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one'
            : (n == 2) ? 'two'
                : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "smi", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one'
            : (n == 2) ? 'two'
                : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "smj", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one'
            : (n == 2) ? 'two'
                : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "smn", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one'
            : (n == 2) ? 'two'
                : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "sms", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one'
            : (n == 2) ? 'two'
                : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "sn", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Gore", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Gore", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mwedzi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mwedzi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Vhiki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Vhiki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Zuva", "relative": { "0": "Nhasi", "1": "Mangwana", "-1": "Nezuro" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Zuva", "relative": { "0": "Nhasi", "1": "Mangwana", "-1": "Nezuro" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Awa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Awa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Mineti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Mineti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekondi", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "so", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "Sannadkan", "1": "Sannadka xiga", "-1": "Sannadkii la soo dhaafay" }, "relativeTime": { "future": { "one": "+{0} y", "other": "+{0} y" }, "past": { "one": "-{0} y", "other": "-{0} y" } } }, "year-short": { "displayName": "Sanadkii", "relative": { "0": "Sannadkan", "1": "Sannadka xiga", "-1": "Sannadkii la soo dhaafay" }, "relativeTime": { "future": { "one": "+{0} y", "other": "+{0} y" }, "past": { "one": "-{0} y", "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "Bishan", "1": "Bisha xigta", "-1": "Bishii la soo dhaafay" }, "relativeTime": { "future": { "one": "+{0} m", "other": "+{0} m" }, "past": { "one": "-{0} m", "other": "-{0} m" } } }, "month-short": { "displayName": "Bil-gaaban", "relative": { "0": "Bishan", "1": "Bisha xigta", "-1": "Bishii la soo dhaafay" }, "relativeTime": { "future": { "one": "+{0} m", "other": "+{0} m" }, "past": { "one": "-{0} m", "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "Usbuucan", "1": "Usbuuca xiga", "-1": "Usbuucii la soo dhaafay" }, "relativeTime": { "future": { "one": "+{0} w", "other": "+{0} w" }, "past": { "one": "-{0} w", "other": "-{0} w" } } }, "week-short": { "displayName": "Usbuuc-gaaban", "relativePeriod": "the week of {0}", "relative": { "0": "Usbuucan", "1": "Usbuuca xiga", "-1": "Usbuucii la soo dhaafay" }, "relativeTime": { "future": { "one": "+{0} w", "other": "+{0} w" }, "past": { "one": "-{0} w", "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "Maanta", "1": "Berri", "-1": "Shalay" }, "relativeTime": { "future": { "one": "+{0} d", "other": "+{0} d" }, "past": { "one": "-{0} d", "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "Maanta", "1": "Berri", "-1": "Shalay" }, "relativeTime": { "future": { "one": "+{0} d", "other": "+{0} d" }, "past": { "one": "-{0} d", "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "+{0} h", "other": "+{0} h" }, "past": { "one": "-{0} h", "other": "-{0} h" } } }, "hour-short": { "displayName": "Saacad-gaaban", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "+{0} h", "other": "+{0} h" }, "past": { "one": "-{0} h", "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "+{0} min", "other": "+{0} min" }, "past": { "one": "-{0} min", "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "+{0} min", "other": "+{0} min" }, "past": { "one": "-{0} min", "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "+{0} s", "other": "+{0} s" }, "past": { "one": "-{0} s", "other": "-{0} s" } } }, "second-short": { "displayName": "Il-biriqsi-gaaban", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "+{0} s", "other": "+{0} s" }, "past": { "one": "-{0} s", "other": "-{0} s" } } } } }, { "locale": "so-DJ", "parentLocale": "so" }, { "locale": "so-ET", "parentLocale": "so" }, { "locale": "so-KE", "parentLocale": "so" }, { "locale": "sq", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2);
        if (ord)
            return (n == 1) ? 'one'
                : (n10 == 4 && n100 != 14) ? 'many'
                    : 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "vit", "relative": { "0": "sivjet", "1": "mot", "-1": "vjet" }, "relativeTime": { "future": { "one": "pas {0} viti", "other": "pas {0} vjetësh" }, "past": { "one": "{0} vit më parë", "other": "{0} vjet më parë" } } }, "year-short": { "displayName": "vit", "relative": { "0": "këtë vit", "1": "vitin e ardhshëm", "-1": "vitin e kaluar" }, "relativeTime": { "future": { "one": "pas {0} viti", "other": "pas {0} vjetësh" }, "past": { "one": "{0} vit më parë", "other": "{0} vjet më parë" } } }, "month": { "displayName": "muaj", "relative": { "0": "këtë muaj", "1": "muajin e ardhshëm", "-1": "muajin e kaluar" }, "relativeTime": { "future": { "one": "pas {0} muaji", "other": "pas {0} muajsh" }, "past": { "one": "{0} muaj më parë", "other": "{0} muaj më parë" } } }, "month-short": { "displayName": "muaj", "relative": { "0": "këtë muaj", "1": "muajin e ardhshëm", "-1": "muajin e kaluar" }, "relativeTime": { "future": { "one": "pas {0} muaji", "other": "pas {0} muajsh" }, "past": { "one": "{0} muaj më parë", "other": "{0} muaj më parë" } } }, "week": { "displayName": "javë", "relativePeriod": "java e {0}", "relative": { "0": "këtë javë", "1": "javën e ardhshme", "-1": "javën e kaluar" }, "relativeTime": { "future": { "one": "pas {0} jave", "other": "pas {0} javësh" }, "past": { "one": "{0} javë më parë", "other": "{0} javë më parë" } } }, "week-short": { "displayName": "javë", "relativePeriod": "java e {0}", "relative": { "0": "këtë javë", "1": "javën e ardhshme", "-1": "javën e kaluar" }, "relativeTime": { "future": { "one": "pas {0} jave", "other": "pas {0} javësh" }, "past": { "one": "{0} javë më parë", "other": "{0} javë më parë" } } }, "day": { "displayName": "ditë", "relative": { "0": "sot", "1": "nesër", "-1": "dje" }, "relativeTime": { "future": { "one": "pas {0} dite", "other": "pas {0} ditësh" }, "past": { "one": "{0} ditë më parë", "other": "{0} ditë më parë" } } }, "day-short": { "displayName": "ditë", "relative": { "0": "sot", "1": "nesër", "-1": "dje" }, "relativeTime": { "future": { "one": "pas {0} dite", "other": "pas {0} ditësh" }, "past": { "one": "{0} ditë më parë", "other": "{0} ditë më parë" } } }, "hour": { "displayName": "orë", "relative": { "0": "këtë orë" }, "relativeTime": { "future": { "one": "pas {0} ore", "other": "pas {0} orësh" }, "past": { "one": "{0} orë më parë", "other": "{0} orë më parë" } } }, "hour-short": { "displayName": "orë", "relative": { "0": "këtë orë" }, "relativeTime": { "future": { "one": "pas {0} ore", "other": "pas {0} orësh" }, "past": { "one": "{0} orë më parë", "other": "{0} orë më parë" } } }, "minute": { "displayName": "minutë", "relative": { "0": "këtë minutë" }, "relativeTime": { "future": { "one": "pas {0} minute", "other": "pas {0} minutash" }, "past": { "one": "{0} minutë më parë", "other": "{0} minuta më parë" } } }, "minute-short": { "displayName": "min", "relative": { "0": "këtë minutë" }, "relativeTime": { "future": { "one": "pas {0} min", "other": "pas {0} min" }, "past": { "one": "{0} min më parë", "other": "{0} min më parë" } } }, "second": { "displayName": "sekondë", "relative": { "0": "tani" }, "relativeTime": { "future": { "one": "pas {0} sekonde", "other": "pas {0} sekondash" }, "past": { "one": "{0} sekondë më parë", "other": "{0} sekonda më parë" } } }, "second-short": { "displayName": "sek", "relative": { "0": "tani" }, "relativeTime": { "future": { "one": "pas {0} sek", "other": "pas {0} sek" }, "past": { "one": "{0} sek më parë", "other": "{0} sek më parë" } } } } }, { "locale": "sq-MK", "parentLocale": "sq" }, { "locale": "sq-XK", "parentLocale": "sq" }, { "locale": "sr", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2), f10 = f.slice(-1), f100 = f.slice(-2);
        if (ord)
            return 'other';
        return (v0 && i10 == 1 && i100 != 11
            || f10 == 1 && f100 != 11) ? 'one'
            : (v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14)
                || (f10 >= 2 && f10 <= 4) && (f100 < 12
                    || f100 > 14)) ? 'few'
                : 'other';
    }, "fields": { "year": { "displayName": "година", "relative": { "0": "ове године", "1": "следеће године", "-1": "прошле године" }, "relativeTime": { "future": { "one": "за {0} годину", "few": "за {0} године", "other": "за {0} година" }, "past": { "one": "пре {0} године", "few": "пре {0} године", "other": "пре {0} година" } } }, "year-short": { "displayName": "год.", "relative": { "0": "ове год.", "1": "следеће год.", "-1": "прошле год." }, "relativeTime": { "future": { "one": "за {0} год.", "few": "за {0} год.", "other": "за {0} год." }, "past": { "one": "пре {0} год.", "few": "пре {0} год.", "other": "пре {0} год." } } }, "month": { "displayName": "месец", "relative": { "0": "овог месеца", "1": "следећег месеца", "-1": "прошлог месеца" }, "relativeTime": { "future": { "one": "за {0} месец", "few": "за {0} месеца", "other": "за {0} месеци" }, "past": { "one": "пре {0} месеца", "few": "пре {0} месеца", "other": "пре {0} месеци" } } }, "month-short": { "displayName": "мес.", "relative": { "0": "овог мес.", "1": "следећег мес.", "-1": "прошлог мес." }, "relativeTime": { "future": { "one": "за {0} мес.", "few": "за {0} мес.", "other": "за {0} мес." }, "past": { "one": "пре {0} мес.", "few": "пре {0} мес.", "other": "пре {0} мес." } } }, "week": { "displayName": "недеља", "relativePeriod": "недеља која почиње {0}.", "relative": { "0": "ове недеље", "1": "следеће недеље", "-1": "прошле недеље" }, "relativeTime": { "future": { "one": "за {0} недељу", "few": "за {0} недеље", "other": "за {0} недеља" }, "past": { "one": "пре {0} недеље", "few": "пре {0} недеље", "other": "пре {0} недеља" } } }, "week-short": { "displayName": "нед.", "relativePeriod": "недеља која почиње {0}.", "relative": { "0": "ове нед.", "1": "следеће нед.", "-1": "прошле нед." }, "relativeTime": { "future": { "one": "за {0} нед.", "few": "за {0} нед.", "other": "за {0} нед." }, "past": { "one": "пре {0} нед.", "few": "пре {0} нед.", "other": "пре {0} нед." } } }, "day": { "displayName": "дан", "relative": { "0": "данас", "1": "сутра", "2": "прекосутра", "-2": "прекјуче", "-1": "јуче" }, "relativeTime": { "future": { "one": "за {0} дан", "few": "за {0} дана", "other": "за {0} дана" }, "past": { "one": "пре {0} дана", "few": "пре {0} дана", "other": "пре {0} дана" } } }, "day-short": { "displayName": "д.", "relative": { "0": "данас", "1": "сутра", "2": "прекосутра", "-2": "прекјуче", "-1": "јуче" }, "relativeTime": { "future": { "one": "за {0} д.", "few": "за {0} д.", "other": "за {0} д." }, "past": { "one": "пре {0} д.", "few": "пре {0} д.", "other": "пре {0} д." } } }, "hour": { "displayName": "сат", "relative": { "0": "овог сата" }, "relativeTime": { "future": { "one": "за {0} сат", "few": "за {0} сата", "other": "за {0} сати" }, "past": { "one": "пре {0} сата", "few": "пре {0} сата", "other": "пре {0} сати" } } }, "hour-short": { "displayName": "ч.", "relative": { "0": "овог сата" }, "relativeTime": { "future": { "one": "за {0} ч.", "few": "за {0} ч.", "other": "за {0} ч." }, "past": { "one": "пре {0} ч.", "few": "пре {0} ч.", "other": "пре {0} ч." } } }, "minute": { "displayName": "минут", "relative": { "0": "овог минута" }, "relativeTime": { "future": { "one": "за {0} минут", "few": "за {0} минута", "other": "за {0} минута" }, "past": { "one": "пре {0} минута", "few": "пре {0} минута", "other": "пре {0} минута" } } }, "minute-short": { "displayName": "мин.", "relative": { "0": "овог минута" }, "relativeTime": { "future": { "one": "за {0} мин.", "few": "за {0} мин.", "other": "за {0} мин." }, "past": { "one": "пре {0} мин.", "few": "пре {0} мин.", "other": "пре {0} мин." } } }, "second": { "displayName": "секунд", "relative": { "0": "сада" }, "relativeTime": { "future": { "one": "за {0} секунду", "few": "за {0} секунде", "other": "за {0} секунди" }, "past": { "one": "пре {0} секунде", "few": "пре {0} секунде", "other": "пре {0} секунди" } } }, "second-short": { "displayName": "сек.", "relative": { "0": "сада" }, "relativeTime": { "future": { "one": "за {0} сек.", "few": "за {0} сек.", "other": "за {0} сек." }, "past": { "one": "пре {0} сек.", "few": "пре {0} сек.", "other": "пре {0} сек." } } } } }, { "locale": "sr-Cyrl", "parentLocale": "sr" }, { "locale": "sr-Cyrl-BA", "parentLocale": "sr-Cyrl" }, { "locale": "sr-Cyrl-ME", "parentLocale": "sr-Cyrl" }, { "locale": "sr-Cyrl-XK", "parentLocale": "sr-Cyrl" }, { "locale": "sr-Latn", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "godina", "relative": { "0": "ove godine", "1": "sledeće godine", "-1": "prošle godine" }, "relativeTime": { "future": { "one": "za {0} godinu", "few": "za {0} godine", "other": "za {0} godina" }, "past": { "one": "pre {0} godine", "few": "pre {0} godine", "other": "pre {0} godina" } } }, "year-short": { "displayName": "god.", "relative": { "0": "ove god.", "1": "sledeće god.", "-1": "prošle god." }, "relativeTime": { "future": { "one": "za {0} god.", "few": "za {0} god.", "other": "za {0} god." }, "past": { "one": "pre {0} god.", "few": "pre {0} god.", "other": "pre {0} god." } } }, "month": { "displayName": "mesec", "relative": { "0": "ovog meseca", "1": "sledećeg meseca", "-1": "prošlog meseca" }, "relativeTime": { "future": { "one": "za {0} mesec", "few": "za {0} meseca", "other": "za {0} meseci" }, "past": { "one": "pre {0} meseca", "few": "pre {0} meseca", "other": "pre {0} meseci" } } }, "month-short": { "displayName": "mes.", "relative": { "0": "ovog mes.", "1": "sledećeg mes.", "-1": "prošlog mes." }, "relativeTime": { "future": { "one": "za {0} mes.", "few": "za {0} mes.", "other": "za {0} mes." }, "past": { "one": "pre {0} mes.", "few": "pre {0} mes.", "other": "pre {0} mes." } } }, "week": { "displayName": "nedelja", "relativePeriod": "nedelja koja počinje {0}.", "relative": { "0": "ove nedelje", "1": "sledeće nedelje", "-1": "prošle nedelje" }, "relativeTime": { "future": { "one": "za {0} nedelju", "few": "za {0} nedelje", "other": "za {0} nedelja" }, "past": { "one": "pre {0} nedelje", "few": "pre {0} nedelje", "other": "pre {0} nedelja" } } }, "week-short": { "displayName": "ned.", "relativePeriod": "nedelja koja počinje {0}.", "relative": { "0": "ove ned.", "1": "sledeće ned.", "-1": "prošle ned." }, "relativeTime": { "future": { "one": "za {0} ned.", "few": "za {0} ned.", "other": "za {0} ned." }, "past": { "one": "pre {0} ned.", "few": "pre {0} ned.", "other": "pre {0} ned." } } }, "day": { "displayName": "dan", "relative": { "0": "danas", "1": "sutra", "2": "prekosutra", "-2": "prekjuče", "-1": "juče" }, "relativeTime": { "future": { "one": "za {0} dan", "few": "za {0} dana", "other": "za {0} dana" }, "past": { "one": "pre {0} dana", "few": "pre {0} dana", "other": "pre {0} dana" } } }, "day-short": { "displayName": "d.", "relative": { "0": "danas", "1": "sutra", "2": "prekosutra", "-2": "prekjuče", "-1": "juče" }, "relativeTime": { "future": { "one": "za {0} d.", "few": "za {0} d.", "other": "za {0} d." }, "past": { "one": "pre {0} d.", "few": "pre {0} d.", "other": "pre {0} d." } } }, "hour": { "displayName": "sat", "relative": { "0": "ovog sata" }, "relativeTime": { "future": { "one": "za {0} sat", "few": "za {0} sata", "other": "za {0} sati" }, "past": { "one": "pre {0} sata", "few": "pre {0} sata", "other": "pre {0} sati" } } }, "hour-short": { "displayName": "č.", "relative": { "0": "ovog sata" }, "relativeTime": { "future": { "one": "za {0} č.", "few": "za {0} č.", "other": "za {0} č." }, "past": { "one": "pre {0} č.", "few": "pre {0} č.", "other": "pre {0} č." } } }, "minute": { "displayName": "minut", "relative": { "0": "ovog minuta" }, "relativeTime": { "future": { "one": "za {0} minut", "few": "za {0} minuta", "other": "za {0} minuta" }, "past": { "one": "pre {0} minuta", "few": "pre {0} minuta", "other": "pre {0} minuta" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "ovog minuta" }, "relativeTime": { "future": { "one": "za {0} min.", "few": "za {0} min.", "other": "za {0} min." }, "past": { "one": "pre {0} min.", "few": "pre {0} min.", "other": "pre {0} min." } } }, "second": { "displayName": "sekund", "relative": { "0": "sada" }, "relativeTime": { "future": { "one": "za {0} sekundu", "few": "za {0} sekunde", "other": "za {0} sekundi" }, "past": { "one": "pre {0} sekunde", "few": "pre {0} sekunde", "other": "pre {0} sekundi" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "sada" }, "relativeTime": { "future": { "one": "za {0} sek.", "few": "za {0} sek.", "other": "za {0} sek." }, "past": { "one": "pre {0} sek.", "few": "pre {0} sek.", "other": "pre {0} sek." } } } } }, { "locale": "sr-Latn-BA", "parentLocale": "sr-Latn" }, { "locale": "sr-Latn-ME", "parentLocale": "sr-Latn" }, { "locale": "sr-Latn-XK", "parentLocale": "sr-Latn" }, { "locale": "ss", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ssy", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "st", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "sv", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1], t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2);
        if (ord)
            return ((n10 == 1
                || n10 == 2) && n100 != 11 && n100 != 12) ? 'one' : 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "år", "relative": { "0": "i år", "1": "nästa år", "-1": "i fjol" }, "relativeTime": { "future": { "one": "om {0} år", "other": "om {0} år" }, "past": { "one": "för {0} år sedan", "other": "för {0} år sedan" } } }, "year-short": { "displayName": "år", "relative": { "0": "i år", "1": "nästa år", "-1": "i fjol" }, "relativeTime": { "future": { "one": "om {0} år", "other": "om {0} år" }, "past": { "one": "för {0} år sen", "other": "för {0} år sen" } } }, "month": { "displayName": "månad", "relative": { "0": "denna månad", "1": "nästa månad", "-1": "förra månaden" }, "relativeTime": { "future": { "one": "om {0} månad", "other": "om {0} månader" }, "past": { "one": "för {0} månad sedan", "other": "för {0} månader sedan" } } }, "month-short": { "displayName": "m", "relative": { "0": "denna mån.", "1": "nästa mån.", "-1": "förra mån." }, "relativeTime": { "future": { "one": "om {0} mån.", "other": "om {0} mån." }, "past": { "one": "för {0} mån. sen", "other": "för {0} mån. sen" } } }, "week": { "displayName": "vecka", "relativePeriod": "veckan för {0}", "relative": { "0": "denna vecka", "1": "nästa vecka", "-1": "förra veckan" }, "relativeTime": { "future": { "one": "om {0} vecka", "other": "om {0} veckor" }, "past": { "one": "för {0} vecka sedan", "other": "för {0} veckor sedan" } } }, "week-short": { "displayName": "v", "relativePeriod": "veckan för {0}", "relative": { "0": "denna v.", "1": "nästa v.", "-1": "förra v." }, "relativeTime": { "future": { "one": "om {0} v.", "other": "om {0} v." }, "past": { "one": "för {0} v. sedan", "other": "för {0} v. sedan" } } }, "day": { "displayName": "dag", "relative": { "0": "i dag", "1": "i morgon", "2": "i övermorgon", "-2": "i förrgår", "-1": "i går" }, "relativeTime": { "future": { "one": "om {0} dag", "other": "om {0} dagar" }, "past": { "one": "för {0} dag sedan", "other": "för {0} dagar sedan" } } }, "day-short": { "displayName": "dag", "relative": { "0": "i dag", "1": "i morgon", "2": "i övermorgon", "-2": "i förrgår", "-1": "i går" }, "relativeTime": { "future": { "one": "om {0} d", "other": "om {0} d" }, "past": { "one": "för {0} d sedan", "other": "för {0} d sedan" } } }, "hour": { "displayName": "timme", "relative": { "0": "denna timme" }, "relativeTime": { "future": { "one": "om {0} timme", "other": "om {0} timmar" }, "past": { "one": "för {0} timme sedan", "other": "för {0} timmar sedan" } } }, "hour-short": { "displayName": "tim", "relative": { "0": "denna timme" }, "relativeTime": { "future": { "one": "om {0} tim", "other": "om {0} tim" }, "past": { "one": "för {0} tim sedan", "other": "för {0} tim sedan" } } }, "minute": { "displayName": "minut", "relative": { "0": "denna minut" }, "relativeTime": { "future": { "one": "om {0} minut", "other": "om {0} minuter" }, "past": { "one": "för {0} minut sedan", "other": "för {0} minuter sedan" } } }, "minute-short": { "displayName": "min", "relative": { "0": "denna minut" }, "relativeTime": { "future": { "one": "om {0} min", "other": "om {0} min" }, "past": { "one": "för {0} min sen", "other": "för {0} min sen" } } }, "second": { "displayName": "sekund", "relative": { "0": "nu" }, "relativeTime": { "future": { "one": "om {0} sekund", "other": "om {0} sekunder" }, "past": { "one": "för {0} sekund sedan", "other": "för {0} sekunder sedan" } } }, "second-short": { "displayName": "sek", "relative": { "0": "nu" }, "relativeTime": { "future": { "one": "om {0} sek", "other": "om {0} sek" }, "past": { "one": "för {0} s sen", "other": "för {0} s sen" } } } } }, { "locale": "sv-AX", "parentLocale": "sv" }, { "locale": "sv-FI", "parentLocale": "sv" }, { "locale": "sw", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1];
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "mwaka", "relative": { "0": "mwaka huu", "1": "mwaka ujao", "-1": "mwaka uliopita" }, "relativeTime": { "future": { "one": "baada ya mwaka {0}", "other": "baada ya miaka {0}" }, "past": { "one": "mwaka {0} uliopita", "other": "miaka {0} iliyopita" } } }, "year-short": { "displayName": "mwaka", "relative": { "0": "mwaka huu", "1": "mwaka ujao", "-1": "mwaka uliopita" }, "relativeTime": { "future": { "one": "baada ya mwaka {0}", "other": "baada ya miaka {0}" }, "past": { "one": "mwaka {0} uliopita", "other": "miaka {0} iliyopita" } } }, "month": { "displayName": "mwezi", "relative": { "0": "mwezi huu", "1": "mwezi ujao", "-1": "mwezi uliopita" }, "relativeTime": { "future": { "one": "baada ya mwezi {0}", "other": "baada ya miezi {0}" }, "past": { "one": "mwezi {0} uliopita", "other": "miezi {0} iliyopita" } } }, "month-short": { "displayName": "mwezi", "relative": { "0": "mwezi huu", "1": "mwezi ujao", "-1": "mwezi uliopita" }, "relativeTime": { "future": { "one": "baada ya mwezi {0}", "other": "baada ya miezi {0}" }, "past": { "one": "mwezi {0} uliopita", "other": "miezi {0} iliyopita" } } }, "week": { "displayName": "wiki", "relativePeriod": "wiki ya {0}", "relative": { "0": "wiki hii", "1": "wiki ijayo", "-1": "wiki iliyopita" }, "relativeTime": { "future": { "one": "baada ya wiki {0}", "other": "baada ya wiki {0}" }, "past": { "one": "wiki {0} iliyopita", "other": "wiki {0} zilizopita" } } }, "week-short": { "displayName": "wiki", "relativePeriod": "wiki ya {0}", "relative": { "0": "wiki hii", "1": "wiki ijayo", "-1": "wiki iliyopita" }, "relativeTime": { "future": { "one": "baada ya wiki {0}", "other": "baada ya wiki {0}" }, "past": { "one": "wiki {0} iliyopita", "other": "wiki {0} zilizopita" } } }, "day": { "displayName": "siku", "relative": { "0": "leo", "1": "kesho", "2": "kesho kutwa", "-2": "juzi", "-1": "jana" }, "relativeTime": { "future": { "one": "baada ya siku {0}", "other": "baada ya siku {0}" }, "past": { "one": "siku {0} iliyopita", "other": "siku {0} zilizopita" } } }, "day-short": { "displayName": "siku", "relative": { "0": "leo", "1": "kesho", "2": "kesho kutwa", "-2": "juzi", "-1": "jana" }, "relativeTime": { "future": { "one": "baada ya siku {0}", "other": "baada ya siku {0}" }, "past": { "one": "siku {0} iliyopita", "other": "siku {0} zilizopita" } } }, "hour": { "displayName": "saa", "relative": { "0": "saa hii" }, "relativeTime": { "future": { "one": "baada ya saa {0}", "other": "baada ya saa {0}" }, "past": { "one": "saa {0} iliyopita", "other": "saa {0} zilizopita" } } }, "hour-short": { "displayName": "saa", "relative": { "0": "saa hii" }, "relativeTime": { "future": { "one": "baada ya saa {0}", "other": "baada ya saa {0}" }, "past": { "one": "saa {0} iliyopita", "other": "saa {0} zilizopita" } } }, "minute": { "displayName": "dakika", "relative": { "0": "dakika hii" }, "relativeTime": { "future": { "one": "baada ya dakika {0}", "other": "baada ya dakika {0}" }, "past": { "one": "dakika {0} iliyopita", "other": "dakika {0} zilizopita" } } }, "minute-short": { "displayName": "dak", "relative": { "0": "dakika hii" }, "relativeTime": { "future": { "one": "baada ya dakika {0}", "other": "baada ya dakika {0}" }, "past": { "one": "dakika {0} iliyopita", "other": "dakika {0} zilizopita" } } }, "second": { "displayName": "sekunde", "relative": { "0": "sasa hivi" }, "relativeTime": { "future": { "one": "baada ya sekunde {0}", "other": "baada ya sekunde {0}" }, "past": { "one": "Sekunde {0} iliyopita", "other": "Sekunde {0} zilizopita" } } }, "second-short": { "displayName": "sek", "relative": { "0": "sasa hivi" }, "relativeTime": { "future": { "one": "baada ya sekunde {0}", "other": "baada ya sekunde {0}" }, "past": { "one": "sekunde {0} iliyopita", "other": "sekunde {0} zilizopita" } } } } }, { "locale": "sw-CD", "parentLocale": "sw", "fields": { "year": { "displayName": "mwaka", "relative": { "0": "mwaka huu", "1": "mwaka ujao", "-1": "mwaka uliopita" }, "relativeTime": { "future": { "one": "baada ya mwaka {0}", "other": "baada ya miaka {0}" }, "past": { "one": "mwaka {0} uliopita", "other": "miaka {0} iliyopita" } } }, "year-short": { "displayName": "mwaka", "relative": { "0": "mwaka huu", "1": "mwaka ujao", "-1": "mwaka uliopita" }, "relativeTime": { "future": { "one": "baada ya mwaka {0}", "other": "baada ya miaka {0}" }, "past": { "one": "mwaka {0} uliopita", "other": "miaka {0} iliyopita" } } }, "month": { "displayName": "mwezi", "relative": { "0": "mwezi huu", "1": "mwezi ujao", "-1": "mwezi uliopita" }, "relativeTime": { "future": { "one": "baada ya mwezi {0}", "other": "baada ya miezi {0}" }, "past": { "one": "mwezi {0} uliopita", "other": "miezi {0} iliyopita" } } }, "month-short": { "displayName": "mwezi", "relative": { "0": "mwezi huu", "1": "mwezi ujao", "-1": "mwezi uliopita" }, "relativeTime": { "future": { "one": "baada ya mwezi {0}", "other": "baada ya miezi {0}" }, "past": { "one": "mwezi {0} uliopita", "other": "miezi {0} iliyopita" } } }, "week": { "displayName": "Juma", "relativePeriod": "wiki ya {0}", "relative": { "0": "wiki hii", "1": "wiki ijayo", "-1": "wiki iliyopita" }, "relativeTime": { "future": { "one": "baada ya wiki {0}", "other": "baada ya wiki {0}" }, "past": { "one": "wiki {0} iliyopita", "other": "wiki {0} zilizopita" } } }, "week-short": { "displayName": "wiki", "relativePeriod": "wiki ya {0}", "relative": { "0": "wiki hii", "1": "wiki ijayo", "-1": "wiki iliyopita" }, "relativeTime": { "future": { "one": "baada ya wiki {0}", "other": "baada ya wiki {0}" }, "past": { "one": "wiki {0} iliyopita", "other": "wiki {0} zilizopita" } } }, "day": { "displayName": "siku", "relative": { "0": "leo", "1": "kesho", "2": "kesho kutwa", "-2": "juzi", "-1": "jana" }, "relativeTime": { "future": { "one": "baada ya siku {0}", "other": "baada ya siku {0}" }, "past": { "one": "siku {0} iliyopita", "other": "siku {0} zilizopita" } } }, "day-short": { "displayName": "siku", "relative": { "0": "leo", "1": "kesho", "2": "kesho kutwa", "-2": "juzi", "-1": "jana" }, "relativeTime": { "future": { "one": "baada ya siku {0}", "other": "baada ya siku {0}" }, "past": { "one": "siku {0} iliyopita", "other": "siku {0} zilizopita" } } }, "hour": { "displayName": "saa", "relative": { "0": "saa hii" }, "relativeTime": { "future": { "one": "baada ya saa {0}", "other": "baada ya saa {0}" }, "past": { "one": "saa {0} iliyopita", "other": "saa {0} zilizopita" } } }, "hour-short": { "displayName": "saa", "relative": { "0": "saa hii" }, "relativeTime": { "future": { "one": "baada ya saa {0}", "other": "baada ya saa {0}" }, "past": { "one": "saa {0} iliyopita", "other": "saa {0} zilizopita" } } }, "minute": { "displayName": "dakika", "relative": { "0": "dakika hii" }, "relativeTime": { "future": { "one": "baada ya dakika {0}", "other": "baada ya dakika {0}" }, "past": { "one": "dakika {0} iliyopita", "other": "dakika {0} zilizopita" } } }, "minute-short": { "displayName": "dak", "relative": { "0": "dakika hii" }, "relativeTime": { "future": { "one": "baada ya dakika {0}", "other": "baada ya dakika {0}" }, "past": { "one": "dakika {0} iliyopita", "other": "dakika {0} zilizopita" } } }, "second": { "displayName": "sekunde", "relative": { "0": "sasa hivi" }, "relativeTime": { "future": { "one": "baada ya sekunde {0}", "other": "baada ya sekunde {0}" }, "past": { "one": "Sekunde {0} iliyopita", "other": "Sekunde {0} zilizopita" } } }, "second-short": { "displayName": "sek", "relative": { "0": "sasa hivi" }, "relativeTime": { "future": { "one": "baada ya sekunde {0}", "other": "baada ya sekunde {0}" }, "past": { "one": "sekunde {0} iliyopita", "other": "sekunde {0} zilizopita" } } } } }, { "locale": "sw-KE", "parentLocale": "sw" }, { "locale": "sw-UG", "parentLocale": "sw" }, { "locale": "syr", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ta", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ஆண்டு", "relative": { "0": "இந்த ஆண்டு", "1": "அடுத்த ஆண்டு", "-1": "கடந்த ஆண்டு" }, "relativeTime": { "future": { "one": "{0} ஆண்டில்", "other": "{0} ஆண்டுகளில்" }, "past": { "one": "{0} ஆண்டிற்கு முன்", "other": "{0} ஆண்டுகளுக்கு முன்" } } }, "year-short": { "displayName": "ஆண்டு", "relative": { "0": "இந்த ஆண்டு", "1": "அடுத்த ஆண்டு", "-1": "கடந்த ஆண்டு" }, "relativeTime": { "future": { "one": "{0} ஆண்டில்", "other": "{0} ஆண்டுகளில்" }, "past": { "one": "{0} ஆண்டிற்கு முன்", "other": "{0} ஆண்டுகளுக்கு முன்" } } }, "month": { "displayName": "மாதம்", "relative": { "0": "இந்த மாதம்", "1": "அடுத்த மாதம்", "-1": "கடந்த மாதம்" }, "relativeTime": { "future": { "one": "{0} மாதத்தில்", "other": "{0} மாதங்களில்" }, "past": { "one": "{0} மாதத்துக்கு முன்", "other": "{0} மாதங்களுக்கு முன்" } } }, "month-short": { "displayName": "மாத.", "relative": { "0": "இந்த மாதம்", "1": "அடுத்த மாதம்", "-1": "கடந்த மாதம்" }, "relativeTime": { "future": { "one": "{0} மாத.", "other": "{0} மாத." }, "past": { "one": "{0} மாத. முன்", "other": "{0} மாத. முன்" } } }, "week": { "displayName": "வாரம்", "relativePeriod": "{0} -இன் வாரம்", "relative": { "0": "இந்த வாரம்", "1": "அடுத்த வாரம்", "-1": "கடந்த வாரம்" }, "relativeTime": { "future": { "one": "{0} வாரத்தில்", "other": "{0} வாரங்களில்" }, "past": { "one": "{0} வாரத்திற்கு முன்", "other": "{0} வாரங்களுக்கு முன்" } } }, "week-short": { "displayName": "வாரம்", "relativePeriod": "{0} -இன் வாரம்", "relative": { "0": "இந்த வாரம்", "1": "அடுத்த வாரம்", "-1": "கடந்த வாரம்" }, "relativeTime": { "future": { "one": "{0} வார.", "other": "{0} வார." }, "past": { "one": "{0} வார. முன்", "other": "{0} வார. முன்" } } }, "day": { "displayName": "நாள்", "relative": { "0": "இன்று", "1": "நாளை", "2": "நாளை மறுநாள்", "-2": "நேற்று முன் தினம்", "-1": "நேற்று" }, "relativeTime": { "future": { "one": "{0} நாளில்", "other": "{0} நாட்களில்" }, "past": { "one": "{0} நாளுக்கு முன்", "other": "{0} நாட்களுக்கு முன்" } } }, "day-short": { "displayName": "நாள்", "relative": { "0": "இன்று", "1": "நாளை", "2": "நாளை மறுநாள்", "-2": "நேற்று முன் தினம்", "-1": "நேற்று" }, "relativeTime": { "future": { "one": "{0} நாளில்", "other": "{0} நாட்களில்" }, "past": { "one": "{0} நாளுக்கு முன்", "other": "{0} நாட்களுக்கு முன்" } } }, "hour": { "displayName": "மணி", "relative": { "0": "இந்த ஒரு மணிநேரத்தில்" }, "relativeTime": { "future": { "one": "{0} மணிநேரத்தில்", "other": "{0} மணிநேரத்தில்" }, "past": { "one": "{0} மணிநேரம் முன்", "other": "{0} மணிநேரம் முன்" } } }, "hour-short": { "displayName": "மணி.", "relative": { "0": "இந்த ஒரு மணிநேரத்தில்" }, "relativeTime": { "future": { "one": "{0} மணி.", "other": "{0} மணி." }, "past": { "one": "{0} மணி. முன்", "other": "{0} மணி. முன்" } } }, "minute": { "displayName": "நிமிடம்", "relative": { "0": "இந்த ஒரு நிமிடத்தில்" }, "relativeTime": { "future": { "one": "{0} நிமிடத்தில்", "other": "{0} நிமிடங்களில்" }, "past": { "one": "{0} நிமிடத்திற்கு முன்", "other": "{0} நிமிடங்களுக்கு முன்" } } }, "minute-short": { "displayName": "நிமி.", "relative": { "0": "இந்த ஒரு நிமிடத்தில்" }, "relativeTime": { "future": { "one": "{0} நிமி.", "other": "{0} நிமி." }, "past": { "one": "{0} நிமி. முன்", "other": "{0} நிமி. முன்" } } }, "second": { "displayName": "விநாடி", "relative": { "0": "இப்போது" }, "relativeTime": { "future": { "one": "{0} விநாடியில்", "other": "{0} விநாடிகளில்" }, "past": { "one": "{0} விநாடிக்கு முன்", "other": "{0} விநாடிகளுக்கு முன்" } } }, "second-short": { "displayName": "விநா.", "relative": { "0": "இப்போது" }, "relativeTime": { "future": { "one": "{0} விநா.", "other": "{0} விநா." }, "past": { "one": "{0} விநா. முன்", "other": "{0} விநா. முன்" } } } } }, { "locale": "ta-LK", "parentLocale": "ta" }, { "locale": "ta-MY", "parentLocale": "ta" }, { "locale": "ta-SG", "parentLocale": "ta" }, { "locale": "te", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "సంవత్సరం", "relative": { "0": "ఈ సంవత్సరం", "1": "తదుపరి సంవత్సరం", "-1": "గత సంవత్సరం" }, "relativeTime": { "future": { "one": "{0} సంవత్సరంలో", "other": "{0} సంవత్సరాల్లో" }, "past": { "one": "{0} సంవత్సరం క్రితం", "other": "{0} సంవత్సరాల క్రితం" } } }, "year-short": { "displayName": "సం.", "relative": { "0": "ఈ సంవత్సరం", "1": "తదుపరి సంవత్సరం", "-1": "గత సంవత్సరం" }, "relativeTime": { "future": { "one": "{0} సం.లో", "other": "{0} సం.ల్లో" }, "past": { "one": "{0} సం. క్రితం", "other": "{0} సం. క్రితం" } } }, "month": { "displayName": "నెల", "relative": { "0": "ఈ నెల", "1": "తదుపరి నెల", "-1": "గత నెల" }, "relativeTime": { "future": { "one": "{0} నెలలో", "other": "{0} నెలల్లో" }, "past": { "one": "{0} నెల క్రితం", "other": "{0} నెలల క్రితం" } } }, "month-short": { "displayName": "నెల", "relative": { "0": "ఈ నెల", "1": "తదుపరి నెల", "-1": "గత నెల" }, "relativeTime": { "future": { "one": "{0} నెలలో", "other": "{0} నెలల్లో" }, "past": { "one": "{0} నెల క్రితం", "other": "{0} నెలల క్రితం" } } }, "week": { "displayName": "వారము", "relativePeriod": "{0} వారం", "relative": { "0": "ఈ వారం", "1": "తదుపరి వారం", "-1": "గత వారం" }, "relativeTime": { "future": { "one": "{0} వారంలో", "other": "{0} వారాల్లో" }, "past": { "one": "{0} వారం క్రితం", "other": "{0} వారాల క్రితం" } } }, "week-short": { "displayName": "వా", "relativePeriod": "{0}లో వారం", "relative": { "0": "ఈ వారం", "1": "తదుపరి వారం", "-1": "గత వారం" }, "relativeTime": { "future": { "one": "{0} వారంలో", "other": "{0} వారాల్లో" }, "past": { "one": "{0} వారం క్రితం", "other": "{0} వారాల క్రితం" } } }, "day": { "displayName": "దినం", "relative": { "0": "ఈ రోజు", "1": "రేపు", "2": "ఎల్లుండి", "-2": "మొన్న", "-1": "నిన్న" }, "relativeTime": { "future": { "one": "{0} రోజులో", "other": "{0} రోజుల్లో" }, "past": { "one": "{0} రోజు క్రితం", "other": "{0} రోజుల క్రితం" } } }, "day-short": { "displayName": "దినం", "relative": { "0": "ఈ రోజు", "1": "రేపు", "2": "ఎల్లుండి", "-2": "మొన్న", "-1": "నిన్న" }, "relativeTime": { "future": { "one": "{0} రోజులో", "other": "{0} రోజుల్లో" }, "past": { "one": "{0} రోజు క్రితం", "other": "{0} రోజుల క్రితం" } } }, "hour": { "displayName": "గంట", "relative": { "0": "ఈ గంట" }, "relativeTime": { "future": { "one": "{0} గంటలో", "other": "{0} గంటల్లో" }, "past": { "one": "{0} గంట క్రితం", "other": "{0} గంటల క్రితం" } } }, "hour-short": { "displayName": "గం.", "relative": { "0": "ఈ గంట" }, "relativeTime": { "future": { "one": "{0} గం.లో", "other": "{0} గం.లో" }, "past": { "one": "{0} గం. క్రితం", "other": "{0} గం. క్రితం" } } }, "minute": { "displayName": "నిమిషము", "relative": { "0": "ఈ నిమిషం" }, "relativeTime": { "future": { "one": "{0} నిమిషంలో", "other": "{0} నిమిషాల్లో" }, "past": { "one": "{0} నిమిషం క్రితం", "other": "{0} నిమిషాల క్రితం" } } }, "minute-short": { "displayName": "నిమి.", "relative": { "0": "ఈ నిమిషం" }, "relativeTime": { "future": { "one": "{0} నిమి.లో", "other": "{0} నిమి.లో" }, "past": { "one": "{0} నిమి. క్రితం", "other": "{0} నిమి. క్రితం" } } }, "second": { "displayName": "సెకను", "relative": { "0": "ప్రస్తుతం" }, "relativeTime": { "future": { "one": "{0} సెకనులో", "other": "{0} సెకన్లలో" }, "past": { "one": "{0} సెకను క్రితం", "other": "{0} సెకన్ల క్రితం" } } }, "second-short": { "displayName": "సెక.", "relative": { "0": "ప్రస్తుతం" }, "relativeTime": { "future": { "one": "{0} సెకనులో", "other": "{0} సెకన్లలో" }, "past": { "one": "{0} సెక. క్రితం", "other": "{0} సెక. క్రితం" } } } } }, { "locale": "teo", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Ekan", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Ekan", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Elap", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Elap", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Ewiki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Ewiki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Aparan", "relative": { "0": "Lolo", "1": "Moi", "-1": "Jaan" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Aparan", "relative": { "0": "Lolo", "1": "Moi", "-1": "Jaan" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Esaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Esaa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Idakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Idakika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Isekonde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Isekonde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "teo-KE", "parentLocale": "teo" }, { "locale": "tg", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "сол", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "с.", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "моҳ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "м.", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "ҳафта", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "ҳ.", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "рӯз", "relative": { "0": "имрӯз", "1": "фардо", "-1": "дирӯз" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "рӯз", "relative": { "0": "имрӯз", "1": "фардо", "-1": "дирӯз" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "соат", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "ст.", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "дақиқа", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "дақ.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "сония", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "сон.", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "th", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return 'other';
    }, "fields": { "year": { "displayName": "ปี", "relative": { "0": "ปีนี้", "1": "ปีหน้า", "-1": "ปีที่แล้ว" }, "relativeTime": { "future": { "other": "ในอีก {0} ปี" }, "past": { "other": "{0} ปีที่แล้ว" } } }, "year-short": { "displayName": "ปี", "relative": { "0": "ปีนี้", "1": "ปีหน้า", "-1": "ปีที่แล้ว" }, "relativeTime": { "future": { "other": "ใน {0} ปี" }, "past": { "other": "{0} ปีที่แล้ว" } } }, "month": { "displayName": "เดือน", "relative": { "0": "เดือนนี้", "1": "เดือนหน้า", "-1": "เดือนที่แล้ว" }, "relativeTime": { "future": { "other": "ในอีก {0} เดือน" }, "past": { "other": "{0} เดือนที่ผ่านมา" } } }, "month-short": { "displayName": "เดือน", "relative": { "0": "เดือนนี้", "1": "เดือนหน้า", "-1": "เดือนที่แล้ว" }, "relativeTime": { "future": { "other": "ใน {0} เดือน" }, "past": { "other": "{0} เดือนที่แล้ว" } } }, "week": { "displayName": "สัปดาห์", "relativePeriod": "สัปดาห์ที่เริ่มต้นวันที่", "relative": { "0": "สัปดาห์นี้", "1": "สัปดาห์หน้า", "-1": "สัปดาห์ที่แล้ว" }, "relativeTime": { "future": { "other": "ในอีก {0} สัปดาห์" }, "past": { "other": "{0} สัปดาห์ที่ผ่านมา" } } }, "week-short": { "displayName": "สัปดาห์", "relativePeriod": "สัปดาห์ที่เริ่มต้นวันที่", "relative": { "0": "สัปดาห์นี้", "1": "สัปดาห์หน้า", "-1": "สัปดาห์ที่แล้ว" }, "relativeTime": { "future": { "other": "ใน {0} สัปดาห์" }, "past": { "other": "{0} สัปดาห์ที่แล้ว" } } }, "day": { "displayName": "วัน", "relative": { "0": "วันนี้", "1": "พรุ่งนี้", "2": "มะรืนนี้", "-2": "เมื่อวานซืน", "-1": "เมื่อวาน" }, "relativeTime": { "future": { "other": "ในอีก {0} วัน" }, "past": { "other": "{0} วันที่ผ่านมา" } } }, "day-short": { "displayName": "วัน", "relative": { "0": "วันนี้", "1": "พรุ่งนี้", "2": "มะรืนนี้", "-2": "เมื่อวานซืน", "-1": "เมื่อวาน" }, "relativeTime": { "future": { "other": "ใน {0} วัน" }, "past": { "other": "{0} วันที่แล้ว" } } }, "hour": { "displayName": "ชั่วโมง", "relative": { "0": "ชั่วโมงนี้" }, "relativeTime": { "future": { "other": "ในอีก {0} ชั่วโมง" }, "past": { "other": "{0} ชั่วโมงที่ผ่านมา" } } }, "hour-short": { "displayName": "ชม.", "relative": { "0": "ชั่วโมงนี้" }, "relativeTime": { "future": { "other": "ใน {0} ชม." }, "past": { "other": "{0} ชม. ที่แล้ว" } } }, "minute": { "displayName": "นาที", "relative": { "0": "นาทีนี้" }, "relativeTime": { "future": { "other": "ในอีก {0} นาที" }, "past": { "other": "{0} นาทีที่ผ่านมา" } } }, "minute-short": { "displayName": "น.", "relative": { "0": "นาทีนี้" }, "relativeTime": { "future": { "other": "ใน {0} นาที" }, "past": { "other": "{0} นาทีที่แล้ว" } } }, "second": { "displayName": "วินาที", "relative": { "0": "ขณะนี้" }, "relativeTime": { "future": { "other": "ในอีก {0} วินาที" }, "past": { "other": "{0} วินาทีที่ผ่านมา" } } }, "second-short": { "displayName": "วิ", "relative": { "0": "ขณะนี้" }, "relativeTime": { "future": { "other": "ใน {0} วินาที" }, "past": { "other": "{0} วินาทีที่แล้ว" } } } } }, { "locale": "ti", "pluralRuleFunction": function (n) {
        return ((n == 0
            || n == 1)) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ዓመት", "relative": { "0": "ሎሚ ዓመት", "1": "ንዓመታ", "-1": "ዓሚ" }, "relativeTime": { "future": { "one": "ኣብ {0} ዓ", "other": "ኣብ {0} ዓ" }, "past": { "one": "ቅድሚ {0} ዓ", "other": "ቅድሚ {0} ዓ" } } }, "year-short": { "displayName": "ዓመት", "relative": { "0": "ሎሚ ዓመት", "1": "ንዓመታ", "-1": "ዓሚ" }, "relativeTime": { "future": { "one": "ኣብ {0} ዓ", "other": "ኣብ {0} ዓ" }, "past": { "one": "ቅድሚ -{0} ዓ", "other": "ቅድሚ {0} ዓ" } } }, "month": { "displayName": "ወርሒ", "relative": { "0": "ህሉው ወርሒ", "1": "ዝመጽእ ወርሒ", "-1": "last month" }, "relativeTime": { "future": { "one": "ኣብ {0} ወርሒ", "other": "ኣብ {0} ወርሒ" }, "past": { "one": "ቅድሚ {0} ወርሒ", "other": "ቅድሚ {0} ወርሒ" } } }, "month-short": { "displayName": "ወርሒ", "relative": { "0": "ህሉው ወርሒ", "1": "ዝመጽእ ወርሒ", "-1": "last month" }, "relativeTime": { "future": { "one": "ኣብ {0} ወርሒ", "other": "ኣብ {0} ወርሒ" }, "past": { "one": "ቅድሚ {0} ወርሒ", "other": "ቅድሚ {0} ወርሒ" } } }, "week": { "displayName": "ሰሙን", "relativePeriod": "ሰሙን ናይ {0}", "relative": { "0": "ህሉው ሰሙን", "1": "ዝመጽእ ሰሙን", "-1": "ዝሓለፈ ሰሙን" }, "relativeTime": { "future": { "one": "ኣብ {0} ሰሙን", "other": "ኣብ {0} ሰሙን" }, "past": { "one": "ቅድሚ {0} ሰሙን", "other": "ቅድሚ {0} ሰሙን" } } }, "week-short": { "displayName": "ሰሙን", "relativePeriod": "ሰሙን ናይ {0}", "relative": { "0": "ህሉው ሰሙን", "1": "ዝመጽእ ሰሙን", "-1": "ዝሓለፈ ሰሙን" }, "relativeTime": { "future": { "one": "ኣብ {0} ሰሙን", "other": "ኣብ {0} ሰሙን" }, "past": { "one": "ቅድሚ {0} ሰሙን", "other": "ቅድሚ {0} ሰሙን" } } }, "day": { "displayName": "መዓልቲ", "relative": { "0": "ሎሚ", "1": "ጽባሕ", "-1": "ትማሊ" }, "relativeTime": { "future": { "one": "ኣብ {0} መዓልቲ", "other": "ኣብ {0} መዓልቲ" }, "past": { "one": "ቅድሚ {0} መዓልቲ", "other": "ኣብ {0} መዓልቲ" } } }, "day-short": { "displayName": "መዓልቲ", "relative": { "0": "ሎሚ", "1": "ጽባሕ", "-1": "ትማሊ" }, "relativeTime": { "future": { "one": "ኣብ {0} መዓልቲ", "other": "ኣብ {0} መዓልቲ" }, "past": { "one": "ቅድሚ {0} መዓልቲ", "other": "ቅድሚ {0} መዓልቲ" } } }, "hour": { "displayName": "ሰዓት", "relative": { "0": "ኣብዚ ሰዓት" }, "relativeTime": { "future": { "one": "ኣብ {0} ሰዓት", "other": "ኣብ {0} ሰዓት" }, "past": { "one": "ቅድሚ {0} ሰዓት", "other": "ቅድሚ {0} ሰዓት" } } }, "hour-short": { "displayName": "ሰዓት", "relative": { "0": "ኣብዚ ሰዓት" }, "relativeTime": { "future": { "one": "ኣብ {0} ሰዓት", "other": "ኣብ {0} ሰዓት" }, "past": { "one": "ቅድሚ {0} ሰዓት", "other": "ቅድሚ {0} ሰዓት" } } }, "minute": { "displayName": "ደቒቕ", "relative": { "0": "ኣብዚ ደቒቕ" }, "relativeTime": { "future": { "one": "ኣብ {0} ደቒቕ", "other": "ኣብ {0} ደቒቕ" }, "past": { "one": "ቅድሚ {0} ደቒቕ", "other": "ቅድሚ {0} ደቒቕ" } } }, "minute-short": { "displayName": "ደቒቕ", "relative": { "0": "ኣብዚ ደቒቕ" }, "relativeTime": { "future": { "one": "ኣብ {0} ደቒቕ", "other": "ኣብ {0} ደቒቕ" }, "past": { "one": "ቅድሚ {0} ደቒቕ", "other": "ቅድሚ {0} ደቒቕ" } } }, "second": { "displayName": "ካልኢት", "relative": { "0": "ሕጂ" }, "relativeTime": { "future": { "one": "ኣብ {0} ካልኢት", "other": "ኣብ {0} ካልኢት" }, "past": { "one": "ቅድሚ {0} ካልኢት", "other": "ቅድሚ {0} ካልኢት" } } }, "second-short": { "displayName": "ካልኢት", "relative": { "0": "ሕጂ" }, "relativeTime": { "future": { "one": "ኣብ {0} ካልኢት", "other": "ኣብ {0} ካልኢት" }, "past": { "one": "ቅድሚ {0} ካልኢት", "other": "ቅድሚ {0} ካልኢት" } } } } }, { "locale": "ti-ER", "parentLocale": "ti" }, { "locale": "tig", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "tk", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1);
        if (ord)
            return ((n10 == 6 || n10 == 9)
                || n == 10) ? 'few' : 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "ýyl", "relative": { "0": "şu ýyl", "1": "indiki ýyl", "-1": "geçen ýyl" }, "relativeTime": { "future": { "one": "{0} ýyldan", "other": "{0} ýyldan" }, "past": { "one": "{0} ýyl öň", "other": "{0} ýyl öň" } } }, "year-short": { "displayName": "ý.", "relative": { "0": "şu ýyl", "1": "indiki ýyl", "-1": "geçen ýyl" }, "relativeTime": { "future": { "one": "{0} ý-dan", "other": "{0} ý-dan" }, "past": { "one": "{0} ý. öň", "other": "{0} ý. öň" } } }, "month": { "displayName": "aý", "relative": { "0": "şu aý", "1": "indiki aý", "-1": "geçen aý" }, "relativeTime": { "future": { "one": "{0} aýdan", "other": "{0} aýdan" }, "past": { "one": "{0} aý öň", "other": "{0} aý öň" } } }, "month-short": { "displayName": "aý", "relative": { "0": "şu aý", "1": "indiki aý", "-1": "geçen aý" }, "relativeTime": { "future": { "one": "{0} aýdan", "other": "{0} aýdan" }, "past": { "one": "{0} aý öň", "other": "{0} aý öň" } } }, "week": { "displayName": "hepde", "relativePeriod": "{0} hepdesi", "relative": { "0": "şu hepde", "1": "indiki hepde", "-1": "geçen hepde" }, "relativeTime": { "future": { "one": "{0} hepdeden", "other": "{0} hepdeden" }, "past": { "one": "{0} hepde öň", "other": "{0} hepde öň" } } }, "week-short": { "displayName": "hep.", "relativePeriod": "{0} hepdesi", "relative": { "0": "şu hepde", "1": "indiki hepde", "-1": "geçen hepde" }, "relativeTime": { "future": { "one": "{0} hep-den", "other": "{0} hep-den" }, "past": { "one": "{0} hep. öň", "other": "{0} hep. öň" } } }, "day": { "displayName": "gün", "relative": { "0": "şu gün", "1": "ertir", "-1": "düýn" }, "relativeTime": { "future": { "one": "{0} günden", "other": "{0} günden" }, "past": { "one": "{0} gün öň", "other": "{0} gün öň" } } }, "day-short": { "displayName": "gün", "relative": { "0": "şu gün", "1": "ertir", "-1": "düýn" }, "relativeTime": { "future": { "one": "{0} g-den", "other": "{0} g-den" }, "past": { "one": "{0} g. öň", "other": "{0} g. öň" } } }, "hour": { "displayName": "sagat", "relative": { "0": "şu sagat" }, "relativeTime": { "future": { "one": "{0} sagatdan", "other": "{0} sagatdan" }, "past": { "one": "{0} sagat öň", "other": "{0} sagat öň" } } }, "hour-short": { "displayName": "sag.", "relative": { "0": "şu sagat" }, "relativeTime": { "future": { "one": "{0} sag-dan", "other": "{0} sag-dan" }, "past": { "one": "{0} sag. öň", "other": "{0} sag. öň" } } }, "minute": { "displayName": "minut", "relative": { "0": "şu minut" }, "relativeTime": { "future": { "one": "{0} minutdan", "other": "{0} minutdan" }, "past": { "one": "{0} minut öň", "other": "{0} minut öň" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "şu minut" }, "relativeTime": { "future": { "one": "{0} min-dan", "other": "{0} min-dan" }, "past": { "one": "{0} min. öň", "other": "{0} min. öň" } } }, "second": { "displayName": "sekunt", "relative": { "0": "häzir" }, "relativeTime": { "future": { "one": "{0} sekuntdan", "other": "{0} sekuntdan" }, "past": { "one": "{0} sekunt öň", "other": "{0} sekunt öň" } } }, "second-short": { "displayName": "sek.", "relative": { "0": "häzir" }, "relativeTime": { "future": { "one": "{0} sek-dan", "other": "{0} sek-dan" }, "past": { "one": "{0} sek. öň", "other": "{0} sek. öň" } } } } }, { "locale": "tl", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i10 = i.slice(-1), f10 = f.slice(-1);
        if (ord)
            return (n == 1) ? 'one' : 'other';
        return (v0 && (i == 1 || i == 2 || i == 3)
            || v0 && i10 != 4 && i10 != 6 && i10 != 9
            || !v0 && f10 != 4 && f10 != 6 && f10 != 9) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "tn", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "to", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "taʻu", "relative": { "0": "taʻú ni", "1": "taʻu kahaʻu", "-1": "taʻu kuoʻosi" }, "relativeTime": { "future": { "other": "ʻi he taʻu ʻe {0}" }, "past": { "other": "taʻu ʻe {0} kuoʻosi" } } }, "year-short": { "displayName": "taʻu", "relative": { "0": "taʻú ni", "1": "taʻu kahaʻu", "-1": "taʻu kuoʻosi" }, "relativeTime": { "future": { "other": "ʻi he taʻu ʻe {0}" }, "past": { "other": "taʻu ʻe {0} kuoʻosi" } } }, "month": { "displayName": "māhina", "relative": { "0": "māhiná ni", "1": "māhina kahaʻu", "-1": "māhina kuoʻosi" }, "relativeTime": { "future": { "other": "ʻi he māhina ʻe {0}" }, "past": { "other": "māhina ʻe {0} kuoʻosi" } } }, "month-short": { "displayName": "māhina", "relative": { "0": "māhiná ni", "1": "māhina kahaʻu", "-1": "māhina kuoʻosi" }, "relativeTime": { "future": { "other": "ʻi he māhina ʻe {0}" }, "past": { "other": "māhina ʻe {0} kuoʻosi" } } }, "week": { "displayName": "uike", "relativePeriod": "the week of {0}", "relative": { "0": "uiké ni", "1": "uike kahaʻu", "-1": "uike kuoʻosi" }, "relativeTime": { "future": { "other": "ʻi he uike ʻe {0}" }, "past": { "other": "uike ʻe {0} kuoʻosi" } } }, "week-short": { "displayName": "uike", "relativePeriod": "the week of {0}", "relative": { "0": "uiké ni", "1": "uike kahaʻu", "-1": "uike kuoʻosi" }, "relativeTime": { "future": { "other": "ʻi he uike ʻe {0}" }, "past": { "other": "uike ʻe {0} kuoʻosi" } } }, "day": { "displayName": "ʻaho", "relative": { "0": "ʻahó ni", "1": "ʻapongipongi", "2": "ʻahepongipongi", "-2": "ʻaneheafi", "-1": "ʻaneafi" }, "relativeTime": { "future": { "other": "ʻi he ʻaho ʻe {0}" }, "past": { "other": "ʻaho ʻe {0} kuoʻosi" } } }, "day-short": { "displayName": "ʻaho", "relative": { "0": "ʻahó ni", "1": "ʻapongipongi", "2": "ʻahepongipongi", "-2": "ʻaneheafi", "-1": "ʻaneafi" }, "relativeTime": { "future": { "other": "ʻi he ʻaho ʻe {0}" }, "past": { "other": "ʻaho ʻe {0} kuoʻosi" } } }, "hour": { "displayName": "houa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "ʻi he houa ʻe {0}" }, "past": { "other": "houa ʻe {0} kuoʻosi" } } }, "hour-short": { "displayName": "houa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "ʻi he houa ʻe {0}" }, "past": { "other": "houa ʻe {0} kuoʻosi" } } }, "minute": { "displayName": "miniti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "ʻi he miniti ʻe {0}" }, "past": { "other": "miniti ʻe {0} kuoʻosi" } } }, "minute-short": { "displayName": "miniti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "ʻi he miniti ʻe {0}" }, "past": { "other": "miniti ʻe {0} kuoʻosi" } } }, "second": { "displayName": "sekoni", "relative": { "0": "taimí ni" }, "relativeTime": { "future": { "other": "ʻi he sekoni ʻe {0}" }, "past": { "other": "sekoni ʻe {0} kuoʻosi" } } }, "second-short": { "displayName": "sekoni", "relative": { "0": "taimí ni" }, "relativeTime": { "future": { "other": "ʻi he sekoni ʻe {0}" }, "past": { "other": "sekoni ʻe {0} kuoʻosi" } } } } }, { "locale": "tr", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "yıl", "relative": { "0": "bu yıl", "1": "gelecek yıl", "-1": "geçen yıl" }, "relativeTime": { "future": { "one": "{0} yıl sonra", "other": "{0} yıl sonra" }, "past": { "one": "{0} yıl önce", "other": "{0} yıl önce" } } }, "year-short": { "displayName": "yıl", "relative": { "0": "bu yıl", "1": "gelecek yıl", "-1": "geçen yıl" }, "relativeTime": { "future": { "one": "{0} yıl sonra", "other": "{0} yıl sonra" }, "past": { "one": "{0} yıl önce", "other": "{0} yıl önce" } } }, "month": { "displayName": "ay", "relative": { "0": "bu ay", "1": "gelecek ay", "-1": "geçen ay" }, "relativeTime": { "future": { "one": "{0} ay sonra", "other": "{0} ay sonra" }, "past": { "one": "{0} ay önce", "other": "{0} ay önce" } } }, "month-short": { "displayName": "ay", "relative": { "0": "bu ay", "1": "gelecek ay", "-1": "geçen ay" }, "relativeTime": { "future": { "one": "{0} ay sonra", "other": "{0} ay sonra" }, "past": { "one": "{0} ay önce", "other": "{0} ay önce" } } }, "week": { "displayName": "hafta", "relativePeriod": "{0} haftası", "relative": { "0": "bu hafta", "1": "gelecek hafta", "-1": "geçen hafta" }, "relativeTime": { "future": { "one": "{0} hafta sonra", "other": "{0} hafta sonra" }, "past": { "one": "{0} hafta önce", "other": "{0} hafta önce" } } }, "week-short": { "displayName": "hf.", "relativePeriod": "{0} haftası", "relative": { "0": "bu hafta", "1": "gelecek hafta", "-1": "geçen hafta" }, "relativeTime": { "future": { "one": "{0} hf. sonra", "other": "{0} hf. sonra" }, "past": { "one": "{0} hf. önce", "other": "{0} hf. önce" } } }, "day": { "displayName": "gün", "relative": { "0": "bugün", "1": "yarın", "2": "öbür gün", "-2": "evvelsi gün", "-1": "dün" }, "relativeTime": { "future": { "one": "{0} gün sonra", "other": "{0} gün sonra" }, "past": { "one": "{0} gün önce", "other": "{0} gün önce" } } }, "day-short": { "displayName": "gün", "relative": { "0": "bugün", "1": "yarın", "2": "öbür gün", "-2": "evvelsi gün", "-1": "dün" }, "relativeTime": { "future": { "one": "{0} gün sonra", "other": "{0} gün sonra" }, "past": { "one": "{0} gün önce", "other": "{0} gün önce" } } }, "hour": { "displayName": "saat", "relative": { "0": "bu saat" }, "relativeTime": { "future": { "one": "{0} saat sonra", "other": "{0} saat sonra" }, "past": { "one": "{0} saat önce", "other": "{0} saat önce" } } }, "hour-short": { "displayName": "sa.", "relative": { "0": "bu saat" }, "relativeTime": { "future": { "one": "{0} sa. sonra", "other": "{0} sa. sonra" }, "past": { "one": "{0} sa. önce", "other": "{0} sa. önce" } } }, "minute": { "displayName": "dakika", "relative": { "0": "bu dakika" }, "relativeTime": { "future": { "one": "{0} dakika sonra", "other": "{0} dakika sonra" }, "past": { "one": "{0} dakika önce", "other": "{0} dakika önce" } } }, "minute-short": { "displayName": "dk.", "relative": { "0": "bu dakika" }, "relativeTime": { "future": { "one": "{0} dk. sonra", "other": "{0} dk. sonra" }, "past": { "one": "{0} dk. önce", "other": "{0} dk. önce" } } }, "second": { "displayName": "saniye", "relative": { "0": "şimdi" }, "relativeTime": { "future": { "one": "{0} saniye sonra", "other": "{0} saniye sonra" }, "past": { "one": "{0} saniye önce", "other": "{0} saniye önce" } } }, "second-short": { "displayName": "sn.", "relative": { "0": "şimdi" }, "relativeTime": { "future": { "one": "{0} sn. sonra", "other": "{0} sn. sonra" }, "past": { "one": "{0} sn. önce", "other": "{0} sn. önce" } } } } }, { "locale": "tr-CY", "parentLocale": "tr" }, { "locale": "ts", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "tt", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "ел", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "ел", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "ай", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "ай", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "атна", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "атна", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "көн", "relative": { "0": "бүген", "1": "иртәгә", "-1": "кичә" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "көн", "relative": { "0": "бүген", "1": "иртәгә", "-1": "кичә" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "сәгать", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "сәг.", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "минут", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "мин.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "секунд", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "с.", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "twq", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Jiiri", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Jiiri", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Handu", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Handu", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Hebu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Hebu", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Zaari", "relative": { "0": "Hõo", "1": "Suba", "-1": "Bi" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Zaari", "relative": { "0": "Hõo", "1": "Suba", "-1": "Bi" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Guuru", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Guuru", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Miniti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Miniti", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Miti", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Miti", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "tzm", "pluralRuleFunction": function (n) {
        var s = String(n).split('.'), t0 = Number(s[0]) == n;
        return ((n == 0 || n == 1)
            || (t0 && n >= 11 && n <= 99)) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Asseggas", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Asseggas", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Ayur", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Ayur", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Imalass", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Imalass", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ass", "relative": { "0": "Assa", "1": "Asekka", "-1": "Assenaṭ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ass", "relative": { "0": "Assa", "1": "Asekka", "-1": "Assenaṭ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Tasragt", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Tasragt", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Tusdat", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Tusdat", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Tusnat", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Tusnat", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "ug", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "يىل", "relative": { "0": "بۇ يىل", "1": "كېلەر يىل", "-1": "ئۆتكەن يىل" }, "relativeTime": { "future": { "one": "{0} يىلدىن كېيىن", "other": "{0} يىلدىن كېيىن" }, "past": { "one": "{0} يىل ئىلگىرى", "other": "{0} يىل ئىلگىرى" } } }, "year-short": { "displayName": "يىل", "relative": { "0": "بۇ يىل", "1": "كېلەر يىل", "-1": "ئۆتكەن يىل" }, "relativeTime": { "future": { "one": "{0} يىلدىن كېيىن", "other": "{0} يىلدىن كېيىن" }, "past": { "one": "{0} يىل ئىلگىرى", "other": "{0} يىل ئىلگىرى" } } }, "month": { "displayName": "ئاي", "relative": { "0": "بۇ ئاي", "1": "كېلەر ئاي", "-1": "ئۆتكەن ئاي" }, "relativeTime": { "future": { "one": "{0} ئايدىن كېيىن", "other": "{0} ئايدىن كېيىن" }, "past": { "one": "{0} ئاي ئىلگىرى", "other": "{0} ئاي ئىلگىرى" } } }, "month-short": { "displayName": "ئاي", "relative": { "0": "بۇ ئاي", "1": "كېلەر ئاي", "-1": "ئۆتكەن ئاي" }, "relativeTime": { "future": { "one": "{0} ئايدىن كېيىن", "other": "{0} ئايدىن كېيىن" }, "past": { "one": "{0} ئاي ئىلگىرى", "other": "{0} ئاي ئىلگىرى" } } }, "week": { "displayName": "ھەپتە", "relativePeriod": "the week of {0}", "relative": { "0": "بۇ ھەپتە", "1": "كېلەر ھەپتە", "-1": "ئۆتكەن ھەپتە" }, "relativeTime": { "future": { "one": "{0} ھەپتىدىن كېيىن", "other": "{0} ھەپتىدىن كېيىن" }, "past": { "one": "{0} ھەپتە ئىلگىرى", "other": "{0} ھەپتە ئىلگىرى" } } }, "week-short": { "displayName": "ھەپتە", "relativePeriod": "the week of {0}", "relative": { "0": "بۇ ھەپتە", "1": "كېلەر ھەپتە", "-1": "ئۆتكەن ھەپتە" }, "relativeTime": { "future": { "one": "{0} ھەپتىدىن كېيىن", "other": "{0} ھەپتىدىن كېيىن" }, "past": { "one": "{0} ھەپتە ئىلگىرى", "other": "{0} ھەپتە ئىلگىرى" } } }, "day": { "displayName": "كۈن", "relative": { "0": "بۈگۈن", "1": "ئەتە", "-1": "تۈنۈگۈن" }, "relativeTime": { "future": { "one": "{0} كۈندىن كېيىن", "other": "{0} كۈندىن كېيىن" }, "past": { "one": "{0} كۈن ئىلگىرى", "other": "{0} كۈن ئىلگىرى" } } }, "day-short": { "displayName": "كۈن", "relative": { "0": "بۈگۈن", "1": "ئەتە", "-1": "تۈنۈگۈن" }, "relativeTime": { "future": { "one": "{0} كۈندىن كېيىن", "other": "{0} كۈندىن كېيىن" }, "past": { "one": "{0} كۈن ئىلگىرى", "other": "{0} كۈن ئىلگىرى" } } }, "hour": { "displayName": "سائەت", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "{0} سائەتتىن كېيىن", "other": "{0} سائەتتىن كېيىن" }, "past": { "one": "{0} سائەت ئىلگىرى", "other": "{0} سائەت ئىلگىرى" } } }, "hour-short": { "displayName": "سائەت", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "{0} سائەتتىن كېيىن", "other": "{0} سائەتتىن كېيىن" }, "past": { "one": "{0} سائەت ئىلگىرى", "other": "{0} سائەت ئىلگىرى" } } }, "minute": { "displayName": "مىنۇت", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "{0} مىنۇتتىن كېيىن", "other": "{0} مىنۇتتىن كېيىن" }, "past": { "one": "{0} مىنۇت ئىلگىرى", "other": "{0} مىنۇت ئىلگىرى" } } }, "minute-short": { "displayName": "مىنۇت", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "{0} مىنۇتتىن كېيىن", "other": "{0} مىنۇتتىن كېيىن" }, "past": { "one": "{0} مىنۇت ئىلگىرى", "other": "{0} مىنۇت ئىلگىرى" } } }, "second": { "displayName": "سېكۇنت", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "{0} سېكۇنتتىن كېيىن", "other": "{0} سېكۇنتتىن كېيىن" }, "past": { "one": "{0} سېكۇنت ئىلگىرى", "other": "{0} سېكۇنت ئىلگىرى" } } }, "second-short": { "displayName": "سېكۇنت", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "{0} سېكۇنتتىن كېيىن", "other": "{0} سېكۇنتتىن كېيىن" }, "past": { "one": "{0} سېكۇنت ئىلگىرى", "other": "{0} سېكۇنت ئىلگىرى" } } } } }, { "locale": "uk", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), i = s[0], v0 = !s[1], t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2), i10 = i.slice(-1), i100 = i.slice(-2);
        if (ord)
            return (n10 == 3 && n100 != 13) ? 'few' : 'other';
        return (v0 && i10 == 1 && i100 != 11) ? 'one'
            : (v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12
                || i100 > 14)) ? 'few'
                : (v0 && i10 == 0 || v0 && (i10 >= 5 && i10 <= 9)
                    || v0 && (i100 >= 11 && i100 <= 14)) ? 'many'
                    : 'other';
    }, "fields": { "year": { "displayName": "рік", "relative": { "0": "цього року", "1": "наступного року", "-1": "торік" }, "relativeTime": { "future": { "one": "через {0} рік", "few": "через {0} роки", "many": "через {0} років", "other": "через {0} року" }, "past": { "one": "{0} рік тому", "few": "{0} роки тому", "many": "{0} років тому", "other": "{0} року тому" } } }, "year-short": { "displayName": "р.", "relative": { "0": "цього року", "1": "наступного року", "-1": "торік" }, "relativeTime": { "future": { "one": "через {0} р.", "few": "через {0} р.", "many": "через {0} р.", "other": "через {0} р." }, "past": { "one": "{0} р. тому", "few": "{0} р. тому", "many": "{0} р. тому", "other": "{0} р. тому" } } }, "month": { "displayName": "місяць", "relative": { "0": "цього місяця", "1": "наступного місяця", "-1": "минулого місяця" }, "relativeTime": { "future": { "one": "через {0} місяць", "few": "через {0} місяці", "many": "через {0} місяців", "other": "через {0} місяця" }, "past": { "one": "{0} місяць тому", "few": "{0} місяці тому", "many": "{0} місяців тому", "other": "{0} місяця тому" } } }, "month-short": { "displayName": "міс.", "relative": { "0": "цього місяця", "1": "наступного місяця", "-1": "минулого місяця" }, "relativeTime": { "future": { "one": "через {0} міс.", "few": "через {0} міс.", "many": "через {0} міс.", "other": "через {0} міс." }, "past": { "one": "{0} міс. тому", "few": "{0} міс. тому", "many": "{0} міс. тому", "other": "{0} міс. тому" } } }, "week": { "displayName": "тиждень", "relativePeriod": "тиждень з {0}", "relative": { "0": "цього тижня", "1": "наступного тижня", "-1": "минулого тижня" }, "relativeTime": { "future": { "one": "через {0} тиждень", "few": "через {0} тижні", "many": "через {0} тижнів", "other": "через {0} тижня" }, "past": { "one": "{0} тиждень тому", "few": "{0} тижні тому", "many": "{0} тижнів тому", "other": "{0} тижня тому" } } }, "week-short": { "displayName": "тиж.", "relativePeriod": "тиждень з {0}", "relative": { "0": "цього тижня", "1": "наступного тижня", "-1": "минулого тижня" }, "relativeTime": { "future": { "one": "через {0} тиж.", "few": "через {0} тиж.", "many": "через {0} тиж.", "other": "через {0} тиж." }, "past": { "one": "{0} тиж. тому", "few": "{0} тиж. тому", "many": "{0} тиж. тому", "other": "{0} тиж. тому" } } }, "day": { "displayName": "день", "relative": { "0": "сьогодні", "1": "завтра", "2": "післязавтра", "-2": "позавчора", "-1": "учора" }, "relativeTime": { "future": { "one": "через {0} день", "few": "через {0} дні", "many": "через {0} днів", "other": "через {0} дня" }, "past": { "one": "{0} день тому", "few": "{0} дні тому", "many": "{0} днів тому", "other": "{0} дня тому" } } }, "day-short": { "displayName": "д.", "relative": { "0": "сьогодні", "1": "завтра", "2": "післязавтра", "-2": "позавчора", "-1": "учора" }, "relativeTime": { "future": { "one": "через {0} дн.", "few": "через {0} дн.", "many": "через {0} дн.", "other": "через {0} дн." }, "past": { "one": "{0} дн. тому", "few": "{0} дн. тому", "many": "{0} дн. тому", "other": "{0} дн. тому" } } }, "hour": { "displayName": "година", "relative": { "0": "цієї години" }, "relativeTime": { "future": { "one": "через {0} годину", "few": "через {0} години", "many": "через {0} годин", "other": "через {0} години" }, "past": { "one": "{0} годину тому", "few": "{0} години тому", "many": "{0} годин тому", "other": "{0} години тому" } } }, "hour-short": { "displayName": "год.", "relative": { "0": "цієї години" }, "relativeTime": { "future": { "one": "через {0} год", "few": "через {0} год", "many": "через {0} год", "other": "через {0} год" }, "past": { "one": "{0} год тому", "few": "{0} год тому", "many": "{0} год тому", "other": "{0} год тому" } } }, "minute": { "displayName": "хвилина", "relative": { "0": "цієї хвилини" }, "relativeTime": { "future": { "one": "через {0} хвилину", "few": "через {0} хвилини", "many": "через {0} хвилин", "other": "через {0} хвилини" }, "past": { "one": "{0} хвилину тому", "few": "{0} хвилини тому", "many": "{0} хвилин тому", "other": "{0} хвилини тому" } } }, "minute-short": { "displayName": "хв.", "relative": { "0": "цієї хвилини" }, "relativeTime": { "future": { "one": "через {0} хв", "few": "через {0} хв", "many": "через {0} хв", "other": "через {0} хв" }, "past": { "one": "{0} хв тому", "few": "{0} хв тому", "many": "{0} хв тому", "other": "{0} хв тому" } } }, "second": { "displayName": "секунда", "relative": { "0": "зараз" }, "relativeTime": { "future": { "one": "через {0} секунду", "few": "через {0} секунди", "many": "через {0} секунд", "other": "через {0} секунди" }, "past": { "one": "{0} секунду тому", "few": "{0} секунди тому", "many": "{0} секунд тому", "other": "{0} секунди тому" } } }, "second-short": { "displayName": "с", "relative": { "0": "зараз" }, "relativeTime": { "future": { "one": "через {0} с", "few": "через {0} с", "many": "через {0} с", "other": "через {0} с" }, "past": { "one": "{0} с тому", "few": "{0} с тому", "many": "{0} с тому", "other": "{0} с тому" } } } } }, { "locale": "ur", "pluralRuleFunction": function (n, ord) {
        var s = String(n).split('.'), v0 = !s[1];
        if (ord)
            return 'other';
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "سال", "relative": { "0": "اس سال", "1": "اگلے سال", "-1": "گزشتہ سال" }, "relativeTime": { "future": { "one": "{0} سال میں", "other": "{0} سال میں" }, "past": { "one": "{0} سال پہلے", "other": "{0} سال پہلے" } } }, "year-short": { "displayName": "سال", "relative": { "0": "اس سال", "1": "اگلے سال", "-1": "گزشتہ سال" }, "relativeTime": { "future": { "one": "{0} سال میں", "other": "{0} سال میں" }, "past": { "one": "{0} سال پہلے", "other": "{0} سال پہلے" } } }, "month": { "displayName": "مہینہ", "relative": { "0": "اس مہینہ", "1": "اگلا مہینہ", "-1": "پچھلا مہینہ" }, "relativeTime": { "future": { "one": "{0} مہینہ میں", "other": "{0} مہینے میں" }, "past": { "one": "{0} مہینہ پہلے", "other": "{0} مہینے پہلے" } } }, "month-short": { "displayName": "ماہ", "relative": { "0": "اس مہینہ", "1": "اگلے مہینہ", "-1": "پچھلے مہینہ" }, "relativeTime": { "future": { "one": "{0} ماہ میں", "other": "{0} ماہ میں" }, "past": { "one": "{0} ماہ قبل", "other": "{0} ماہ قبل" } } }, "week": { "displayName": "ہفتہ", "relativePeriod": "{0} کے ہفتے", "relative": { "0": "اس ہفتہ", "1": "اگلے ہفتہ", "-1": "پچھلے ہفتہ" }, "relativeTime": { "future": { "one": "{0} ہفتہ میں", "other": "{0} ہفتے میں" }, "past": { "one": "{0} ہفتہ پہلے", "other": "{0} ہفتے پہلے" } } }, "week-short": { "displayName": "ہفتہ", "relativePeriod": "{0} کے ہفتے", "relative": { "0": "اس ہفتہ", "1": "اگلے ہفتہ", "-1": "پچھلے ہفتہ" }, "relativeTime": { "future": { "one": "{0} ہفتے میں", "other": "{0} ہفتے میں" }, "past": { "one": "{0} ہفتے پہلے", "other": "{0} ہفتے پہلے" } } }, "day": { "displayName": "دن", "relative": { "0": "آج", "1": "آئندہ کل", "2": "آنے والا پرسوں", "-2": "گزشتہ پرسوں", "-1": "گزشتہ کل" }, "relativeTime": { "future": { "one": "{0} دن میں", "other": "{0} دنوں میں" }, "past": { "one": "{0} دن پہلے", "other": "{0} دنوں پہلے" } } }, "day-short": { "displayName": "دن", "relative": { "0": "آج", "1": "آئندہ کل", "2": "آنے والا پرسوں", "-2": "گزشتہ پرسوں", "-1": "گزشتہ کل" }, "relativeTime": { "future": { "one": "{0} دن میں", "other": "{0} دنوں میں" }, "past": { "one": "{0} دن پہلے", "other": "{0} دنوں پہلے" } } }, "hour": { "displayName": "گھنٹہ", "relative": { "0": "اس گھنٹے" }, "relativeTime": { "future": { "one": "{0} گھنٹے میں", "other": "{0} گھنٹے میں" }, "past": { "one": "{0} گھنٹہ پہلے", "other": "{0} گھنٹے پہلے" } } }, "hour-short": { "displayName": "گھنٹہ", "relative": { "0": "اس گھنٹے" }, "relativeTime": { "future": { "one": "{0} گھنٹے میں", "other": "{0} گھنٹے میں" }, "past": { "one": "{0} گھنٹے پہلے", "other": "{0} گھنٹے پہلے" } } }, "minute": { "displayName": "منٹ", "relative": { "0": "اس منٹ" }, "relativeTime": { "future": { "one": "{0} منٹ میں", "other": "{0} منٹ میں" }, "past": { "one": "{0} منٹ پہلے", "other": "{0} منٹ پہلے" } } }, "minute-short": { "displayName": "منٹ", "relative": { "0": "اس منٹ" }, "relativeTime": { "future": { "one": "{0} منٹ میں", "other": "{0} منٹ میں" }, "past": { "one": "{0} منٹ پہلے", "other": "{0} منٹ پہلے" } } }, "second": { "displayName": "سیکنڈ", "relative": { "0": "اب" }, "relativeTime": { "future": { "one": "{0} سیکنڈ میں", "other": "{0} سیکنڈ میں" }, "past": { "one": "{0} سیکنڈ پہلے", "other": "{0} سیکنڈ پہلے" } } }, "second-short": { "displayName": "سیکنڈ", "relative": { "0": "اب" }, "relativeTime": { "future": { "one": "{0} سیکنڈ میں", "other": "{0} سیکنڈ میں" }, "past": { "one": "{0} سیکنڈ پہلے", "other": "{0} سیکنڈ پہلے" } } } } }, { "locale": "ur-IN", "parentLocale": "ur", "fields": { "year": { "displayName": "سال", "relative": { "0": "اس سال", "1": "اگلے سال", "-1": "گزشتہ سال" }, "relativeTime": { "future": { "one": "{0} سال میں", "other": "{0} سالوں میں" }, "past": { "one": "{0} سال پہلے", "other": "{0} سال پہلے" } } }, "year-short": { "displayName": "سال", "relative": { "0": "اس سال", "1": "اگلے سال", "-1": "گزشتہ سال" }, "relativeTime": { "future": { "one": "{0} سال میں", "other": "{0} سالوں میں" }, "past": { "one": "{0} سال پہلے", "other": "{0} سالوں پہلے" } } }, "month": { "displayName": "مہینہ", "relative": { "0": "اس ماہ", "1": "اگلے ماہ", "-1": "گزشتہ ماہ" }, "relativeTime": { "future": { "one": "{0} ماہ میں", "other": "{0} ماہ میں" }, "past": { "one": "{0} ماہ قبل", "other": "{0} ماہ قبل" } } }, "month-short": { "displayName": "مہینہ", "relative": { "0": "اس مہینہ", "1": "اگلے مہینہ", "-1": "پچھلے مہینہ" }, "relativeTime": { "future": { "one": "{0} ماہ میں", "other": "{0} ماہ میں" }, "past": { "one": "{0} ماہ قبل", "other": "{0} ماہ قبل" } } }, "week": { "displayName": "ہفتہ", "relativePeriod": "{0} کے ہفتے", "relative": { "0": "اس ہفتہ", "1": "اگلے ہفتہ", "-1": "گزشتہ ہفتہ" }, "relativeTime": { "future": { "one": "{0} ہفتہ میں", "other": "{0} ہفتوں میں" }, "past": { "one": "{0} ہفتہ قبل", "other": "{0} ہفتے قبل" } } }, "week-short": { "displayName": "ہفتہ", "relativePeriod": "{0} کے ہفتے", "relative": { "0": "اس ہفتہ", "1": "اگلے ہفتہ", "-1": "پچھلے ہفتہ" }, "relativeTime": { "future": { "one": "{0} ہفتے میں", "other": "{0} ہفتے میں" }, "past": { "one": "{0} ہفتے قبل", "other": "{0} ہفتے قبل" } } }, "day": { "displayName": "دن", "relative": { "0": "آج", "1": "آئندہ کل", "2": "آنے والا پرسوں", "-2": "گزشتہ پرسوں", "-1": "گزشتہ کل" }, "relativeTime": { "future": { "one": "{0} دن میں", "other": "{0} دنوں میں" }, "past": { "one": "{0} دن پہلے", "other": "{0} دنوں پہلے" } } }, "day-short": { "displayName": "دن", "relative": { "0": "آج", "1": "آئندہ کل", "2": "آنے والا پرسوں", "-2": "گزشتہ پرسوں", "-1": "گزشتہ کل" }, "relativeTime": { "future": { "one": "{0} دنوں میں", "other": "{0} دنوں میں" }, "past": { "one": "{0} دن پہلے", "other": "{0} دنوں پہلے" } } }, "hour": { "displayName": "گھنٹہ", "relative": { "0": "اس گھنٹے" }, "relativeTime": { "future": { "one": "{0} گھنٹے میں", "other": "{0} گھنٹے میں" }, "past": { "one": "{0} گھنٹہ پہلے", "other": "{0} گھنٹے پہلے" } } }, "hour-short": { "displayName": "گھنٹہ", "relative": { "0": "اس گھنٹے" }, "relativeTime": { "future": { "one": "{0} گھنٹے میں", "other": "{0} گھنٹے میں" }, "past": { "one": "{0} گھنٹے قبل", "other": "{0} گھنٹے قبل" } } }, "minute": { "displayName": "منٹ", "relative": { "0": "اس منٹ" }, "relativeTime": { "future": { "one": "{0} منٹ میں", "other": "{0} منٹ میں" }, "past": { "one": "{0} منٹ قبل", "other": "{0} منٹ قبل" } } }, "minute-short": { "displayName": "منٹ", "relative": { "0": "اس منٹ" }, "relativeTime": { "future": { "one": "{0} منٹ میں", "other": "{0} منٹ میں" }, "past": { "one": "{0} منٹ قبل", "other": "{0} منٹ قبل" } } }, "second": { "displayName": "سیکنڈ", "relative": { "0": "اب" }, "relativeTime": { "future": { "one": "{0} سیکنڈ میں", "other": "{0} سیکنڈ میں" }, "past": { "one": "{0} سیکنڈ قبل", "other": "{0} سیکنڈ قبل" } } }, "second-short": { "displayName": "سیکنڈ", "relative": { "0": "اب" }, "relativeTime": { "future": { "one": "{0} سیکنڈ میں", "other": "{0} سیکنڈ میں" }, "past": { "one": "{0} سیکنڈ قبل", "other": "{0} سیکنڈ قبل" } } } } }, { "locale": "uz", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "yil", "relative": { "0": "shu yil", "1": "keyingi yil", "-1": "o‘tgan yil" }, "relativeTime": { "future": { "one": "{0} yildan keyin", "other": "{0} yildan keyin" }, "past": { "one": "{0} yil oldin", "other": "{0} yil oldin" } } }, "year-short": { "displayName": "yil", "relative": { "0": "bu yil", "1": "keyingi yil", "-1": "oʻtgan yil" }, "relativeTime": { "future": { "one": "{0} yildan keyin", "other": "{0} yildan keyin" }, "past": { "one": "{0} yil oldin", "other": "{0} yil oldin" } } }, "month": { "displayName": "oy", "relative": { "0": "shu oy", "1": "keyingi oy", "-1": "o‘tgan oy" }, "relativeTime": { "future": { "one": "{0} oydan keyin", "other": "{0} oydan keyin" }, "past": { "one": "{0} oy oldin", "other": "{0} oy oldin" } } }, "month-short": { "displayName": "oy", "relative": { "0": "shu oy", "1": "keyingi oy", "-1": "o‘tgan oy" }, "relativeTime": { "future": { "one": "{0} oydan keyin", "other": "{0} oydan keyin" }, "past": { "one": "{0} oy oldin", "other": "{0} oy oldin" } } }, "week": { "displayName": "hafta", "relativePeriod": "{0}-hafta", "relative": { "0": "shu hafta", "1": "keyingi hafta", "-1": "o‘tgan hafta" }, "relativeTime": { "future": { "one": "{0} haftadan keyin", "other": "{0} haftadan keyin" }, "past": { "one": "{0} hafta oldin", "other": "{0} hafta oldin" } } }, "week-short": { "displayName": "hafta", "relativePeriod": "{0}-hafta", "relative": { "0": "shu hafta", "1": "keyingi hafta", "-1": "o‘tgan hafta" }, "relativeTime": { "future": { "one": "{0} haftadan keyin", "other": "{0} haftadan keyin" }, "past": { "one": "{0} hafta oldin", "other": "{0} hafta oldin" } } }, "day": { "displayName": "kun", "relative": { "0": "bugun", "1": "ertaga", "-1": "kecha" }, "relativeTime": { "future": { "one": "{0} kundan keyin", "other": "{0} kundan keyin" }, "past": { "one": "{0} kun oldin", "other": "{0} kun oldin" } } }, "day-short": { "displayName": "kun", "relative": { "0": "bugun", "1": "ertaga", "-1": "kecha" }, "relativeTime": { "future": { "one": "{0} kundan keyin", "other": "{0} kundan keyin" }, "past": { "one": "{0} kun oldin", "other": "{0} kun oldin" } } }, "hour": { "displayName": "soat", "relative": { "0": "shu soatda" }, "relativeTime": { "future": { "one": "{0} soatdan keyin", "other": "{0} soatdan keyin" }, "past": { "one": "{0} soat oldin", "other": "{0} soat oldin" } } }, "hour-short": { "displayName": "soat", "relative": { "0": "shu soatda" }, "relativeTime": { "future": { "one": "{0} soatdan keyin", "other": "{0} soatdan keyin" }, "past": { "one": "{0} soat oldin", "other": "{0} soat oldin" } } }, "minute": { "displayName": "daqiqa", "relative": { "0": "shu daqiqada" }, "relativeTime": { "future": { "one": "{0} daqiqadan keyin", "other": "{0} daqiqadan keyin" }, "past": { "one": "{0} daqiqa oldin", "other": "{0} daqiqa oldin" } } }, "minute-short": { "displayName": "daq.", "relative": { "0": "shu daqiqada" }, "relativeTime": { "future": { "one": "{0} daqiqadan keyin", "other": "{0} daqiqadan keyin" }, "past": { "one": "{0} daqiqa oldin", "other": "{0} daqiqa oldin" } } }, "second": { "displayName": "soniya", "relative": { "0": "hozir" }, "relativeTime": { "future": { "one": "{0} soniyadan keyin", "other": "{0} soniyadan keyin" }, "past": { "one": "{0} soniya oldin", "other": "{0} soniya oldin" } } }, "second-short": { "displayName": "son.", "relative": { "0": "hozir" }, "relativeTime": { "future": { "one": "{0} soniyadan keyin", "other": "{0} soniyadan keyin" }, "past": { "one": "{0} soniya oldin", "other": "{0} soniya oldin" } } } } }, { "locale": "uz-Arab", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "uz-Cyrl", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Йил", "relative": { "0": "бу йил", "1": "кейинги йил", "-1": "ўтган йил" }, "relativeTime": { "future": { "one": "{0} йилдан сўнг", "other": "{0} йилдан сўнг" }, "past": { "one": "{0} йил аввал", "other": "{0} йил аввал" } } }, "year-short": { "displayName": "Йил", "relative": { "0": "бу йил", "1": "кейинги йил", "-1": "ўтган йил" }, "relativeTime": { "future": { "one": "{0} йилдан сўнг", "other": "{0} йилдан сўнг" }, "past": { "one": "{0} йил аввал", "other": "{0} йил аввал" } } }, "month": { "displayName": "Ой", "relative": { "0": "бу ой", "1": "кейинги ой", "-1": "ўтган ой" }, "relativeTime": { "future": { "one": "{0} ойдан сўнг", "other": "{0} ойдан сўнг" }, "past": { "one": "{0} ой аввал", "other": "{0} ой аввал" } } }, "month-short": { "displayName": "Ой", "relative": { "0": "бу ой", "1": "кейинги ой", "-1": "ўтган ой" }, "relativeTime": { "future": { "one": "{0} ойдан сўнг", "other": "{0} ойдан сўнг" }, "past": { "one": "{0} ой аввал", "other": "{0} ой аввал" } } }, "week": { "displayName": "Ҳафта", "relativePeriod": "the week of {0}", "relative": { "0": "бу ҳафта", "1": "кейинги ҳафта", "-1": "ўтган ҳафта" }, "relativeTime": { "future": { "one": "{0} ҳафтадан сўнг", "other": "{0} ҳафтадан сўнг" }, "past": { "one": "{0} ҳафта олдин", "other": "{0} ҳафта олдин" } } }, "week-short": { "displayName": "Ҳафта", "relativePeriod": "the week of {0}", "relative": { "0": "бу ҳафта", "1": "кейинги ҳафта", "-1": "ўтган ҳафта" }, "relativeTime": { "future": { "one": "{0} ҳафтадан сўнг", "other": "{0} ҳафтадан сўнг" }, "past": { "one": "{0} ҳафта олдин", "other": "{0} ҳафта олдин" } } }, "day": { "displayName": "Кун", "relative": { "0": "бугун", "1": "эртага", "-1": "кеча" }, "relativeTime": { "future": { "one": "{0} кундан сўнг", "other": "{0} кундан сўнг" }, "past": { "one": "{0} кун олдин", "other": "{0} кун олдин" } } }, "day-short": { "displayName": "Кун", "relative": { "0": "бугун", "1": "эртага", "-1": "кеча" }, "relativeTime": { "future": { "one": "{0} кундан сўнг", "other": "{0} кундан сўнг" }, "past": { "one": "{0} кун олдин", "other": "{0} кун олдин" } } }, "hour": { "displayName": "Соат", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "{0} соатдан сўнг", "other": "{0} соатдан сўнг" }, "past": { "one": "{0} соат олдин", "other": "{0} соат олдин" } } }, "hour-short": { "displayName": "Соат", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "{0} соатдан сўнг", "other": "{0} соатдан сўнг" }, "past": { "one": "{0} соат олдин", "other": "{0} соат олдин" } } }, "minute": { "displayName": "Дақиқа", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "{0} дақиқадан сўнг", "other": "{0} дақиқадан сўнг" }, "past": { "one": "{0} дақиқа олдин", "other": "{0} дақиқа олдин" } } }, "minute-short": { "displayName": "Дақиқа", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "{0} дақиқадан сўнг", "other": "{0} дақиқадан сўнг" }, "past": { "one": "{0} дақиқа олдин", "other": "{0} дақиқа олдин" } } }, "second": { "displayName": "Сония", "relative": { "0": "ҳозир" }, "relativeTime": { "future": { "one": "{0} сониядан сўнг", "other": "{0} сониядан сўнг" }, "past": { "one": "{0} сония олдин", "other": "{0} сония олдин" } } }, "second-short": { "displayName": "Сония", "relative": { "0": "ҳозир" }, "relativeTime": { "future": { "one": "{0} сониядан сўнг", "other": "{0} сониядан сўнг" }, "past": { "one": "{0} сония олдин", "other": "{0} сония олдин" } } } } }, { "locale": "uz-Latn", "parentLocale": "uz" }, { "locale": "vai", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "ꕢꘋ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "ꕢꘋ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "ꕪꖃ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "ꕪꖃ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "ꔨꔤꕃ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "ꔨꔤꕃ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "ꔎꔒ", "relative": { "0": "ꗦꗷ", "1": "ꔻꕯ", "-1": "ꖴꖸ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "ꔎꔒ", "relative": { "0": "ꗦꗷ", "1": "ꔻꕯ", "-1": "ꖴꖸ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "ꕌꕎ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "ꕌꕎ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "ꕆꕇ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "ꕆꕇ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "ꕧꕃꕧꕪ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "ꕧꕃꕧꕪ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "vai-Latn", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "saŋ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "saŋ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "kalo", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "kalo", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "wiki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "wiki", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "tele", "relative": { "0": "wɛlɛ", "1": "sina", "-1": "kunu" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "tele", "relative": { "0": "wɛlɛ", "1": "sina", "-1": "kunu" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "hawa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "hawa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "mini", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "mini", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "jaki-jaka", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "jaki-jaka", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "vai-Vaii", "parentLocale": "vai" }, { "locale": "ve", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "vi", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return (n == 1) ? 'one' : 'other';
        return 'other';
    }, "fields": { "year": { "displayName": "Năm", "relative": { "0": "năm nay", "1": "năm sau", "-1": "năm ngoái" }, "relativeTime": { "future": { "other": "sau {0} năm nữa" }, "past": { "other": "{0} năm trước" } } }, "year-short": { "displayName": "Năm", "relative": { "0": "năm nay", "1": "năm sau", "-1": "năm ngoái" }, "relativeTime": { "future": { "other": "sau {0} năm nữa" }, "past": { "other": "{0} năm trước" } } }, "month": { "displayName": "Tháng", "relative": { "0": "tháng này", "1": "tháng sau", "-1": "tháng trước" }, "relativeTime": { "future": { "other": "sau {0} tháng nữa" }, "past": { "other": "{0} tháng trước" } } }, "month-short": { "displayName": "Tháng", "relative": { "0": "tháng này", "1": "tháng sau", "-1": "tháng trước" }, "relativeTime": { "future": { "other": "sau {0} tháng nữa" }, "past": { "other": "{0} tháng trước" } } }, "week": { "displayName": "Tuần", "relativePeriod": "tuần {0}", "relative": { "0": "tuần này", "1": "tuần sau", "-1": "tuần trước" }, "relativeTime": { "future": { "other": "sau {0} tuần nữa" }, "past": { "other": "{0} tuần trước" } } }, "week-short": { "displayName": "Tuần", "relativePeriod": "tuần {0}", "relative": { "0": "tuần này", "1": "tuần sau", "-1": "tuần trước" }, "relativeTime": { "future": { "other": "sau {0} tuần nữa" }, "past": { "other": "{0} tuần trước" } } }, "day": { "displayName": "Ngày", "relative": { "0": "Hôm nay", "1": "Ngày mai", "2": "Ngày kia", "-2": "Hôm kia", "-1": "Hôm qua" }, "relativeTime": { "future": { "other": "sau {0} ngày nữa" }, "past": { "other": "{0} ngày trước" } } }, "day-short": { "displayName": "Ngày", "relative": { "0": "Hôm nay", "1": "Ngày mai", "2": "Ngày kia", "-2": "Hôm kia", "-1": "Hôm qua" }, "relativeTime": { "future": { "other": "sau {0} ngày nữa" }, "past": { "other": "{0} ngày trước" } } }, "hour": { "displayName": "Giờ", "relative": { "0": "giờ này" }, "relativeTime": { "future": { "other": "sau {0} giờ nữa" }, "past": { "other": "{0} giờ trước" } } }, "hour-short": { "displayName": "Giờ", "relative": { "0": "giờ này" }, "relativeTime": { "future": { "other": "sau {0} giờ nữa" }, "past": { "other": "{0} giờ trước" } } }, "minute": { "displayName": "Phút", "relative": { "0": "phút này" }, "relativeTime": { "future": { "other": "sau {0} phút nữa" }, "past": { "other": "{0} phút trước" } } }, "minute-short": { "displayName": "Phút", "relative": { "0": "phút này" }, "relativeTime": { "future": { "other": "sau {0} phút nữa" }, "past": { "other": "{0} phút trước" } } }, "second": { "displayName": "Giây", "relative": { "0": "bây giờ" }, "relativeTime": { "future": { "other": "sau {0} giây nữa" }, "past": { "other": "{0} giây trước" } } }, "second-short": { "displayName": "Giây", "relative": { "0": "bây giờ" }, "relativeTime": { "future": { "other": "sau {0} giây nữa" }, "past": { "other": "{0} giây trước" } } } } }, { "locale": "vo", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "vun", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Maka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Maka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Mori", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Mori", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Wiikyi", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Wiikyi", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Mfiri", "relative": { "0": "Inu", "1": "Ngama", "-1": "Ukou" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Mfiri", "relative": { "0": "Inu", "1": "Ngama", "-1": "Ukou" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Saa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Dakyika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Dakyika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Sekunde", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "wa", "pluralRuleFunction": function (n) {
        return ((n == 0
            || n == 1)) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "wae", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Jár", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "I {0} jár", "other": "I {0} jár" }, "past": { "one": "vor {0} jár", "other": "cor {0} jár" } } }, "year-short": { "displayName": "Jár", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "I {0} jár", "other": "I {0} jár" }, "past": { "one": "vor {0} jár", "other": "cor {0} jár" } } }, "month": { "displayName": "Mánet", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "I {0} mánet", "other": "I {0} mánet" }, "past": { "one": "vor {0} mánet", "other": "vor {0} mánet" } } }, "month-short": { "displayName": "Mánet", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "I {0} mánet", "other": "I {0} mánet" }, "past": { "one": "vor {0} mánet", "other": "vor {0} mánet" } } }, "week": { "displayName": "Wuča", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "i {0} wuča", "other": "i {0} wučä" }, "past": { "one": "vor {0} wuča", "other": "cor {0} wučä" } } }, "week-short": { "displayName": "Wuča", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "one": "i {0} wuča", "other": "i {0} wučä" }, "past": { "one": "vor {0} wuča", "other": "cor {0} wučä" } } }, "day": { "displayName": "Tag", "relative": { "0": "Hitte", "1": "Móre", "2": "Ubermóre", "-2": "Vorgešter", "-1": "Gešter" }, "relativeTime": { "future": { "one": "i {0} tag", "other": "i {0} täg" }, "past": { "one": "vor {0} tag", "other": "vor {0} täg" } } }, "day-short": { "displayName": "Tag", "relative": { "0": "Hitte", "1": "Móre", "2": "Ubermóre", "-2": "Vorgešter", "-1": "Gešter" }, "relativeTime": { "future": { "one": "i {0} tag", "other": "i {0} täg" }, "past": { "one": "vor {0} tag", "other": "vor {0} täg" } } }, "hour": { "displayName": "Schtund", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "i {0} stund", "other": "i {0} stunde" }, "past": { "one": "vor {0} stund", "other": "vor {0} stunde" } } }, "hour-short": { "displayName": "Schtund", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "i {0} stund", "other": "i {0} stunde" }, "past": { "one": "vor {0} stund", "other": "vor {0} stunde" } } }, "minute": { "displayName": "Mínütta", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "i {0} minüta", "other": "i {0} minüte" }, "past": { "one": "vor {0} minüta", "other": "vor {0} minüte" } } }, "minute-short": { "displayName": "Mínütta", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "i {0} minüta", "other": "i {0} minüte" }, "past": { "one": "vor {0} minüta", "other": "vor {0} minüte" } } }, "second": { "displayName": "Sekunda", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "i {0} sekund", "other": "i {0} sekunde" }, "past": { "one": "vor {0} sekund", "other": "vor {0} sekunde" } } }, "second-short": { "displayName": "Sekunda", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "i {0} sekund", "other": "i {0} sekunde" }, "past": { "one": "vor {0} sekund", "other": "vor {0} sekunde" } } } } }, { "locale": "wo", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "at", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "at.", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "weer", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "we.", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "ayu-bis", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "ayu-b.", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "fan", "relative": { "0": "tay", "1": "suba", "-1": "démb" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "fan", "relative": { "0": "tay", "1": "suba", "-1": "démb" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "waxtu", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "wxt.", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "simili", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "sim.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "saa", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "saa.", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "xh", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Week", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "xog", "pluralRuleFunction": function (n) {
        return (n == 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Omwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Omwaka", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Omwezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Omwezi", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Esabiiti", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Esabiiti", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Olunaku", "relative": { "0": "Olwaleelo (leelo)", "1": "Enkyo", "-1": "Edho" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Olunaku", "relative": { "0": "Olwaleelo (leelo)", "1": "Enkyo", "-1": "Edho" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "Essawa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "Essawa", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Edakiika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Edakiika", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Obutikitiki", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Obutikitiki", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "yav", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "yɔɔŋ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "yɔɔŋ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "oóli", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "oóli", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "sɔ́ndiɛ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "sɔ́ndiɛ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "puɔ́sɛ́", "relative": { "0": "ínaan", "1": "nakinyám", "-1": "púyoó" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "puɔ́sɛ́", "relative": { "0": "ínaan", "1": "nakinyám", "-1": "púyoó" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "kisikɛl,", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "kisikɛl,", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "minít", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "minít", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "síkɛn", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "síkɛn", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "yi", "pluralRuleFunction": function (n) {
        var s = String(n).split('.'), v0 = !s[1];
        return (n == 1 && v0) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "יאָר", "relative": { "0": "הײַ יאָר", "1": "איבער א יאָר", "-1": "פֿאַראַיאָר" }, "relativeTime": { "future": { "one": "איבער {0} יאָר", "other": "איבער {0} יאָר" }, "past": { "one": "פֿאַר {0} יאָר", "other": "פֿאַר {0} יאָר" } } }, "year-short": { "displayName": "יאָר", "relative": { "0": "הײַ יאָר", "1": "איבער א יאָר", "-1": "פֿאַראַיאָר" }, "relativeTime": { "future": { "one": "איבער א יאָר", "other": "איבער {0} יאָר" }, "past": { "one": "פֿאַר {0} יאָר", "other": "פֿאַר {0} יאָר" } } }, "month": { "displayName": "מאנאַט", "relative": { "0": "דעם חודש", "1": "קומענדיקן חודש", "-1": "פֿאַרגאנגענעם חודש" }, "relativeTime": { "future": { "one": "איבער {0} חודש", "other": "איבער {0} חדשים" }, "past": { "one": "פֿאַר {0} חודש", "other": "פֿאַר {0} חדשים" } } }, "month-short": { "displayName": "מאנאַט", "relative": { "0": "דעם חודש", "1": "קומענדיקן חודש", "-1": "פֿאַרגאנגענעם חודש" }, "relativeTime": { "future": { "one": "איבער {0} חודש", "other": "איבער {0} חדשים" }, "past": { "one": "פֿאַר {0} חודש", "other": "פֿאַר {0} חדשים" } } }, "week": { "displayName": "וואך", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "איבער אַכט טאָג", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "וואך", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "איבער אַכט טאָג", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "טאָג", "relative": { "0": "היינט", "1": "מארגן", "-1": "נעכטן" }, "relativeTime": { "future": { "one": "אין {0} טאָג אַרום", "other": "אין {0} טעג אַרום" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "טאָג", "relative": { "0": "היינט", "1": "מארגן", "-1": "נעכטן" }, "relativeTime": { "future": { "one": "אין {0} טאָג אַרום", "other": "אין {0} טעג אַרום" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "שעה", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "שעה", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "מינוט", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "מינוט", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "סעקונדע", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "סעקונדע", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "yo", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "Ọdún", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Ọdún", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Osù", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Osù", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Ọ̀sè", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Ọ̀sè", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ọjọ́", "relative": { "0": "Òní", "1": "Ọ̀la", "2": "òtúùnla", "-2": "íjẹta", "-1": "Àná" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ọjọ́", "relative": { "0": "Òní", "1": "Ọ̀la", "2": "òtúùnla", "-2": "íjẹta", "-1": "Àná" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "wákàtí", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "wákàtí", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Ìsẹ́jú", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Ìsẹ́jú", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Ìsẹ́jú Ààyá", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Ìsẹ́jú Ààyá", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "yo-BJ", "parentLocale": "yo", "fields": { "year": { "displayName": "Ɔdún", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "Ɔdún", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "Osù", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "Osù", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "Ɔ̀sè", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "Ɔ̀sè", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "Ɔjɔ́", "relative": { "0": "Òní", "1": "Ɔ̀la", "2": "òtúùnla", "-2": "íjɛta", "-1": "Àná" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "Ɔjɔ́", "relative": { "0": "Òní", "1": "Ɔ̀la", "2": "òtúùnla", "-2": "íjɛta", "-1": "Àná" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "wákàtí", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "wákàtí", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "Ìsɛ́jú", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "Ìsɛ́jú", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "Ìsɛ́jú Ààyá", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "Ìsɛ́jú Ààyá", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "yue", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return 'other';
    }, "fields": { "year": { "displayName": "年", "relative": { "0": "今年", "1": "下年", "-1": "舊年" }, "relativeTime": { "future": { "other": "{0} 年後" }, "past": { "other": "{0} 年前" } } }, "year-short": { "displayName": "年", "relative": { "0": "今年", "1": "下年", "-1": "舊年" }, "relativeTime": { "future": { "other": "{0} 年後" }, "past": { "other": "{0} 年前" } } }, "month": { "displayName": "月", "relative": { "0": "今個月", "1": "下個月", "-1": "上個月" }, "relativeTime": { "future": { "other": "{0} 個月後" }, "past": { "other": "{0} 個月前" } } }, "month-short": { "displayName": "月", "relative": { "0": "今個月", "1": "下個月", "-1": "上個月" }, "relativeTime": { "future": { "other": "{0} 個月後" }, "past": { "other": "{0} 個月前" } } }, "week": { "displayName": "週", "relativePeriod": "{0}嘅星期", "relative": { "0": "今個星期", "1": "下星期", "-1": "上星期" }, "relativeTime": { "future": { "other": "{0} 個星期後" }, "past": { "other": "{0} 個星期前" } } }, "week-short": { "displayName": "週", "relativePeriod": "{0}嘅星期", "relative": { "0": "今個星期", "1": "下星期", "-1": "上星期" }, "relativeTime": { "future": { "other": "{0} 個星期後" }, "past": { "other": "{0} 個星期前" } } }, "day": { "displayName": "日", "relative": { "0": "今日", "1": "聽日", "2": "後天", "-2": "前天", "-1": "尋日" }, "relativeTime": { "future": { "other": "{0} 日後" }, "past": { "other": "{0} 日前" } } }, "day-short": { "displayName": "日", "relative": { "0": "今日", "1": "聽日", "2": "後天", "-2": "前天", "-1": "尋日" }, "relativeTime": { "future": { "other": "{0} 日後" }, "past": { "other": "{0} 日前" } } }, "hour": { "displayName": "小時", "relative": { "0": "呢個小時" }, "relativeTime": { "future": { "other": "{0} 小時後" }, "past": { "other": "{0} 小時前" } } }, "hour-short": { "displayName": "小時", "relative": { "0": "呢個小時" }, "relativeTime": { "future": { "other": "{0} 小時後" }, "past": { "other": "{0} 小時前" } } }, "minute": { "displayName": "分鐘", "relative": { "0": "呢分鐘" }, "relativeTime": { "future": { "other": "{0} 分鐘後" }, "past": { "other": "{0} 分鐘前" } } }, "minute-short": { "displayName": "分鐘", "relative": { "0": "呢分鐘" }, "relativeTime": { "future": { "other": "{0} 分鐘後" }, "past": { "other": "{0} 分鐘前" } } }, "second": { "displayName": "秒", "relative": { "0": "宜家" }, "relativeTime": { "future": { "other": "{0} 秒後" }, "past": { "other": "{0} 秒前" } } }, "second-short": { "displayName": "秒", "relative": { "0": "宜家" }, "relativeTime": { "future": { "other": "{0} 秒後" }, "past": { "other": "{0} 秒前" } } } } }, { "locale": "yue-Hans", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "年", "relative": { "0": "今年", "1": "下年", "-1": "旧年" }, "relativeTime": { "future": { "other": "{0} 年后" }, "past": { "other": "{0} 年前" } } }, "year-short": { "displayName": "年", "relative": { "0": "今年", "1": "下年", "-1": "旧年" }, "relativeTime": { "future": { "other": "{0} 年后" }, "past": { "other": "{0} 年前" } } }, "month": { "displayName": "月", "relative": { "0": "今个月", "1": "下个月", "-1": "上个月" }, "relativeTime": { "future": { "other": "{0} 个月后" }, "past": { "other": "{0} 个月前" } } }, "month-short": { "displayName": "月", "relative": { "0": "今个月", "1": "下个月", "-1": "上个月" }, "relativeTime": { "future": { "other": "{0} 个月后" }, "past": { "other": "{0} 个月前" } } }, "week": { "displayName": "周", "relativePeriod": "{0}嘅星期", "relative": { "0": "今个星期", "1": "下星期", "-1": "上星期" }, "relativeTime": { "future": { "other": "{0} 个星期后" }, "past": { "other": "{0} 个星期前" } } }, "week-short": { "displayName": "周", "relativePeriod": "{0}嘅星期", "relative": { "0": "今个星期", "1": "下星期", "-1": "上星期" }, "relativeTime": { "future": { "other": "{0} 个星期后" }, "past": { "other": "{0} 个星期前" } } }, "day": { "displayName": "日", "relative": { "0": "今日", "1": "听日", "2": "后天", "-2": "前天", "-1": "寻日" }, "relativeTime": { "future": { "other": "{0} 日后" }, "past": { "other": "{0} 日前" } } }, "day-short": { "displayName": "日", "relative": { "0": "今日", "1": "听日", "2": "后天", "-2": "前天", "-1": "寻日" }, "relativeTime": { "future": { "other": "{0} 日后" }, "past": { "other": "{0} 日前" } } }, "hour": { "displayName": "小时", "relative": { "0": "呢个小时" }, "relativeTime": { "future": { "other": "{0} 小时后" }, "past": { "other": "{0} 小时前" } } }, "hour-short": { "displayName": "小时", "relative": { "0": "呢个小时" }, "relativeTime": { "future": { "other": "{0} 小时后" }, "past": { "other": "{0} 小时前" } } }, "minute": { "displayName": "分钟", "relative": { "0": "呢分钟" }, "relativeTime": { "future": { "other": "{0} 分钟后" }, "past": { "other": "{0} 分钟前" } } }, "minute-short": { "displayName": "分钟", "relative": { "0": "呢分钟" }, "relativeTime": { "future": { "other": "{0} 分钟后" }, "past": { "other": "{0} 分钟前" } } }, "second": { "displayName": "秒", "relative": { "0": "宜家" }, "relativeTime": { "future": { "other": "{0} 秒后" }, "past": { "other": "{0} 秒前" } } }, "second-short": { "displayName": "秒", "relative": { "0": "宜家" }, "relativeTime": { "future": { "other": "{0} 秒后" }, "past": { "other": "{0} 秒前" } } } } }, { "locale": "yue-Hant", "parentLocale": "yue" }, { "locale": "zgh", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "ⴰⵙⴳⴳⵯⴰⵙ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "year-short": { "displayName": "ⴰⵙⴳⴳⵯⴰⵙ", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "other": "+{0} y" }, "past": { "other": "-{0} y" } } }, "month": { "displayName": "ⴰⵢⵢⵓⵔ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "month-short": { "displayName": "ⴰⵢⵢⵓⵔ", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "other": "+{0} m" }, "past": { "other": "-{0} m" } } }, "week": { "displayName": "ⵉⵎⴰⵍⴰⵙⵙ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "week-short": { "displayName": "ⵉⵎⴰⵍⴰⵙⵙ", "relativePeriod": "the week of {0}", "relative": { "0": "this week", "1": "next week", "-1": "last week" }, "relativeTime": { "future": { "other": "+{0} w" }, "past": { "other": "-{0} w" } } }, "day": { "displayName": "ⴰⵙⵙ", "relative": { "0": "ⴰⵙⵙⴰ", "1": "ⴰⵙⴽⴽⴰ", "-1": "ⵉⴹⵍⵍⵉ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "day-short": { "displayName": "ⴰⵙⵙ", "relative": { "0": "ⴰⵙⵙⴰ", "1": "ⴰⵙⴽⴽⴰ", "-1": "ⵉⴹⵍⵍⵉ" }, "relativeTime": { "future": { "other": "+{0} d" }, "past": { "other": "-{0} d" } } }, "hour": { "displayName": "ⵜⴰⵙⵔⴰⴳⵜ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "hour-short": { "displayName": "ⵜⴰⵙⵔⴰⴳⵜ", "relative": { "0": "this hour" }, "relativeTime": { "future": { "other": "+{0} h" }, "past": { "other": "-{0} h" } } }, "minute": { "displayName": "ⵜⵓⵙⴷⵉⴷⵜ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "minute-short": { "displayName": "ⵜⵓⵙⴷⵉⴷⵜ", "relative": { "0": "this minute" }, "relativeTime": { "future": { "other": "+{0} min" }, "past": { "other": "-{0} min" } } }, "second": { "displayName": "ⵜⴰⵙⵉⵏⵜ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } }, "second-short": { "displayName": "ⵜⴰⵙⵉⵏⵜ", "relative": { "0": "now" }, "relativeTime": { "future": { "other": "+{0} s" }, "past": { "other": "-{0} s" } } } } }, { "locale": "zh", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return 'other';
    }, "fields": { "year": { "displayName": "年", "relative": { "0": "今年", "1": "明年", "-1": "去年" }, "relativeTime": { "future": { "other": "{0}年后" }, "past": { "other": "{0}年前" } } }, "year-short": { "displayName": "年", "relative": { "0": "今年", "1": "明年", "-1": "去年" }, "relativeTime": { "future": { "other": "{0}年后" }, "past": { "other": "{0}年前" } } }, "month": { "displayName": "月", "relative": { "0": "本月", "1": "下个月", "-1": "上个月" }, "relativeTime": { "future": { "other": "{0}个月后" }, "past": { "other": "{0}个月前" } } }, "month-short": { "displayName": "月", "relative": { "0": "本月", "1": "下个月", "-1": "上个月" }, "relativeTime": { "future": { "other": "{0}个月后" }, "past": { "other": "{0}个月前" } } }, "week": { "displayName": "周", "relativePeriod": "{0}这周", "relative": { "0": "本周", "1": "下周", "-1": "上周" }, "relativeTime": { "future": { "other": "{0}周后" }, "past": { "other": "{0}周前" } } }, "week-short": { "displayName": "周", "relativePeriod": "{0}这周", "relative": { "0": "本周", "1": "下周", "-1": "上周" }, "relativeTime": { "future": { "other": "{0}周后" }, "past": { "other": "{0}周前" } } }, "day": { "displayName": "日", "relative": { "0": "今天", "1": "明天", "2": "后天", "-2": "前天", "-1": "昨天" }, "relativeTime": { "future": { "other": "{0}天后" }, "past": { "other": "{0}天前" } } }, "day-short": { "displayName": "日", "relative": { "0": "今天", "1": "明天", "2": "后天", "-2": "前天", "-1": "昨天" }, "relativeTime": { "future": { "other": "{0}天后" }, "past": { "other": "{0}天前" } } }, "hour": { "displayName": "小时", "relative": { "0": "这一时间 \u002F 此时" }, "relativeTime": { "future": { "other": "{0}小时后" }, "past": { "other": "{0}小时前" } } }, "hour-short": { "displayName": "小时", "relative": { "0": "这一时间 \u002F 此时" }, "relativeTime": { "future": { "other": "{0}小时后" }, "past": { "other": "{0}小时前" } } }, "minute": { "displayName": "分钟", "relative": { "0": "此刻" }, "relativeTime": { "future": { "other": "{0}分钟后" }, "past": { "other": "{0}分钟前" } } }, "minute-short": { "displayName": "分", "relative": { "0": "此刻" }, "relativeTime": { "future": { "other": "{0}分钟后" }, "past": { "other": "{0}分钟前" } } }, "second": { "displayName": "秒", "relative": { "0": "现在" }, "relativeTime": { "future": { "other": "{0}秒钟后" }, "past": { "other": "{0}秒钟前" } } }, "second-short": { "displayName": "秒", "relative": { "0": "现在" }, "relativeTime": { "future": { "other": "{0}秒后" }, "past": { "other": "{0}秒前" } } } } }, { "locale": "zh-Hans", "parentLocale": "zh" }, { "locale": "zh-Hans-HK", "parentLocale": "zh-Hans", "fields": { "year": { "displayName": "年", "relative": { "0": "今年", "1": "明年", "-1": "去年" }, "relativeTime": { "future": { "other": "{0}年后" }, "past": { "other": "{0}年前" } } }, "year-short": { "displayName": "年", "relative": { "0": "今年", "1": "明年", "-1": "去年" }, "relativeTime": { "future": { "other": "{0}年后" }, "past": { "other": "{0}年前" } } }, "month": { "displayName": "月", "relative": { "0": "本月", "1": "下个月", "-1": "上个月" }, "relativeTime": { "future": { "other": "{0}个月后" }, "past": { "other": "{0}个月前" } } }, "month-short": { "displayName": "月", "relative": { "0": "本月", "1": "下个月", "-1": "上个月" }, "relativeTime": { "future": { "other": "{0}个月后" }, "past": { "other": "{0}个月前" } } }, "week": { "displayName": "周", "relativePeriod": "{0}这周", "relative": { "0": "本周", "1": "下周", "-1": "上周" }, "relativeTime": { "future": { "other": "{0}周后" }, "past": { "other": "{0}周前" } } }, "week-short": { "displayName": "周", "relativePeriod": "{0}这周", "relative": { "0": "本周", "1": "下周", "-1": "上周" }, "relativeTime": { "future": { "other": "{0}周后" }, "past": { "other": "{0}周前" } } }, "day": { "displayName": "日", "relative": { "0": "今天", "1": "明天", "2": "后天", "-2": "前天", "-1": "昨天" }, "relativeTime": { "future": { "other": "{0}天后" }, "past": { "other": "{0}天前" } } }, "day-short": { "displayName": "日", "relative": { "0": "今天", "1": "明天", "2": "后天", "-2": "前天", "-1": "昨天" }, "relativeTime": { "future": { "other": "{0}天后" }, "past": { "other": "{0}天前" } } }, "hour": { "displayName": "小时", "relative": { "0": "这一时间 \u002F 此时" }, "relativeTime": { "future": { "other": "{0}小时后" }, "past": { "other": "{0}小时前" } } }, "hour-short": { "displayName": "小时", "relative": { "0": "这一时间 \u002F 此时" }, "relativeTime": { "future": { "other": "{0}小时后" }, "past": { "other": "{0}小时前" } } }, "minute": { "displayName": "分钟", "relative": { "0": "此刻" }, "relativeTime": { "future": { "other": "{0}分钟后" }, "past": { "other": "{0}分钟前" } } }, "minute-short": { "displayName": "分", "relative": { "0": "此刻" }, "relativeTime": { "future": { "other": "{0}分钟后" }, "past": { "other": "{0}分钟前" } } }, "second": { "displayName": "秒", "relative": { "0": "现在" }, "relativeTime": { "future": { "other": "{0}秒后" }, "past": { "other": "{0}秒前" } } }, "second-short": { "displayName": "秒", "relative": { "0": "现在" }, "relativeTime": { "future": { "other": "{0}秒后" }, "past": { "other": "{0}秒前" } } } } }, { "locale": "zh-Hans-MO", "parentLocale": "zh-Hans", "fields": { "year": { "displayName": "年", "relative": { "0": "今年", "1": "明年", "-1": "去年" }, "relativeTime": { "future": { "other": "{0}年后" }, "past": { "other": "{0}年前" } } }, "year-short": { "displayName": "年", "relative": { "0": "今年", "1": "明年", "-1": "去年" }, "relativeTime": { "future": { "other": "{0}年后" }, "past": { "other": "{0}年前" } } }, "month": { "displayName": "月", "relative": { "0": "本月", "1": "下个月", "-1": "上个月" }, "relativeTime": { "future": { "other": "{0}个月后" }, "past": { "other": "{0}个月前" } } }, "month-short": { "displayName": "月", "relative": { "0": "本月", "1": "下个月", "-1": "上个月" }, "relativeTime": { "future": { "other": "{0}个月后" }, "past": { "other": "{0}个月前" } } }, "week": { "displayName": "周", "relativePeriod": "{0}这周", "relative": { "0": "本周", "1": "下周", "-1": "上周" }, "relativeTime": { "future": { "other": "{0}周后" }, "past": { "other": "{0}周前" } } }, "week-short": { "displayName": "周", "relativePeriod": "{0}这周", "relative": { "0": "本周", "1": "下周", "-1": "上周" }, "relativeTime": { "future": { "other": "{0}周后" }, "past": { "other": "{0}周前" } } }, "day": { "displayName": "日", "relative": { "0": "今天", "1": "明天", "2": "后天", "-2": "前天", "-1": "昨天" }, "relativeTime": { "future": { "other": "{0}天后" }, "past": { "other": "{0}天前" } } }, "day-short": { "displayName": "日", "relative": { "0": "今天", "1": "明天", "2": "后天", "-2": "前天", "-1": "昨天" }, "relativeTime": { "future": { "other": "{0}天后" }, "past": { "other": "{0}天前" } } }, "hour": { "displayName": "小时", "relative": { "0": "这一时间 \u002F 此时" }, "relativeTime": { "future": { "other": "{0}小时后" }, "past": { "other": "{0}小时前" } } }, "hour-short": { "displayName": "小时", "relative": { "0": "这一时间 \u002F 此时" }, "relativeTime": { "future": { "other": "{0}小时后" }, "past": { "other": "{0}小时前" } } }, "minute": { "displayName": "分钟", "relative": { "0": "此刻" }, "relativeTime": { "future": { "other": "{0}分钟后" }, "past": { "other": "{0}分钟前" } } }, "minute-short": { "displayName": "分", "relative": { "0": "此刻" }, "relativeTime": { "future": { "other": "{0}分钟后" }, "past": { "other": "{0}分钟前" } } }, "second": { "displayName": "秒", "relative": { "0": "现在" }, "relativeTime": { "future": { "other": "{0}秒后" }, "past": { "other": "{0}秒前" } } }, "second-short": { "displayName": "秒", "relative": { "0": "现在" }, "relativeTime": { "future": { "other": "{0}秒后" }, "past": { "other": "{0}秒前" } } } } }, { "locale": "zh-Hans-SG", "parentLocale": "zh-Hans", "fields": { "year": { "displayName": "年", "relative": { "0": "今年", "1": "明年", "-1": "去年" }, "relativeTime": { "future": { "other": "{0}年后" }, "past": { "other": "{0}年前" } } }, "year-short": { "displayName": "年", "relative": { "0": "今年", "1": "明年", "-1": "去年" }, "relativeTime": { "future": { "other": "{0}年后" }, "past": { "other": "{0}年前" } } }, "month": { "displayName": "月", "relative": { "0": "本月", "1": "下个月", "-1": "上个月" }, "relativeTime": { "future": { "other": "{0}个月后" }, "past": { "other": "{0}个月前" } } }, "month-short": { "displayName": "月", "relative": { "0": "本月", "1": "下个月", "-1": "上个月" }, "relativeTime": { "future": { "other": "{0}个月后" }, "past": { "other": "{0}个月前" } } }, "week": { "displayName": "周", "relativePeriod": "{0}这周", "relative": { "0": "本周", "1": "下周", "-1": "上周" }, "relativeTime": { "future": { "other": "{0}周后" }, "past": { "other": "{0}周前" } } }, "week-short": { "displayName": "周", "relativePeriod": "{0}这周", "relative": { "0": "本周", "1": "下周", "-1": "上周" }, "relativeTime": { "future": { "other": "{0}周后" }, "past": { "other": "{0}周前" } } }, "day": { "displayName": "日", "relative": { "0": "今天", "1": "明天", "2": "后天", "-2": "前天", "-1": "昨天" }, "relativeTime": { "future": { "other": "{0}天后" }, "past": { "other": "{0}天前" } } }, "day-short": { "displayName": "日", "relative": { "0": "今天", "1": "明天", "2": "后天", "-2": "前天", "-1": "昨天" }, "relativeTime": { "future": { "other": "{0}天后" }, "past": { "other": "{0}天前" } } }, "hour": { "displayName": "小时", "relative": { "0": "这一时间 \u002F 此时" }, "relativeTime": { "future": { "other": "{0}小时后" }, "past": { "other": "{0}小时前" } } }, "hour-short": { "displayName": "小时", "relative": { "0": "这一时间 \u002F 此时" }, "relativeTime": { "future": { "other": "{0}小时后" }, "past": { "other": "{0}小时前" } } }, "minute": { "displayName": "分钟", "relative": { "0": "此刻" }, "relativeTime": { "future": { "other": "{0}分钟后" }, "past": { "other": "{0}分钟前" } } }, "minute-short": { "displayName": "分", "relative": { "0": "此刻" }, "relativeTime": { "future": { "other": "{0}分钟后" }, "past": { "other": "{0}分钟前" } } }, "second": { "displayName": "秒", "relative": { "0": "现在" }, "relativeTime": { "future": { "other": "{0}秒后" }, "past": { "other": "{0}秒前" } } }, "second-short": { "displayName": "秒", "relative": { "0": "现在" }, "relativeTime": { "future": { "other": "{0}秒后" }, "past": { "other": "{0}秒前" } } } } }, { "locale": "zh-Hant", "pluralRuleFunction": function (n) {
        return 'other';
    }, "fields": { "year": { "displayName": "年", "relative": { "0": "今年", "1": "明年", "-1": "去年" }, "relativeTime": { "future": { "other": "{0} 年後" }, "past": { "other": "{0} 年前" } } }, "year-short": { "displayName": "年", "relative": { "0": "今年", "1": "明年", "-1": "去年" }, "relativeTime": { "future": { "other": "{0} 年後" }, "past": { "other": "{0} 年前" } } }, "month": { "displayName": "月", "relative": { "0": "本月", "1": "下個月", "-1": "上個月" }, "relativeTime": { "future": { "other": "{0} 個月後" }, "past": { "other": "{0} 個月前" } } }, "month-short": { "displayName": "月", "relative": { "0": "本月", "1": "下個月", "-1": "上個月" }, "relativeTime": { "future": { "other": "{0} 個月後" }, "past": { "other": "{0} 個月前" } } }, "week": { "displayName": "週", "relativePeriod": "{0} 當週", "relative": { "0": "本週", "1": "下週", "-1": "上週" }, "relativeTime": { "future": { "other": "{0} 週後" }, "past": { "other": "{0} 週前" } } }, "week-short": { "displayName": "週", "relativePeriod": "{0} 當週", "relative": { "0": "本週", "1": "下週", "-1": "上週" }, "relativeTime": { "future": { "other": "{0} 週後" }, "past": { "other": "{0} 週前" } } }, "day": { "displayName": "日", "relative": { "0": "今天", "1": "明天", "2": "後天", "-2": "前天", "-1": "昨天" }, "relativeTime": { "future": { "other": "{0} 天後" }, "past": { "other": "{0} 天前" } } }, "day-short": { "displayName": "日", "relative": { "0": "今天", "1": "明天", "2": "後天", "-2": "前天", "-1": "昨天" }, "relativeTime": { "future": { "other": "{0} 天後" }, "past": { "other": "{0} 天前" } } }, "hour": { "displayName": "小時", "relative": { "0": "這一小時" }, "relativeTime": { "future": { "other": "{0} 小時後" }, "past": { "other": "{0} 小時前" } } }, "hour-short": { "displayName": "小時", "relative": { "0": "這一小時" }, "relativeTime": { "future": { "other": "{0} 小時後" }, "past": { "other": "{0} 小時前" } } }, "minute": { "displayName": "分鐘", "relative": { "0": "這一分鐘" }, "relativeTime": { "future": { "other": "{0} 分鐘後" }, "past": { "other": "{0} 分鐘前" } } }, "minute-short": { "displayName": "分鐘", "relative": { "0": "這一分鐘" }, "relativeTime": { "future": { "other": "{0} 分鐘後" }, "past": { "other": "{0} 分鐘前" } } }, "second": { "displayName": "秒", "relative": { "0": "現在" }, "relativeTime": { "future": { "other": "{0} 秒後" }, "past": { "other": "{0} 秒前" } } }, "second-short": { "displayName": "秒", "relative": { "0": "現在" }, "relativeTime": { "future": { "other": "{0} 秒後" }, "past": { "other": "{0} 秒前" } } } } }, { "locale": "zh-Hant-HK", "parentLocale": "zh-Hant", "fields": { "year": { "displayName": "年", "relative": { "0": "今年", "1": "下年", "-1": "上年" }, "relativeTime": { "future": { "other": "{0} 年後" }, "past": { "other": "{0} 年前" } } }, "year-short": { "displayName": "年", "relative": { "0": "今年", "1": "下年", "-1": "上年" }, "relativeTime": { "future": { "other": "{0} 年後" }, "past": { "other": "{0} 年前" } } }, "month": { "displayName": "月", "relative": { "0": "本月", "1": "下個月", "-1": "上個月" }, "relativeTime": { "future": { "other": "{0} 個月後" }, "past": { "other": "{0} 個月前" } } }, "month-short": { "displayName": "月", "relative": { "0": "本月", "1": "下個月", "-1": "上個月" }, "relativeTime": { "future": { "other": "{0} 個月後" }, "past": { "other": "{0} 個月前" } } }, "week": { "displayName": "星期", "relativePeriod": "{0} 當週", "relative": { "0": "本星期", "1": "下星期", "-1": "上星期" }, "relativeTime": { "future": { "other": "{0} 星期後" }, "past": { "other": "{0} 星期前" } } }, "week-short": { "displayName": "星期", "relativePeriod": "{0} 當週", "relative": { "0": "本星期", "1": "下星期", "-1": "上星期" }, "relativeTime": { "future": { "other": "{0} 星期後" }, "past": { "other": "{0} 星期前" } } }, "day": { "displayName": "日", "relative": { "0": "今日", "1": "明日", "2": "後日", "-2": "前日", "-1": "昨日" }, "relativeTime": { "future": { "other": "{0} 日後" }, "past": { "other": "{0} 日前" } } }, "day-short": { "displayName": "日", "relative": { "0": "今日", "1": "明日", "2": "後日", "-2": "前日", "-1": "昨日" }, "relativeTime": { "future": { "other": "{0} 日後" }, "past": { "other": "{0} 日前" } } }, "hour": { "displayName": "小時", "relative": { "0": "這個小時" }, "relativeTime": { "future": { "other": "{0} 小時後" }, "past": { "other": "{0} 小時前" } } }, "hour-short": { "displayName": "小時", "relative": { "0": "這個小時" }, "relativeTime": { "future": { "other": "{0} 小時後" }, "past": { "other": "{0} 小時前" } } }, "minute": { "displayName": "分鐘", "relative": { "0": "這分鐘" }, "relativeTime": { "future": { "other": "{0} 分鐘後" }, "past": { "other": "{0} 分鐘前" } } }, "minute-short": { "displayName": "分鐘", "relative": { "0": "這分鐘" }, "relativeTime": { "future": { "other": "{0} 分鐘後" }, "past": { "other": "{0} 分鐘前" } } }, "second": { "displayName": "秒", "relative": { "0": "現在" }, "relativeTime": { "future": { "other": "{0} 秒後" }, "past": { "other": "{0} 秒前" } } }, "second-short": { "displayName": "秒", "relative": { "0": "現在" }, "relativeTime": { "future": { "other": "{0} 秒後" }, "past": { "other": "{0} 秒前" } } } } }, { "locale": "zh-Hant-MO", "parentLocale": "zh-Hant-HK" }, { "locale": "zu", "pluralRuleFunction": function (n, ord) {
        if (ord)
            return 'other';
        return (n >= 0 && n <= 1) ? 'one' : 'other';
    }, "fields": { "year": { "displayName": "Unyaka", "relative": { "0": "kulo nyaka", "1": "unyaka ozayo", "-1": "onyakeni odlule" }, "relativeTime": { "future": { "one": "onyakeni ongu-{0} ozayo", "other": "eminyakeni engu-{0} ezayo" }, "past": { "one": "{0} unyaka odlule", "other": "{0} iminyaka edlule" } } }, "year-short": { "displayName": "Unyaka", "relative": { "0": "kulo nyaka", "1": "unyaka ozayo", "-1": "onyakeni odlule" }, "relativeTime": { "future": { "one": "onyakeni ongu-{0} ozayo", "other": "eminyakeni engu-{0} ezayo" }, "past": { "one": "{0} unyaka odlule", "other": "{0} unyaka odlule" } } }, "month": { "displayName": "Inyanga", "relative": { "0": "le nyanga", "1": "inyanga ezayo", "-1": "inyanga edlule" }, "relativeTime": { "future": { "one": "enyangeni engu-{0}", "other": "ezinyangeni ezingu-{0} ezizayo" }, "past": { "one": "{0} inyanga edlule", "other": "{0} izinyanga ezedlule" } } }, "month-short": { "displayName": "Inyanga", "relative": { "0": "le nyanga", "1": "inyanga ezayo", "-1": "inyanga edlule" }, "relativeTime": { "future": { "one": "ezinyangeni ezingu-{0} ezizayo", "other": "ezinyangeni ezingu-{0} ezizayo" }, "past": { "one": "{0} izinyanga ezedlule", "other": "{0} izinyanga ezedlule" } } }, "week": { "displayName": "Iviki", "relativePeriod": "evikini le-{0}", "relative": { "0": "leli viki", "1": "iviki elizayo", "-1": "iviki eledlule" }, "relativeTime": { "future": { "one": "evikini elingu-{0}", "other": "emavikini angu-{0}" }, "past": { "one": "evikini elingu-{0} eledlule", "other": "amaviki angu-{0} edlule" } } }, "week-short": { "displayName": "Iviki", "relativePeriod": "evikini le-{0}", "relative": { "0": "leli viki", "1": "iviki elizayo", "-1": "iviki eledlule" }, "relativeTime": { "future": { "one": "evikini elingu-{0} elizayo", "other": "emavikini angu-{0} ezayo" }, "past": { "one": "amaviki angu-{0} edlule", "other": "amaviki angu-{0} edlule" } } }, "day": { "displayName": "Usuku", "relative": { "0": "namhlanje", "1": "kusasa", "2": "usuku olulandela olwakusasa", "-2": "usuku olwandulela olwayizolo", "-1": "izolo" }, "relativeTime": { "future": { "one": "osukwini olungu-{0} oluzayo", "other": "ezinsukwini ezingu-{0} ezizayo" }, "past": { "one": "osukwini olungu-{0} olwedlule", "other": "ezinsukwini ezingu-{0} ezedlule." } } }, "day-short": { "displayName": "Usuku", "relative": { "0": "namhlanje", "1": "kusasa", "2": "usuku olulandela olwakusasa", "-2": "usuku olwandulela olwayizolo", "-1": "izolo" }, "relativeTime": { "future": { "one": "osukwini olungu-{0} oluzayo", "other": "ezinsukwini ezingu-{0} ezizayo" }, "past": { "one": "{0} usuku olwedlule", "other": "{0} izinsuku ezedlule" } } }, "hour": { "displayName": "Ihora", "relative": { "0": "leli hora" }, "relativeTime": { "future": { "one": "ehoreni elingu-{0} elizayo", "other": "emahoreni angu-{0} ezayo" }, "past": { "one": "{0} ihora eledlule", "other": "emahoreni angu-{0} edlule" } } }, "hour-short": { "displayName": "Ihora", "relative": { "0": "leli hora" }, "relativeTime": { "future": { "one": "ehoreni elingu-{0} elizayo", "other": "emahoreni angu-{0} ezayo" }, "past": { "one": "{0} ihora eledlule", "other": "emahoreni angu-{0} edlule" } } }, "minute": { "displayName": "Iminithi", "relative": { "0": "leli minithi" }, "relativeTime": { "future": { "one": "kuminithi elingu-{0} elizayo", "other": "kumaminithi angu-{0} ezayo" }, "past": { "one": "{0} iminithi eledlule", "other": "{0} amaminithi edlule" } } }, "minute-short": { "displayName": "Iminithi", "relative": { "0": "leli minithi" }, "relativeTime": { "future": { "one": "kuminithi elingu-{0} elizayo", "other": "kumaminithi angu-{0} ezayo" }, "past": { "one": "{0} iminithi eledlule", "other": "{0} amaminithi edlule" } } }, "second": { "displayName": "Isekhondi", "relative": { "0": "manje" }, "relativeTime": { "future": { "one": "kusekhondi elingu-{0} elizayo", "other": "kumasekhondi angu-{0} ezayo" }, "past": { "one": "{0} isekhondi eledlule", "other": "{0} amasekhondi edlule" } } }, "second-short": { "displayName": "Isekhondi", "relative": { "0": "manje" }, "relativeTime": { "future": { "one": "kusekhondi elingu-{0} elizayo", "other": "kumasekhondi angu-{0} ezayo" }, "past": { "one": "{0} isekhondi eledlule", "other": "{0} amasekhondi edlule" } } } } });
locales$1.default = core_1.default;

/* jshint node:true */

(function (module, exports) {

var IntlRelativeFormat = main['default'];

// Add all locale data to `IntlRelativeFormat`. This module will be ignored when
// bundling for the browser with Browserify/Webpack.


// Re-export `IntlRelativeFormat` as the CommonJS default exports with all the
// locale data registered, and with English set as the default locale. Define
// the `default` prop for use with other compiled ES6 Modules.
exports = module.exports = IntlRelativeFormat;
exports['default'] = exports;
}(intlRelativeformat, intlRelativeformat.exports));

var IntlRelativeFormat = intlRelativeformat.exports;

var reactIs = reactIs$1.exports;
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var NODE_ENV = process.env.NODE_ENV;

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

var invariant_1 = invariant;

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/
// -- Utilities ----------------------------------------------------------------
function getCacheId(inputs) {
    return JSON.stringify(inputs.map(function (input) {
        return input && typeof input === 'object' ? orderedProps(input) : input;
    }));
}
function orderedProps(obj) {
    return Object.keys(obj)
        .sort()
        .map(function (k) {
        var _a;
        return (_a = {}, _a[k] = obj[k], _a);
    });
}
var memoizeFormatConstructor = function (FormatConstructor, cache) {
    if (cache === void 0) { cache = {}; }
    return function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var cacheId = getCacheId(args);
        var format = cacheId && cache[cacheId];
        if (!format) {
            format = new ((_a = FormatConstructor).bind.apply(_a, [void 0].concat(args)))();
            if (cacheId) {
                cache[cacheId] = format;
            }
        }
        return format;
    };
};

/*
 * Copyright 2019, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

// GENERATED FILE
var defaultLocaleData = { "locale": "en", "pluralRuleFunction": function pluralRuleFunction(n, ord) {
    var s = String(n).split("."),
        v0 = !s[1],
        t0 = Number(s[0]) == n,
        n10 = t0 && s[0].slice(-1),
        n100 = t0 && s[0].slice(-2);if (ord) return n10 == 1 && n100 != 11 ? "one" : n10 == 2 && n100 != 12 ? "two" : n10 == 3 && n100 != 13 ? "few" : "other";return n == 1 && v0 ? "one" : "other";
  }, "fields": { "year": { "displayName": "year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "in {0} year", "other": "in {0} years" }, "past": { "one": "{0} year ago", "other": "{0} years ago" } } }, "year-short": { "displayName": "yr.", "relative": { "0": "this yr.", "1": "next yr.", "-1": "last yr." }, "relativeTime": { "future": { "one": "in {0} yr.", "other": "in {0} yr." }, "past": { "one": "{0} yr. ago", "other": "{0} yr. ago" } } }, "month": { "displayName": "month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "in {0} month", "other": "in {0} months" }, "past": { "one": "{0} month ago", "other": "{0} months ago" } } }, "month-short": { "displayName": "mo.", "relative": { "0": "this mo.", "1": "next mo.", "-1": "last mo." }, "relativeTime": { "future": { "one": "in {0} mo.", "other": "in {0} mo." }, "past": { "one": "{0} mo. ago", "other": "{0} mo. ago" } } }, "day": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "day-short": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "hour": { "displayName": "hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hour", "other": "in {0} hours" }, "past": { "one": "{0} hour ago", "other": "{0} hours ago" } } }, "hour-short": { "displayName": "hr.", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hr.", "other": "in {0} hr." }, "past": { "one": "{0} hr. ago", "other": "{0} hr. ago" } } }, "minute": { "displayName": "minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} minute", "other": "in {0} minutes" }, "past": { "one": "{0} minute ago", "other": "{0} minutes ago" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} min.", "other": "in {0} min." }, "past": { "one": "{0} min. ago", "other": "{0} min. ago" } } }, "second": { "displayName": "second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} second", "other": "in {0} seconds" }, "past": { "one": "{0} second ago", "other": "{0} seconds ago" } } }, "second-short": { "displayName": "sec.", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} sec.", "other": "in {0} sec." }, "past": { "one": "{0} sec. ago", "other": "{0} sec. ago" } } } } };

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

function addLocaleData() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var locales = Array.isArray(data) ? data : [data];

  locales.forEach(function (localeData) {
    if (localeData && localeData.locale) {
      IntlMessageFormat.__addLocaleData(localeData);
      IntlRelativeFormat.__addLocaleData(localeData);
    }
  });
}

function hasLocaleData(locale) {
  var localeParts = (locale || '').split('-');

  while (localeParts.length > 0) {
    if (hasIMFAndIRFLocaleData(localeParts.join('-'))) {
      return true;
    }

    localeParts.pop();
  }

  return false;
}

function hasIMFAndIRFLocaleData(locale) {
  var normalizedLocale = locale && locale.toLowerCase();

  return !!(IntlMessageFormat.__localeData__[normalizedLocale] && IntlRelativeFormat.__localeData__[normalizedLocale]);
}

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends$1 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};









var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};



















var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

var bool = PropTypes.bool;
var number = PropTypes.number;
var string = PropTypes.string;
var func = PropTypes.func;
var object = PropTypes.object;
var oneOf = PropTypes.oneOf;
var shape = PropTypes.shape;
var any = PropTypes.any;
var oneOfType = PropTypes.oneOfType;

var localeMatcher = oneOf(['best fit', 'lookup']);
var narrowShortLong = oneOf(['narrow', 'short', 'long']);
var numeric2digit = oneOf(['numeric', '2-digit']);
var funcReq = func.isRequired;

var intlConfigPropTypes = {
  locale: string,
  timeZone: string,
  formats: object,
  messages: object,
  textComponent: any,

  defaultLocale: string,
  defaultFormats: object,

  onError: func
};

var intlFormatPropTypes = {
  formatDate: funcReq,
  formatTime: funcReq,
  formatRelative: funcReq,
  formatNumber: funcReq,
  formatPlural: funcReq,
  formatMessage: funcReq,
  formatHTMLMessage: funcReq
};

var intlShape = shape(_extends$1({}, intlConfigPropTypes, intlFormatPropTypes, {
  formatters: object,
  now: funcReq
}));

var messageDescriptorPropTypes = {
  id: string.isRequired,
  description: oneOfType([string, object]),
  defaultMessage: string
};

var dateTimeFormatPropTypes = {
  localeMatcher: localeMatcher,
  formatMatcher: oneOf(['basic', 'best fit']),

  timeZone: string,
  hour12: bool,

  weekday: narrowShortLong,
  era: narrowShortLong,
  year: numeric2digit,
  month: oneOf(['numeric', '2-digit', 'narrow', 'short', 'long']),
  day: numeric2digit,
  hour: numeric2digit,
  minute: numeric2digit,
  second: numeric2digit,
  timeZoneName: oneOf(['short', 'long'])
};

var numberFormatPropTypes = {
  localeMatcher: localeMatcher,

  style: oneOf(['decimal', 'currency', 'percent']),
  currency: string,
  currencyDisplay: oneOf(['symbol', 'code', 'name']),
  useGrouping: bool,

  minimumIntegerDigits: number,
  minimumFractionDigits: number,
  maximumFractionDigits: number,
  minimumSignificantDigits: number,
  maximumSignificantDigits: number
};

var relativeFormatPropTypes = {
  style: oneOf(['best fit', 'numeric']),
  units: oneOf(['second', 'minute', 'hour', 'day', 'month', 'year', 'second-short', 'minute-short', 'hour-short', 'day-short', 'month-short', 'year-short'])
};

var pluralFormatPropTypes = {
  style: oneOf(['cardinal', 'ordinal'])
};

/*
HTML escaping and shallow-equals implementations are the same as React's
(on purpose.) Therefore, it has the following Copyright and Licensing:

Copyright 2013-2014, Facebook, Inc.
All rights reserved.

This source code is licensed under the BSD-style license found in the LICENSE
file in the root directory of React's source tree.
*/

var intlConfigPropNames = Object.keys(intlConfigPropTypes);

var ESCAPED_CHARS = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  "'": '&#x27;'
};

var UNSAFE_CHARS_REGEX = /[&><"']/g;

function escape(str) {
  return ('' + str).replace(UNSAFE_CHARS_REGEX, function (match) {
    return ESCAPED_CHARS[match];
  });
}

function filterProps(props, whitelist) {
  var defaults$$1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return whitelist.reduce(function (filtered, name) {
    if (props.hasOwnProperty(name)) {
      filtered[name] = props[name];
    } else if (defaults$$1.hasOwnProperty(name)) {
      filtered[name] = defaults$$1[name];
    }

    return filtered;
  }, {});
}

function invariantIntlContext() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      intl = _ref.intl;

  invariant_1(intl, '[React Intl] Could not find required `intl` object. ' + '<IntlProvider> needs to exist in the component ancestry.');
}

function shallowEquals(objA, objB) {
  if (objA === objB) {
    return true;
  }

  if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
  for (var i = 0; i < keysA.length; i++) {
    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
  }

  return true;
}

function shouldIntlComponentUpdate(_ref2, nextProps, nextState) {
  var props = _ref2.props,
      state = _ref2.state,
      _ref2$context = _ref2.context,
      context = _ref2$context === undefined ? {} : _ref2$context;
  var nextContext = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var _context$intl = context.intl,
      intl = _context$intl === undefined ? {} : _context$intl;
  var _nextContext$intl = nextContext.intl,
      nextIntl = _nextContext$intl === undefined ? {} : _nextContext$intl;


  return !shallowEquals(nextProps, props) || !shallowEquals(nextState, state) || !(nextIntl === intl || shallowEquals(filterProps(nextIntl, intlConfigPropNames), filterProps(intl, intlConfigPropNames)));
}

function createError(message, exception) {
  var eMsg = exception ? '\n' + exception : '';
  return '[React Intl] ' + message + eMsg;
}

function defaultErrorHandler(error) {
  if (process.env.NODE_ENV !== 'production') {
    console.error(error);
  }
}

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

// This is a "hack" until a proper `intl-pluralformat` package is created.

function resolveLocale(locales) {
  // IntlMessageFormat#_resolveLocale() does not depend on `this`.
  return IntlMessageFormat.prototype._resolveLocale(locales);
}

function findPluralFunction(locale) {
  // IntlMessageFormat#_findPluralFunction() does not depend on `this`.
  return IntlMessageFormat.prototype._findPluralRuleFunction(locale);
}

var IntlPluralFormat = function IntlPluralFormat(locales) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  classCallCheck(this, IntlPluralFormat);

  var useOrdinal = options.style === 'ordinal';
  var pluralFn = findPluralFunction(resolveLocale(locales));

  this.format = function (value) {
    return pluralFn(value, useOrdinal);
  };
};

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

var DATE_TIME_FORMAT_OPTIONS = Object.keys(dateTimeFormatPropTypes);
var NUMBER_FORMAT_OPTIONS = Object.keys(numberFormatPropTypes);
var RELATIVE_FORMAT_OPTIONS = Object.keys(relativeFormatPropTypes);
var PLURAL_FORMAT_OPTIONS = Object.keys(pluralFormatPropTypes);

var RELATIVE_FORMAT_THRESHOLDS = {
  second: 60, // seconds to minute
  minute: 60, // minutes to hour
  hour: 24, // hours to day
  day: 30, // days to month
  month: 12 };

function updateRelativeFormatThresholds(newThresholds) {
  var thresholds = IntlRelativeFormat.thresholds;
  thresholds.second = newThresholds.second;
  thresholds.minute = newThresholds.minute;
  thresholds.hour = newThresholds.hour;
  thresholds.day = newThresholds.day;
  thresholds.month = newThresholds.month;
  thresholds['second-short'] = newThresholds['second-short'];
  thresholds['minute-short'] = newThresholds['minute-short'];
  thresholds['hour-short'] = newThresholds['hour-short'];
  thresholds['day-short'] = newThresholds['day-short'];
  thresholds['month-short'] = newThresholds['month-short'];
}

function getNamedFormat(formats, type, name, onError) {
  var format = formats && formats[type] && formats[type][name];
  if (format) {
    return format;
  }

  onError(createError('No ' + type + ' format named: ' + name));
}

function formatDate(config, state, value) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var locale = config.locale,
      formats = config.formats,
      timeZone = config.timeZone;
  var format = options.format;


  var onError = config.onError || defaultErrorHandler;
  var date = new Date(value);
  var defaults$$1 = _extends$1({}, timeZone && { timeZone: timeZone }, format && getNamedFormat(formats, 'date', format, onError));
  var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults$$1);

  try {
    return state.getDateTimeFormat(locale, filteredOptions).format(date);
  } catch (e) {
    onError(createError('Error formatting date.', e));
  }

  return String(date);
}

function formatTime(config, state, value) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var locale = config.locale,
      formats = config.formats,
      timeZone = config.timeZone;
  var format = options.format;


  var onError = config.onError || defaultErrorHandler;
  var date = new Date(value);
  var defaults$$1 = _extends$1({}, timeZone && { timeZone: timeZone }, format && getNamedFormat(formats, 'time', format, onError));
  var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults$$1);

  if (!filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second) {
    // Add default formatting options if hour, minute, or second isn't defined.
    filteredOptions = _extends$1({}, filteredOptions, { hour: 'numeric', minute: 'numeric' });
  }

  try {
    return state.getDateTimeFormat(locale, filteredOptions).format(date);
  } catch (e) {
    onError(createError('Error formatting time.', e));
  }

  return String(date);
}

function formatRelative(config, state, value) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var locale = config.locale,
      formats = config.formats;
  var format = options.format;


  var onError = config.onError || defaultErrorHandler;
  var date = new Date(value);
  var now = new Date(options.now);
  var defaults$$1 = format && getNamedFormat(formats, 'relative', format, onError);
  var filteredOptions = filterProps(options, RELATIVE_FORMAT_OPTIONS, defaults$$1);

  // Capture the current threshold values, then temporarily override them with
  // specific values just for this render.
  var oldThresholds = _extends$1({}, IntlRelativeFormat.thresholds);
  updateRelativeFormatThresholds(RELATIVE_FORMAT_THRESHOLDS);

  try {
    return state.getRelativeFormat(locale, filteredOptions).format(date, {
      now: isFinite(now) ? now : state.now()
    });
  } catch (e) {
    onError(createError('Error formatting relative time.', e));
  } finally {
    updateRelativeFormatThresholds(oldThresholds);
  }

  return String(date);
}

function formatNumber(config, state, value) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var locale = config.locale,
      formats = config.formats;
  var format = options.format;


  var onError = config.onError || defaultErrorHandler;
  var defaults$$1 = format && getNamedFormat(formats, 'number', format, onError);
  var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults$$1);

  try {
    return state.getNumberFormat(locale, filteredOptions).format(value);
  } catch (e) {
    onError(createError('Error formatting number.', e));
  }

  return String(value);
}

function formatPlural(config, state, value) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var locale = config.locale;


  var filteredOptions = filterProps(options, PLURAL_FORMAT_OPTIONS);
  var onError = config.onError || defaultErrorHandler;

  try {
    return state.getPluralFormat(locale, filteredOptions).format(value);
  } catch (e) {
    onError(createError('Error formatting plural.', e));
  }

  return 'other';
}

function formatMessage(config, state) {
  var messageDescriptor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var locale = config.locale,
      formats = config.formats,
      messages = config.messages,
      defaultLocale = config.defaultLocale,
      defaultFormats = config.defaultFormats;
  var id = messageDescriptor.id,
      defaultMessage = messageDescriptor.defaultMessage;

  // Produce a better error if the user calls `intl.formatMessage(element)`

  if (process.env.NODE_ENV !== 'production') {
    invariant_1(!React.isValidElement(config), '[React Intl] Don\'t pass React elements to ' + 'formatMessage(), pass `.props`.');
  }

  // `id` is a required field of a Message Descriptor.
  invariant_1(id, '[React Intl] An `id` must be provided to format a message.');

  var message = messages && messages[id];
  var hasValues = Object.keys(values).length > 0;

  // Avoid expensive message formatting for simple messages without values. In
  // development messages will always be formatted in case of missing values.
  if (!hasValues && process.env.NODE_ENV === 'production') {
    return message || defaultMessage || id;
  }

  var formattedMessage = void 0;
  var onError = config.onError || defaultErrorHandler;

  if (message) {
    try {
      var formatter = state.getMessageFormat(message, locale, formats);

      formattedMessage = formatter.format(values);
    } catch (e) {
      onError(createError('Error formatting message: "' + id + '" for locale: "' + locale + '"' + (defaultMessage ? ', using default message as fallback.' : ''), e));
    }
  } else {
    // This prevents warnings from littering the console in development
    // when no `messages` are passed into the <IntlProvider> for the
    // default locale, and a default message is in the source.
    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {
      onError(createError('Missing message: "' + id + '" for locale: "' + locale + '"' + (defaultMessage ? ', using default message as fallback.' : '')));
    }
  }

  if (!formattedMessage && defaultMessage) {
    try {
      var _formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);

      formattedMessage = _formatter.format(values);
    } catch (e) {
      onError(createError('Error formatting the default message for: "' + id + '"', e));
    }
  }

  if (!formattedMessage) {
    onError(createError('Cannot format message: "' + id + '", ' + ('using message ' + (message || defaultMessage ? 'source' : 'id') + ' as fallback.')));
  }

  return formattedMessage || message || defaultMessage || id;
}

function formatHTMLMessage(config, state, messageDescriptor) {
  var rawValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  // Process all the values before they are used when formatting the ICU
  // Message string. Since the formatted message might be injected via
  // `innerHTML`, all String-based values need to be HTML-escaped.
  var escapedValues = Object.keys(rawValues).reduce(function (escaped, name) {
    var value = rawValues[name];
    escaped[name] = typeof value === 'string' ? escape(value) : value;
    return escaped;
  }, {});

  return formatMessage(config, state, messageDescriptor, escapedValues);
}



var format$1 = Object.freeze({
	formatDate: formatDate,
	formatTime: formatTime,
	formatRelative: formatRelative,
	formatNumber: formatNumber,
	formatPlural: formatPlural,
	formatMessage: formatMessage,
	formatHTMLMessage: formatHTMLMessage
});

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

var intlConfigPropNames$1 = Object.keys(intlConfigPropTypes);
var intlFormatPropNames = Object.keys(intlFormatPropTypes);

// These are not a static property on the `IntlProvider` class so the intl
// config values can be inherited from an <IntlProvider> ancestor.
var defaultProps = {
  formats: {},
  messages: {},
  timeZone: null,
  textComponent: 'span',

  defaultLocale: 'en',
  defaultFormats: {},

  onError: defaultErrorHandler
};

var IntlProvider = function (_Component) {
  inherits(IntlProvider, _Component);

  function IntlProvider(props) {
    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck(this, IntlProvider);

    var _this = possibleConstructorReturn(this, (IntlProvider.__proto__ || Object.getPrototypeOf(IntlProvider)).call(this, props, context));

    invariant_1(typeof Intl !== 'undefined', '[React Intl] The `Intl` APIs must be available in the runtime, ' + 'and do not appear to be built-in. An `Intl` polyfill should be loaded.\n' + 'See: http://formatjs.io/guides/runtime-environments/');

    var intlContext = context.intl;

    // Used to stabilize time when performing an initial rendering so that
    // all relative times use the same reference "now" time.

    var initialNow = void 0;
    if (isFinite(props.initialNow)) {
      initialNow = Number(props.initialNow);
    } else {
      // When an `initialNow` isn't provided via `props`, look to see an
      // <IntlProvider> exists in the ancestry and call its `now()`
      // function to propagate its value for "now".
      initialNow = intlContext ? intlContext.now() : Date.now();
    }

    // Creating `Intl*` formatters is expensive. If there's a parent
    // `<IntlProvider>`, then its formatters will be used. Otherwise, this
    // memoize the `Intl*` constructors and cache them for the lifecycle of
    // this IntlProvider instance.

    var _ref = intlContext || {},
        _ref$formatters = _ref.formatters,
        formatters = _ref$formatters === undefined ? {
      getDateTimeFormat: memoizeFormatConstructor(Intl.DateTimeFormat),
      getNumberFormat: memoizeFormatConstructor(Intl.NumberFormat),
      getMessageFormat: memoizeFormatConstructor(IntlMessageFormat),
      getRelativeFormat: memoizeFormatConstructor(IntlRelativeFormat),
      getPluralFormat: memoizeFormatConstructor(IntlPluralFormat)
    } : _ref$formatters;

    _this.state = _extends$1({}, formatters, {

      // Wrapper to provide stable "now" time for initial render.
      now: function now() {
        return _this._didDisplay ? Date.now() : initialNow;
      }
    });
    return _this;
  }

  createClass(IntlProvider, [{
    key: 'getConfig',
    value: function getConfig() {
      var intlContext = this.context.intl;

      // Build a whitelisted config object from `props`, defaults, and
      // `context.intl`, if an <IntlProvider> exists in the ancestry.

      var config = filterProps(this.props, intlConfigPropNames$1, intlContext);

      // Apply default props. This must be applied last after the props have
      // been resolved and inherited from any <IntlProvider> in the ancestry.
      // This matches how React resolves `defaultProps`.
      for (var propName in defaultProps) {
        if (config[propName] === undefined) {
          config[propName] = defaultProps[propName];
        }
      }

      if (!hasLocaleData(config.locale)) {
        var _config = config,
            locale = _config.locale,
            defaultLocale = _config.defaultLocale,
            defaultFormats = _config.defaultFormats,
            onError = _config.onError;


        onError(createError('Missing locale data for locale: "' + locale + '". ' + ('Using default locale: "' + defaultLocale + '" as fallback.')));

        // Since there's no registered locale data for `locale`, this will
        // fallback to the `defaultLocale` to make sure things can render.
        // The `messages` are overridden to the `defaultProps` empty object
        // to maintain referential equality across re-renders. It's assumed
        // each <FormattedMessage> contains a `defaultMessage` prop.
        config = _extends$1({}, config, {
          locale: defaultLocale,
          formats: defaultFormats,
          messages: defaultProps.messages
        });
      }

      return config;
    }
  }, {
    key: 'getBoundFormatFns',
    value: function getBoundFormatFns(config, state) {
      return intlFormatPropNames.reduce(function (boundFormatFns, name) {
        boundFormatFns[name] = format$1[name].bind(null, config, state);
        return boundFormatFns;
      }, {});
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      var config = this.getConfig();

      // Bind intl factories and current config to the format functions.
      var boundFormatFns = this.getBoundFormatFns(config, this.state);

      var _state = this.state,
          now = _state.now,
          formatters = objectWithoutProperties(_state, ['now']);


      return {
        intl: _extends$1({}, config, boundFormatFns, {
          formatters: formatters,
          now: now
        })
      };
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
        next[_key] = arguments[_key];
      }

      return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._didDisplay = true;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.Children.only(this.props.children);
    }
  }]);
  return IntlProvider;
}(React.Component);

IntlProvider.displayName = 'IntlProvider';
IntlProvider.contextTypes = {
  intl: intlShape
};
IntlProvider.childContextTypes = {
  intl: intlShape.isRequired
};
process.env.NODE_ENV !== "production" ? IntlProvider.propTypes = _extends$1({}, intlConfigPropTypes, {
  children: PropTypes.element.isRequired,
  initialNow: PropTypes.any
}) : void 0;

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

var FormattedDate = function (_Component) {
  inherits(FormattedDate, _Component);

  function FormattedDate(props, context) {
    classCallCheck(this, FormattedDate);

    var _this = possibleConstructorReturn(this, (FormattedDate.__proto__ || Object.getPrototypeOf(FormattedDate)).call(this, props, context));

    invariantIntlContext(context);
    return _this;
  }

  createClass(FormattedDate, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
        next[_key] = arguments[_key];
      }

      return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
    }
  }, {
    key: 'render',
    value: function render() {
      var _context$intl = this.context.intl,
          formatDate = _context$intl.formatDate,
          Text = _context$intl.textComponent;
      var _props = this.props,
          value = _props.value,
          children = _props.children;


      var formattedDate = formatDate(value, this.props);

      if (typeof children === 'function') {
        return children(formattedDate);
      }

      return React__default['default'].createElement(
        Text,
        null,
        formattedDate
      );
    }
  }]);
  return FormattedDate;
}(React.Component);

FormattedDate.displayName = 'FormattedDate';
FormattedDate.contextTypes = {
  intl: intlShape
};
process.env.NODE_ENV !== "production" ? FormattedDate.propTypes = _extends$1({}, dateTimeFormatPropTypes, {
  value: PropTypes.any.isRequired,
  format: PropTypes.string,
  children: PropTypes.func
}) : void 0;

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

var FormattedTime = function (_Component) {
  inherits(FormattedTime, _Component);

  function FormattedTime(props, context) {
    classCallCheck(this, FormattedTime);

    var _this = possibleConstructorReturn(this, (FormattedTime.__proto__ || Object.getPrototypeOf(FormattedTime)).call(this, props, context));

    invariantIntlContext(context);
    return _this;
  }

  createClass(FormattedTime, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
        next[_key] = arguments[_key];
      }

      return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
    }
  }, {
    key: 'render',
    value: function render() {
      var _context$intl = this.context.intl,
          formatTime = _context$intl.formatTime,
          Text = _context$intl.textComponent;
      var _props = this.props,
          value = _props.value,
          children = _props.children;


      var formattedTime = formatTime(value, this.props);

      if (typeof children === 'function') {
        return children(formattedTime);
      }

      return React__default['default'].createElement(
        Text,
        null,
        formattedTime
      );
    }
  }]);
  return FormattedTime;
}(React.Component);

FormattedTime.displayName = 'FormattedTime';
FormattedTime.contextTypes = {
  intl: intlShape
};
process.env.NODE_ENV !== "production" ? FormattedTime.propTypes = _extends$1({}, dateTimeFormatPropTypes, {
  value: PropTypes.any.isRequired,
  format: PropTypes.string,
  children: PropTypes.func
}) : void 0;

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

var SECOND = 1000;
var MINUTE = 1000 * 60;
var HOUR = 1000 * 60 * 60;
var DAY = 1000 * 60 * 60 * 24;

// The maximum timer delay value is a 32-bit signed integer.
// See: https://mdn.io/setTimeout
var MAX_TIMER_DELAY = 2147483647;

function selectUnits(delta) {
  var absDelta = Math.abs(delta);

  if (absDelta < MINUTE) {
    return 'second';
  }

  if (absDelta < HOUR) {
    return 'minute';
  }

  if (absDelta < DAY) {
    return 'hour';
  }

  // The maximum scheduled delay will be measured in days since the maximum
  // timer delay is less than the number of milliseconds in 25 days.
  return 'day';
}

function getUnitDelay(units) {
  switch (units) {
    case 'second':
      return SECOND;
    case 'minute':
      return MINUTE;
    case 'hour':
      return HOUR;
    case 'day':
      return DAY;
    default:
      return MAX_TIMER_DELAY;
  }
}

function isSameDate(a, b) {
  if (a === b) {
    return true;
  }

  var aTime = new Date(a).getTime();
  var bTime = new Date(b).getTime();

  return isFinite(aTime) && isFinite(bTime) && aTime === bTime;
}

var FormattedRelative = function (_Component) {
  inherits(FormattedRelative, _Component);

  function FormattedRelative(props, context) {
    classCallCheck(this, FormattedRelative);

    var _this = possibleConstructorReturn(this, (FormattedRelative.__proto__ || Object.getPrototypeOf(FormattedRelative)).call(this, props, context));

    invariantIntlContext(context);

    var now = isFinite(props.initialNow) ? Number(props.initialNow) : context.intl.now();

    // `now` is stored as state so that `render()` remains a function of
    // props + state, instead of accessing `Date.now()` inside `render()`.
    _this.state = { now: now };
    return _this;
  }

  createClass(FormattedRelative, [{
    key: 'scheduleNextUpdate',
    value: function scheduleNextUpdate(props, state) {
      var _this2 = this;

      // Cancel and pending update because we're scheduling a new update.
      clearTimeout(this._timer);

      var value = props.value,
          units = props.units,
          updateInterval = props.updateInterval;

      var time = new Date(value).getTime();

      // If the `updateInterval` is falsy, including `0` or we don't have a
      // valid date, then auto updates have been turned off, so we bail and
      // skip scheduling an update.
      if (!updateInterval || !isFinite(time)) {
        return;
      }

      var delta = time - state.now;
      var unitDelay = getUnitDelay(units || selectUnits(delta));
      var unitRemainder = Math.abs(delta % unitDelay);

      // We want the largest possible timer delay which will still display
      // accurate information while reducing unnecessary re-renders. The delay
      // should be until the next "interesting" moment, like a tick from
      // "1 minute ago" to "2 minutes ago" when the delta is 120,000ms.
      var delay = delta < 0 ? Math.max(updateInterval, unitDelay - unitRemainder) : Math.max(updateInterval, unitRemainder);

      this._timer = setTimeout(function () {
        _this2.setState({ now: _this2.context.intl.now() });
      }, delay);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.scheduleNextUpdate(this.props, this.state);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref) {
      var nextValue = _ref.value;

      // When the `props.value` date changes, `state.now` needs to be updated,
      // and the next update can be rescheduled.
      if (!isSameDate(nextValue, this.props.value)) {
        this.setState({ now: this.context.intl.now() });
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
        next[_key] = arguments[_key];
      }

      return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {
      this.scheduleNextUpdate(nextProps, nextState);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearTimeout(this._timer);
    }
  }, {
    key: 'render',
    value: function render() {
      var _context$intl = this.context.intl,
          formatRelative = _context$intl.formatRelative,
          Text = _context$intl.textComponent;
      var _props = this.props,
          value = _props.value,
          children = _props.children;


      var formattedRelative = formatRelative(value, _extends$1({}, this.props, this.state));

      if (typeof children === 'function') {
        return children(formattedRelative);
      }

      return React__default['default'].createElement(
        Text,
        null,
        formattedRelative
      );
    }
  }]);
  return FormattedRelative;
}(React.Component);

FormattedRelative.displayName = 'FormattedRelative';
FormattedRelative.contextTypes = {
  intl: intlShape
};
FormattedRelative.defaultProps = {
  updateInterval: 1000 * 10
};
process.env.NODE_ENV !== "production" ? FormattedRelative.propTypes = _extends$1({}, relativeFormatPropTypes, {
  value: PropTypes.any.isRequired,
  format: PropTypes.string,
  updateInterval: PropTypes.number,
  initialNow: PropTypes.any,
  children: PropTypes.func
}) : void 0;

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

var FormattedNumber = function (_Component) {
  inherits(FormattedNumber, _Component);

  function FormattedNumber(props, context) {
    classCallCheck(this, FormattedNumber);

    var _this = possibleConstructorReturn(this, (FormattedNumber.__proto__ || Object.getPrototypeOf(FormattedNumber)).call(this, props, context));

    invariantIntlContext(context);
    return _this;
  }

  createClass(FormattedNumber, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
        next[_key] = arguments[_key];
      }

      return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
    }
  }, {
    key: 'render',
    value: function render() {
      var _context$intl = this.context.intl,
          formatNumber = _context$intl.formatNumber,
          Text = _context$intl.textComponent;
      var _props = this.props,
          value = _props.value,
          children = _props.children;


      var formattedNumber = formatNumber(value, this.props);

      if (typeof children === 'function') {
        return children(formattedNumber);
      }

      return React__default['default'].createElement(
        Text,
        null,
        formattedNumber
      );
    }
  }]);
  return FormattedNumber;
}(React.Component);

FormattedNumber.displayName = 'FormattedNumber';
FormattedNumber.contextTypes = {
  intl: intlShape
};
process.env.NODE_ENV !== "production" ? FormattedNumber.propTypes = _extends$1({}, numberFormatPropTypes, {
  value: PropTypes.any.isRequired,
  format: PropTypes.string,
  children: PropTypes.func
}) : void 0;

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

var FormattedPlural = function (_Component) {
  inherits(FormattedPlural, _Component);

  function FormattedPlural(props, context) {
    classCallCheck(this, FormattedPlural);

    var _this = possibleConstructorReturn(this, (FormattedPlural.__proto__ || Object.getPrototypeOf(FormattedPlural)).call(this, props, context));

    invariantIntlContext(context);
    return _this;
  }

  createClass(FormattedPlural, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
        next[_key] = arguments[_key];
      }

      return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
    }
  }, {
    key: 'render',
    value: function render() {
      var _context$intl = this.context.intl,
          formatPlural = _context$intl.formatPlural,
          Text = _context$intl.textComponent;
      var _props = this.props,
          value = _props.value,
          other = _props.other,
          children = _props.children;


      var pluralCategory = formatPlural(value, this.props);
      var formattedPlural = this.props[pluralCategory] || other;

      if (typeof children === 'function') {
        return children(formattedPlural);
      }

      return React__default['default'].createElement(
        Text,
        null,
        formattedPlural
      );
    }
  }]);
  return FormattedPlural;
}(React.Component);

FormattedPlural.displayName = 'FormattedPlural';
FormattedPlural.contextTypes = {
  intl: intlShape
};
FormattedPlural.defaultProps = {
  style: 'cardinal'
};
process.env.NODE_ENV !== "production" ? FormattedPlural.propTypes = _extends$1({}, pluralFormatPropTypes, {
  value: PropTypes.any.isRequired,

  other: PropTypes.node.isRequired,
  zero: PropTypes.node,
  one: PropTypes.node,
  two: PropTypes.node,
  few: PropTypes.node,
  many: PropTypes.node,

  children: PropTypes.func
}) : void 0;

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

var defaultFormatMessage = function defaultFormatMessage(descriptor, values) {
  if (process.env.NODE_ENV !== 'production') {
    console.error('[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry. Using default message as fallback.');
  }
  return formatMessage({}, { getMessageFormat: memoizeFormatConstructor(IntlMessageFormat) }, descriptor, values);
};

var FormattedMessage$1 = function (_Component) {
  inherits(FormattedMessage, _Component);

  function FormattedMessage(props, context) {
    classCallCheck(this, FormattedMessage);

    var _this = possibleConstructorReturn(this, (FormattedMessage.__proto__ || Object.getPrototypeOf(FormattedMessage)).call(this, props, context));

    if (!props.defaultMessage) {
      invariantIntlContext(context);
    }
    return _this;
  }

  createClass(FormattedMessage, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      var values = this.props.values;
      var nextValues = nextProps.values;


      if (!shallowEquals(nextValues, values)) {
        return true;
      }

      // Since `values` has already been checked, we know they're not
      // different, so the current `values` are carried over so the shallow
      // equals comparison on the other props isn't affected by the `values`.
      var nextPropsToCheck = _extends$1({}, nextProps, {
        values: values
      });

      for (var _len = arguments.length, next = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        next[_key - 1] = arguments[_key];
      }

      return shouldIntlComponentUpdate.apply(undefined, [this, nextPropsToCheck].concat(next));
    }
  }, {
    key: 'render',
    value: function render() {
      var _ref = this.context.intl || {},
          _ref$formatMessage = _ref.formatMessage,
          formatMessage$$1 = _ref$formatMessage === undefined ? defaultFormatMessage : _ref$formatMessage,
          _ref$textComponent = _ref.textComponent,
          Text = _ref$textComponent === undefined ? 'span' : _ref$textComponent;

      var _props = this.props,
          id = _props.id,
          description = _props.description,
          defaultMessage = _props.defaultMessage,
          values = _props.values,
          _props$tagName = _props.tagName,
          Component$$1 = _props$tagName === undefined ? Text : _props$tagName,
          children = _props.children;


      var tokenDelimiter = void 0;
      var tokenizedValues = void 0;
      var elements = void 0;

      var hasValues = values && Object.keys(values).length > 0;
      if (hasValues) {
        // Creates a token with a random UID that should not be guessable or
        // conflict with other parts of the `message` string.
        var uid = Math.floor(Math.random() * 0x10000000000).toString(16);

        var generateToken = function () {
          var counter = 0;
          return function () {
            return 'ELEMENT-' + uid + '-' + (counter += 1);
          };
        }();

        // Splitting with a delimiter to support IE8. When using a regex
        // with a capture group IE8 does not include the capture group in
        // the resulting array.
        tokenDelimiter = '@__' + uid + '__@';
        tokenizedValues = {};
        elements = {};

        // Iterates over the `props` to keep track of any React Element
        // values so they can be represented by the `token` as a placeholder
        // when the `message` is formatted. This allows the formatted
        // message to then be broken-up into parts with references to the
        // React Elements inserted back in.
        Object.keys(values).forEach(function (name) {
          var value = values[name];

          if (React.isValidElement(value)) {
            var token = generateToken();
            tokenizedValues[name] = tokenDelimiter + token + tokenDelimiter;
            elements[token] = value;
          } else {
            tokenizedValues[name] = value;
          }
        });
      }

      var descriptor = { id: id, description: description, defaultMessage: defaultMessage };
      var formattedMessage = formatMessage$$1(descriptor, tokenizedValues || values);

      var nodes = void 0;

      var hasElements = elements && Object.keys(elements).length > 0;
      if (hasElements) {
        // Split the message into parts so the React Element values captured
        // above can be inserted back into the rendered message. This
        // approach allows messages to render with React Elements while
        // keeping React's virtual diffing working properly.
        nodes = formattedMessage.split(tokenDelimiter).filter(function (part) {
          return !!part;
        }).map(function (part) {
          return elements[part] || part;
        });
      } else {
        nodes = [formattedMessage];
      }

      if (typeof children === 'function') {
        return children.apply(undefined, toConsumableArray(nodes));
      }

      // Needs to use `createElement()` instead of JSX, otherwise React will
      // warn about a missing `key` prop with rich-text message formatting.
      return React.createElement.apply(undefined, [Component$$1, null].concat(toConsumableArray(nodes)));
    }
  }]);
  return FormattedMessage;
}(React.Component);

FormattedMessage$1.displayName = 'FormattedMessage';
FormattedMessage$1.contextTypes = {
  intl: intlShape
};
FormattedMessage$1.defaultProps = {
  values: {}
};
process.env.NODE_ENV !== "production" ? FormattedMessage$1.propTypes = _extends$1({}, messageDescriptorPropTypes, {
  values: PropTypes.object,
  tagName: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  children: PropTypes.func
}) : void 0;

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

var FormattedHTMLMessage = function (_Component) {
  inherits(FormattedHTMLMessage, _Component);

  function FormattedHTMLMessage(props, context) {
    classCallCheck(this, FormattedHTMLMessage);

    var _this = possibleConstructorReturn(this, (FormattedHTMLMessage.__proto__ || Object.getPrototypeOf(FormattedHTMLMessage)).call(this, props, context));

    invariantIntlContext(context);
    return _this;
  }

  createClass(FormattedHTMLMessage, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      var values = this.props.values;
      var nextValues = nextProps.values;


      if (!shallowEquals(nextValues, values)) {
        return true;
      }

      // Since `values` has already been checked, we know they're not
      // different, so the current `values` are carried over so the shallow
      // equals comparison on the other props isn't affected by the `values`.
      var nextPropsToCheck = _extends$1({}, nextProps, {
        values: values
      });

      for (var _len = arguments.length, next = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        next[_key - 1] = arguments[_key];
      }

      return shouldIntlComponentUpdate.apply(undefined, [this, nextPropsToCheck].concat(next));
    }
  }, {
    key: 'render',
    value: function render() {
      var _context$intl = this.context.intl,
          formatHTMLMessage = _context$intl.formatHTMLMessage,
          Text = _context$intl.textComponent;
      var _props = this.props,
          id = _props.id,
          description = _props.description,
          defaultMessage = _props.defaultMessage,
          rawValues = _props.values,
          _props$tagName = _props.tagName,
          Component$$1 = _props$tagName === undefined ? Text : _props$tagName,
          children = _props.children;


      var descriptor = { id: id, description: description, defaultMessage: defaultMessage };
      var formattedHTMLMessage = formatHTMLMessage(descriptor, rawValues);

      if (typeof children === 'function') {
        return children(formattedHTMLMessage);
      }

      // Since the message presumably has HTML in it, we need to set
      // `innerHTML` in order for it to be rendered and not escaped by React.
      // To be safe, all string prop values were escaped when formatting the
      // message. It is assumed that the message is not UGC, and came from the
      // developer making it more like a template.
      //
      // Note: There's a perf impact of using this component since there's no
      // way for React to do its virtual DOM diffing.
      var html = { __html: formattedHTMLMessage };
      return React__default['default'].createElement(Component$$1, { dangerouslySetInnerHTML: html });
    }
  }]);
  return FormattedHTMLMessage;
}(React.Component);

FormattedHTMLMessage.displayName = 'FormattedHTMLMessage';
FormattedHTMLMessage.contextTypes = {
  intl: intlShape
};
FormattedHTMLMessage.defaultProps = {
  values: {}
};
process.env.NODE_ENV !== "production" ? FormattedHTMLMessage.propTypes = _extends$1({}, messageDescriptorPropTypes, {
  values: PropTypes.object,
  tagName: PropTypes.string,
  children: PropTypes.func
}) : void 0;

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

addLocaleData(defaultLocaleData);

/*
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

addLocaleData(allLocaleData);

var Filters = /*#__PURE__*/function (_Component) {
  _inherits$4(Filters, _Component);

  var _super = _createSuper$4(Filters);

  function Filters(props) {
    var _this;

    _classCallCheck$4(this, Filters);

    _this = _super.call(this, props);
    _this.saveFilters = _this.saveFilters.bind(_assertThisInitialized$4(_this));
    _this.toggle = _this.toggle.bind(_assertThisInitialized$4(_this));
    _this.state = {
      show: false
    };
    return _this;
  }

  _createClass$7(Filters, [{
    key: "saveFilters",
    value: function saveFilters(field, input) {
      var newFilters = this.props.filters;
      newFilters[field] = input;
      this.props.onFilterChange(newFilters);
    }
  }, {
    key: "toggle",
    value: function toggle() {
      var show = this.state.show;
      var newShow = !show;
      this.setState({
        show: newShow
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          PortalSite = _this$props.PortalSite,
          filters = _this$props.filters,
          options = _this$props.options;
      var searchFields = PortalSite.options.searchFields || [{
        label: 'Land',
        id: 'countries',
        type: 'select',
        required: false,
        mandatory: true,
        options: ['select', 'list', 'radio', 'text']
      }];
      var fixed = options.filtersForm ? options.filtersForm.fixedMobile ? 'fixed-mobile' : null : null;
      var filterClass = options.filtersForm ? options.filtersForm.show ? "filters filters-".concat(options.filtersForm.location) : 'filters-hidden' : 'filters';
      var show = this.state.show && 'showOnMobile';
      return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement("button", {
        className: "filters-button ".concat(fixed),
        onClick: this.toggle
      }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
        id: "filters"
      })), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "".concat(filterClass, " ").concat(fixed, " ").concat(show)
      }, /*#__PURE__*/React__default['default'].createElement("button", {
        onClick: function onClick() {
          var filters = {};

          for (var property in _this2.props.filters) {
            filters[property] = '';
          }

          _this2.props.onFilterChange(filters);
        },
        className: "filters-reload"
      }, /*#__PURE__*/React__default['default'].createElement(Reload, null)), searchFields.map(function (field) {
        return /*#__PURE__*/React__default['default'].createElement("div", {
          key: field.id,
          className: "bu-field",
          id: field.id
        }, /*#__PURE__*/React__default['default'].createElement("label", {
          style: {
            width: '100%',
            display: 'block'
          },
          htmlFor: field.id
        }, PortalSite["".concat(field.id, "_label")]), /*#__PURE__*/React__default['default'].createElement(Field$1, {
          field: field,
          PortalSite: PortalSite,
          filters: filters,
          value: filters[field.id],
          onFilterChange: _this2.saveFilters
        }));
      })));
    }
  }]);

  return Filters;
}(React.Component);

Filters.propTypes = {
  PortalSite: PropTypes.object.isRequired,
  filters: PropTypes.object.isRequired,
  options: PropTypes.object.isRequired,
  onFilterChange: PropTypes.func.isRequired
};

var ArrowRight$1 = function ArrowRight() {
  return /*#__PURE__*/React__default['default'].createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    "data-name": "Layer 1",
    viewBox: "0 0 100 100",
    x: "0px",
    y: "0px"
  }, /*#__PURE__*/React__default['default'].createElement("title", null, "Forward"), /*#__PURE__*/React__default['default'].createElement("path", {
    d: "M97.64,44.1,64.72,11.18a8.06,8.06,0,1,0-11.4,11.39L72.78,42H8.06a8.06,8.06,0,0,0,0,16.12H72.6L53.32,77.43a8.06,8.06,0,0,0,11.4,11.39L97.64,55.9A8,8,0,0,0,100,50.2a1.27,1.27,0,0,0,0-.2,1.41,1.41,0,0,0,0-.2A8.07,8.07,0,0,0,97.64,44.1Z"
  }));
};

function SingleResult(_ref) {
  var result = _ref.result,
      options = _ref.options;
  var thisOptions = options || {};
  return /*#__PURE__*/React__default['default'].createElement("a", {
    className: "bukazu-result",
    href: result.house_url
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: "bukazu-result-inner"
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: "image-holder"
  }, /*#__PURE__*/React__default['default'].createElement("img", {
    src: result.image_url,
    alt: result.name
  })), /*#__PURE__*/React__default['default'].createElement("div", {
    className: "result"
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: "result-title"
  }, result.name), /*#__PURE__*/React__default['default'].createElement("div", {
    className: "result-place"
  }, thisOptions.showCity && /*#__PURE__*/React__default['default'].createElement("span", null, result.city, ", "), thisOptions.showRegion && /*#__PURE__*/React__default['default'].createElement("span", null, result.province, ", "), thisOptions.showCountry && /*#__PURE__*/React__default['default'].createElement("span", null, result.country_name)), /*#__PURE__*/React__default['default'].createElement("div", {
    className: "result-description",
    dangerouslySetInnerHTML: {
      __html: result.description
    }
  }), /*#__PURE__*/React__default['default'].createElement("div", {
    className: "result-details"
  }, thisOptions.showPersons && /*#__PURE__*/React__default['default'].createElement("div", null, result.persons, " ", /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "persons"
  })), thisOptions.showBedrooms && /*#__PURE__*/React__default['default'].createElement("div", null, result.bedrooms, " ", /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "bedrooms"
  })), thisOptions.showBathrooms && /*#__PURE__*/React__default['default'].createElement("div", null, result.bathrooms, " ", /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "bathrooms"
  }))), thisOptions.showPrice && /*#__PURE__*/React__default['default'].createElement("div", {
    className: "result-price"
  }, result.booking_price ? /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "price_from"
  }), /*#__PURE__*/React__default['default'].createElement("span", {
    className: "price"
  }, "\u20AC", ' ', /*#__PURE__*/React__default['default'].createElement(FormattedNumber, {
    value: result.booking_price.total_price,
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }))) : /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "minimum_week_price"
  }), /*#__PURE__*/React__default['default'].createElement("span", {
    className: "price"
  }, "\u20AC", ' ', /*#__PURE__*/React__default['default'].createElement(FormattedNumber, {
    value: result.minimum_week_price,
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  })))), /*#__PURE__*/React__default['default'].createElement("div", {
    className: "result-button"
  }, /*#__PURE__*/React__default['default'].createElement(ArrowRight$1, null)))));
}

SingleResult.propTypes = {
  result: PropTypes.object.isRequired,
  options: PropTypes.object.isRequired
};

var Pagination$1 = {};

var paginator = Paginator$1;

// Paginator constructor
//
// `per_page` is the number of results per page, `length` is the number of
// pages to display. They default to `25` and `10` respectively.
function Paginator$1(per_page, length) {
  // You really should be calling this with `new Paginator`, but WHATEVER.
  if (!(this instanceof Paginator$1)) {
    return new Paginator$1(per_page, length);
  }

  // Woo, defaults!
  this.per_page = per_page || 25;
  this.length = length || 10;
}

// Build an object with all the necessary information for outputting pagination
// controls.
//
// (new Paginator(paginator.build(100, 2)
Paginator$1.prototype.build = function(total_results, current_page) {
  // We want the number of pages, rounded up to the nearest page.
  var total_pages = Math.ceil(total_results / this.per_page);

  // Ensure both total_results and current_page are treated as Numbers
  total_results = parseInt(total_results, 10);
  current_page  = parseInt(current_page, 10) || 1;

  // Obviously we can't be on a negative or 0 page.
  if (current_page < 1) { current_page = 1; }
  // If the user has done something like /page/99999 we want to clamp that back
  // down.
  if (current_page > total_pages) { current_page = total_pages; }

  // This is the first page to be displayed as a numbered link.
  var first_page = Math.max(1, current_page - Math.floor(this.length / 2));

  // And here's the last page to be displayed specifically.
  var last_page = Math.min(total_pages, current_page + Math.floor(this.length / 2));

  // This is triggered if we're at or near one of the extremes; we won't have
  // enough page links. We need to adjust our bounds accordingly.
  if (last_page - first_page + 1 < this.length) {
    if (current_page < (total_pages / 2)) {
      last_page = Math.min(total_pages, last_page + (this.length - (last_page - first_page)));
    } else {
      first_page = Math.max(1, first_page - (this.length - (last_page - first_page)));
    }
  }

  // This can be triggered if the user wants an odd number of pages.
  if (last_page - first_page + 1 > this.length) {
    // We want to move towards whatever extreme we're closest to at the time.
    if (current_page > (total_pages / 2)) {
      first_page++;
    } else {
      last_page--;
    }
  }

  // First result on the page. This, along with the field below, can be used to
  // do "showing x to y of z results" style things.
  var first_result = this.per_page * (current_page - 1);
  if (first_result < 0) { first_result = 0; }

  // Last result on the page.
  var last_result = (this.per_page * current_page) - 1;
  if (last_result < 0) { last_result = 0; }
  if (last_result > Math.max(total_results - 1, 0)) { last_result = Math.max(total_results - 1, 0); }

  // GIMME THAT OBJECT
  return {
    total_pages: total_pages,
    pages: Math.min(last_page - first_page + 1, total_pages),
    current_page: current_page,
    first_page: first_page,
    last_page: last_page,
    previous_page: current_page - 1,
    next_page: current_page + 1,
    has_previous_page: current_page > 1,
    has_next_page: current_page < total_pages,
    total_results: total_results,
    results: Math.min(last_result - first_result + 1, total_results),
    first_result: first_result,
    last_result: last_result,
  };
};

var Page = {};

var classnames = {exports: {}};

/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

(function (module) {
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString === Object.prototype.toString) {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				} else {
					classes.push(arg.toString());
				}
			}
		}

		return classes.join(' ');
	}

	if (module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
}(classnames));

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(React__default['default']);

var _propTypes = _interopRequireDefault(propTypes$1.exports);

var _classnames = _interopRequireDefault(classnames.exports);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Page =
/*#__PURE__*/
function (_Component) {
  _inherits(Page, _Component);

  function Page() {
    _classCallCheck(this, Page);

    return _possibleConstructorReturn(this, _getPrototypeOf(Page).apply(this, arguments));
  }

  _createClass(Page, [{
    key: "handleClick",
    value: function handleClick(e) {
      var _this$props = this.props,
          isDisabled = _this$props.isDisabled,
          pageNumber = _this$props.pageNumber;
      e.preventDefault();

      if (isDisabled) {
        return;
      }

      this.props.onClick(pageNumber);
    }
  }, {
    key: "render",
    value: function render() {
      var _cx;

      var _this$props2 = this.props,
          pageText = _this$props2.pageText;
          _this$props2.pageNumber;
          var activeClass = _this$props2.activeClass,
          itemClass = _this$props2.itemClass,
          linkClass = _this$props2.linkClass,
          activeLinkClass = _this$props2.activeLinkClass,
          disabledClass = _this$props2.disabledClass,
          isActive = _this$props2.isActive,
          isDisabled = _this$props2.isDisabled,
          href = _this$props2.href,
          ariaLabel = _this$props2.ariaLabel;
      var css = (0, _classnames["default"])(itemClass, (_cx = {}, _defineProperty(_cx, activeClass, isActive), _defineProperty(_cx, disabledClass, isDisabled), _cx));
      var linkCss = (0, _classnames["default"])(linkClass, _defineProperty({}, activeLinkClass, isActive));
      return _react["default"].createElement("li", {
        className: css,
        onClick: this.handleClick.bind(this)
      }, _react["default"].createElement("a", {
        className: linkCss,
        href: href,
        "aria-label": ariaLabel
      }, pageText));
    }
  }]);

  return Page;
}(_react.Component);

exports["default"] = Page;

_defineProperty(Page, "propTypes", {
  pageText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]),
  pageNumber: _propTypes["default"].number.isRequired,
  onClick: _propTypes["default"].func.isRequired,
  isActive: _propTypes["default"].bool.isRequired,
  isDisabled: _propTypes["default"].bool,
  activeClass: _propTypes["default"].string,
  activeLinkClass: _propTypes["default"].string,
  itemClass: _propTypes["default"].string,
  linkClass: _propTypes["default"].string,
  disabledClass: _propTypes["default"].string,
  href: _propTypes["default"].string
});

_defineProperty(Page, "defaultProps", {
  activeClass: "active",
  disabledClass: "disabled",
  itemClass: undefined,
  linkClass: undefined,
  activeLinkCLass: undefined,
  isActive: false,
  isDisabled: false,
  href: "#"
});
}(Page));

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(React__default['default']);

var _propTypes = _interopRequireDefault(propTypes$1.exports);

var _paginator = _interopRequireDefault(paginator);

var _Page = _interopRequireDefault(Page);

var _classnames = _interopRequireDefault(classnames.exports);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Pagination =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Pagination, _React$Component);

  function Pagination() {
    _classCallCheck(this, Pagination);

    return _possibleConstructorReturn(this, _getPrototypeOf(Pagination).apply(this, arguments));
  }

  _createClass(Pagination, [{
    key: "isFirstPageVisible",
    value: function isFirstPageVisible(has_previous_page) {
      var _this$props = this.props,
          hideDisabled = _this$props.hideDisabled;
          _this$props.hideNavigation;
          var hideFirstLastPages = _this$props.hideFirstLastPages;
      if (hideFirstLastPages || hideDisabled && !has_previous_page) return false;
      return true;
    }
  }, {
    key: "isPrevPageVisible",
    value: function isPrevPageVisible(has_previous_page) {
      var _this$props2 = this.props,
          hideDisabled = _this$props2.hideDisabled,
          hideNavigation = _this$props2.hideNavigation;
      if (hideNavigation || hideDisabled && !has_previous_page) return false;
      return true;
    }
  }, {
    key: "isNextPageVisible",
    value: function isNextPageVisible(has_next_page) {
      var _this$props3 = this.props,
          hideDisabled = _this$props3.hideDisabled,
          hideNavigation = _this$props3.hideNavigation;
      if (hideNavigation || hideDisabled && !has_next_page) return false;
      return true;
    }
  }, {
    key: "isLastPageVisible",
    value: function isLastPageVisible(has_next_page) {
      var _this$props4 = this.props,
          hideDisabled = _this$props4.hideDisabled;
          _this$props4.hideNavigation;
          var hideFirstLastPages = _this$props4.hideFirstLastPages;
      if (hideFirstLastPages || hideDisabled && !has_next_page) return false;
      return true;
    }
  }, {
    key: "buildPages",
    value: function buildPages() {
      var pages = [];
      var _this$props5 = this.props,
          itemsCountPerPage = _this$props5.itemsCountPerPage,
          pageRangeDisplayed = _this$props5.pageRangeDisplayed,
          activePage = _this$props5.activePage,
          prevPageText = _this$props5.prevPageText,
          nextPageText = _this$props5.nextPageText,
          firstPageText = _this$props5.firstPageText,
          lastPageText = _this$props5.lastPageText,
          totalItemsCount = _this$props5.totalItemsCount,
          onChange = _this$props5.onChange,
          activeClass = _this$props5.activeClass,
          itemClass = _this$props5.itemClass,
          itemClassFirst = _this$props5.itemClassFirst,
          itemClassPrev = _this$props5.itemClassPrev,
          itemClassNext = _this$props5.itemClassNext,
          itemClassLast = _this$props5.itemClassLast,
          activeLinkClass = _this$props5.activeLinkClass,
          disabledClass = _this$props5.disabledClass;
          _this$props5.hideDisabled;
          _this$props5.hideNavigation;
          var linkClass = _this$props5.linkClass,
          linkClassFirst = _this$props5.linkClassFirst,
          linkClassPrev = _this$props5.linkClassPrev,
          linkClassNext = _this$props5.linkClassNext,
          linkClassLast = _this$props5.linkClassLast;
          _this$props5.hideFirstLastPages;
          var getPageUrl = _this$props5.getPageUrl;
      var paginationInfo = new _paginator["default"](itemsCountPerPage, pageRangeDisplayed).build(totalItemsCount, activePage);

      for (var i = paginationInfo.first_page; i <= paginationInfo.last_page; i++) {
        pages.push(_react["default"].createElement(_Page["default"], {
          isActive: i === activePage,
          key: i,
          href: getPageUrl(i),
          pageNumber: i,
          pageText: i + "",
          onClick: onChange,
          itemClass: itemClass,
          linkClass: linkClass,
          activeClass: activeClass,
          activeLinkClass: activeLinkClass,
          ariaLabel: "Go to page number ".concat(i)
        }));
      }

      this.isPrevPageVisible(paginationInfo.has_previous_page) && pages.unshift(_react["default"].createElement(_Page["default"], {
        key: "prev" + paginationInfo.previous_page,
        href: getPageUrl(paginationInfo.previous_page),
        pageNumber: paginationInfo.previous_page,
        onClick: onChange,
        pageText: prevPageText,
        isDisabled: !paginationInfo.has_previous_page,
        itemClass: (0, _classnames["default"])(itemClass, itemClassPrev),
        linkClass: (0, _classnames["default"])(linkClass, linkClassPrev),
        disabledClass: disabledClass,
        ariaLabel: "Go to previous page"
      }));
      this.isFirstPageVisible(paginationInfo.has_previous_page) && pages.unshift(_react["default"].createElement(_Page["default"], {
        key: "first",
        href: getPageUrl(1),
        pageNumber: 1,
        onClick: onChange,
        pageText: firstPageText,
        isDisabled: !paginationInfo.has_previous_page,
        itemClass: (0, _classnames["default"])(itemClass, itemClassFirst),
        linkClass: (0, _classnames["default"])(linkClass, linkClassFirst),
        disabledClass: disabledClass,
        ariaLabel: "Go to first page"
      }));
      this.isNextPageVisible(paginationInfo.has_next_page) && pages.push(_react["default"].createElement(_Page["default"], {
        key: "next" + paginationInfo.next_page,
        href: getPageUrl(paginationInfo.next_page),
        pageNumber: paginationInfo.next_page,
        onClick: onChange,
        pageText: nextPageText,
        isDisabled: !paginationInfo.has_next_page,
        itemClass: (0, _classnames["default"])(itemClass, itemClassNext),
        linkClass: (0, _classnames["default"])(linkClass, linkClassNext),
        disabledClass: disabledClass,
        ariaLabel: "Go to next page"
      }));
      this.isLastPageVisible(paginationInfo.has_next_page) && pages.push(_react["default"].createElement(_Page["default"], {
        key: "last",
        href: getPageUrl(paginationInfo.total_pages),
        pageNumber: paginationInfo.total_pages,
        onClick: onChange,
        pageText: lastPageText,
        isDisabled: paginationInfo.current_page === paginationInfo.total_pages,
        itemClass: (0, _classnames["default"])(itemClass, itemClassLast),
        linkClass: (0, _classnames["default"])(linkClass, linkClassLast),
        disabledClass: disabledClass,
        ariaLabel: "Go to last page"
      }));
      return pages;
    }
  }, {
    key: "render",
    value: function render() {
      var pages = this.buildPages();
      return _react["default"].createElement("ul", {
        className: this.props.innerClass
      }, pages);
    }
  }]);

  return Pagination;
}(_react["default"].Component);

exports["default"] = Pagination;

_defineProperty(Pagination, "propTypes", {
  totalItemsCount: _propTypes["default"].number.isRequired,
  onChange: _propTypes["default"].func.isRequired,
  activePage: _propTypes["default"].number,
  itemsCountPerPage: _propTypes["default"].number,
  pageRangeDisplayed: _propTypes["default"].number,
  prevPageText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]),
  nextPageText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]),
  lastPageText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]),
  firstPageText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]),
  disabledClass: _propTypes["default"].string,
  hideDisabled: _propTypes["default"].bool,
  hideNavigation: _propTypes["default"].bool,
  innerClass: _propTypes["default"].string,
  itemClass: _propTypes["default"].string,
  itemClassFirst: _propTypes["default"].string,
  itemClassPrev: _propTypes["default"].string,
  itemClassNext: _propTypes["default"].string,
  itemClassLast: _propTypes["default"].string,
  linkClass: _propTypes["default"].string,
  activeClass: _propTypes["default"].string,
  activeLinkClass: _propTypes["default"].string,
  linkClassFirst: _propTypes["default"].string,
  linkClassPrev: _propTypes["default"].string,
  linkClassNext: _propTypes["default"].string,
  linkClassLast: _propTypes["default"].string,
  hideFirstLastPages: _propTypes["default"].bool,
  getPageUrl: _propTypes["default"].func
});

_defineProperty(Pagination, "defaultProps", {
  itemsCountPerPage: 10,
  pageRangeDisplayed: 5,
  activePage: 1,
  prevPageText: "⟨",
  firstPageText: "«",
  nextPageText: "⟩",
  lastPageText: "»",
  innerClass: "pagination",
  itemClass: undefined,
  linkClass: undefined,
  activeLinkClass: undefined,
  hideFirstLastPages: false,
  getPageUrl: function getPageUrl(i) {
    return "#";
  }
});
}(Pagination$1));

var Pagination = /*@__PURE__*/getDefaultExportFromCjs(Pagination$1);

var _templateObject$4, _templateObject2, _templateObject3;
var HOUSES_QUERY = gql(_templateObject$4 || (_templateObject$4 = _taggedTemplateLiteral(["\n  query PortalSiteHousesQuery(\n    $id: ID!\n    $country_id: ID\n    $region_id: String\n    $city_id: String\n    $persons_min: Int\n    $persons_max: Int\n    $bedrooms_min: Int\n    $bathrooms_min: Int\n    $arrival_date: String\n    $no_nights: Int\n    $properties: String\n    $weekprice_max: Int\n    $limit: Int\n    $skip: Int\n  ) {\n    PortalSite(id: $id) {\n      houses(\n        country_id: $country_id\n        region_id: $region_id\n        city_id: $city_id\n        persons_min: $persons_min\n        persons_max: $persons_max\n        bedrooms_min: $bedrooms_min\n        bathrooms_min: $bathrooms_min\n        arrival_date: $arrival_date\n        weekprice_max: $weekprice_max\n        no_nights_min: $no_nights\n        properties: $properties\n        limit: $limit\n        skip: $skip\n      ) {\n        id\n        name\n        persons\n        bathrooms\n        bedrooms\n        description\n        image_url\n        house_url\n        province\n        city\n        country_name\n        minimum_week_price\n      }\n    }\n  }\n"])));
var HOUSES_PRICE_QUERY = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  query PortalSiteHousesQuery(\n    $id: ID!\n    $country_id: ID\n    $region_id: String\n    $city_id: String\n    $persons_min: Int\n    $persons_max: Int\n    $bedrooms_min: Int\n    $bathrooms_min: Int\n    $arrival_date: String\n    $starts_at: Date!\n    $ends_at: Date!\n    $no_nights: Int\n    $properties: String\n    $weekprice_max: Int\n    $limit: Int\n    $skip: Int\n  ) {\n    PortalSite(id: $id) {\n      houses(\n        country_id: $country_id\n        region_id: $region_id\n        city_id: $city_id\n        persons_min: $persons_min\n        persons_max: $persons_max\n        bedrooms_min: $bedrooms_min\n        bathrooms_min: $bathrooms_min\n        arrival_date: $arrival_date\n        weekprice_max: $weekprice_max\n        no_nights_min: $no_nights\n        properties: $properties\n        limit: $limit\n        skip: $skip\n      ) {\n        id\n        name\n        persons\n        bathrooms\n        bedrooms\n        description\n        image_url\n        house_url\n        province\n        city\n        country_name\n        minimum_week_price\n        booking_price(starts_at: $starts_at, ends_at: $ends_at)\n      }\n    }\n  }\n"])));
var HOUSE_COUNT_QUERY = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  query PortalSiteHousesQuery(\n    $id: ID!\n    $country_id: ID\n    $region_id: String\n    $city_id: String\n    $persons_min: Int\n    $persons_max: Int\n    $bedrooms_min: Int\n    $bathrooms_min: Int\n    $arrival_date: String\n    $no_nights: Int\n    $properties: String\n    $weekprice_max: Int\n  ) {\n    PortalSite(id: $id) {\n      houses(\n        country_id: $country_id\n        region_id: $region_id\n        city_id: $city_id\n        persons_min: $persons_min\n        persons_max: $persons_max\n        bedrooms_min: $bedrooms_min\n        bathrooms_min: $bathrooms_min\n        arrival_date: $arrival_date\n        weekprice_max: $weekprice_max\n        no_nights_min: $no_nights\n        properties: $properties\n      ) {\n        id\n      }\n    }\n  }\n"])));

function Paginator(_ref) {
  var onPageChange = _ref.onPageChange,
      variables = _ref.variables,
      activePage = _ref.activePage,
      limit = _ref.limit;
  return /*#__PURE__*/React__default['default'].createElement(Query, {
    query: HOUSE_COUNT_QUERY,
    variables: variables
  }, function (_ref2) {
    var loading = _ref2.loading,
        error = _ref2.error,
        data = _ref2.data;
    if (loading) return /*#__PURE__*/React__default['default'].createElement("div", {
      style: {
        width: '100%',
        display: 'flex',
        justifyContent: 'center'
      }
    }, /*#__PURE__*/React__default['default'].createElement(Loading, null));

    if (error) {
      return /*#__PURE__*/React__default['default'].createElement("div", null, "Error");
    }
    var results = data.PortalSite.houses;
    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: "bu-paginator"
    }, /*#__PURE__*/React__default['default'].createElement("div", null, results.length, " ", /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "results"
    })), /*#__PURE__*/React__default['default'].createElement(Pagination, {
      activePage: activePage,
      itemsCountPerPage: limit,
      totalItemsCount: results.length,
      pageRangeDisplayed: 5,
      onChange: function onChange(e) {
        onPageChange(e);
      },
      innerClass: "bu-pagination"
    }));
  });
}

Paginator.propTypes = {
  activePage: PropTypes.number.isRequired,
  limit: PropTypes.number.isRequired,
  onPageChange: PropTypes.func.isRequired,
  variables: PropTypes.object.isRequired
};

var Modal = /*#__PURE__*/function (_Component) {
  _inherits$4(Modal, _Component);

  var _super = _createSuper$4(Modal);

  function Modal() {
    var _this;

    _classCallCheck$4(this, Modal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty$e(_assertThisInitialized$4(_this), "state", {
      visible: _this.props.show
    });

    return _this;
  }

  _createClass$7(Modal, [{
    key: "setVisible",
    value: function setVisible(visible) {
      this.setState({
        visible: visible
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          buttonText = _this$props.buttonText;
      var visible = this.state.visible;

      if (!visible) {
        return /*#__PURE__*/React__default['default'].createElement("a", {
          className: "info-button",
          onClick: function onClick() {
            return _this2.setVisible(true);
          }
        }, buttonText);
      }

      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "bukazu-modal-container"
      }, /*#__PURE__*/React__default['default'].createElement("div", {
        className: "bukazu-modal-container-inner"
      }, /*#__PURE__*/React__default['default'].createElement("div", {
        className: "bukazu-modal-escape",
        onClick: function onClick() {
          return _this2.setVisible(false);
        }
      }), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "bukazu-modal"
      }, /*#__PURE__*/React__default['default'].createElement("div", {
        className: "bukazu-modal-content"
      }, children), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "bukazu-modal-footer"
      }, /*#__PURE__*/React__default['default'].createElement("a", {
        onClick: function onClick() {
          return _this2.setVisible(false);
        }
      }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
        id: "close"
      }))))));
    }
  }]);

  return Modal;
}(React.Component);

Modal.defaultProps = {
  show: false
};
Modal.propTypes = {
  show: PropTypes.bool,
  children: PropTypes.node,
  buttonText: PropTypes.node
};

function ApiError(errors, modal) {
  console.error({
    errors: errors
  });
  var errorMessage = /*#__PURE__*/React__default['default'].createElement("div", {
    className: "bukazu-error-message"
  }, /*#__PURE__*/React__default['default'].createElement("h2", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "something_went_wrong_please_try_again"
  })), /*#__PURE__*/React__default['default'].createElement("ul", null, errors.errors.graphQLErrors.map(function (err) {
    return /*#__PURE__*/React__default['default'].createElement("li", {
      key: err.message
    }, err.message);
  })));

  if (modal == true) {
    return /*#__PURE__*/React__default['default'].createElement(Modal, {
      show: true
    }, errorMessage);
  }

  return errorMessage;
}

ApiError.defaultProps = {
  modal: false
};

function IntegrationError(_ref) {
  var portalCode = _ref.portalCode,
      pageType = _ref.pageType,
      locale = _ref.locale,
      filters = _ref.filters;
  var errors = [];

  if (!portalCode) {
    var message = 'No portal code is specified, so portal is not working';
    console.error(message);
    errors.push(message);
  }

  if (pageType && pageType !== 'reviews') {
    var _message = "'".concat(pageType, "' is not a valid page");

    console.error(_message);
    errors.push(_message);
  }

  if (!locale) {
    console.warn('No locale is set default to English');
  } else {
    if (!['nl', 'de', 'en', 'fr', 'it', 'es'].includes(locale)) {
      errors.push('Invalid locale');
    }
  }

  if (filters && !isObject$2(filters)) {
    var _message2 = 'Filters variable is not an object';
    console.error(_message2, filters);
  }

  if (errors.length == 0) {
    return false;
  }

  return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("h2", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage, {
    id: "something_went_wrong_please_try_again"
  })), /*#__PURE__*/React__default['default'].createElement("ul", null, errors.map(function (err) {
    return /*#__PURE__*/React__default['default'].createElement("li", null, err);
  })));
}

var isObject$2 = function isObject(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
};

function Results(_ref) {
  var filters = _ref.filters,
      PortalSite = _ref.PortalSite,
      limit = _ref.limit,
      skip = _ref.skip,
      locale = _ref.locale,
      onPageChange = _ref.onPageChange,
      activePage = _ref.activePage;
  var min_nights = null;
  var requestPrices = false;

  if (filters.departure_date && filters.arrival_date) {
    min_nights = difference_in_calendar_days(filters.departure_date, filters.arrival_date);
    requestPrices = true;
  } else if (filters.arrival_date) {
    min_nights = 1;
  }

  var filterProperties = filters.properties || [];
  filterProperties = filterProperties.map(function (e) {
    return JSON.stringify(e);
  });
  var properties = filterProperties.join(',');
  var variables = {
    id: PortalSite.portal_code,
    country_id: filters.countries || null,
    region_id: filters.regions || null,
    city_id: filters.cities,
    persons_min: Number(filters.persons_min) || null,
    persons_max: Number(filters.persons_max) || null,
    bedrooms_min: Number(filters.bedrooms_min),
    bathrooms_min: Number(filters.bathrooms_min),
    arrival_date: filters.arrival_date,
    starts_at: filters.arrival_date,
    ends_at: filters.departure_date,
    no_nights: Number(min_nights) || null,
    extra_search: filters.extra_search,
    properties: properties,
    weekprice_max: Number(filters.weekprice_max) || null,
    limit: limit,
    skip: skip,
    locale: locale
  };
  return /*#__PURE__*/React__default['default'].createElement(Query, {
    query: requestPrices ? HOUSES_PRICE_QUERY : HOUSES_QUERY,
    variables: variables
  }, function (_ref2) {
    var loading = _ref2.loading,
        error = _ref2.error,
        data = _ref2.data;
    if (loading) return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(Loading, null));

    if (error) {
      return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(ApiError, {
        errors: error
      }));
    }

    var Results = data.PortalSite.houses;
    return /*#__PURE__*/React__default['default'].createElement("div", {
      id: "results",
      className: PortalSite.options.filtersForm ? PortalSite.options.filtersForm.mode : null
    }, /*#__PURE__*/React__default['default'].createElement(Paginator, {
      variables: variables,
      activePage: activePage,
      limit: limit,
      onPageChange: onPageChange
    }), ' ', Results.length === 0 ? /*#__PURE__*/React__default['default'].createElement("div", {
      className: "bu-noresults"
    }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "no_results"
    })) : null, Results.map(function (result) {
      return /*#__PURE__*/React__default['default'].createElement(SingleResult, {
        key: result.id,
        result: result,
        options: PortalSite.options.filtersForm
      });
    }), /*#__PURE__*/React__default['default'].createElement(Paginator, {
      variables: variables,
      activePage: activePage,
      limit: limit,
      onPageChange: onPageChange
    }));
  });
}

Results.propTypes = {
  PortalSite: PropTypes.object.isRequired,
  filters: PropTypes.object.isRequired,
  activePage: PropTypes.number.isRequired,
  locale: PropTypes.string.isRequired,
  limit: PropTypes.number.isRequired,
  skip: PropTypes.number.isRequired,
  onPageChange: PropTypes.func.isRequired
};

var SearchPage = /*#__PURE__*/function (_Component) {
  _inherits$4(SearchPage, _Component);

  var _super = _createSuper$4(SearchPage);

  function SearchPage(props) {
    var _this;

    _classCallCheck$4(this, SearchPage);

    _this = _super.call(this, props);
    var limit = _this.props.options.filtersForm ? Number(_this.props.options.filtersForm.no_results) : 20;
    _this.state = {
      filters: _this.props.filters,
      activePage: 1,
      limit: limit,
      skip: 0
    };
    _this.onFilterChange = _this.onFilterChange.bind(_assertThisInitialized$4(_this));
    _this.pageChange = _this.pageChange.bind(_assertThisInitialized$4(_this));
    return _this;
  }

  _createClass$7(SearchPage, [{
    key: "onFilterChange",
    value: function onFilterChange(data) {
      var filters = data;
      this.setState({
        filters: filters
      });
      this.pageChange(1);
    }
  }, {
    key: "pageChange",
    value: function pageChange(pageNumber) {
      var limit = this.state.limit;
      var newSkip = pageNumber * limit - limit;
      this.setState({
        activePage: pageNumber,
        skip: newSkip
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          filters = _this$state.filters,
          activePage = _this$state.activePage,
          limit = _this$state.limit,
          skip = _this$state.skip;
      var _this$props = this.props,
          options = _this$props.options,
          locale = _this$props.locale;
      return /*#__PURE__*/React__default['default'].createElement("div", {
        id: "search-page",
        className: options.filtersForm ? options.filtersForm.location === 'right' ? 'bu-reverse' : options.filtersForm.location === 'top' ? 'bu-column' : null : null
      }, /*#__PURE__*/React__default['default'].createElement(Filters, {
        PortalSite: this.props.PortalSite,
        filters: filters,
        onFilterChange: this.onFilterChange,
        options: options
      }), /*#__PURE__*/React__default['default'].createElement(Results, {
        PortalSite: this.props.PortalSite,
        filters: filters,
        activePage: activePage,
        locale: locale,
        onPageChange: this.pageChange,
        skip: skip,
        limit: limit
      }));
    }
  }]);

  return SearchPage;
}(React.Component);

SearchPage.propTypes = {
  PortalSite: PropTypes.object.isRequired,
  options: PropTypes.object.isRequired,
  locale: PropTypes.string.isRequired,
  filters: PropTypes.object.isRequired
};

function buildDistanceInWordsLocale$9 () {
  var distanceInWordsLocale = {
    lessThanXSeconds: {
      one: 'minder dan een seconde',
      other: 'minder dan {{count}} seconden'
    },

    xSeconds: {
      one: '1 seconde',
      other: '{{count}} seconden'
    },

    halfAMinute: 'een halve minuut',

    lessThanXMinutes: {
      one: 'minder dan een minuut',
      other: 'minder dan {{count}} minuten'
    },

    xMinutes: {
      one: 'een minuut',
      other: '{{count}} minuten'
    },

    aboutXHours: {
      one: 'ongeveer 1 uur',
      other: 'ongeveer {{count}} uur'
    },

    xHours: {
      one: '1 uur',
      other: '{{count}} uur'
    },

    xDays: {
      one: '1 dag',
      other: '{{count}} dagen'
    },

    aboutXMonths: {
      one: 'ongeveer 1 maand',
      other: 'ongeveer {{count}} maanden'
    },

    xMonths: {
      one: '1 maand',
      other: '{{count}} maanden'
    },

    aboutXYears: {
      one: 'ongeveer 1 jaar',
      other: 'ongeveer {{count}} jaar'
    },

    xYears: {
      one: '1 jaar',
      other: '{{count}} jaar'
    },

    overXYears: {
      one: 'meer dan 1 jaar',
      other: 'meer dan {{count}} jaar'
    },

    almostXYears: {
      one: 'bijna 1 jaar',
      other: 'bijna {{count}} jaar'
    }
  };

  function localize (token, count, options) {
    options = options || {};

    var result;
    if (typeof distanceInWordsLocale[token] === 'string') {
      result = distanceInWordsLocale[token];
    } else if (count === 1) {
      result = distanceInWordsLocale[token].one;
    } else {
      result = distanceInWordsLocale[token].other.replace('{{count}}', count);
    }

    if (options.addSuffix) {
      if (options.comparison > 0) {
        return 'over ' + result
      } else {
        return result + ' geleden'
      }
    }

    return result
  }

  return {
    localize: localize
  }
}

var build_distance_in_words_locale$4 = buildDistanceInWordsLocale$9;

var buildFormattingTokensRegExp$4 = build_formatting_tokens_reg_exp;

function buildFormatLocale$9 () {
  var months3char = ['jan', 'feb', 'mar', 'apr', 'mei', 'jun', 'jul', 'aug', 'sep', 'okt', 'nov', 'dec'];
  var monthsFull = ['januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'oktober', 'november', 'december'];
  var weekdays2char = ['zo', 'ma', 'di', 'wo', 'do', 'vr', 'za'];
  var weekdays3char = ['zon', 'maa', 'din', 'woe', 'don', 'vri', 'zat'];
  var weekdaysFull = ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag'];
  var meridiemUppercase = ['AM', 'PM'];
  var meridiemLowercase = ['am', 'pm'];
  var meridiemFull = ['a.m.', 'p.m.'];

  var formatters = {
    // Month: Jan, Feb, ..., Dec
    'MMM': function (date) {
      return months3char[date.getMonth()]
    },

    // Month: January, February, ..., December
    'MMMM': function (date) {
      return monthsFull[date.getMonth()]
    },

    // Day of week: Su, Mo, ..., Sa
    'dd': function (date) {
      return weekdays2char[date.getDay()]
    },

    // Day of week: Sun, Mon, ..., Sat
    'ddd': function (date) {
      return weekdays3char[date.getDay()]
    },

    // Day of week: Sunday, Monday, ..., Saturday
    'dddd': function (date) {
      return weekdaysFull[date.getDay()]
    },

    // AM, PM
    'A': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]
    },

    // am, pm
    'a': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]
    },

    // a.m., p.m.
    'aa': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]
    }
  };

  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.
  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W'];
  ordinalFormatters.forEach(function (formatterToken) {
    formatters[formatterToken + 'o'] = function (date, formatters) {
      return ordinal$3(formatters[formatterToken](date))
    };
  });

  return {
    formatters: formatters,
    formattingTokensRegExp: buildFormattingTokensRegExp$4(formatters)
  }
}

function ordinal$3 (number) {
  return number + 'e'
}

var build_format_locale$4 = buildFormatLocale$9;

var buildDistanceInWordsLocale$8 = build_distance_in_words_locale$4;
var buildFormatLocale$8 = build_format_locale$4;

/**
 * @category Locales
 * @summary Dutch locale.
 * @author Jorik Tangelder [@jtangelder]{@link https://github.com/jtangelder}
 * @author Ruben Stolk [@rubenstolk]{@link https://github.com/rubenstolk}
 */
var nl$3 = {
  distanceInWords: buildDistanceInWordsLocale$8(),
  format: buildFormatLocale$8()
};

function buildDistanceInWordsLocale$7 () {
  var distanceInWordsLocale = {
    lessThanXSeconds: {
      standalone: {
        one: 'weniger als eine Sekunde',
        other: 'weniger als {{count}} Sekunden'
      },
      withPreposition: {
        one: 'weniger als einer Sekunde',
        other: 'weniger als {{count}} Sekunden'
      }
    },

    xSeconds: {
      standalone: {
        one: 'eine Sekunde',
        other: '{{count}} Sekunden'
      },
      withPreposition: {
        one: 'einer Sekunde',
        other: '{{count}} Sekunden'
      }
    },

    halfAMinute: {
      standalone: 'eine halbe Minute',
      withPreposition: 'einer halben Minute'
    },

    lessThanXMinutes: {
      standalone: {
        one: 'weniger als eine Minute',
        other: 'weniger als {{count}} Minuten'
      },
      withPreposition: {
        one: 'weniger als einer Minute',
        other: 'weniger als {{count}} Minuten'
      }
    },

    xMinutes: {
      standalone: {
        one: 'eine Minute',
        other: '{{count}} Minuten'
      },
      withPreposition: {
        one: 'einer Minute',
        other: '{{count}} Minuten'
      }
    },

    aboutXHours: {
      standalone: {
        one: 'etwa eine Stunde',
        other: 'etwa {{count}} Stunden'
      },
      withPreposition: {
        one: 'etwa einer Stunde',
        other: 'etwa {{count}} Stunden'
      }
    },

    xHours: {
      standalone: {
        one: 'eine Stunde',
        other: '{{count}} Stunden'
      },
      withPreposition: {
        one: 'einer Stunde',
        other: '{{count}} Stunden'
      }
    },

    xDays: {
      standalone: {
        one: 'ein Tag',
        other: '{{count}} Tage'
      },
      withPreposition: {
        one: 'einem Tag',
        other: '{{count}} Tagen'
      }

    },

    aboutXMonths: {
      standalone: {
        one: 'etwa ein Monat',
        other: 'etwa {{count}} Monate'
      },
      withPreposition: {
        one: 'etwa einem Monat',
        other: 'etwa {{count}} Monaten'
      }
    },

    xMonths: {
      standalone: {
        one: 'ein Monat',
        other: '{{count}} Monate'
      },
      withPreposition: {
        one: 'einem Monat',
        other: '{{count}} Monaten'
      }
    },

    aboutXYears: {
      standalone: {
        one: 'etwa ein Jahr',
        other: 'etwa {{count}} Jahre'
      },
      withPreposition: {
        one: 'etwa einem Jahr',
        other: 'etwa {{count}} Jahren'
      }
    },

    xYears: {
      standalone: {
        one: 'ein Jahr',
        other: '{{count}} Jahre'
      },
      withPreposition: {
        one: 'einem Jahr',
        other: '{{count}} Jahren'
      }
    },

    overXYears: {
      standalone: {
        one: 'mehr als ein Jahr',
        other: 'mehr als {{count}} Jahre'
      },
      withPreposition: {
        one: 'mehr als einem Jahr',
        other: 'mehr als {{count}} Jahren'
      }
    },

    almostXYears: {
      standalone: {
        one: 'fast ein Jahr',
        other: 'fast {{count}} Jahre'
      },
      withPreposition: {
        one: 'fast einem Jahr',
        other: 'fast {{count}} Jahren'
      }
    }
  };

  function localize (token, count, options) {
    options = options || {};

    var usageGroup = options.addSuffix
      ? distanceInWordsLocale[token].withPreposition
      : distanceInWordsLocale[token].standalone;

    var result;
    if (typeof usageGroup === 'string') {
      result = usageGroup;
    } else if (count === 1) {
      result = usageGroup.one;
    } else {
      result = usageGroup.other.replace('{{count}}', count);
    }

    if (options.addSuffix) {
      if (options.comparison > 0) {
        return 'in ' + result
      } else {
        return 'vor ' + result
      }
    }

    return result
  }

  return {
    localize: localize
  }
}

var build_distance_in_words_locale$3 = buildDistanceInWordsLocale$7;

var buildFormattingTokensRegExp$3 = build_formatting_tokens_reg_exp;

function buildFormatLocale$7 () {
  // Note: in German, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.
  var months3char = ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'];
  var monthsFull = ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'];
  var weekdays2char = ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'];
  var weekdays3char = ['Son', 'Mon', 'Die', 'Mit', 'Don', 'Fre', 'Sam'];
  var weekdaysFull = ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'];
  var meridiemUppercase = ['AM', 'PM'];
  var meridiemLowercase = ['am', 'pm'];
  var meridiemFull = ['a.m.', 'p.m.'];

  var formatters = {
    // Month: Jan, Feb, ..., Dec
    'MMM': function (date) {
      return months3char[date.getMonth()]
    },

    // Month: January, February, ..., December
    'MMMM': function (date) {
      return monthsFull[date.getMonth()]
    },

    // Day of week: Su, Mo, ..., Sa
    'dd': function (date) {
      return weekdays2char[date.getDay()]
    },

    // Day of week: Sun, Mon, ..., Sat
    'ddd': function (date) {
      return weekdays3char[date.getDay()]
    },

    // Day of week: Sunday, Monday, ..., Saturday
    'dddd': function (date) {
      return weekdaysFull[date.getDay()]
    },

    // AM, PM
    'A': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]
    },

    // am, pm
    'a': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]
    },

    // a.m., p.m.
    'aa': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]
    }
  };

  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.
  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W'];
  ordinalFormatters.forEach(function (formatterToken) {
    formatters[formatterToken + 'o'] = function (date, formatters) {
      return ordinal$2(formatters[formatterToken](date))
    };
  });

  return {
    formatters: formatters,
    formattingTokensRegExp: buildFormattingTokensRegExp$3(formatters)
  }
}

function ordinal$2 (number) {
  return number + '.'
}

var build_format_locale$3 = buildFormatLocale$7;

var buildDistanceInWordsLocale$6 = build_distance_in_words_locale$3;
var buildFormatLocale$6 = build_format_locale$3;

/**
 * @category Locales
 * @summary German locale.
 * @author Thomas Eilmsteiner [@DeMuu]{@link https://github.com/DeMuu}
 * @author Asia [@asia-t]{@link https://github.com/asia-t}
 */
var de$3 = {
  distanceInWords: buildDistanceInWordsLocale$6(),
  format: buildFormatLocale$6()
};

function buildDistanceInWordsLocale$5 () {
  var distanceInWordsLocale = {
    lessThanXSeconds: {
      one: 'moins d’une seconde',
      other: 'moins de {{count}} secondes'
    },

    xSeconds: {
      one: '1 seconde',
      other: '{{count}} secondes'
    },

    halfAMinute: '30 secondes',

    lessThanXMinutes: {
      one: 'moins d’une minute',
      other: 'moins de {{count}} minutes'
    },

    xMinutes: {
      one: '1 minute',
      other: '{{count}} minutes'
    },

    aboutXHours: {
      one: 'environ 1 heure',
      other: 'environ {{count}} heures'
    },

    xHours: {
      one: '1 heure',
      other: '{{count}} heures'
    },

    xDays: {
      one: '1 jour',
      other: '{{count}} jours'
    },

    aboutXMonths: {
      one: 'environ 1 mois',
      other: 'environ {{count}} mois'
    },

    xMonths: {
      one: '1 mois',
      other: '{{count}} mois'
    },

    aboutXYears: {
      one: 'environ 1 an',
      other: 'environ {{count}} ans'
    },

    xYears: {
      one: '1 an',
      other: '{{count}} ans'
    },

    overXYears: {
      one: 'plus d’un an',
      other: 'plus de {{count}} ans'
    },

    almostXYears: {
      one: 'presqu’un an',
      other: 'presque {{count}} ans'
    }
  };

  function localize (token, count, options) {
    options = options || {};

    var result;
    if (typeof distanceInWordsLocale[token] === 'string') {
      result = distanceInWordsLocale[token];
    } else if (count === 1) {
      result = distanceInWordsLocale[token].one;
    } else {
      result = distanceInWordsLocale[token].other.replace('{{count}}', count);
    }

    if (options.addSuffix) {
      if (options.comparison > 0) {
        return 'dans ' + result
      } else {
        return 'il y a ' + result
      }
    }

    return result
  }

  return {
    localize: localize
  }
}

var build_distance_in_words_locale$2 = buildDistanceInWordsLocale$5;

var buildFormattingTokensRegExp$2 = build_formatting_tokens_reg_exp;

function buildFormatLocale$5 () {
  var months3char = ['janv.', 'févr.', 'mars', 'avr.', 'mai', 'juin', 'juill.', 'août', 'sept.', 'oct.', 'nov.', 'déc.'];
  var monthsFull = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre'];
  var weekdays2char = ['di', 'lu', 'ma', 'me', 'je', 've', 'sa'];
  var weekdays3char = ['dim.', 'lun.', 'mar.', 'mer.', 'jeu.', 'ven.', 'sam.'];
  var weekdaysFull = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'];
  var meridiemUppercase = ['AM', 'PM'];
  var meridiemLowercase = ['am', 'pm'];
  var meridiemFull = ['du matin', 'de l’après-midi', 'du soir'];

  var formatters = {
    // Month: Jan, Feb, …, Dec
    'MMM': function (date) {
      return months3char[date.getMonth()]
    },

    // Month: January, February, …, December
    'MMMM': function (date) {
      return monthsFull[date.getMonth()]
    },

    // Day of week: Su, Mo, …, Sa
    'dd': function (date) {
      return weekdays2char[date.getDay()]
    },

    // Day of week: Sun, Mon, …, Sat
    'ddd': function (date) {
      return weekdays3char[date.getDay()]
    },

    // Day of week: Sunday, Monday, …, Saturday
    'dddd': function (date) {
      return weekdaysFull[date.getDay()]
    },

    // AM, PM
    'A': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]
    },

    // am, pm
    'a': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]
    },

    // a.m., p.m.
    'aa': function (date) {
      var hours = date.getHours();

      if (hours <= 12) {
        return meridiemFull[0]
      }

      if (hours <= 16) {
        return meridiemFull[1]
      }

      return meridiemFull[2]
    },

    // ISO week, ordinal version: 1st, 2nd, …, 53rd
    // NOTE: Week has feminine grammatical gender in French: semaine
    'Wo': function (date, formatters) {
      return feminineOrdinal(formatters.W(date))
    }
  };

  // Generate ordinal version of formatters: M → Mo, D → Do, etc.
  // NOTE: For words with masculine grammatical gender in French: mois, jour, trimestre
  var formatterTokens = ['M', 'D', 'DDD', 'd', 'Q'];
  formatterTokens.forEach(function (formatterToken) {
    formatters[formatterToken + 'o'] = function (date, formatters) {
      return masculineOrdinal(formatters[formatterToken](date))
    };
  });

  // Special case for day of month ordinals in long date format context:
  // 1er mars, 2 mars, 3 mars, …
  // See https://github.com/date-fns/date-fns/issues/437
  //
  // NOTE: The below implementation works because parsing of tokens inside a
  // format string is done by a greedy regular expression, i.e. longer tokens
  // have priority. E.g. formatter for "Do MMMM" has priority over individual
  // formatters for "Do" and "MMMM".
  var monthsTokens = ['MMM', 'MMMM'];
  monthsTokens.forEach(function (monthToken) {
    formatters['Do ' + monthToken] = function (date, commonFormatters) {
      var dayOfMonthToken = date.getDate() === 1
        ? 'Do'
        : 'D';
      var dayOfMonthFormatter = formatters[dayOfMonthToken] || commonFormatters[dayOfMonthToken];

      return dayOfMonthFormatter(date, commonFormatters) + ' ' + formatters[monthToken](date)
    };
  });

  return {
    formatters: formatters,
    formattingTokensRegExp: buildFormattingTokensRegExp$2(formatters)
  }
}

function masculineOrdinal (number) {
  if (number === 1) {
    return '1er'
  }

  return number + 'e'
}

function feminineOrdinal (number) {
  if (number === 1) {
    return '1re'
  }

  return number + 'e'
}

var build_format_locale$2 = buildFormatLocale$5;

var buildDistanceInWordsLocale$4 = build_distance_in_words_locale$2;
var buildFormatLocale$4 = build_format_locale$2;

/**
 * @category Locales
 * @summary French locale.
 * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}
 * @author François B [@fbonzon]{@link https://github.com/fbonzon}
 */
var fr$3 = {
  distanceInWords: buildDistanceInWordsLocale$4(),
  format: buildFormatLocale$4()
};

function buildDistanceInWordsLocale$3 () {
  var distanceInWordsLocale = {
    lessThanXSeconds: {
      one: 'meno di un secondo',
      other: 'meno di {{count}} secondi'
    },

    xSeconds: {
      one: 'un secondo',
      other: '{{count}} secondi'
    },

    halfAMinute: 'alcuni secondi',

    lessThanXMinutes: {
      one: 'meno di un minuto',
      other: 'meno di {{count}} minuti'
    },

    xMinutes: {
      one: 'un minuto',
      other: '{{count}} minuti'
    },

    aboutXHours: {
      one: 'circa un\'ora',
      other: 'circa {{count}} ore'
    },

    xHours: {
      one: 'un\'ora',
      other: '{{count}} ore'
    },

    xDays: {
      one: 'un giorno',
      other: '{{count}} giorni'
    },

    aboutXMonths: {
      one: 'circa un mese',
      other: 'circa {{count}} mesi'
    },

    xMonths: {
      one: 'un mese',
      other: '{{count}} mesi'
    },

    aboutXYears: {
      one: 'circa un anno',
      other: 'circa {{count}} anni'
    },

    xYears: {
      one: 'un anno',
      other: '{{count}} anni'
    },

    overXYears: {
      one: 'più di un anno',
      other: 'più di {{count}} anni'
    },

    almostXYears: {
      one: 'quasi un anno',
      other: 'quasi {{count}} anni'
    }
  };

  function localize (token, count, options) {
    options = options || {};

    var result;
    if (typeof distanceInWordsLocale[token] === 'string') {
      result = distanceInWordsLocale[token];
    } else if (count === 1) {
      result = distanceInWordsLocale[token].one;
    } else {
      result = distanceInWordsLocale[token].other.replace('{{count}}', count);
    }

    if (options.addSuffix) {
      if (options.comparison > 0) {
        return 'tra ' + result
      } else {
        return result + ' fa'
      }
    }

    return result
  }

  return {
    localize: localize
  }
}

var build_distance_in_words_locale$1 = buildDistanceInWordsLocale$3;

var buildFormattingTokensRegExp$1 = build_formatting_tokens_reg_exp;

function buildFormatLocale$3 () {
  var months3char = ['gen', 'feb', 'mar', 'apr', 'mag', 'giu', 'lug', 'ago', 'set', 'ott', 'nov', 'dic'];
  var monthsFull = ['gennaio', 'febbraio', 'marzo', 'aprile', 'maggio', 'giugno', 'luglio', 'agosto', 'settembre', 'ottobre', 'novembre', 'dicembre'];
  var weekdays2char = ['do', 'lu', 'ma', 'me', 'gi', 've', 'sa'];
  var weekdays3char = ['dom', 'lun', 'mar', 'mer', 'gio', 'ven', 'sab'];
  var weekdaysFull = ['domenica', 'lunedì', 'martedì', 'mercoledì', 'giovedì', 'venerdì', 'sabato'];
  var meridiemUppercase = ['AM', 'PM'];
  var meridiemLowercase = ['am', 'pm'];
  var meridiemFull = ['a.m.', 'p.m.'];

  var formatters = {
    // Month: Jan, Feb, ..., Dec
    'MMM': function (date) {
      return months3char[date.getMonth()]
    },

    // Month: January, February, ..., December
    'MMMM': function (date) {
      return monthsFull[date.getMonth()]
    },

    // Day of week: Su, Mo, ..., Sa
    'dd': function (date) {
      return weekdays2char[date.getDay()]
    },

    // Day of week: Sun, Mon, ..., Sat
    'ddd': function (date) {
      return weekdays3char[date.getDay()]
    },

    // Day of week: Sunday, Monday, ..., Saturday
    'dddd': function (date) {
      return weekdaysFull[date.getDay()]
    },

    // AM, PM
    'A': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]
    },

    // am, pm
    'a': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]
    },

    // a.m., p.m.
    'aa': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]
    }
  };

  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.
  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W'];
  ordinalFormatters.forEach(function (formatterToken) {
    formatters[formatterToken + 'o'] = function (date, formatters) {
      return ordinal$1(formatters[formatterToken](date))
    };
  });

  return {
    formatters: formatters,
    formattingTokensRegExp: buildFormattingTokensRegExp$1(formatters)
  }
}

function ordinal$1 (number) {
  return number + 'º'
}

var build_format_locale$1 = buildFormatLocale$3;

var buildDistanceInWordsLocale$2 = build_distance_in_words_locale$1;
var buildFormatLocale$2 = build_format_locale$1;

/**
 * @category Locales
 * @summary Italian locale.
 * @author Alberto Restifo [@albertorestifo]{@link https://github.com/albertorestifo}
 */
var it$3 = {
  distanceInWords: buildDistanceInWordsLocale$2(),
  format: buildFormatLocale$2()
};

function buildDistanceInWordsLocale$1 () {
  var distanceInWordsLocale = {
    lessThanXSeconds: {
      one: 'menos de un segundo',
      other: 'menos de {{count}} segundos'
    },

    xSeconds: {
      one: '1 segundo',
      other: '{{count}} segundos'
    },

    halfAMinute: 'medio minuto',

    lessThanXMinutes: {
      one: 'menos de un minuto',
      other: 'menos de {{count}} minutos'
    },

    xMinutes: {
      one: '1 minuto',
      other: '{{count}} minutos'
    },

    aboutXHours: {
      one: 'alrededor de 1 hora',
      other: 'alrededor de {{count}} horas'
    },

    xHours: {
      one: '1 hora',
      other: '{{count}} horas'
    },

    xDays: {
      one: '1 día',
      other: '{{count}} días'
    },

    aboutXMonths: {
      one: 'alrededor de 1 mes',
      other: 'alrededor de {{count}} meses'
    },

    xMonths: {
      one: '1 mes',
      other: '{{count}} meses'
    },

    aboutXYears: {
      one: 'alrededor de 1 año',
      other: 'alrededor de {{count}} años'
    },

    xYears: {
      one: '1 año',
      other: '{{count}} años'
    },

    overXYears: {
      one: 'más de 1 año',
      other: 'más de {{count}} años'
    },

    almostXYears: {
      one: 'casi 1 año',
      other: 'casi {{count}} años'
    }
  };

  function localize (token, count, options) {
    options = options || {};

    var result;
    if (typeof distanceInWordsLocale[token] === 'string') {
      result = distanceInWordsLocale[token];
    } else if (count === 1) {
      result = distanceInWordsLocale[token].one;
    } else {
      result = distanceInWordsLocale[token].other.replace('{{count}}', count);
    }

    if (options.addSuffix) {
      if (options.comparison > 0) {
        return 'en ' + result
      } else {
        return 'hace ' + result
      }
    }

    return result
  }

  return {
    localize: localize
  }
}

var build_distance_in_words_locale = buildDistanceInWordsLocale$1;

var buildFormattingTokensRegExp = build_formatting_tokens_reg_exp;

function buildFormatLocale$1 () {
  var months3char = ['ene', 'feb', 'mar', 'abr', 'may', 'jun', 'jul', 'ago', 'sep', 'oct', 'nov', 'dic'];
  var monthsFull = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'];
  var weekdays2char = ['do', 'lu', 'ma', 'mi', 'ju', 'vi', 'sa'];
  var weekdays3char = ['dom', 'lun', 'mar', 'mié', 'jue', 'vie', 'sáb'];
  var weekdaysFull = ['domingo', 'lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado'];
  var meridiemUppercase = ['AM', 'PM'];
  var meridiemLowercase = ['am', 'pm'];
  var meridiemFull = ['a.m.', 'p.m.'];

  var formatters = {
    // Month: Jan, Feb, ..., Dec
    'MMM': function (date) {
      return months3char[date.getMonth()]
    },

    // Month: January, February, ..., December
    'MMMM': function (date) {
      return monthsFull[date.getMonth()]
    },

    // Day of week: Su, Mo, ..., Sa
    'dd': function (date) {
      return weekdays2char[date.getDay()]
    },

    // Day of week: Sun, Mon, ..., Sat
    'ddd': function (date) {
      return weekdays3char[date.getDay()]
    },

    // Day of week: Sunday, Monday, ..., Saturday
    'dddd': function (date) {
      return weekdaysFull[date.getDay()]
    },

    // AM, PM
    'A': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]
    },

    // am, pm
    'a': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]
    },

    // a.m., p.m.
    'aa': function (date) {
      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]
    }
  };

  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.
  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W'];
  ordinalFormatters.forEach(function (formatterToken) {
    formatters[formatterToken + 'o'] = function (date, formatters) {
      return ordinal(formatters[formatterToken](date))
    };
  });

  return {
    formatters: formatters,
    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)
  }
}

function ordinal (number) {
  return number + 'º'
}

var build_format_locale = buildFormatLocale$1;

var buildDistanceInWordsLocale = build_distance_in_words_locale;
var buildFormatLocale = build_format_locale;

/**
 * @category Locales
 * @summary Spanish locale.
 * @author Juan Angosto [@juanangosto]{@link https://github.com/juanangosto}
 * @author Guillermo Grau [@guigrpa]{@link https://github.com/guigrpa}
 * @author Fernando Agüero [@fjaguero]{@link https://github.com/fjaguero}
 */
var es$3 = {
  distanceInWords: buildDistanceInWordsLocale(),
  format: buildFormatLocale()
};

var format = format_1$1;

var locales = {
  en: en$5,
  nl: nl$3,
  de: de$3,
  fr: fr$3,
  it: it$3,
  es: es$3
};

var format_1 = function (date, formatStr) {
  return format(date, formatStr, {
    locale: locales[window.__localeId__] // or global.__localeId__

  });
};

var ArrowRight = function ArrowRight() {
  return /*#__PURE__*/React__default['default'].createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    version: "1.1",
    x: "0px",
    y: "0px",
    viewBox: "0 0 100 125",
    style: {
      enableBackground: 'new 0 0 100 100'
    },
    xmlSpace: "preserve"
  }, /*#__PURE__*/React__default['default'].createElement("path", {
    d: "M2.4,44.1l32.9-32.9c3.1-3.1,8.2-3.1,11.4,0c1.6,1.6,2.4,3.6,2.4,5.7c0,2.1-0.8,4.1-2.4,5.7L27.2,42h64.7  c2.2,0,4.2,0.9,5.7,2.4c1.5,1.5,2.4,3.5,2.4,5.7c0,4.4-3.6,8.1-8.1,8.1H27.4l19.3,19.3c1.6,1.6,2.4,3.6,2.4,5.7s-0.8,4.1-2.4,5.7  c-3.1,3.1-8.3,3.1-11.4,0L2.4,55.9C0.8,54.3,0,52.3,0,50.2c0-0.1,0-0.1,0-0.2c0-0.1,0-0.1,0-0.2C0,47.7,0.8,45.7,2.4,44.1z"
  }));
};

function CalendarHeader(_ref) {
  var onGoPrev = _ref.onGoPrev,
      onReset = _ref.onReset,
      onGoNext = _ref.onGoNext;
  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: "calendars-header"
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: "col bu-prev",
    style: {
      textAlign: 'center'
    },
    onClick: onGoPrev,
    onKeyPress: onGoPrev,
    tabIndex: 0,
    role: "button"
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: "icon"
  }, ' ', /*#__PURE__*/React__default['default'].createElement(ArrowRight, null))), /*#__PURE__*/React__default['default'].createElement("div", {
    className: "col bu-reset",
    onClick: onReset,
    onKeyPress: onReset,
    style: {
      textAlign: 'center'
    },
    tabIndex: 0,
    role: "button"
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: "icon"
  }, /*#__PURE__*/React__default['default'].createElement(Reload, null))), /*#__PURE__*/React__default['default'].createElement("div", {
    className: "col bu-next",
    onClick: onGoNext,
    onKeyPress: onGoNext,
    style: {
      textAlign: 'center'
    },
    tabIndex: 0,
    role: "button"
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: "icon"
  }, /*#__PURE__*/React__default['default'].createElement(ArrowRight$1, null))));
}

CalendarHeader.propTypes = {
  onGoNext: PropTypes.func.isRequired,
  onGoPrev: PropTypes.func.isRequired,
  onReset: PropTypes.func.isRequired
};

function createPeronsArray(persons) {
  return Array.apply(null, {
    length: persons + 1
  }).map(Number.call, Number);
}
function initializeBookingFields(bookingFields) {
  var obj = {};
  bookingFields.map(function (field) {
    obj[field.id] = '';
  });
  return obj;
}
function byString(o, s) {
  s = s.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties

  s = s.replace(/^\./, ''); // strip a leading dot

  var a = s.split('.');

  for (var i = 0, n = a.length; i < n; ++i) {
    var k = a[i];

    if (k in o) {
      o = o[k];
    } else {
      return;
    }
  }

  return o;
}
function translatedOption(id, value) {
  return /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: id
  }, function (formattedMessage) {
    return /*#__PURE__*/React__default['default'].createElement("option", {
      value: value
    }, formattedMessage);
  });
}
function validateAge(string) {
  var dob = new Date(string);
  var minAge = dateFns.subYears(new Date(), 18);

  if (dateFns.isAfter(dob, minAge)) {
    return true;
  } else return false;
}

var _templateObject$3;
var dateFormat$1 = 'dddd DD MMMM YYYY';
var CALENDAR_QUERY = gql(_templateObject$3 || (_templateObject$3 = _taggedTemplateLiteral(["\n  query BookingPriceQuery(\n    $id: ID!\n    $house_id: String!\n    $starts_at: Date!\n    $ends_at: Date!\n    $persons: Int\n  ) {\n    PortalSite(id: $id) {\n      houses(house_code: $house_id) {\n        id\n        name\n        booking_price(\n          starts_at: $starts_at\n          ends_at: $ends_at\n          persons: $persons\n        )\n      }\n    }\n  }\n"])));

var PriceField = /*#__PURE__*/function (_Component) {
  _inherits$4(PriceField, _Component);

  var _super = _createSuper$4(PriceField);

  function PriceField() {
    var _this;

    _classCallCheck$4(this, PriceField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty$e(_assertThisInitialized$4(_this), "state", {
      persons: 2
    });

    return _this;
  }

  _createClass$7(PriceField, [{
    key: "setPersons",
    value: function setPersons(persons) {
      this.setState({
        persons: persons
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          portalCode = _this$props.portalCode,
          objectCode = _this$props.objectCode,
          startsAt = _this$props.startsAt,
          endsAt = _this$props.endsAt,
          locale = _this$props.locale,
          house = _this$props.house,
          disabled = _this$props.disabled,
          onStartBooking = _this$props.onStartBooking,
          minNights = _this$props.minNights;
      var persons = this.state.persons;
      var adults = createPeronsArray(house.persons);
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "calendar--picker"
      }, /*#__PURE__*/React__default['default'].createElement("div", {
        className: "calendar--picker--date"
      }, /*#__PURE__*/React__default['default'].createElement("span", {
        className: "name"
      }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
        id: "".concat(house.house_type, ".arrival")
      })), /*#__PURE__*/React__default['default'].createElement("span", {
        className: "detail"
      }, startsAt ? /*#__PURE__*/React__default['default'].createElement("span", null, format_1(startsAt, dateFormat$1)) : /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
        id: "".concat(house.house_type, ".pick_your_arrivaldate_in_the_calendar")
      }))), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "calendar--picker--date"
      }, /*#__PURE__*/React__default['default'].createElement("span", {
        className: "name"
      }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
        id: "".concat(house.house_type, ".departure")
      })), /*#__PURE__*/React__default['default'].createElement("span", {
        className: "detail"
      }, endsAt ? /*#__PURE__*/React__default['default'].createElement("span", null, format_1(endsAt, dateFormat$1)) : /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
        id: "".concat(house.house_type, ".pick_your_departure_in_the_calendar")
      })), minNights && /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
        id: "minimum_nights",
        defaultMessage: "Minimum {minimum} nights",
        values: {
          minimum: minNights
        }
      })))), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "calendar--picker--date"
      }, /*#__PURE__*/React__default['default'].createElement("span", {
        className: "detail"
      }, /*#__PURE__*/React__default['default'].createElement("select", {
        className: "calendar--picker--persons",
        value: persons,
        onChange: function onChange(e) {
          _this2.setPersons(e.target.value);
        }
      }, adults.map(function (person) {
        return /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
          id: "persons",
          key: person,
          children: function children(text) {
            return /*#__PURE__*/React__default['default'].createElement("option", {
              value: person,
              key: person
            }, person, " ", text);
          }
        });
      })))), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "calendar--picker--date"
      }, startsAt && endsAt && /*#__PURE__*/React__default['default'].createElement(Query, {
        query: CALENDAR_QUERY,
        variables: {
          id: portalCode,
          house_id: objectCode,
          starts_at: startsAt,
          ends_at: endsAt,
          persons: parseInt(persons),
          locale: locale
        }
      }, function (_ref) {
        var loading = _ref.loading,
            data = _ref.data,
            error = _ref.error;
        if (loading) return /*#__PURE__*/React__default['default'].createElement("div", {
          className: "price-overview--build"
        }, /*#__PURE__*/React__default['default'].createElement(Loading, null));

        if (error) {
          return /*#__PURE__*/React__default['default'].createElement("div", {
            className: "price-overview--build"
          }, /*#__PURE__*/React__default['default'].createElement(ApiError, {
            errors: error
          }));
        }

        var result = data.PortalSite.houses[0].booking_price;
        return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement("div", {
          className: "price-overview--book"
        }, /*#__PURE__*/React__default['default'].createElement("div", {
          className: "price"
        }, "\u20AC", ' ', /*#__PURE__*/React__default['default'].createElement(FormattedNumber, {
          value: Math.round(result.total_price),
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        })), /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("i", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
          id: "based_on_one_person",
          values: {
            persons: persons
          }
        })))));
      })), /*#__PURE__*/React__default['default'].createElement("button", {
        className: "button",
        disabled: !disabled,
        onClick: function onClick() {
          if (startsAt && endsAt) {
            onStartBooking('false', persons);
          }
        }
      }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
        id: "calculate"
      })));
    }
  }]);

  return PriceField;
}(React.Component);

PriceField.propTypes = {
  portalCode: PropTypes.string.isRequired,
  objectCode: PropTypes.string.isRequired,
  startsAt: PropTypes.string,
  endsAt: PropTypes.string,
  onStartBooking: PropTypes.func.isRequired,
  locale: PropTypes.string.isRequired,
  minNights: PropTypes.number
};

var dateFormat = "dddd DD MMMM YYYY";

var AssistanceMessage = function AssistanceMessage(_ref) {
  var arrivalDate = _ref.arrivalDate,
      departureDate = _ref.departureDate,
      house = _ref.house,
      minNights = _ref.minNights;

  if (departureDate.date) {
    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: "assistance"
    }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "".concat(house.house_type, ".you_picked_arrival_date")
    }), ":", " ", format_1(arrivalDate.date, dateFormat), /*#__PURE__*/React__default['default'].createElement("br", null), /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "".concat(house.house_type, ".you_picked_departure_date")
    }), ": ", format_1(departureDate.date, dateFormat));
  }

  if (arrivalDate.date) {
    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: "assistance"
    }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "".concat(house.house_type, ".you_picked_arrival_date")
    }), ":", " ", format_1(arrivalDate.date, dateFormat), /*#__PURE__*/React__default['default'].createElement("br", null), /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "".concat(house.house_type, ".pick_your_departure_in_the_calendar")
    }), /*#__PURE__*/React__default['default'].createElement("br", null), /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "minimum_nights",
      values: {
        minimum: minNights
      },
      defaultMessage: "Minimum {minimum} nights"
    }));
  }

  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: "assistance"
  }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "".concat(house.house_type, ".pick_your_arrivaldate_in_the_calendar")
  }));
};

var Calendar = /*#__PURE__*/function (_React$Component) {
  _inherits$4(Calendar, _React$Component);

  var _super = _createSuper$4(Calendar);

  function Calendar(props) {
    var _this;

    _classCallCheck$4(this, Calendar);

    _this = _super.call(this, props);

    _defineProperty$e(_assertThisInitialized$4(_this), "state", {
      currentMonth: new Date(),
      selectedDate: "",
      numberOfMonths: _this.props.numberOfMonths,
      numberOfMonthsInARow: _this.props.numberOfMonthsInARow,
      house: _this.props.house,
      arrivalDate: "",
      departureDate: "",
      minNights: null,
      startBooking: false
    });

    _defineProperty$e(_assertThisInitialized$4(_this), "onDateClick", function (day) {
      var _this$state = _this.state,
          arrivalDate = _this$state.arrivalDate,
          selectedDate = _this$state.selectedDate,
          house = _this$state.house;

      if (day.departure && is_after(day.date, selectedDate) && difference_in_calendar_days(day.date, selectedDate) <= house.max_nights && difference_in_calendar_days(day.date, selectedDate) >= arrivalDate.min_nights && difference_in_calendar_days(day.date, selectedDate) <= arrivalDate.max_nights) {
        _this.setState({
          departureDate: day,
          startBooking: true
        });
      } else if (day.arrival) {
        _this.setState({
          startBooking: false,
          selectedDate: dateFns.parse(day.date),
          arrivalDate: day,
          minNights: day.min_nights,
          departureDate: ""
        });
      }
    });

    _defineProperty$e(_assertThisInitialized$4(_this), "nextMonth", function () {
      var _this$state2 = _this.state,
          numberOfMonths = _this$state2.numberOfMonths,
          currentMonth = _this$state2.currentMonth;

      _this.setState({
        currentMonth: dateFns.addMonths(currentMonth, numberOfMonths)
      });
    });

    _defineProperty$e(_assertThisInitialized$4(_this), "prevMonth", function () {
      var _this$state3 = _this.state,
          numberOfMonths = _this$state3.numberOfMonths,
          currentMonth = _this$state3.currentMonth;

      _this.setState({
        currentMonth: dateFns.subMonths(currentMonth, numberOfMonths)
      });
    });

    _defineProperty$e(_assertThisInitialized$4(_this), "reset", function () {
      _this.setState({
        selectedDate: "",
        arrivalDate: "",
        departureDate: "",
        startBooking: false
      });
    });

    _this.bookingStart = _this.bookingStart.bind(_assertThisInitialized$4(_this));
    return _this;
  }

  _createClass$7(Calendar, [{
    key: "renderHeader",
    value: function renderHeader(month) {
      var dateFormat = "MMMM YYYY";
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "header row flex-middle"
      }, /*#__PURE__*/React__default['default'].createElement("div", {
        className: "col col-center",
        style: {
          textAlign: "center"
        }
      }, /*#__PURE__*/React__default['default'].createElement("span", null, format_1(month, dateFormat))));
    }
  }, {
    key: "renderDays",
    value: function renderDays() {
      var dateFormat = "dd";
      var days = [];
      var startDate = dateFns.startOfWeek(this.state.currentMonth);

      for (var i = 0; i < 7; i++) {
        days.push( /*#__PURE__*/React__default['default'].createElement("div", {
          className: "col col-center",
          key: i
        }, format_1(dateFns.addDays(startDate, i), dateFormat)));
      }

      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "days row"
      }, days);
    }
  }, {
    key: "renderCells",
    value: function renderCells(availabilities, month, discounts) {
      var _this2 = this;

      var _this$state4 = this.state,
          selectedDate = _this$state4.selectedDate,
          departureDate = _this$state4.departureDate,
          house = _this$state4.house,
          arrivalDate = _this$state4.arrivalDate;
      var monthStart = dateFns.startOfMonth(month);
      var monthEnd = dateFns.endOfMonth(monthStart);
      var startDate = dateFns.startOfWeek(monthStart);
      var endDate = dateFns.endOfWeek(monthEnd);
      var today = new Date();
      var dateFormat = "D";
      var rows = [];
      var days = [];
      var day = startDate;
      var formattedDate = "";
      var dayz = availabilities;

      while (day <= endDate) {
        var _loop = function _loop(i) {
          formattedDate = dateFns.format(day, dateFormat);
          var date = dateFns.format(day, "YYYY-MM-DD");
          var yesterday = dateFns.format(dateFns.subDays(date, 1), "YYYY-MM-DD");
          var daz = dayz.find(function (x) {
            return x.date === date;
          });
          var prevBooked = dayz.find(function (x) {
            return x.date === yesterday;
          });
          var cloneDay = daz;
          var discount = discounts.find(function (x) {
            return dateFns.isBefore(dateFns.subDays(x.discount_starts_at, 1), date) && is_after(dateFns.addDays(x.discount_ends_at, 1), date);
          });
          var minimum = difference_in_calendar_days(daz.date, selectedDate) >= arrivalDate.min_nights;
          var maximum = difference_in_calendar_days(daz.date, selectedDate) <= house.max_nights && difference_in_calendar_days(daz.date, selectedDate) <= arrivalDate.max_nights;
          var daysFromToday = difference_in_calendar_days(daz.date, today);
          var last_minute = daysFromToday <= house.last_minute_days && daysFromToday > 0;
          var highlight = daz.departure && is_after(daz.date, selectedDate) ? minimum ? maximum ? prevBooked.max_nights !== 0 ? "departure" : null : "" : "" : "";
          days.push( /*#__PURE__*/React__default['default'].createElement("div", {
            className: "col cell\n        ".concat(!dateFns.isSameMonth(day, monthStart) ? "disabled" : dateFns.isSameDay(day, selectedDate) || dateFns.isSameDay(day, departureDate.date) ? "selected" : "", "\n              ").concat(dateFns.isAfter(day, selectedDate) && dateFns.isBefore(day, departureDate.date) ? "selected" : "", "\n              ").concat(last_minute || daz.special_offer > 0 ? "discount" : "", "\n              ").concat(discount ? "discount" : "", "\n              ").concat(daz.arrival ? dateFns.isAfter(daz.date, new Date()) ? daz.max_nights !== 0 ? prevBooked.max_nights === 0 ? "departure-arrival" : "arrival" : "" : "" : "", "\n              ").concat(highlight, "\n              ").concat(daz.max_nights === 0 ? prevBooked.max_nights !== 0 ? "booked-departure" : "booked" : prevBooked.max_nights === 0 ? "booked" : ""),
            key: day,
            date: daz.date,
            role: "button",
            tabIndex: 0,
            onClick: function onClick() {
              return _this2.onDateClick(cloneDay);
            },
            onKeyPress: function onKeyPress() {
              return _this2.onDateClick(cloneDay);
            }
          }, /*#__PURE__*/React__default['default'].createElement("span", null, !dateFns.isSameMonth(day, monthStart) ? "" : formattedDate)));
          day = dateFns.addDays(day, 1);
        };

        // for (let daz of dayz) {
        for (var i = 0; i < 7; i++) {
          _loop(i);
        }

        rows.push( /*#__PURE__*/React__default['default'].createElement("div", {
          className: "row",
          key: day
        }, days));
        days = [];
      }

      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "body"
      }, rows);
    }
  }, {
    key: "renderMonths",
    value: function renderMonths() {
      var template = [];

      for (var i = 0; i < this.state.numberOfMonths; i++) {
        template.push(this.renderSingleMonth(i));
      }

      return template;
    }
  }, {
    key: "renderSingleMonth",
    value: function renderSingleMonth(count) {
      var _this3 = this;

      var numberOfMonthsInARow = this.state.numberOfMonthsInARow;
      var month = dateFns.addMonths(this.state.currentMonth, count);
      var monthStart = dateFns.startOfMonth(month);
      var monthEnd = dateFns.endOfMonth(month);
      var variables = {
        id: this.props.portalCode,
        house_id: this.props.objectCode,
        starts_at: dateFns.startOfWeek(monthStart),
        ends_at: dateFns.endOfWeek(monthEnd),
        locale: this.props.locale
      };
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "calendar calendar-".concat(numberOfMonthsInARow),
        key: month
      }, this.renderHeader(month), this.renderDays(), /*#__PURE__*/React__default['default'].createElement(Query, {
        query: CALENDAR_QUERY$1,
        variables: variables
      }, function (_ref) {
        var loading = _ref.loading,
            error = _ref.error,
            data = _ref.data;
        if (loading) return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(Loading, null));

        if (error) {
          return /*#__PURE__*/React__default['default'].createElement("div", null, "Error");
        }

        var results = data.PortalSite.houses[0].availabilities;
        var discounts = data.Discounts;
        return _this3.renderCells(results, month, discounts);
      }));
    }
  }, {
    key: "showBooking",
    value: function showBooking() {
      var _this$state5 = this.state,
          startBooking = _this$state5.startBooking,
          arrivalDate = _this$state5.arrivalDate,
          departureDate = _this$state5.departureDate,
          house = _this$state5.house,
          minNights = _this$state5.minNights;
      var _this$props = this.props,
          portalCode = _this$props.portalCode,
          objectCode = _this$props.objectCode,
          locale = _this$props.locale;
      return /*#__PURE__*/React__default['default'].createElement(PriceField, {
        portalCode: portalCode,
        objectCode: objectCode,
        locale: locale,
        startsAt: arrivalDate.date || null,
        endsAt: departureDate.date || null,
        minNights: minNights,
        disabled: startBooking,
        onStartBooking: this.bookingStart,
        house: house
      });
    }
  }, {
    key: "bookingStart",
    value: function bookingStart(status, persons) {
      var _this$state6 = this.state,
          arrivalDate = _this$state6.arrivalDate,
          departureDate = _this$state6.departureDate;
      var _this$props2 = this.props,
          portalCode = _this$props2.portalCode,
          objectCode = _this$props2.objectCode,
          locale = _this$props2.locale;
      var booking = {
        portalCode: portalCode,
        objectCode: objectCode,
        arrivalDate: arrivalDate,
        departureDate: departureDate,
        is_option: status,
        locale: locale,
        persons: persons
      };
      this.props.onBooking(booking);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state7 = this.state,
          house = _this$state7.house,
          arrivalDate = _this$state7.arrivalDate,
          departureDate = _this$state7.departureDate,
          minNights = _this$state7.minNights;
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "calendar-container "
      }, /*#__PURE__*/React__default['default'].createElement("div", {
        className: "price-overview"
      }, this.showBooking()), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "calendar-section"
      }, /*#__PURE__*/React__default['default'].createElement(CalendarHeader, {
        onGoNext: this.nextMonth,
        onGoPrev: this.prevMonth,
        onReset: this.reset
      }), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "calendars-row"
      }, this.renderMonths()), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "legend"
      }, /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("span", {
        className: "legend-field arrival"
      }), /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
        id: "".concat(house.house_type, ".arrival_date")
      })), /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("span", {
        className: "legend-field booked"
      }), /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
        id: "booked"
      })), /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("span", {
        className: "legend-field departure"
      }), /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
        id: "".concat(house.house_type, ".departure_date")
      })), /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("span", {
        className: "legend-field last_minute_discount"
      }), /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
        id: "discount"
      }))), /*#__PURE__*/React__default['default'].createElement(AssistanceMessage, {
        house: house,
        arrivalDate: arrivalDate,
        departureDate: departureDate,
        minNights: minNights
      })));
    }
  }]);

  return Calendar;
}(React__default['default'].Component);

Calendar.defaultProps = {
  numberOfMonths: 4,
  numberOfMonthsInARow: 2
};
Calendar.propTypes = {
  numberOfMonths: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  house: PropTypes.object.isRequired,
  onBooking: PropTypes.func.isRequired,
  objectCode: PropTypes.string.isRequired,
  portalCode: PropTypes.string.isRequired,
  locale: PropTypes.string.isRequired
};

var isArray$2 = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;
var hasElementType = typeof Element !== 'undefined';

function equal(a, b) {
  // fast-deep-equal index.js 2.0.1
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    var arrA = isArray$2(a)
      , arrB = isArray$2(b)
      , i
      , length
      , key;

    if (arrA && arrB) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (!equal(a[i], b[i])) return false;
      return true;
    }

    if (arrA != arrB) return false;

    var dateA = a instanceof Date
      , dateB = b instanceof Date;
    if (dateA != dateB) return false;
    if (dateA && dateB) return a.getTime() == b.getTime();

    var regexpA = a instanceof RegExp
      , regexpB = b instanceof RegExp;
    if (regexpA != regexpB) return false;
    if (regexpA && regexpB) return a.toString() == b.toString();

    var keys = keyList(a);
    length = keys.length;

    if (length !== keyList(b).length)
      return false;

    for (i = length; i-- !== 0;)
      if (!hasProp.call(b, keys[i])) return false;
    // end fast-deep-equal

    // start react-fast-compare
    // custom handling for DOM elements
    if (hasElementType && a instanceof Element && b instanceof Element)
      return a === b;

    // custom handling for React
    for (i = length; i-- !== 0;) {
      key = keys[i];
      if (key === '_owner' && a.$$typeof) {
        // React-specific: avoid traversing React elements' _owner.
        //  _owner contains circular references
        // and is not needed when comparing the actual elements (and not their owners)
        // .$$typeof and ._store on just reasonable markers of a react element
        continue;
      } else {
        // all other properties should be traversed as usual
        if (!equal(a[key], b[key])) return false;
      }
    }
    // end react-fast-compare

    // fast-deep-equal index.js 2.0.1
    return true;
  }

  return a !== a && b !== b;
}
// end fast-deep-equal

var reactFastCompare = function exportedEqual(a, b) {
  try {
    return equal(a, b);
  } catch (error) {
    if ((error.message && error.message.match(/stack|recursion/i)) || (error.number === -2146828260)) {
      // warn on circular references, don't crash
      // browsers give this different errors name and messages:
      // chrome/safari: "RangeError", "Maximum call stack size exceeded"
      // firefox: "InternalError", too much recursion"
      // edge: "Error", "Out of stack space"
      console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);
      return false;
    }
    // some other error. we should definitely know about these
    throw error;
  }
};

var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function mergeObject(target, source, options) {
	var destination = {};
	if (options.isMergeableObject(target)) {
		Object.keys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
	}
	Object.keys(source).forEach(function(key) {
		if (!options.isMergeableObject(source[key]) || !target[key]) {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		} else {
			destination[key] = deepmerge(target[key], source[key], options);
		}
	});
	return destination
}

function deepmerge(target, source, options) {
	options = options || {};
	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
	options.isMergeableObject = options.isMergeableObject || isMergeableObject;

	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
};

var deepmerge_1 = deepmerge;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

var freeGlobal$1 = freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal$1 || freeSelf || Function('return this')();

var root$1 = root;

/** Built-in value references. */
var Symbol$1 = root$1.Symbol;

var Symbol$2 = Symbol$1;

/** Used for built-in method references. */
var objectProto$d = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$a = objectProto$d.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$d.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$a.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$c = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$c.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

var getPrototype$1 = getPrototype;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/** `Object#toString` result references. */
var objectTag$3 = '[object Object]';

/** Used for built-in method references. */
var funcProto$2 = Function.prototype,
    objectProto$b = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$2 = funcProto$2.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$9 = objectProto$b.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString$2.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag$3) {
    return false;
  }
  var proto = getPrototype$1(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$9.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString$2.call(Ctor) == objectCtorString;
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$1(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag$2 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$1(value) {
  if (!isObject$1(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}

/** Used to detect overreaching core-js shims. */
var coreJsData = root$1['__core-js_shared__'];

var coreJsData$1 = coreJsData;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/** Used for built-in method references. */
var funcProto$1 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$a = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty$8).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject$1(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction$1(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/* Built-in method references that are verified to be native. */
var Map$1 = getNative(root$1, 'Map');

var Map$2 = Map$1;

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

var nativeCreate$1 = nativeCreate;

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$9 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate$1) {
    var result = data[key];
    return result === HASH_UNDEFINED$1 ? undefined : result;
  }
  return hasOwnProperty$7.call(data, key) ? data[key] : undefined;
}

/** Used for built-in method references. */
var objectProto$8 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$8.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$6.call(data, key);
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate$1 && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map$2 || ListCache),
    'string': new Hash
  };
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

var defineProperty$1 = defineProperty;

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty$1) {
    defineProperty$1(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

/** Used for built-in method references. */
var objectProto$7 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$7.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$5.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/** `Object#toString` result references. */
var argsTag$2 = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag$2;
}

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$6.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty$4.call(value, 'callee') &&
    !propertyIsEnumerable$1.call(value, 'callee');
};

var isArguments$1 = isArguments;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

var isArray$1 = isArray;

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/** Detect free variable `exports`. */
var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

/** Built-in value references. */
var Buffer$1 = moduleExports$2 ? root$1.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

var isBuffer$1 = isBuffer;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    boolTag$2 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    errorTag$1 = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag$4 = '[object Map]',
    numberTag$2 = '[object Number]',
    objectTag$2 = '[object Object]',
    regexpTag$2 = '[object RegExp]',
    setTag$4 = '[object Set]',
    stringTag$2 = '[object String]',
    weakMapTag$2 = '[object WeakMap]';

var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$3 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] =
typedArrayTags[arrayBufferTag$2] = typedArrayTags[boolTag$2] =
typedArrayTags[dataViewTag$3] = typedArrayTags[dateTag$2] =
typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] =
typedArrayTags[mapTag$4] = typedArrayTags[numberTag$2] =
typedArrayTags[objectTag$2] = typedArrayTags[regexpTag$2] =
typedArrayTags[setTag$4] = typedArrayTags[stringTag$2] =
typedArrayTags[weakMapTag$2] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/** Detect free variable `exports`. */
var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports$1 && freeGlobal$1.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

var nodeUtil$1 = nodeUtil;

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

var isTypedArray$1 = isTypedArray;

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$5.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray$1(value),
      isArg = !isArr && isArguments$1(value),
      isBuff = !isArr && !isArg && isBuffer$1(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$3.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$4;

  return value === proto;
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

var nativeKeys$1 = nativeKeys;

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys$1(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$2.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction$1(value);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject$1(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty$1.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root$1.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$1.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

var getSymbols$1 = getSymbols;

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols$1(source), object);
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols$1(object));
    object = getPrototype$1(object);
  }
  return result;
};

var getSymbolsIn$1 = getSymbolsIn;

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn$1(source), object);
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols$1);
}

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn$1);
}

/* Built-in method references that are verified to be native. */
var DataView$1 = getNative(root$1, 'DataView');

var DataView$2 = DataView$1;

/* Built-in method references that are verified to be native. */
var Promise$1 = getNative(root$1, 'Promise');

var Promise$2 = Promise$1;

/* Built-in method references that are verified to be native. */
var Set$1 = getNative(root$1, 'Set');

var Set$2 = Set$1;

/* Built-in method references that are verified to be native. */
var WeakMap$1 = getNative(root$1, 'WeakMap');

var WeakMap$2 = WeakMap$1;

/** `Object#toString` result references. */
var mapTag$3 = '[object Map]',
    objectTag$1 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$3 = '[object Set]',
    weakMapTag$1 = '[object WeakMap]';

var dataViewTag$2 = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView$2),
    mapCtorString = toSource(Map$2),
    promiseCtorString = toSource(Promise$2),
    setCtorString = toSource(Set$2),
    weakMapCtorString = toSource(WeakMap$2);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView$2 && getTag(new DataView$2(new ArrayBuffer(1))) != dataViewTag$2) ||
    (Map$2 && getTag(new Map$2) != mapTag$3) ||
    (Promise$2 && getTag(Promise$2.resolve()) != promiseTag) ||
    (Set$2 && getTag(new Set$2) != setTag$3) ||
    (WeakMap$2 && getTag(new WeakMap$2) != weakMapTag$1)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag$1 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag$2;
        case mapCtorString: return mapTag$3;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag$3;
        case weakMapCtorString: return weakMapTag$1;
      }
    }
    return result;
  };
}

var getTag$1 = getTag;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/** Built-in value references. */
var Uint8Array$1 = root$1.Uint8Array;

var Uint8Array$2 = Uint8Array$1;

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$2(result).set(new Uint8Array$2(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/** Used to convert symbols to primitives and strings. */
var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/** `Object#toString` result references. */
var boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    mapTag$2 = '[object Map]',
    numberTag$1 = '[object Number]',
    regexpTag$1 = '[object RegExp]',
    setTag$2 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag$2 = '[object Symbol]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$1:
      return cloneArrayBuffer(object);

    case boolTag$1:
    case dateTag$1:
      return new Ctor(+object);

    case dataViewTag$1:
      return cloneDataView(object, isDeep);

    case float32Tag$1: case float64Tag$1:
    case int8Tag$1: case int16Tag$1: case int32Tag$1:
    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
      return cloneTypedArray(object, isDeep);

    case mapTag$2:
      return new Ctor;

    case numberTag$1:
    case stringTag$1:
      return new Ctor(object);

    case regexpTag$1:
      return cloneRegExp(object);

    case setTag$2:
      return new Ctor;

    case symbolTag$2:
      return cloneSymbol(object);
  }
}

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject$1(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

var baseCreate$1 = baseCreate;

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate$1(getPrototype$1(object))
    : {};
}

/** `Object#toString` result references. */
var mapTag$1 = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag$1(value) == mapTag$1;
}

/* Node.js helper references. */
var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

var isMap$1 = isMap;

/** `Object#toString` result references. */
var setTag$1 = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag$1(value) == setTag$1;
}

/* Node.js helper references. */
var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

var isSet$1 = isSet;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG$1 = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag$1 = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag$1] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG$1;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject$1(value)) {
    return value;
  }
  var isArr = isArray$1(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag$1(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer$1(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet$1(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap$1(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

var stringToPath$1 = stringToPath;

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
}

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray$1(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString$1(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */
function toPath(value) {
  if (isArray$1(value)) {
    return arrayMap(value, toKey);
  }
  return isSymbol(value) ? [value] : copyArray(stringToPath$1(toString$1(value)));
}

var isProduction = process.env.NODE_ENV === 'production';
function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }

    var text = "Warning: " + message;

    if (typeof console !== 'undefined') {
      console.warn(text);
    }

    try {
      throw Error(text);
    } catch (x) {}
  }
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
/** @private is the given object a Function? */

var isFunction = function isFunction(obj) {
  return typeof obj === 'function';
};
/** @private is the given object an Object? */

var isObject = function isObject(obj) {
  return obj !== null && typeof obj === 'object';
};
/** @private is the given object an integer? */

var isInteger = function isInteger(obj) {
  return String(Math.floor(Number(obj))) === obj;
};
/** @private is the given object a string? */

var isString = function isString(obj) {
  return Object.prototype.toString.call(obj) === '[object String]';
};
/** @private Does a React component have exactly 0 children? */

var isEmptyChildren = function isEmptyChildren(children) {
  return React.Children.count(children) === 0;
};
/** @private is the given object/value a promise? */

var isPromise = function isPromise(value) {
  return isObject(value) && isFunction(value.then);
};
/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?Document} doc Defaults to current document.
 * @return {Element | null}
 * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js
 */

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);

  if (typeof doc === 'undefined') {
    return null;
  }

  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}
/**
 * Deeply get a value from an object via its path.
 */

function getIn(obj, key, def, p) {
  if (p === void 0) {
    p = 0;
  }

  var path = toPath(key);

  while (obj && p < path.length) {
    obj = obj[path[p++]];
  }

  return obj === undefined ? def : obj;
}
/**
 * Deeply set a value from in object via it's path. If the value at `path`
 * has changed, return a shallow copy of obj with `value` set at `path`.
 * If `value` has not changed, return the original `obj`.
 *
 * Existing objects / arrays along `path` are also shallow copied. Sibling
 * objects along path retain the same internal js reference. Since new
 * objects / arrays are only created along `path`, we can test if anything
 * changed in a nested structure by comparing the object's reference in
 * the old and new object, similar to how russian doll cache invalidation
 * works.
 *
 * In earlier versions of this function, which used cloneDeep, there were
 * issues whereby settings a nested value would mutate the parent
 * instead of creating a new object. `clone` avoids that bug making a
 * shallow copy of the objects along the update path
 * so no object is mutated in place.
 *
 * Before changing this function, please read through the following
 * discussions.
 *
 * @see https://github.com/developit/linkstate
 * @see https://github.com/jaredpalmer/formik/pull/123
 */

function setIn(obj, path, value) {
  var res = clone(obj); // this keeps inheritance when obj is a class

  var resVal = res;
  var i = 0;
  var pathArray = toPath(path);

  for (; i < pathArray.length - 1; i++) {
    var currentPath = pathArray[i];
    var currentObj = getIn(obj, pathArray.slice(0, i + 1));

    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {
      resVal = resVal[currentPath] = clone(currentObj);
    } else {
      var nextPath = pathArray[i + 1];
      resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};
    }
  } // Return original object if new value is the same as current


  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {
    return obj;
  }

  if (value === undefined) {
    delete resVal[pathArray[i]];
  } else {
    resVal[pathArray[i]] = value;
  } // If the path array has a single element, the loop did not run.
  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.


  if (i === 0 && value === undefined) {
    delete res[pathArray[i]];
  }

  return res;
}
/**
 * Recursively a set the same value for all keys and arrays nested object, cloning
 * @param object
 * @param value
 * @param visited
 * @param response
 */

function setNestedObjectValues(object, value, visited, response) {
  if (visited === void 0) {
    visited = new WeakMap();
  }

  if (response === void 0) {
    response = {};
  }

  for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {
    var k = _Object$keys[_i];
    var val = object[k];

    if (isObject(val)) {
      if (!visited.get(val)) {
        visited.set(val, true); // In order to keep array values consistent for both dot path  and
        // bracket syntax, we need to check if this is an array so that
        // this will output  { friends: [true] } and not { friends: { "0": true } }

        response[k] = Array.isArray(val) ? [] : {};
        setNestedObjectValues(val, value, visited, response[k]);
      }
    } else {
      response[k] = value;
    }
  }

  return response;
}

var FormikContext = /*#__PURE__*/React.createContext(undefined);
FormikContext.displayName = 'FormikContext';
var FormikProvider = FormikContext.Provider;
FormikContext.Consumer;
function useFormikContext() {
  var formik = React.useContext(FormikContext);
  !!!formik ? process.env.NODE_ENV !== "production" ? warning(false, "Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.") : warning(false) : void 0;
  return formik;
}

function formikReducer(state, msg) {
  switch (msg.type) {
    case 'SET_VALUES':
      return _extends({}, state, {
        values: msg.payload
      });

    case 'SET_TOUCHED':
      return _extends({}, state, {
        touched: msg.payload
      });

    case 'SET_ERRORS':
      if (reactFastCompare(state.errors, msg.payload)) {
        return state;
      }

      return _extends({}, state, {
        errors: msg.payload
      });

    case 'SET_STATUS':
      return _extends({}, state, {
        status: msg.payload
      });

    case 'SET_ISSUBMITTING':
      return _extends({}, state, {
        isSubmitting: msg.payload
      });

    case 'SET_ISVALIDATING':
      return _extends({}, state, {
        isValidating: msg.payload
      });

    case 'SET_FIELD_VALUE':
      return _extends({}, state, {
        values: setIn(state.values, msg.payload.field, msg.payload.value)
      });

    case 'SET_FIELD_TOUCHED':
      return _extends({}, state, {
        touched: setIn(state.touched, msg.payload.field, msg.payload.value)
      });

    case 'SET_FIELD_ERROR':
      return _extends({}, state, {
        errors: setIn(state.errors, msg.payload.field, msg.payload.value)
      });

    case 'RESET_FORM':
      return _extends({}, state, msg.payload);

    case 'SET_FORMIK_STATE':
      return msg.payload(state);

    case 'SUBMIT_ATTEMPT':
      return _extends({}, state, {
        touched: setNestedObjectValues(state.values, true),
        isSubmitting: true,
        submitCount: state.submitCount + 1
      });

    case 'SUBMIT_FAILURE':
      return _extends({}, state, {
        isSubmitting: false
      });

    case 'SUBMIT_SUCCESS':
      return _extends({}, state, {
        isSubmitting: false
      });

    default:
      return state;
  }
} // Initial empty states // objects


var emptyErrors = {};
var emptyTouched = {};
function useFormik(_ref) {
  var _ref$validateOnChange = _ref.validateOnChange,
      validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange,
      _ref$validateOnBlur = _ref.validateOnBlur,
      validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur,
      _ref$validateOnMount = _ref.validateOnMount,
      validateOnMount = _ref$validateOnMount === void 0 ? false : _ref$validateOnMount,
      isInitialValid = _ref.isInitialValid,
      _ref$enableReinitiali = _ref.enableReinitialize,
      enableReinitialize = _ref$enableReinitiali === void 0 ? false : _ref$enableReinitiali,
      onSubmit = _ref.onSubmit,
      rest = _objectWithoutPropertiesLoose(_ref, ["validateOnChange", "validateOnBlur", "validateOnMount", "isInitialValid", "enableReinitialize", "onSubmit"]);

  var props = _extends({
    validateOnChange: validateOnChange,
    validateOnBlur: validateOnBlur,
    validateOnMount: validateOnMount,
    onSubmit: onSubmit
  }, rest);

  var initialValues = React.useRef(props.initialValues);
  var initialErrors = React.useRef(props.initialErrors || emptyErrors);
  var initialTouched = React.useRef(props.initialTouched || emptyTouched);
  var initialStatus = React.useRef(props.initialStatus);
  var isMounted = React.useRef(false);
  var fieldRegistry = React.useRef({});

  if (process.env.NODE_ENV !== "production") {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useEffect(function () {
      !(typeof isInitialValid === 'undefined') ? process.env.NODE_ENV !== "production" ? warning(false, 'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.') : warning(false) : void 0; // eslint-disable-next-line
    }, []);
  }

  React.useEffect(function () {
    isMounted.current = true;
    return function () {
      isMounted.current = false;
    };
  }, []);

  var _React$useReducer = React.useReducer(formikReducer, {
    values: props.initialValues,
    errors: props.initialErrors || emptyErrors,
    touched: props.initialTouched || emptyTouched,
    status: props.initialStatus,
    isSubmitting: false,
    isValidating: false,
    submitCount: 0
  }),
      state = _React$useReducer[0],
      dispatch = _React$useReducer[1];

  var runValidateHandler = React.useCallback(function (values, field) {
    return new Promise(function (resolve, reject) {
      var maybePromisedErrors = props.validate(values, field);

      if (maybePromisedErrors == null) {
        // use loose null check here on purpose
        resolve(emptyErrors);
      } else if (isPromise(maybePromisedErrors)) {
        maybePromisedErrors.then(function (errors) {
          resolve(errors || emptyErrors);
        }, function (actualException) {
          if (process.env.NODE_ENV !== 'production') {
            console.warn("Warning: An unhandled error was caught during validation in <Formik validate />", actualException);
          }

          reject(actualException);
        });
      } else {
        resolve(maybePromisedErrors);
      }
    });
  }, [props.validate]);
  /**
   * Run validation against a Yup schema and optionally run a function if successful
   */

  var runValidationSchema = React.useCallback(function (values, field) {
    var validationSchema = props.validationSchema;
    var schema = isFunction(validationSchema) ? validationSchema(field) : validationSchema;
    var promise = field && schema.validateAt ? schema.validateAt(field, values) : validateYupSchema(values, schema);
    return new Promise(function (resolve, reject) {
      promise.then(function () {
        resolve(emptyErrors);
      }, function (err) {
        // Yup will throw a validation error if validation fails. We catch those and
        // resolve them into Formik errors. We can sniff if something is a Yup error
        // by checking error.name.
        // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string
        if (err.name === 'ValidationError') {
          resolve(yupToFormErrors(err));
        } else {
          // We throw any other errors
          if (process.env.NODE_ENV !== 'production') {
            console.warn("Warning: An unhandled error was caught during validation in <Formik validationSchema />", err);
          }

          reject(err);
        }
      });
    });
  }, [props.validationSchema]);
  var runSingleFieldLevelValidation = React.useCallback(function (field, value) {
    return new Promise(function (resolve) {
      return resolve(fieldRegistry.current[field].validate(value));
    });
  }, []);
  var runFieldLevelValidations = React.useCallback(function (values) {
    var fieldKeysWithValidation = Object.keys(fieldRegistry.current).filter(function (f) {
      return isFunction(fieldRegistry.current[f].validate);
    }); // Construct an array with all of the field validation functions

    var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function (f) {
      return runSingleFieldLevelValidation(f, getIn(values, f));
    }) : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)

    return Promise.all(fieldValidations).then(function (fieldErrorsList) {
      return fieldErrorsList.reduce(function (prev, curr, index) {
        if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {
          return prev;
        }

        if (curr) {
          prev = setIn(prev, fieldKeysWithValidation[index], curr);
        }

        return prev;
      }, {});
    });
  }, [runSingleFieldLevelValidation]); // Run all validations and return the result

  var runAllValidations = React.useCallback(function (values) {
    return Promise.all([runFieldLevelValidations(values), props.validationSchema ? runValidationSchema(values) : {}, props.validate ? runValidateHandler(values) : {}]).then(function (_ref2) {
      var fieldErrors = _ref2[0],
          schemaErrors = _ref2[1],
          validateErrors = _ref2[2];
      var combinedErrors = deepmerge_1.all([fieldErrors, schemaErrors, validateErrors], {
        arrayMerge: arrayMerge
      });
      return combinedErrors;
    });
  }, [props.validate, props.validationSchema, runFieldLevelValidations, runValidateHandler, runValidationSchema]); // Run all validations methods and update state accordingly

  var validateFormWithHighPriority = useEventCallback(function (values) {
    if (values === void 0) {
      values = state.values;
    }

    dispatch({
      type: 'SET_ISVALIDATING',
      payload: true
    });
    return runAllValidations(values).then(function (combinedErrors) {
      if (!!isMounted.current) {
        dispatch({
          type: 'SET_ISVALIDATING',
          payload: false
        });
        dispatch({
          type: 'SET_ERRORS',
          payload: combinedErrors
        });
      }

      return combinedErrors;
    });
  });
  React.useEffect(function () {
    if (validateOnMount && isMounted.current === true && reactFastCompare(initialValues.current, props.initialValues)) {
      validateFormWithHighPriority(initialValues.current);
    }
  }, [validateOnMount, validateFormWithHighPriority]);
  var resetForm = React.useCallback(function (nextState) {
    var values = nextState && nextState.values ? nextState.values : initialValues.current;
    var errors = nextState && nextState.errors ? nextState.errors : initialErrors.current ? initialErrors.current : props.initialErrors || {};
    var touched = nextState && nextState.touched ? nextState.touched : initialTouched.current ? initialTouched.current : props.initialTouched || {};
    var status = nextState && nextState.status ? nextState.status : initialStatus.current ? initialStatus.current : props.initialStatus;
    initialValues.current = values;
    initialErrors.current = errors;
    initialTouched.current = touched;
    initialStatus.current = status;

    var dispatchFn = function dispatchFn() {
      dispatch({
        type: 'RESET_FORM',
        payload: {
          isSubmitting: !!nextState && !!nextState.isSubmitting,
          errors: errors,
          touched: touched,
          status: status,
          values: values,
          isValidating: !!nextState && !!nextState.isValidating,
          submitCount: !!nextState && !!nextState.submitCount && typeof nextState.submitCount === 'number' ? nextState.submitCount : 0
        }
      });
    };

    if (props.onReset) {
      var maybePromisedOnReset = props.onReset(state.values, imperativeMethods);

      if (isPromise(maybePromisedOnReset)) {
        maybePromisedOnReset.then(dispatchFn);
      } else {
        dispatchFn();
      }
    } else {
      dispatchFn();
    }
  }, [props.initialErrors, props.initialStatus, props.initialTouched]);
  React.useEffect(function () {
    if (isMounted.current === true && !reactFastCompare(initialValues.current, props.initialValues)) {
      if (enableReinitialize) {
        initialValues.current = props.initialValues;
        resetForm();
      }

      if (validateOnMount) {
        validateFormWithHighPriority(initialValues.current);
      }
    }
  }, [enableReinitialize, props.initialValues, resetForm, validateOnMount, validateFormWithHighPriority]);
  React.useEffect(function () {
    if (enableReinitialize && isMounted.current === true && !reactFastCompare(initialErrors.current, props.initialErrors)) {
      initialErrors.current = props.initialErrors || emptyErrors;
      dispatch({
        type: 'SET_ERRORS',
        payload: props.initialErrors || emptyErrors
      });
    }
  }, [enableReinitialize, props.initialErrors]);
  React.useEffect(function () {
    if (enableReinitialize && isMounted.current === true && !reactFastCompare(initialTouched.current, props.initialTouched)) {
      initialTouched.current = props.initialTouched || emptyTouched;
      dispatch({
        type: 'SET_TOUCHED',
        payload: props.initialTouched || emptyTouched
      });
    }
  }, [enableReinitialize, props.initialTouched]);
  React.useEffect(function () {
    if (enableReinitialize && isMounted.current === true && !reactFastCompare(initialStatus.current, props.initialStatus)) {
      initialStatus.current = props.initialStatus;
      dispatch({
        type: 'SET_STATUS',
        payload: props.initialStatus
      });
    }
  }, [enableReinitialize, props.initialStatus, props.initialTouched]);
  var validateField = useEventCallback(function (name) {
    // This will efficiently validate a single field by avoiding state
    // changes if the validation function is synchronous. It's different from
    // what is called when using validateForm.
    if (fieldRegistry.current[name] && isFunction(fieldRegistry.current[name].validate)) {
      var value = getIn(state.values, name);
      var maybePromise = fieldRegistry.current[name].validate(value);

      if (isPromise(maybePromise)) {
        // Only flip isValidating if the function is async.
        dispatch({
          type: 'SET_ISVALIDATING',
          payload: true
        });
        return maybePromise.then(function (x) {
          return x;
        }).then(function (error) {
          dispatch({
            type: 'SET_FIELD_ERROR',
            payload: {
              field: name,
              value: error
            }
          });
          dispatch({
            type: 'SET_ISVALIDATING',
            payload: false
          });
        });
      } else {
        dispatch({
          type: 'SET_FIELD_ERROR',
          payload: {
            field: name,
            value: maybePromise
          }
        });
        return Promise.resolve(maybePromise);
      }
    } else if (props.validationSchema) {
      dispatch({
        type: 'SET_ISVALIDATING',
        payload: true
      });
      return runValidationSchema(state.values, name).then(function (x) {
        return x;
      }).then(function (error) {
        dispatch({
          type: 'SET_FIELD_ERROR',
          payload: {
            field: name,
            value: error[name]
          }
        });
        dispatch({
          type: 'SET_ISVALIDATING',
          payload: false
        });
      });
    }

    return Promise.resolve();
  });
  var registerField = React.useCallback(function (name, _ref3) {
    var validate = _ref3.validate;
    fieldRegistry.current[name] = {
      validate: validate
    };
  }, []);
  var unregisterField = React.useCallback(function (name) {
    delete fieldRegistry.current[name];
  }, []);
  var setTouched = useEventCallback(function (touched, shouldValidate) {
    dispatch({
      type: 'SET_TOUCHED',
      payload: touched
    });
    var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;
    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
  });
  var setErrors = React.useCallback(function (errors) {
    dispatch({
      type: 'SET_ERRORS',
      payload: errors
    });
  }, []);
  var setValues = useEventCallback(function (values, shouldValidate) {
    var resolvedValues = isFunction(values) ? values(state.values) : values;
    dispatch({
      type: 'SET_VALUES',
      payload: resolvedValues
    });
    var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;
    return willValidate ? validateFormWithHighPriority(resolvedValues) : Promise.resolve();
  });
  var setFieldError = React.useCallback(function (field, value) {
    dispatch({
      type: 'SET_FIELD_ERROR',
      payload: {
        field: field,
        value: value
      }
    });
  }, []);
  var setFieldValue = useEventCallback(function (field, value, shouldValidate) {
    dispatch({
      type: 'SET_FIELD_VALUE',
      payload: {
        field: field,
        value: value
      }
    });
    var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;
    return willValidate ? validateFormWithHighPriority(setIn(state.values, field, value)) : Promise.resolve();
  });
  var executeChange = React.useCallback(function (eventOrTextValue, maybePath) {
    // By default, assume that the first argument is a string. This allows us to use
    // handleChange with React Native and React Native Web's onChangeText prop which
    // provides just the value of the input.
    var field = maybePath;
    var val = eventOrTextValue;
    var parsed; // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),
    // so we handle like we would a normal HTML change event.

    if (!isString(eventOrTextValue)) {
      // If we can, persist the event
      // @see https://reactjs.org/docs/events.html#event-pooling
      if (eventOrTextValue.persist) {
        eventOrTextValue.persist();
      }

      var target = eventOrTextValue.target ? eventOrTextValue.target : eventOrTextValue.currentTarget;
      var type = target.type,
          name = target.name,
          id = target.id,
          value = target.value,
          checked = target.checked,
          outerHTML = target.outerHTML,
          options = target.options,
          multiple = target.multiple;
      field = maybePath ? maybePath : name ? name : id;

      if (!field && process.env.NODE_ENV !== "production") {
        warnAboutMissingIdentifier({
          htmlContent: outerHTML,
          documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',
          handlerName: 'handleChange'
        });
      }

      val = /number|range/.test(type) ? (parsed = parseFloat(value), isNaN(parsed) ? '' : parsed) : /checkbox/.test(type) // checkboxes
      ? getValueForCheckbox(getIn(state.values, field), checked, value) : options && multiple // <select multiple>
      ? getSelectedValues(options) : value;
    }

    if (field) {
      // Set form fields by name
      setFieldValue(field, val);
    }
  }, [setFieldValue, state.values]);
  var handleChange = useEventCallback(function (eventOrPath) {
    if (isString(eventOrPath)) {
      return function (event) {
        return executeChange(event, eventOrPath);
      };
    } else {
      executeChange(eventOrPath);
    }
  });
  var setFieldTouched = useEventCallback(function (field, touched, shouldValidate) {
    if (touched === void 0) {
      touched = true;
    }

    dispatch({
      type: 'SET_FIELD_TOUCHED',
      payload: {
        field: field,
        value: touched
      }
    });
    var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;
    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
  });
  var executeBlur = React.useCallback(function (e, path) {
    if (e.persist) {
      e.persist();
    }

    var _e$target = e.target,
        name = _e$target.name,
        id = _e$target.id,
        outerHTML = _e$target.outerHTML;
    var field = path ? path : name ? name : id;

    if (!field && process.env.NODE_ENV !== "production") {
      warnAboutMissingIdentifier({
        htmlContent: outerHTML,
        documentationAnchorLink: 'handleblur-e-any--void',
        handlerName: 'handleBlur'
      });
    }

    setFieldTouched(field, true);
  }, [setFieldTouched]);
  var handleBlur = useEventCallback(function (eventOrString) {
    if (isString(eventOrString)) {
      return function (event) {
        return executeBlur(event, eventOrString);
      };
    } else {
      executeBlur(eventOrString);
    }
  });
  var setFormikState = React.useCallback(function (stateOrCb) {
    if (isFunction(stateOrCb)) {
      dispatch({
        type: 'SET_FORMIK_STATE',
        payload: stateOrCb
      });
    } else {
      dispatch({
        type: 'SET_FORMIK_STATE',
        payload: function payload() {
          return stateOrCb;
        }
      });
    }
  }, []);
  var setStatus = React.useCallback(function (status) {
    dispatch({
      type: 'SET_STATUS',
      payload: status
    });
  }, []);
  var setSubmitting = React.useCallback(function (isSubmitting) {
    dispatch({
      type: 'SET_ISSUBMITTING',
      payload: isSubmitting
    });
  }, []);
  var submitForm = useEventCallback(function () {
    dispatch({
      type: 'SUBMIT_ATTEMPT'
    });
    return validateFormWithHighPriority().then(function (combinedErrors) {
      // In case an error was thrown and passed to the resolved Promise,
      // `combinedErrors` can be an instance of an Error. We need to check
      // that and abort the submit.
      // If we don't do that, calling `Object.keys(new Error())` yields an
      // empty array, which causes the validation to pass and the form
      // to be submitted.
      var isInstanceOfError = combinedErrors instanceof Error;
      var isActuallyValid = !isInstanceOfError && Object.keys(combinedErrors).length === 0;

      if (isActuallyValid) {
        // Proceed with submit...
        //
        // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and
        // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.
        // This would be fine in simple cases, but make it impossible to disable submit
        // buttons where people use callbacks or promises as side effects (which is basically
        // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,
        //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.
        // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle
        // cleanup of isSubmitting on behalf of the consumer.
        var promiseOrUndefined;

        try {
          promiseOrUndefined = executeSubmit(); // Bail if it's sync, consumer is responsible for cleaning up
          // via setSubmitting(false)

          if (promiseOrUndefined === undefined) {
            return;
          }
        } catch (error) {
          throw error;
        }

        return Promise.resolve(promiseOrUndefined).then(function (result) {
          if (!!isMounted.current) {
            dispatch({
              type: 'SUBMIT_SUCCESS'
            });
          }

          return result;
        })["catch"](function (_errors) {
          if (!!isMounted.current) {
            dispatch({
              type: 'SUBMIT_FAILURE'
            }); // This is a legit error rejected by the onSubmit fn
            // so we don't want to break the promise chain

            throw _errors;
          }
        });
      } else if (!!isMounted.current) {
        // ^^^ Make sure Formik is still mounted before updating state
        dispatch({
          type: 'SUBMIT_FAILURE'
        }); // throw combinedErrors;

        if (isInstanceOfError) {
          throw combinedErrors;
        }
      }

      return;
    });
  });
  var handleSubmit = useEventCallback(function (e) {
    if (e && e.preventDefault && isFunction(e.preventDefault)) {
      e.preventDefault();
    }

    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {
      e.stopPropagation();
    } // Warn if form submission is triggered by a <button> without a
    // specified `type` attribute during development. This mitigates
    // a common gotcha in forms with both reset and submit buttons,
    // where the dev forgets to add type="button" to the reset button.


    if (process.env.NODE_ENV !== "production" && typeof document !== 'undefined') {
      // Safely get the active element (works with IE)
      var activeElement = getActiveElement();

      if (activeElement !== null && activeElement instanceof HTMLButtonElement) {
        !(activeElement.attributes && activeElement.attributes.getNamedItem('type')) ? process.env.NODE_ENV !== "production" ? warning(false, 'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type="submit"`. If this is not a submit button, please add `type="button"`.') : warning(false) : void 0;
      }
    }

    submitForm()["catch"](function (reason) {
      console.warn("Warning: An unhandled error was caught from submitForm()", reason);
    });
  });
  var imperativeMethods = {
    resetForm: resetForm,
    validateForm: validateFormWithHighPriority,
    validateField: validateField,
    setErrors: setErrors,
    setFieldError: setFieldError,
    setFieldTouched: setFieldTouched,
    setFieldValue: setFieldValue,
    setStatus: setStatus,
    setSubmitting: setSubmitting,
    setTouched: setTouched,
    setValues: setValues,
    setFormikState: setFormikState,
    submitForm: submitForm
  };
  var executeSubmit = useEventCallback(function () {
    return onSubmit(state.values, imperativeMethods);
  });
  var handleReset = useEventCallback(function (e) {
    if (e && e.preventDefault && isFunction(e.preventDefault)) {
      e.preventDefault();
    }

    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {
      e.stopPropagation();
    }

    resetForm();
  });
  var getFieldMeta = React.useCallback(function (name) {
    return {
      value: getIn(state.values, name),
      error: getIn(state.errors, name),
      touched: !!getIn(state.touched, name),
      initialValue: getIn(initialValues.current, name),
      initialTouched: !!getIn(initialTouched.current, name),
      initialError: getIn(initialErrors.current, name)
    };
  }, [state.errors, state.touched, state.values]);
  var getFieldHelpers = React.useCallback(function (name) {
    return {
      setValue: function setValue(value, shouldValidate) {
        return setFieldValue(name, value, shouldValidate);
      },
      setTouched: function setTouched(value, shouldValidate) {
        return setFieldTouched(name, value, shouldValidate);
      },
      setError: function setError(value) {
        return setFieldError(name, value);
      }
    };
  }, [setFieldValue, setFieldTouched, setFieldError]);
  var getFieldProps = React.useCallback(function (nameOrOptions) {
    var isAnObject = isObject(nameOrOptions);
    var name = isAnObject ? nameOrOptions.name : nameOrOptions;
    var valueState = getIn(state.values, name);
    var field = {
      name: name,
      value: valueState,
      onChange: handleChange,
      onBlur: handleBlur
    };

    if (isAnObject) {
      var type = nameOrOptions.type,
          valueProp = nameOrOptions.value,
          is = nameOrOptions.as,
          multiple = nameOrOptions.multiple;

      if (type === 'checkbox') {
        if (valueProp === undefined) {
          field.checked = !!valueState;
        } else {
          field.checked = !!(Array.isArray(valueState) && ~valueState.indexOf(valueProp));
          field.value = valueProp;
        }
      } else if (type === 'radio') {
        field.checked = valueState === valueProp;
        field.value = valueProp;
      } else if (is === 'select' && multiple) {
        field.value = field.value || [];
        field.multiple = true;
      }
    }

    return field;
  }, [handleBlur, handleChange, state.values]);
  var dirty = React.useMemo(function () {
    return !reactFastCompare(initialValues.current, state.values);
  }, [initialValues.current, state.values]);
  var isValid = React.useMemo(function () {
    return typeof isInitialValid !== 'undefined' ? dirty ? state.errors && Object.keys(state.errors).length === 0 : isInitialValid !== false && isFunction(isInitialValid) ? isInitialValid(props) : isInitialValid : state.errors && Object.keys(state.errors).length === 0;
  }, [isInitialValid, dirty, state.errors, props]);

  var ctx = _extends({}, state, {
    initialValues: initialValues.current,
    initialErrors: initialErrors.current,
    initialTouched: initialTouched.current,
    initialStatus: initialStatus.current,
    handleBlur: handleBlur,
    handleChange: handleChange,
    handleReset: handleReset,
    handleSubmit: handleSubmit,
    resetForm: resetForm,
    setErrors: setErrors,
    setFormikState: setFormikState,
    setFieldTouched: setFieldTouched,
    setFieldValue: setFieldValue,
    setFieldError: setFieldError,
    setStatus: setStatus,
    setSubmitting: setSubmitting,
    setTouched: setTouched,
    setValues: setValues,
    submitForm: submitForm,
    validateForm: validateFormWithHighPriority,
    validateField: validateField,
    isValid: isValid,
    dirty: dirty,
    unregisterField: unregisterField,
    registerField: registerField,
    getFieldProps: getFieldProps,
    getFieldMeta: getFieldMeta,
    getFieldHelpers: getFieldHelpers,
    validateOnBlur: validateOnBlur,
    validateOnChange: validateOnChange,
    validateOnMount: validateOnMount
  });

  return ctx;
}
function Formik(props) {
  var formikbag = useFormik(props);
  var component = props.component,
      children = props.children,
      render = props.render,
      innerRef = props.innerRef; // This allows folks to pass a ref to <Formik />

  React.useImperativeHandle(innerRef, function () {
    return formikbag;
  });

  if (process.env.NODE_ENV !== "production") {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useEffect(function () {
      !!props.render ? process.env.NODE_ENV !== "production" ? warning(false, "<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>") : warning(false) : void 0; // eslint-disable-next-line
    }, []);
  }

  return React.createElement(FormikProvider, {
    value: formikbag
  }, component ? React.createElement(component, formikbag) : render ? render(formikbag) : children // children come last, always called
  ? isFunction(children) ? children(formikbag) : !isEmptyChildren(children) ? React.Children.only(children) : null : null);
}

function warnAboutMissingIdentifier(_ref4) {
  var htmlContent = _ref4.htmlContent,
      documentationAnchorLink = _ref4.documentationAnchorLink,
      handlerName = _ref4.handlerName;
  console.warn("Warning: Formik called `" + handlerName + "`, but you forgot to pass an `id` or `name` attribute to your input:\n    " + htmlContent + "\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#" + documentationAnchorLink + "\n  ");
}
/**
 * Transform Yup ValidationError to a more usable object
 */


function yupToFormErrors(yupError) {
  var errors = {};

  if (yupError.inner) {
    if (yupError.inner.length === 0) {
      return setIn(errors, yupError.path, yupError.message);
    }

    for (var _iterator = yupError.inner, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref5 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref5 = _i.value;
      }

      var err = _ref5;

      if (!getIn(errors, err.path)) {
        errors = setIn(errors, err.path, err.message);
      }
    }
  }

  return errors;
}
/**
 * Validate a yup schema.
 */

function validateYupSchema(values, schema, sync, context) {
  if (sync === void 0) {
    sync = false;
  }

  if (context === void 0) {
    context = {};
  }

  var validateData = prepareDataForValidation(values);
  return schema[sync ? 'validateSync' : 'validate'](validateData, {
    abortEarly: false,
    context: context
  });
}
/**
 * Recursively prepare values.
 */

function prepareDataForValidation(values) {
  var data = Array.isArray(values) ? [] : {};

  for (var k in values) {
    if (Object.prototype.hasOwnProperty.call(values, k)) {
      var key = String(k);

      if (Array.isArray(values[key]) === true) {
        data[key] = values[key].map(function (value) {
          if (Array.isArray(value) === true || isPlainObject(value)) {
            return prepareDataForValidation(value);
          } else {
            return value !== '' ? value : undefined;
          }
        });
      } else if (isPlainObject(values[key])) {
        data[key] = prepareDataForValidation(values[key]);
      } else {
        data[key] = values[key] !== '' ? values[key] : undefined;
      }
    }
  }

  return data;
}
/**
 * deepmerge array merging algorithm
 * https://github.com/KyleAMathews/deepmerge#combine-array
 */

function arrayMerge(target, source, options) {
  var destination = target.slice();
  source.forEach(function merge(e, i) {
    if (typeof destination[i] === 'undefined') {
      var cloneRequested = options.clone !== false;
      var shouldClone = cloneRequested && options.isMergeableObject(e);
      destination[i] = shouldClone ? deepmerge_1(Array.isArray(e) ? [] : {}, e, options) : e;
    } else if (options.isMergeableObject(e)) {
      destination[i] = deepmerge_1(target[i], e, options);
    } else if (target.indexOf(e) === -1) {
      destination.push(e);
    }
  });
  return destination;
}
/** Return multi select values based on an array of options */


function getSelectedValues(options) {
  return Array.from(options).filter(function (el) {
    return el.selected;
  }).map(function (el) {
    return el.value;
  });
}
/** Return the next value for a checkbox */


function getValueForCheckbox(currentValue, checked, valueProp) {
  // If the current value was a boolean, return a boolean
  if (typeof currentValue === 'boolean') {
    return Boolean(checked);
  } // If the currentValue was not a boolean we want to return an array


  var currentArrayOfValues = [];
  var isValueInArray = false;
  var index = -1;

  if (!Array.isArray(currentValue)) {
    // eslint-disable-next-line eqeqeq
    if (!valueProp || valueProp == 'true' || valueProp == 'false') {
      return Boolean(checked);
    }
  } else {
    // If the current value is already an array, use it
    currentArrayOfValues = currentValue;
    index = currentValue.indexOf(valueProp);
    isValueInArray = index >= 0;
  } // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values


  if (checked && valueProp && !isValueInArray) {
    return currentArrayOfValues.concat(valueProp);
  } // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values


  if (!isValueInArray) {
    return currentArrayOfValues;
  } // If the checkbox was unchecked and the value is in the array, remove the value and return the array


  return currentArrayOfValues.slice(0, index).concat(currentArrayOfValues.slice(index + 1));
} // React currently throws a warning when using useLayoutEffect on the server.
// To get around it, we can conditionally useEffect on the server (no-op) and
// useLayoutEffect in the browser.
// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85


var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? React.useLayoutEffect : React.useEffect;

function useEventCallback(fn) {
  var ref = React.useRef(fn); // we copy a ref to the callback scoped to the current state/props on each render

  useIsomorphicLayoutEffect(function () {
    ref.current = fn;
  });
  return React.useCallback(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return ref.current.apply(void 0, args);
  }, []);
}
function Field(_ref) {
  var validate = _ref.validate,
      name = _ref.name,
      render = _ref.render,
      children = _ref.children,
      is = _ref.as,
      component = _ref.component,
      props = _objectWithoutPropertiesLoose(_ref, ["validate", "name", "render", "children", "as", "component"]);

  var _useFormikContext = useFormikContext(),
      formik = _objectWithoutPropertiesLoose(_useFormikContext, ["validate", "validationSchema"]);

  if (process.env.NODE_ENV !== "production") {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useEffect(function () {
      !!render ? process.env.NODE_ENV !== "production" ? warning(false, "<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Field name=\"" + name + "\" render={({field, form}) => ...} /> with <Field name=\"" + name + "\">{({field, form, meta}) => ...}</Field>") : warning(false) : void 0;
      !!(is && children && isFunction(children)) ? process.env.NODE_ENV !== "production" ? warning(false, 'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.') : warning(false) : void 0;
      !!(component && children && isFunction(children)) ? process.env.NODE_ENV !== "production" ? warning(false, 'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.') : warning(false) : void 0;
      !!(render && children && !isEmptyChildren(children)) ? process.env.NODE_ENV !== "production" ? warning(false, 'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored') : warning(false) : void 0; // eslint-disable-next-line
    }, []);
  } // Register field and field-level validation with parent <Formik>


  var registerField = formik.registerField,
      unregisterField = formik.unregisterField;
  React.useEffect(function () {
    registerField(name, {
      validate: validate
    });
    return function () {
      unregisterField(name);
    };
  }, [registerField, unregisterField, name, validate]);
  var field = formik.getFieldProps(_extends({
    name: name
  }, props));
  var meta = formik.getFieldMeta(name);
  var legacyBag = {
    field: field,
    form: formik
  };

  if (render) {
    return render(_extends({}, legacyBag, {
      meta: meta
    }));
  }

  if (isFunction(children)) {
    return children(_extends({}, legacyBag, {
      meta: meta
    }));
  }

  if (component) {
    // This behavior is backwards compat with earlier Formik 0.9 to 1.x
    if (typeof component === 'string') {
      var innerRef = props.innerRef,
          rest = _objectWithoutPropertiesLoose(props, ["innerRef"]);

      return React.createElement(component, _extends({
        ref: innerRef
      }, field, rest), children);
    } // We don't pass `meta` for backwards compat


    return React.createElement(component, _extends({
      field: field,
      form: formik
    }, props), children);
  } // default to input here so we can check for both `as` and `children` above


  var asElement = is || 'input';

  if (typeof asElement === 'string') {
    var _innerRef = props.innerRef,
        _rest = _objectWithoutPropertiesLoose(props, ["innerRef"]);

    return React.createElement(asElement, _extends({
      ref: _innerRef
    }, field, _rest), children);
  }

  return React.createElement(asElement, _extends({}, field, props), children);
}

var Form = /*#__PURE__*/React.forwardRef(function (props, ref) {
  // iOS needs an "action" attribute for nice input: https://stackoverflow.com/a/39485162/406725
  // We default the action to "#" in case the preventDefault fails (just updates the URL hash)
  var action = props.action,
      rest = _objectWithoutPropertiesLoose(props, ["action"]);

  var _action = action != null ? action : '#';

  var _useFormikContext = useFormikContext(),
      handleReset = _useFormikContext.handleReset,
      handleSubmit = _useFormikContext.handleSubmit;

  return React.createElement("form", Object.assign({
    onSubmit: handleSubmit,
    ref: ref,
    onReset: handleReset,
    action: _action
  }, rest));
});
Form.displayName = 'Form';

var Icon = function Icon(_ref) {
  var _ref$height = _ref.height,
      height = _ref$height === void 0 ? '16px' : _ref$height,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? '16px' : _ref$width;
  return /*#__PURE__*/React__default['default'].createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    version: "1.1",
    x: "0px",
    y: "0px",
    viewBox: "0 0 100 100",
    enableBackground: "new 0 0 100 100",
    xmlSpace: "preserve",
    style: {
      height: height,
      width: width
    }
  }, /*#__PURE__*/React__default['default'].createElement("path", {
    d: "M50,5c24.813,0,45,20.187,45,45c0,24.813-20.187,45-45,45C25.187,95,5,74.813,5,50C5,25.187,25.187,5,50,5   M50,0C22.386,0,0,22.386,0,50c0,27.614,22.386,50,50,50c27.614,0,50-22.386,50-50C100,22.386,77.614,0,50,0L50,0z"
  }), /*#__PURE__*/React__default['default'].createElement("circle", {
    cx: "50",
    cy: "29.546",
    r: "4.934"
  }), /*#__PURE__*/React__default['default'].createElement("rect", {
    x: "46.5",
    y: "41.21",
    width: "7",
    height: "34.179"
  }));
};

var LocalizedAttachment = {
  nl: "https://insurances.bukazu.com/nl/Voorwaarden%20Annuleringsverzekering.pdf",
  de: "https://insurances.bukazu.com/de/Bedingungen%20Reiseruecktrittsversicherung.pdf",
  en: "https://insurances.bukazu.com/en/Terms%20to%20Cancellation%20Insurance.pdf"
};

var CancelInsuranceText = function CancelInsuranceText() {
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement("h2", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "cancel_insurance"
  })), /*#__PURE__*/React__default['default'].createElement("hr", null), /*#__PURE__*/React__default['default'].createElement("p", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "cancel_insurance_desc"
  })), /*#__PURE__*/React__default['default'].createElement("h3", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "cancel_insurance_normal_long"
  })), /*#__PURE__*/React__default['default'].createElement("p", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "cancel_insurance_normal_desc"
  })), /*#__PURE__*/React__default['default'].createElement("h3", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "cancel_insurance_all_risk_long"
  })), /*#__PURE__*/React__default['default'].createElement("p", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "cancel_insurance_all_risk_desc"
  })), /*#__PURE__*/React__default['default'].createElement("h3", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "terms_and_costs"
  })), /*#__PURE__*/React__default['default'].createElement("h4", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "costs_normal_cancel_insurance"
  })), /*#__PURE__*/React__default['default'].createElement("p", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "666_costs"
  })), /*#__PURE__*/React__default['default'].createElement("h4", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "costs_allrisk_cancel_insurance"
  })), /*#__PURE__*/React__default['default'].createElement("p", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "847_costs"
  })), /*#__PURE__*/React__default['default'].createElement("p", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "more_information"
  })), /*#__PURE__*/React__default['default'].createElement("a", {
    href: LocalizedAttachment[window.__localeId__],
    target: "_blank",
    rel: "noopener noreferrer"
  }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "show_terms"
  })), /*#__PURE__*/React__default['default'].createElement("h3", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "terms"
  })), /*#__PURE__*/React__default['default'].createElement("ul", null, /*#__PURE__*/React__default['default'].createElement("li", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "9persons_9addresses"
  })), /*#__PURE__*/React__default['default'].createElement("li", null, /*#__PURE__*/React__default['default'].createElement("strong", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "or"
  }))), /*#__PURE__*/React__default['default'].createElement("li", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "9persons_4addresses"
  }))), /*#__PURE__*/React__default['default'].createElement("hr", null), /*#__PURE__*/React__default['default'].createElement("h2", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "poliscosts"
  })), /*#__PURE__*/React__default['default'].createElement("p", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "poliscosts_are"
  })), /*#__PURE__*/React__default['default'].createElement("p", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "youwillrecieve"
  })));
};

var _excluded$2 = ["label", "description", "count"];
function NumberSelect(_ref) {
  var label = _ref.label,
      description = _ref.description,
      count = _ref.count,
      props = _objectWithoutProperties$a(_ref, _excluded$2);

  var numbers = createPeronsArray(count);
  return /*#__PURE__*/React__default['default'].createElement(Field, {
    name: props.name
  }, function (_ref2) {
    var field = _ref2.field,
        meta = _ref2.meta;
        _ref2.form;
    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: "form-row inline",
      id: "bukazu_form_".concat(props.name)
    }, /*#__PURE__*/React__default['default'].createElement("label", {
      htmlFor: props.name
    }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: label
    })), /*#__PURE__*/React__default['default'].createElement("select", _extends$f({}, field, props), numbers.map(function (opt) {
      return /*#__PURE__*/React__default['default'].createElement("option", {
        key: opt,
        value: opt
      }, opt);
    })), description, meta.touched && meta.error && /*#__PURE__*/React__default['default'].createElement("div", {
      className: "error-message"
    }, meta.error));
  });
}
NumberSelect.defaultProps = {
  count: 2
};

function DateField(_ref) {
  var label = _ref.label,
      description = _ref.description;
      _ref.options;
      var name = _ref.name,
      inline = _ref.inline;
  return /*#__PURE__*/React__default['default'].createElement(Field, {
    name: name
  }, function (_ref2) {
    var field = _ref2.field,
        meta = _ref2.meta,
        form = _ref2.form;
    var value = field.value,
        name = field.name;
    var tempval;

    if (value === '' || !value) {
      tempval = null;
    } else {
      tempval = new Date(value);
    }

    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: "form-row ".concat(inline && 'inline'),
      id: "bukazu_form_".concat(name)
    }, /*#__PURE__*/React__default['default'].createElement("label", {
      htmlFor: name
    }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: label
    })), /*#__PURE__*/React__default['default'].createElement(DatePicker, {
      className: "bukazu-date-picker",
      name: name,
      format: "dd-MM-y",
      value: tempval,
      onChange: function onChange(e) {
        field.onChange(dateFns.format(e, 'YYYY-MM-DD'));
        form.setFieldValue(name, dateFns.format(e, 'YYYY-MM-DD'));
      }
    }), /*#__PURE__*/React__default['default'].createElement("span", {
      className: "bu-input-description"
    }, description), meta.touched && meta.error && /*#__PURE__*/React__default['default'].createElement("div", {
      className: "error-message"
    }, meta.error));
  });
}

DateField.defaultValues = {
  inline: true
};

function cancelInsurance(house) {
  if (house.cancel_insurance) {
    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: "form-row inline"
    }, /*#__PURE__*/React__default['default'].createElement("label", {
      htmlFor: "cancel_insurance"
    }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "cancel_insurance"
    })), /*#__PURE__*/React__default['default'].createElement(Field, {
      component: "select",
      name: "cancel_insurance",
      required: true
    }, translatedOption('choose', ''), translatedOption('cancel_insurance_all_risk', 2), translatedOption('cancel_insurance_normal', 1), translatedOption('none', 0)), /*#__PURE__*/React__default['default'].createElement(Modal, {
      buttonText: /*#__PURE__*/React__default['default'].createElement(Icon, null)
    }, /*#__PURE__*/React__default['default'].createElement(CancelInsuranceText, null)));
  }
}

var Insurances = function Insurances(_ref) {
  var house = _ref.house,
      values = _ref.values;

  if (house.cancel_insurance) {
    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: "form-section",
      id: "insurances"
    }, /*#__PURE__*/React__default['default'].createElement("h2", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "insurances"
    })), cancelInsurance(house), values.cancel_insurance && values.cancel_insurance !== '0' && /*#__PURE__*/React__default['default'].createElement(DateField, {
      label: "extra_fields.date_of_birth",
      name: "extra_fields.date_of_birth",
      required: "true",
      description: /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
        id: "insurance_company_needs_date_of_birth"
      })
    }));
  } else {
    return /*#__PURE__*/React__default['default'].createElement("div", null);
  }
};
Insurances.propTypes = {
  house: PropTypes.object.isRequired
};

var _templateObject$2;

function DiscountCode(_ref) {
  var house = _ref.house;
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(Mutation, {
    mutation: CHECK_DISCOUNT_CODE
  }, function (checkCode, _ref2) {
    var loading = _ref2.loading,
        error = _ref2.error,
        data = _ref2.data;

    if (data) {
      console.log(data);
    }

    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: "form-row inline"
    }, /*#__PURE__*/React__default['default'].createElement("label", {
      htmlFor: "discount_code"
    }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "discount_code"
    })), /*#__PURE__*/React__default['default'].createElement(Field, {
      name: "discount_code"
    }, function (_ref3) {
      var field = _ref3.field,
          form = _ref3.form;
      return /*#__PURE__*/React__default['default'].createElement("input", _extends$f({}, field, {
        onChange: function onChange(e) {
          // console.log({ code: house.code, e: e.target.value });
          checkCode({
            variables: {
              code: e.target.value,
              house_code: house.code
            }
          });
          form.setFieldValue(field.name, e.target.value);
        }
      }));
    }), loading && /*#__PURE__*/React__default['default'].createElement("div", {
      className: "bu_discount_code"
    }, "Loading..."), error && /*#__PURE__*/React__default['default'].createElement("div", {
      className: "bu_discount_code"
    }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "no_discount_code_found"
    })), data && /*#__PURE__*/React__default['default'].createElement("div", {
      className: "bu_discount_code"
    }, /*#__PURE__*/React__default['default'].createElement("div", null, data.checkDiscountCode.name), data.checkDiscountCode.use_price ? /*#__PURE__*/React__default['default'].createElement("div", null, "\u20AC ", data.checkDiscountCode.price) : /*#__PURE__*/React__default['default'].createElement("div", null, data.checkDiscountCode.percentage, "%")));
  }));
}

var CHECK_DISCOUNT_CODE = gql(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteral(["\n  mutation CheckDiscountCode($code: String!, $house_code: String!) {\n    checkDiscountCode(code: $code, house_code: $house_code) {\n      name\n      use_price\n      percentage\n      price\n    }\n  }\n"])));

var Discount = function Discount(_ref) {
  var _options$bookingForm;

  var errors = _ref.errors,
      house = _ref.house,
      options = _ref.options,
      values = _ref.values;

  if (house.discounts && house.discounts !== '0' || (_options$bookingForm = options.bookingForm) !== null && _options$bookingForm !== void 0 && _options$bookingForm.showDiscountCode) {
    var _options$bookingForm2;

    var discounts = house.discounts ? house.discounts.split(',') : [];
    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: "form-section"
    }, house.discounts && house.discounts !== '0' && /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement("div", {
      className: "form-row inline"
    }, /*#__PURE__*/React__default['default'].createElement("label", {
      htmlFor: "discount"
    }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "discount"
    })), /*#__PURE__*/React__default['default'].createElement(Field, {
      component: "select",
      name: "discount"
    }, discounts.map(function (discount) {
      return /*#__PURE__*/React__default['default'].createElement("option", {
        value: discount,
        key: discount
      }, discount, "%");
    }))), /*#__PURE__*/React__default['default'].createElement("div", {
      className: "form-row inline"
    }, /*#__PURE__*/React__default['default'].createElement("label", {
      htmlFor: "discount_reason"
    }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "discount_reason"
    })), /*#__PURE__*/React__default['default'].createElement(Field, {
      name: "discount_reason"
    }), errors.discount_reason && /*#__PURE__*/React__default['default'].createElement("div", {
      className: "error-message"
    }, errors.discount_reason)), /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("i", {
      style: {
        fontSize: 14
      }
    }, house.discounts_info))), ((_options$bookingForm2 = options.bookingForm) === null || _options$bookingForm2 === void 0 ? void 0 : _options$bookingForm2.showDiscountCode) && /*#__PURE__*/React__default['default'].createElement(DiscountCode, {
      errors: errors,
      house: house,
      values: values
    }));
  } else {
    return null;
  }
};

Discount.propTypes = {
  house: PropTypes.object.isRequired,
  errors: PropTypes.object.isRequired
};

var _excluded$1 = ["field", "id", "label"];

var InputFeedback = function InputFeedback(_ref) {
  var error = _ref.error;
  return error ? /*#__PURE__*/React__default['default'].createElement("div", {
    className: "input-feedback"
  }, error) : null;
};

InputFeedback.propTypes = {
  error: PropTypes.object
}; // Radio input

var RadioButton = function RadioButton(_ref2) {
  var _ref2$field = _ref2.field,
      name = _ref2$field.name,
      value = _ref2$field.value,
      onChange = _ref2$field.onChange,
      onBlur = _ref2$field.onBlur,
      id = _ref2.id,
      label = _ref2.label,
      props = _objectWithoutProperties$a(_ref2, _excluded$1);

  return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("input", _extends$f({
    name: name,
    id: id,
    type: "radio",
    value: id // could be something else for output?
    ,
    checked: id === value,
    onChange: onChange,
    onBlur: onBlur,
    className: "radio-button"
  }, props)), /*#__PURE__*/React__default['default'].createElement("label", {
    htmlFor: id
  }, label));
};
RadioButton.propTypes = {
  field: PropTypes.object,
  id: PropTypes.string,
  label: PropTypes.object
}; // Radio group

var RadioButtonGroup = function RadioButtonGroup(_ref3) {
  var error = _ref3.error,
      touched = _ref3.touched,
      label = _ref3.label,
      className = _ref3.className,
      children = _ref3.children;
  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: className
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: "legend"
  }, label), children, touched && /*#__PURE__*/React__default['default'].createElement(InputFeedback, {
    error: error
  }));
};
RadioButtonGroup.propTypes = {
  error: PropTypes.object,
  touched: PropTypes.object,
  className: PropTypes.string,
  label: PropTypes.string,
  children: PropTypes.node.isRequired
};

var _excluded = ["house"];
function BookingOrOption(_ref) {
  var house = _ref.house;
      _objectWithoutProperties$a(_ref, _excluded);

  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, house.allow_option && /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(RadioButtonGroup, {
    id: "is_option",
    className: "booking_option"
  }, /*#__PURE__*/React__default['default'].createElement(Field, {
    component: RadioButton,
    name: "is_option",
    id: "true",
    disabled: !house.allow_option,
    label: /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "option"
    })
  }), /*#__PURE__*/React__default['default'].createElement(Field, {
    component: RadioButton,
    name: "is_option",
    id: "false",
    label: /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "booking"
    })
  }))));
}

function Description(_ref) {
  var description = _ref.description;
  var val = /*#__PURE__*/React__default['default'].createElement("span", null);

  if (description) {
    val = /*#__PURE__*/React__default['default'].createElement("span", {
      style: {
        padding: "0 0 0 8px"
      }
    }, /*#__PURE__*/React__default['default'].createElement(Modal, {
      buttonText: /*#__PURE__*/React__default['default'].createElement(Icon, null)
    }, /*#__PURE__*/React__default['default'].createElement("p", null, description)));
  }

  return val;
}

function CostRow(_ref) {
  var name = _ref.name,
      amount = _ref.amount,
      description = _ref.description,
      method_name = _ref.method_name,
      formatName = _ref.formatName,
      forceMethod = _ref.forceMethod;
  return /*#__PURE__*/React__default['default'].createElement("tr", null, /*#__PURE__*/React__default['default'].createElement("td", null, formatName ? /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: name
  }) : name, description && /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, ' ', /*#__PURE__*/React__default['default'].createElement(Description, {
    description: description
  }))), /*#__PURE__*/React__default['default'].createElement("td", {
    className: "price"
  }, amount && amount > 0 ? /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, "\u20AC", ' ', /*#__PURE__*/React__default['default'].createElement(FormattedNumber, {
    value: amount,
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }), forceMethod && /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, ' ', method_name)) : /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, method_name)));
}

CostRow.defaultValues = {
  formatName: false,
  forceMethod: false
};

function InsurancesAndRequired(_ref) {
  var prices = _ref.prices;
  var _prices$total_costs = prices.total_costs,
      insurances = _prices$total_costs.insurances,
      required_costs = _prices$total_costs.required_costs;
  var not_on_site = required_costs.not_on_site;
  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: "costs-section"
  }, /*#__PURE__*/React__default['default'].createElement("table", null, /*#__PURE__*/React__default['default'].createElement("tbody", null, insurances.cancel_insurance && /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, Object.keys(insurances).map(function (key) {
    return /*#__PURE__*/React__default['default'].createElement(CostRow, {
      name: key,
      key: key,
      formatName: true,
      amount: insurances[key]
    });
  })), prices.required_house_costs.map(function (cost) {
    if (!cost.on_site && cost.gl !== '0120') {
      if (cost.method === 'none') {
        return /*#__PURE__*/React__default['default'].createElement(CostRow, _extends$f({
          key: cost.id
        }, cost));
      } else {
        if (cost.amount === 0) {
          return null;
        }

        return /*#__PURE__*/React__default['default'].createElement(CostRow, {
          key: cost.id,
          name: cost.name,
          amount: not_on_site === null || not_on_site === void 0 ? void 0 : not_on_site.find(function (x) {
            return x.id == cost.id;
          }).amount
        });
      }
    }
  }))));
}

var _templateObject$1;
var BOOKING_PRICE_TOTAL_QUERY = gql(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["\n  query BookingPriceTotalQuery(\n    $id: ID!\n    $house_id: String!\n    $starts_at: Date!\n    $ends_at: Date!\n    $persons: Int\n    $costs: Json\n    $cancel_insurance: Int\n    $discount: Int\n    $discount_code: String\n  ) {\n    PortalSite(id: $id) {\n      houses(house_code: $house_id) {\n        id\n        name\n        booking_price(\n          starts_at: $starts_at\n          ends_at: $ends_at\n          persons: $persons\n          costs: $costs\n          cancel_insurance: $cancel_insurance\n          discount: $discount\n          discount_code: $discount_code\n        )\n      }\n    }\n  }\n"])));

function RentAndDiscount(_ref) {
  var prices = _ref.prices;
  var rent_price = prices.rent_price,
      discount = prices.discount,
      discounted_price = prices.discounted_price;
  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: "costs-section"
  }, /*#__PURE__*/React__default['default'].createElement("table", null, /*#__PURE__*/React__default['default'].createElement("tbody", null, /*#__PURE__*/React__default['default'].createElement(CostRow, {
    name: "rent_price",
    formatName: true,
    amount: rent_price
  }), discount > 0 ? /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(CostRow, {
    name: "discount",
    formatName: true,
    amount: discount
  }), /*#__PURE__*/React__default['default'].createElement(CostRow, {
    name: "price_after_discount",
    formatName: true,
    amount: discounted_price
  })) : null)));
}

function OptionalNotOnSite(_ref) {
  var prices = _ref.prices;
  var optional_costs = prices.total_costs.optional_costs;
  var not_on_site = optional_costs.not_on_site;
  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: "costs-section"
  }, /*#__PURE__*/React__default['default'].createElement("table", null, /*#__PURE__*/React__default['default'].createElement("tbody", null, prices.optional_house_costs.map(function (cost) {
    if (!cost.on_site && cost.gl !== '0120') {
      if (cost.method === 'none') {
        return /*#__PURE__*/React__default['default'].createElement(CostRow, _extends$f({
          key: cost.id
        }, cost));
      } else if (cost.method === 'on_site') {
        if (not_on_site.find(function (x) {
          return x.id == cost.id;
        }).nr_of_items > 0) {
          return /*#__PURE__*/React__default['default'].createElement(CostRow, _extends$f({
            key: cost.id
          }, cost, {
            amount: cost.amount,
            forceMethod: true
          }));
        }
      } else {
        var amount = not_on_site.find(function (x) {
          return x.id == cost.id;
        }).amount;

        if (amount > 0) {
          return /*#__PURE__*/React__default['default'].createElement(CostRow, _extends$f({
            key: cost.id
          }, cost, {
            amount: amount
          }));
        }
      }
    }
  }))));
}

function OptionalOnSite(_ref) {
  var prices = _ref.prices;
  var optional_costs = prices.total_costs.optional_costs;
  var on_site = optional_costs.on_site;
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, prices.optional_house_costs.map(function (cost) {
    if (cost.on_site && cost.gl !== '0120') {
      if (cost.method === 'none') {
        return /*#__PURE__*/React__default['default'].createElement(CostRow, _extends$f({
          key: cost.id
        }, cost));
      } else if (cost.method === 'on_site') {
        if ((on_site === null || on_site === void 0 ? void 0 : on_site.find(function (x) {
          return x.id == cost.id;
        }).nr_of_items) > 0) {
          return /*#__PURE__*/React__default['default'].createElement(CostRow, _extends$f({
            key: cost.id
          }, cost, {
            amount: cost.amount,
            forceMethod: true
          }));
        }
      } else {
        var amount = on_site === null || on_site === void 0 ? void 0 : on_site.find(function (x) {
          return x.id == cost.id;
        }).amount;

        if (amount > 0) {
          return /*#__PURE__*/React__default['default'].createElement(CostRow, _extends$f({
            key: cost.id
          }, cost, {
            amount: amount
          }));
        }
      }
    }
  }));
}

function OnSite(_ref) {
  var prices = _ref.prices;
  var required_costs = prices.total_costs.required_costs;
  var on_site = required_costs.on_site;
  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: "costs-section"
  }, /*#__PURE__*/React__default['default'].createElement("strong", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "costs_on_site"
  })), /*#__PURE__*/React__default['default'].createElement("table", null, /*#__PURE__*/React__default['default'].createElement("tbody", null, prices.required_house_costs.map(function (cost) {
    if (cost.on_site && cost.gl !== '0120') {
      if (cost.method === 'none') {
        return /*#__PURE__*/React__default['default'].createElement(CostRow, _extends$f({
          key: cost.id
        }, cost));
      } else {
        var amount = on_site.find(function (x) {
          return x.id == cost.id;
        }).amount;
        return /*#__PURE__*/React__default['default'].createElement(CostRow, _extends$f({
          key: cost.id
        }, cost, {
          amount: amount
        }));
      }
    }
  }), /*#__PURE__*/React__default['default'].createElement(OptionalOnSite, {
    prices: prices
  }))));
}

function CostSection(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: "costs-section"
  }, /*#__PURE__*/React__default['default'].createElement("table", null, /*#__PURE__*/React__default['default'].createElement("tbody", null, children)));
}

function Totals(_ref) {
  var prices = _ref.prices;
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(CostSection, null, /*#__PURE__*/React__default['default'].createElement("tr", null, /*#__PURE__*/React__default['default'].createElement("th", {
    style: {
      textAlign: 'left',
      testTransform: 'capitalize'
    }
  }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "total"
  })), /*#__PURE__*/React__default['default'].createElement("th", {
    className: "price",
    style: {
      fontSize: 18
    }
  }, "\u20AC", ' ', /*#__PURE__*/React__default['default'].createElement(FormattedNumber, {
    value: prices.total_costs.sub_total,
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  })))), /*#__PURE__*/React__default['default'].createElement(CostSection, null, /*#__PURE__*/React__default['default'].createElement(Deposit, {
    cost_array: prices.required_house_costs,
    price_array: prices.total_costs.required_costs.on_site
  }), /*#__PURE__*/React__default['default'].createElement(Deposit, {
    cost_array: prices.required_house_costs,
    price_array: prices.total_costs.required_costs.not_on_site
  }), /*#__PURE__*/React__default['default'].createElement(Deposit, {
    cost_array: prices.optional_house_costs,
    price_array: prices.total_costs.optional_costs.on_site
  }), /*#__PURE__*/React__default['default'].createElement(Deposit, {
    cost_array: prices.optional_house_costs,
    price_array: prices.total_costs.optional_costs.not_on_site
  })), /*#__PURE__*/React__default['default'].createElement(CostSection, null, /*#__PURE__*/React__default['default'].createElement("tr", null, /*#__PURE__*/React__default['default'].createElement("th", {
    style: {
      textAlign: 'left',
      testTransform: 'capitalize'
    }
  }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "total"
  })), /*#__PURE__*/React__default['default'].createElement("td", {
    className: "price"
  }, "\u20AC", ' ', /*#__PURE__*/React__default['default'].createElement(FormattedNumber, {
    value: prices.total_costs.total_price,
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  })))));
}

function Deposit(_ref2) {
  var cost_array = _ref2.cost_array,
      price_array = _ref2.price_array;
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, cost_array.map(function (cost) {
    var price = price_array.find(function (x) {
      return x.id == cost.id;
    });

    if (cost.gl === '0120' && (price === null || price === void 0 ? void 0 : price.amount) > 0) {
      return /*#__PURE__*/React__default['default'].createElement(CostRow, _extends$f({
        key: cost.id
      }, cost, {
        amount: price.amount
      }));
    }
  }));
}

function CostSummary(_ref) {
  var values = _ref.values,
      house = _ref.house;
  var babies = Number(values.babies) - Number(house.babies_extra);

  if (babies < 0) {
    babies = 0;
  }

  var persons = Number(values.children) + Number(values.adults) + babies;

  var _useQuery = useQuery(BOOKING_PRICE_TOTAL_QUERY, {
    variables: {
      id: values.portalCode,
      persons: persons,
      house_id: values.objectCode,
      starts_at: JSON.stringify(values.arrivalDate.date),
      ends_at: JSON.stringify(values.departureDate.date),
      costs: JSON.stringify(values.costs),
      discount: Number(values.discount),
      discount_code: values.discount_code,
      cancel_insurance: Number(values.cancel_insurance)
    },
    fetchPolicy: 'network-only'
  }),
      loading = _useQuery.loading,
      error = _useQuery.error,
      data = _useQuery.data;

  if (loading) {
    return 'Loading...';
  }

  if (error) {
    return /*#__PURE__*/React__default['default'].createElement("div", null, JSON.stringify(error));
  }

  var prices = data.PortalSite.houses[0].booking_price;
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(RentAndDiscount, {
    prices: prices
  }), /*#__PURE__*/React__default['default'].createElement(InsurancesAndRequired, {
    prices: prices
  }), /*#__PURE__*/React__default['default'].createElement(OptionalNotOnSite, {
    prices: prices
  }), /*#__PURE__*/React__default['default'].createElement(OnSite, {
    prices: prices
  }), /*#__PURE__*/React__default['default'].createElement(Totals, {
    prices: prices
  }));
}

var Object$1 = function Object(_ref) {
  var house = _ref.house,
      values = _ref.values;
  var arrivalDate = values.arrivalDate,
      departureDate = values.departureDate;
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement("h2", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "booking_details"
  })), /*#__PURE__*/React__default['default'].createElement("div", {
    className: "house-details"
  }, /*#__PURE__*/React__default['default'].createElement("div", null, house.name), /*#__PURE__*/React__default['default'].createElement("img", {
    src: house.image_url,
    alt: ""
  }), /*#__PURE__*/React__default['default'].createElement("table", null, /*#__PURE__*/React__default['default'].createElement("tbody", null, /*#__PURE__*/React__default['default'].createElement("tr", null, /*#__PURE__*/React__default['default'].createElement("th", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "".concat(house.house_type, ".arrival")
  })), /*#__PURE__*/React__default['default'].createElement("td", {
    className: "price"
  }, format_1(arrivalDate.date, 'dddd DD MMMM YYYY')), /*#__PURE__*/React__default['default'].createElement("td", null, arrivalDate.arrival_time)), /*#__PURE__*/React__default['default'].createElement("tr", null, /*#__PURE__*/React__default['default'].createElement("th", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "".concat(house.house_type, ".departure")
  })), /*#__PURE__*/React__default['default'].createElement("td", {
    className: "price"
  }, format_1(departureDate.date, 'dddd DD MMMM YYYY')), /*#__PURE__*/React__default['default'].createElement("td", null, departureDate.departure_time))))));
};
Object$1.propTypes = {
  house: PropTypes.object.isRequired,
  values: PropTypes.object.isRequired
};

function Summary(_ref) {
  var values = _ref.values,
      house = _ref.house,
      locale = _ref.locale;
  console.log({
    values: values
  });
  return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(Object$1, {
    house: house,
    values: values
  }), /*#__PURE__*/React__default['default'].createElement(BookingOrOption, {
    house: house
  }), /*#__PURE__*/React__default['default'].createElement(CostSummary, {
    values: values,
    house: house,
    locale: locale
  }));
}

var DefaultBookingFields = [{
  id: 'first_name',
  label: 'Voornaam',
  type: 'text',
  options: ['text'],
  required: true,
  placeholder: ''
}, {
  id: 'preposition',
  label: 'Tussenvoegsel',
  type: 'text',
  options: ['text'],
  required: false,
  placeholder: ''
}, {
  id: 'last_name',
  label: 'Achternaam',
  type: 'text',
  options: ['text'],
  required: true,
  mandatory: true,
  placeholder: ''
}, {
  id: 'address',
  label: 'Adres',
  type: 'text',
  options: ['text'],
  required: true,
  placeholder: ''
}, {
  id: 'house_number',
  label: 'Huisnummer',
  type: 'text',
  options: ['text'],
  required: true,
  placeholder: ''
}, {
  id: 'zipcode',
  label: 'Postcode',
  type: 'text',
  options: ['text'],
  required: true,
  placeholder: ''
}, {
  id: 'city',
  label: 'Plaats',
  type: 'text',
  options: ['text'],
  required: true,
  placeholder: ''
}, {
  id: 'country',
  label: 'Land',
  type: 'select',
  options: ['select'],
  required: true,
  mandatory: true,
  placeholder: ''
}, {
  id: 'email',
  label: 'E-mail',
  type: 'email',
  options: ['email'],
  required: true,
  mandatory: true,
  placeholder: ''
}, {
  id: 'phone_mobile',
  label: 'Mobiel telefoonnummer',
  type: 'text',
  options: ['text'],
  required: false,
  placeholder: ''
}, {
  id: 'phone',
  label: 'Telefoonnummer',
  type: 'text',
  options: ['text'],
  required: true,
  placeholder: ''
}, {
  id: 'comment',
  label: 'Opmerking',
  type: 'textarea',
  options: ['textarea'],
  required: false,
  rows: 10
}];

var SuccessMessage = function SuccessMessage() {
  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: "success-message"
  }, /*#__PURE__*/React__default['default'].createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    version: "1.1",
    x: "0px",
    y: "0px",
    viewBox: "0 0 100 125",
    style: {
      enableBackground: 'new 0 0 100 100;',
      fill: 'green',
      height: '150px'
    },
    xmlSpace: "preserve"
  }, /*#__PURE__*/React__default['default'].createElement("path", {
    d: "M50,5C25.2,5,5,25.1,5,50c0,24.8,20.2,45,45,45s45-20.2,45-45C95,25.1,74.8,5,50,5z M72.7,38.2L44.2,66.7  c-0.4,0.4-0.9,0.6-1.4,0.6s-1-0.2-1.4-0.6l-14-14c-0.8-0.8-0.8-2,0-2.8c0.8-0.8,2-0.8,2.8,0l12.6,12.6l27.1-27.1  c0.8-0.8,2-0.8,2.8,0C73.5,36.1,73.5,37.4,72.7,38.2z"
  })), /*#__PURE__*/React__default['default'].createElement("h3", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "thank_you_for_your_request"
  })), /*#__PURE__*/React__default['default'].createElement("p", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "we_sent_confirmation_check_email"
  })));
};

var nl$2 = [
	{
		name: "Afghanistan",
		alpha2: "af"
	},
	{
		name: "Åland",
		alpha2: "ax"
	},
	{
		name: "Albanië",
		alpha2: "al"
	},
	{
		name: "Algerije",
		alpha2: "dz"
	},
	{
		name: "Amerikaanse Maagdeneilanden",
		alpha2: "vi"
	},
	{
		name: "Amerikaans-Samoa",
		alpha2: "as"
	},
	{
		name: "Andorra",
		alpha2: "ad"
	},
	{
		name: "Angola",
		alpha2: "ao"
	},
	{
		name: "Anguilla",
		alpha2: "ai"
	},
	{
		name: "Antarctica",
		alpha2: "aq"
	},
	{
		name: "Antigua en Barbuda",
		alpha2: "ag"
	},
	{
		name: "Argentinië",
		alpha2: "ar"
	},
	{
		name: "Armenië",
		alpha2: "am"
	},
	{
		name: "Aruba",
		alpha2: "aw"
	},
	{
		name: "Australië",
		alpha2: "au"
	},
	{
		name: "Azerbeidzjan",
		alpha2: "az"
	},
	{
		name: "Bahama's",
		alpha2: "bs"
	},
	{
		name: "Bahrein",
		alpha2: "bh"
	},
	{
		name: "Bangladesh",
		alpha2: "bd"
	},
	{
		name: "Barbados",
		alpha2: "bb"
	},
	{
		name: "België",
		alpha2: "be"
	},
	{
		name: "Belize",
		alpha2: "bz"
	},
	{
		name: "Benin",
		alpha2: "bj"
	},
	{
		name: "Bermuda",
		alpha2: "bm"
	},
	{
		name: "Bhutan",
		alpha2: "bt"
	},
	{
		name: "Bolivia",
		alpha2: "bo"
	},
	{
		name: "Caribisch Nederland",
		alpha2: "bq"
	},
	{
		name: "Bosnië en Herzegovina",
		alpha2: "ba"
	},
	{
		name: "Botswana",
		alpha2: "bw"
	},
	{
		name: "Bouveteiland",
		alpha2: "bv"
	},
	{
		name: "Brazilië",
		alpha2: "br"
	},
	{
		name: "Britse Maagdeneilanden",
		alpha2: "vg"
	},
	{
		name: "Brits Indische Oceaanterritorium",
		alpha2: "io"
	},
	{
		name: "Brunei",
		alpha2: "bn"
	},
	{
		name: "Bulgarije",
		alpha2: "bg"
	},
	{
		name: "Burkina Faso",
		alpha2: "bf"
	},
	{
		name: "Burundi",
		alpha2: "bi"
	},
	{
		name: "Cambodja",
		alpha2: "kh"
	},
	{
		name: "Canada",
		alpha2: "ca"
	},
	{
		name: "Centraal-Afrikaanse Republiek",
		alpha2: "cf"
	},
	{
		name: "Chili",
		alpha2: "cl"
	},
	{
		name: "China",
		alpha2: "cn"
	},
	{
		name: "Christmaseiland",
		alpha2: "cx"
	},
	{
		name: "Cocoseilanden",
		alpha2: "cc"
	},
	{
		name: "Colombia",
		alpha2: "co"
	},
	{
		name: "Comoren",
		alpha2: "km"
	},
	{
		name: "Congo-Brazzaville",
		alpha2: "cg"
	},
	{
		name: "Congo-Kinshasa",
		alpha2: "cd"
	},
	{
		name: "Cookeilanden",
		alpha2: "ck"
	},
	{
		name: "Costa Rica",
		alpha2: "cr"
	},
	{
		name: "Cuba",
		alpha2: "cu"
	},
	{
		name: "Curaçao",
		alpha2: "cw"
	},
	{
		name: "Cyprus",
		alpha2: "cy"
	},
	{
		name: "Denemarken",
		alpha2: "dk"
	},
	{
		name: "Djibouti",
		alpha2: "dj"
	},
	{
		name: "Dominica",
		alpha2: "dm"
	},
	{
		name: "Dominicaanse Republiek",
		alpha2: "do"
	},
	{
		name: "Duitsland",
		alpha2: "de"
	},
	{
		name: "Ecuador",
		alpha2: "ec"
	},
	{
		name: "Egypte",
		alpha2: "eg"
	},
	{
		name: "El Salvador",
		alpha2: "sv"
	},
	{
		name: "Equatoriaal-Guinea",
		alpha2: "gq"
	},
	{
		name: "Eritrea",
		alpha2: "er"
	},
	{
		name: "Estland",
		alpha2: "ee"
	},
	{
		name: "Ethiopië",
		alpha2: "et"
	},
	{
		name: "Faeröer",
		alpha2: "fo"
	},
	{
		name: "Falklandeilanden",
		alpha2: "fk"
	},
	{
		name: "Fiji",
		alpha2: "fj"
	},
	{
		name: "Filipijnen",
		alpha2: "ph"
	},
	{
		name: "Finland",
		alpha2: "fi"
	},
	{
		name: "Frankrijk",
		alpha2: "fr"
	},
	{
		name: "Franse Zuidelijke en Antarctische Gebieden",
		alpha2: "tf"
	},
	{
		name: "Frans-Guyana",
		alpha2: "gf"
	},
	{
		name: "Frans-Polynesië",
		alpha2: "pf"
	},
	{
		name: "Gabon",
		alpha2: "ga"
	},
	{
		name: "Gambia",
		alpha2: "gm"
	},
	{
		name: "Georgië",
		alpha2: "ge"
	},
	{
		name: "Ghana",
		alpha2: "gh"
	},
	{
		name: "Gibraltar",
		alpha2: "gi"
	},
	{
		name: "Grenada",
		alpha2: "gd"
	},
	{
		name: "Griekenland",
		alpha2: "gr"
	},
	{
		name: "Groenland",
		alpha2: "gl"
	},
	{
		name: "Guadeloupe",
		alpha2: "gp"
	},
	{
		name: "Guam",
		alpha2: "gu"
	},
	{
		name: "Guatemala",
		alpha2: "gt"
	},
	{
		name: "Guernsey",
		alpha2: "gg"
	},
	{
		name: "Guinee",
		alpha2: "gn"
	},
	{
		name: "Guinee-Bissau",
		alpha2: "gw"
	},
	{
		name: "Guyana",
		alpha2: "gy"
	},
	{
		name: "Haïti",
		alpha2: "ht"
	},
	{
		name: "Heard en McDonaldeilanden",
		alpha2: "hm"
	},
	{
		name: "Honduras",
		alpha2: "hn"
	},
	{
		name: "Hongarije",
		alpha2: "hu"
	},
	{
		name: "Hongkong",
		alpha2: "hk"
	},
	{
		name: "Ierland",
		alpha2: "ie"
	},
	{
		name: "IJsland",
		alpha2: "is"
	},
	{
		name: "India",
		alpha2: "in"
	},
	{
		name: "Indonesië",
		alpha2: "id"
	},
	{
		name: "Irak",
		alpha2: "iq"
	},
	{
		name: "Iran",
		alpha2: "ir"
	},
	{
		name: "Israël",
		alpha2: "il"
	},
	{
		name: "Italië",
		alpha2: "it"
	},
	{
		name: "Ivoorkust",
		alpha2: "ci"
	},
	{
		name: "Jamaica",
		alpha2: "jm"
	},
	{
		name: "Japan",
		alpha2: "jp"
	},
	{
		name: "Jemen",
		alpha2: "ye"
	},
	{
		name: "Jersey",
		alpha2: "je"
	},
	{
		name: "Jordanië",
		alpha2: "jo"
	},
	{
		name: "Kaaimaneilanden",
		alpha2: "ky"
	},
	{
		name: "Kaapverdië",
		alpha2: "cv"
	},
	{
		name: "Kameroen",
		alpha2: "cm"
	},
	{
		name: "Kazachstan",
		alpha2: "kz"
	},
	{
		name: "Kenia",
		alpha2: "ke"
	},
	{
		name: "Kirgizië",
		alpha2: "kg"
	},
	{
		name: "Kiribati",
		alpha2: "ki"
	},
	{
		name: "Kleine afgelegen eilanden van de Verenigde Staten",
		alpha2: "um"
	},
	{
		name: "Koeweit",
		alpha2: "kw"
	},
	{
		name: "Kroatië",
		alpha2: "hr"
	},
	{
		name: "Laos",
		alpha2: "la"
	},
	{
		name: "Lesotho",
		alpha2: "ls"
	},
	{
		name: "Letland",
		alpha2: "lv"
	},
	{
		name: "Libanon",
		alpha2: "lb"
	},
	{
		name: "Liberia",
		alpha2: "lr"
	},
	{
		name: "Libië",
		alpha2: "ly"
	},
	{
		name: "Liechtenstein",
		alpha2: "li"
	},
	{
		name: "Litouwen",
		alpha2: "lt"
	},
	{
		name: "Luxemburg",
		alpha2: "lu"
	},
	{
		name: "Macau",
		alpha2: "mo"
	},
	{
		name: "Macedonië",
		alpha2: "mk"
	},
	{
		name: "Madagaskar",
		alpha2: "mg"
	},
	{
		name: "Malawi",
		alpha2: "mw"
	},
	{
		name: "Maldiven",
		alpha2: "mv"
	},
	{
		name: "Maleisië",
		alpha2: "my"
	},
	{
		name: "Mali",
		alpha2: "ml"
	},
	{
		name: "Malta",
		alpha2: "mt"
	},
	{
		name: "Man",
		alpha2: "im"
	},
	{
		name: "Marokko",
		alpha2: "ma"
	},
	{
		name: "Marshalleilanden",
		alpha2: "mh"
	},
	{
		name: "Martinique",
		alpha2: "mq"
	},
	{
		name: "Mauritanië",
		alpha2: "mr"
	},
	{
		name: "Mauritius",
		alpha2: "mu"
	},
	{
		name: "Mayotte",
		alpha2: "yt"
	},
	{
		name: "Mexico",
		alpha2: "mx"
	},
	{
		name: "Micronesia",
		alpha2: "fm"
	},
	{
		name: "Moldavië",
		alpha2: "md"
	},
	{
		name: "Monaco",
		alpha2: "mc"
	},
	{
		name: "Mongolië",
		alpha2: "mn"
	},
	{
		name: "Montenegro",
		alpha2: "me"
	},
	{
		name: "Montserrat",
		alpha2: "ms"
	},
	{
		name: "Mozambique",
		alpha2: "mz"
	},
	{
		name: "Myanmar",
		alpha2: "mm"
	},
	{
		name: "Namibië",
		alpha2: "na"
	},
	{
		name: "Nauru",
		alpha2: "nr"
	},
	{
		name: "Nederland",
		alpha2: "nl"
	},
	{
		name: "Nepal",
		alpha2: "np"
	},
	{
		name: "Nicaragua",
		alpha2: "ni"
	},
	{
		name: "Nieuw-Caledonië",
		alpha2: "nc"
	},
	{
		name: "Nieuw-Zeeland",
		alpha2: "nz"
	},
	{
		name: "Niger",
		alpha2: "ne"
	},
	{
		name: "Nigeria",
		alpha2: "ng"
	},
	{
		name: "Niue",
		alpha2: "nu"
	},
	{
		name: "Noordelijke Marianen",
		alpha2: "mp"
	},
	{
		name: "Noord-Korea",
		alpha2: "kp"
	},
	{
		name: "Noorwegen",
		alpha2: "no"
	},
	{
		name: "Norfolk",
		alpha2: "nf"
	},
	{
		name: "Oeganda",
		alpha2: "ug"
	},
	{
		name: "Oekraïne",
		alpha2: "ua"
	},
	{
		name: "Oezbekistan",
		alpha2: "uz"
	},
	{
		name: "Oman",
		alpha2: "om"
	},
	{
		name: "Oostenrijk",
		alpha2: "at"
	},
	{
		name: "Oost-Timor",
		alpha2: "tl"
	},
	{
		name: "Pakistan",
		alpha2: "pk"
	},
	{
		name: "Palau",
		alpha2: "pw"
	},
	{
		name: "Palestina",
		alpha2: "ps"
	},
	{
		name: "Panama",
		alpha2: "pa"
	},
	{
		name: "Papoea-Nieuw-Guinea",
		alpha2: "pg"
	},
	{
		name: "Paraguay",
		alpha2: "py"
	},
	{
		name: "Peru",
		alpha2: "pe"
	},
	{
		name: "Pitcairneilanden",
		alpha2: "pn"
	},
	{
		name: "Polen",
		alpha2: "pl"
	},
	{
		name: "Portugal",
		alpha2: "pt"
	},
	{
		name: "Puerto Rico",
		alpha2: "pr"
	},
	{
		name: "Qatar",
		alpha2: "qa"
	},
	{
		name: "Réunion",
		alpha2: "re"
	},
	{
		name: "Roemenië",
		alpha2: "ro"
	},
	{
		name: "Rusland",
		alpha2: "ru"
	},
	{
		name: "Rwanda",
		alpha2: "rw"
	},
	{
		name: "Saint-Barthélemy",
		alpha2: "bl"
	},
	{
		name: "Saint Kitts en Nevis",
		alpha2: "kn"
	},
	{
		name: "Saint Lucia",
		alpha2: "lc"
	},
	{
		name: "Saint-Pierre en Miquelon",
		alpha2: "pm"
	},
	{
		name: "Saint Vincent en de Grenadines",
		alpha2: "vc"
	},
	{
		name: "Salomonseilanden",
		alpha2: "sb"
	},
	{
		name: "Samoa",
		alpha2: "ws"
	},
	{
		name: "San Marino",
		alpha2: "sm"
	},
	{
		name: "Saoedi-Arabië",
		alpha2: "sa"
	},
	{
		name: "Sao Tomé en Principe",
		alpha2: "st"
	},
	{
		name: "Senegal",
		alpha2: "sn"
	},
	{
		name: "Servië",
		alpha2: "rs"
	},
	{
		name: "Seychellen",
		alpha2: "sc"
	},
	{
		name: "Sierra Leone",
		alpha2: "sl"
	},
	{
		name: "Singapore",
		alpha2: "sg"
	},
	{
		name: "Sint-Helena, Ascension en Tristan da Cunha",
		alpha2: "sh"
	},
	{
		name: "Sint-Maarten",
		alpha2: "mf"
	},
	{
		name: "Sint Maarten",
		alpha2: "sx"
	},
	{
		name: "Slovenië",
		alpha2: "si"
	},
	{
		name: "Slowakije",
		alpha2: "sk"
	},
	{
		name: "Soedan",
		alpha2: "sd"
	},
	{
		name: "Somalië",
		alpha2: "so"
	},
	{
		name: "Spanje",
		alpha2: "es"
	},
	{
		name: "Spitsbergen en Jan Mayen",
		alpha2: "sj"
	},
	{
		name: "Sri Lanka",
		alpha2: "lk"
	},
	{
		name: "Suriname",
		alpha2: "sr"
	},
	{
		name: "Swaziland",
		alpha2: "sz"
	},
	{
		name: "Syrië",
		alpha2: "sy"
	},
	{
		name: "Tadzjikistan",
		alpha2: "tj"
	},
	{
		name: "Taiwan",
		alpha2: "tw"
	},
	{
		name: "Tanzania",
		alpha2: "tz"
	},
	{
		name: "Thailand",
		alpha2: "th"
	},
	{
		name: "Togo",
		alpha2: "tg"
	},
	{
		name: "Tokelau",
		alpha2: "tk"
	},
	{
		name: "Tonga",
		alpha2: "to"
	},
	{
		name: "Trinidad en Tobago",
		alpha2: "tt"
	},
	{
		name: "Tsjaad",
		alpha2: "td"
	},
	{
		name: "Tsjechië",
		alpha2: "cz"
	},
	{
		name: "Tunesië",
		alpha2: "tn"
	},
	{
		name: "Turkije",
		alpha2: "tr"
	},
	{
		name: "Turkmenistan",
		alpha2: "tm"
	},
	{
		name: "Turks- en Caicoseilanden",
		alpha2: "tc"
	},
	{
		name: "Tuvalu",
		alpha2: "tv"
	},
	{
		name: "Uruguay",
		alpha2: "uy"
	},
	{
		name: "Vanuatu",
		alpha2: "vu"
	},
	{
		name: "Vaticaanstad",
		alpha2: "va"
	},
	{
		name: "Venezuela",
		alpha2: "ve"
	},
	{
		name: "Verenigde Arabische Emiraten",
		alpha2: "ae"
	},
	{
		name: "Verenigde Staten",
		alpha2: "us"
	},
	{
		name: "Verenigd Koninkrijk",
		alpha2: "gb"
	},
	{
		name: "Vietnam",
		alpha2: "vn"
	},
	{
		name: "Wallis en Futuna",
		alpha2: "wf"
	},
	{
		name: "Westelijke Sahara",
		alpha2: "eh"
	},
	{
		name: "Wit-Rusland",
		alpha2: "by"
	},
	{
		name: "Zambia",
		alpha2: "zm"
	},
	{
		name: "Zimbabwe",
		alpha2: "zw"
	},
	{
		name: "Zuid-Afrika",
		alpha2: "za"
	},
	{
		name: "Zuid-Georgia en de Zuidelijke Sandwicheilanden",
		alpha2: "gs"
	},
	{
		name: "Zuid-Korea",
		alpha2: "kr"
	},
	{
		name: "Zuid-Soedan",
		alpha2: "ss"
	},
	{
		name: "Zweden",
		alpha2: "se"
	},
	{
		name: "Zwitserland",
		alpha2: "ch"
	}
];

var en$2 = [
	{
		name: "Afghanistan",
		alpha2: "af"
	},
	{
		name: "Åland Islands",
		alpha2: "ax"
	},
	{
		name: "Albania",
		alpha2: "al"
	},
	{
		name: "Algeria",
		alpha2: "dz"
	},
	{
		name: "American Samoa",
		alpha2: "as"
	},
	{
		name: "Andorra",
		alpha2: "ad"
	},
	{
		name: "Angola",
		alpha2: "ao"
	},
	{
		name: "Anguilla",
		alpha2: "ai"
	},
	{
		name: "Antarctica",
		alpha2: "aq"
	},
	{
		name: "Antigua and Barbuda",
		alpha2: "ag"
	},
	{
		name: "Argentina",
		alpha2: "ar"
	},
	{
		name: "Armenia",
		alpha2: "am"
	},
	{
		name: "Aruba",
		alpha2: "aw"
	},
	{
		name: "Australia",
		alpha2: "au"
	},
	{
		name: "Austria",
		alpha2: "at"
	},
	{
		name: "Azerbaijan",
		alpha2: "az"
	},
	{
		name: "Bahamas",
		alpha2: "bs"
	},
	{
		name: "Bahrain",
		alpha2: "bh"
	},
	{
		name: "Bangladesh",
		alpha2: "bd"
	},
	{
		name: "Barbados",
		alpha2: "bb"
	},
	{
		name: "Belarus",
		alpha2: "by"
	},
	{
		name: "Belgium",
		alpha2: "be"
	},
	{
		name: "Belize",
		alpha2: "bz"
	},
	{
		name: "Benin",
		alpha2: "bj"
	},
	{
		name: "Bermuda",
		alpha2: "bm"
	},
	{
		name: "Bhutan",
		alpha2: "bt"
	},
	{
		name: "Bolivia (Plurinational State of)",
		alpha2: "bo"
	},
	{
		name: "Bonaire, Sint Eustatius and Saba",
		alpha2: "bq"
	},
	{
		name: "Bosnia and Herzegovina",
		alpha2: "ba"
	},
	{
		name: "Botswana",
		alpha2: "bw"
	},
	{
		name: "Bouvet Island",
		alpha2: "bv"
	},
	{
		name: "Brazil",
		alpha2: "br"
	},
	{
		name: "British Indian Ocean Territory",
		alpha2: "io"
	},
	{
		name: "Brunei Darussalam",
		alpha2: "bn"
	},
	{
		name: "Bulgaria",
		alpha2: "bg"
	},
	{
		name: "Burkina Faso",
		alpha2: "bf"
	},
	{
		name: "Burundi",
		alpha2: "bi"
	},
	{
		name: "Cabo Verde",
		alpha2: "cv"
	},
	{
		name: "Cambodia",
		alpha2: "kh"
	},
	{
		name: "Cameroon",
		alpha2: "cm"
	},
	{
		name: "Canada",
		alpha2: "ca"
	},
	{
		name: "Cayman Islands",
		alpha2: "ky"
	},
	{
		name: "Central African Republic",
		alpha2: "cf"
	},
	{
		name: "Chad",
		alpha2: "td"
	},
	{
		name: "Chile",
		alpha2: "cl"
	},
	{
		name: "China",
		alpha2: "cn"
	},
	{
		name: "Christmas Island",
		alpha2: "cx"
	},
	{
		name: "Cocos (Keeling) Islands",
		alpha2: "cc"
	},
	{
		name: "Colombia",
		alpha2: "co"
	},
	{
		name: "Comoros",
		alpha2: "km"
	},
	{
		name: "Congo",
		alpha2: "cg"
	},
	{
		name: "Congo (Democratic Republic of the)",
		alpha2: "cd"
	},
	{
		name: "Cook Islands",
		alpha2: "ck"
	},
	{
		name: "Costa Rica",
		alpha2: "cr"
	},
	{
		name: "Côte d'Ivoire",
		alpha2: "ci"
	},
	{
		name: "Croatia",
		alpha2: "hr"
	},
	{
		name: "Cuba",
		alpha2: "cu"
	},
	{
		name: "Curaçao",
		alpha2: "cw"
	},
	{
		name: "Cyprus",
		alpha2: "cy"
	},
	{
		name: "Czechia",
		alpha2: "cz"
	},
	{
		name: "Denmark",
		alpha2: "dk"
	},
	{
		name: "Djibouti",
		alpha2: "dj"
	},
	{
		name: "Dominica",
		alpha2: "dm"
	},
	{
		name: "Dominican Republic",
		alpha2: "do"
	},
	{
		name: "Ecuador",
		alpha2: "ec"
	},
	{
		name: "Egypt",
		alpha2: "eg"
	},
	{
		name: "El Salvador",
		alpha2: "sv"
	},
	{
		name: "Equatorial Guinea",
		alpha2: "gq"
	},
	{
		name: "Eritrea",
		alpha2: "er"
	},
	{
		name: "Estonia",
		alpha2: "ee"
	},
	{
		name: "Eswatini",
		alpha2: "sz"
	},
	{
		name: "Ethiopia",
		alpha2: "et"
	},
	{
		name: "Falkland Islands (Malvinas)",
		alpha2: "fk"
	},
	{
		name: "Faroe Islands",
		alpha2: "fo"
	},
	{
		name: "Fiji",
		alpha2: "fj"
	},
	{
		name: "Finland",
		alpha2: "fi"
	},
	{
		name: "France",
		alpha2: "fr"
	},
	{
		name: "French Guiana",
		alpha2: "gf"
	},
	{
		name: "French Polynesia",
		alpha2: "pf"
	},
	{
		name: "French Southern Territories",
		alpha2: "tf"
	},
	{
		name: "Gabon",
		alpha2: "ga"
	},
	{
		name: "Gambia",
		alpha2: "gm"
	},
	{
		name: "Georgia",
		alpha2: "ge"
	},
	{
		name: "Germany",
		alpha2: "de"
	},
	{
		name: "Ghana",
		alpha2: "gh"
	},
	{
		name: "Gibraltar",
		alpha2: "gi"
	},
	{
		name: "Greece",
		alpha2: "gr"
	},
	{
		name: "Greenland",
		alpha2: "gl"
	},
	{
		name: "Grenada",
		alpha2: "gd"
	},
	{
		name: "Guadeloupe",
		alpha2: "gp"
	},
	{
		name: "Guam",
		alpha2: "gu"
	},
	{
		name: "Guatemala",
		alpha2: "gt"
	},
	{
		name: "Guernsey",
		alpha2: "gg"
	},
	{
		name: "Guinea",
		alpha2: "gn"
	},
	{
		name: "Guinea-Bissau",
		alpha2: "gw"
	},
	{
		name: "Guyana",
		alpha2: "gy"
	},
	{
		name: "Haiti",
		alpha2: "ht"
	},
	{
		name: "Heard Island and McDonald Islands",
		alpha2: "hm"
	},
	{
		name: "Holy See",
		alpha2: "va"
	},
	{
		name: "Honduras",
		alpha2: "hn"
	},
	{
		name: "Hong Kong",
		alpha2: "hk"
	},
	{
		name: "Hungary",
		alpha2: "hu"
	},
	{
		name: "Iceland",
		alpha2: "is"
	},
	{
		name: "India",
		alpha2: "in"
	},
	{
		name: "Indonesia",
		alpha2: "id"
	},
	{
		name: "Iran (Islamic Republic of)",
		alpha2: "ir"
	},
	{
		name: "Iraq",
		alpha2: "iq"
	},
	{
		name: "Ireland",
		alpha2: "ie"
	},
	{
		name: "Isle of Man",
		alpha2: "im"
	},
	{
		name: "Israel",
		alpha2: "il"
	},
	{
		name: "Italy",
		alpha2: "it"
	},
	{
		name: "Jamaica",
		alpha2: "jm"
	},
	{
		name: "Japan",
		alpha2: "jp"
	},
	{
		name: "Jersey",
		alpha2: "je"
	},
	{
		name: "Jordan",
		alpha2: "jo"
	},
	{
		name: "Kazakhstan",
		alpha2: "kz"
	},
	{
		name: "Kenya",
		alpha2: "ke"
	},
	{
		name: "Kiribati",
		alpha2: "ki"
	},
	{
		name: "Korea (Democratic People's Republic of)",
		alpha2: "kp"
	},
	{
		name: "Korea (Republic of)",
		alpha2: "kr"
	},
	{
		name: "Kuwait",
		alpha2: "kw"
	},
	{
		name: "Kyrgyzstan",
		alpha2: "kg"
	},
	{
		name: "Lao People's Democratic Republic",
		alpha2: "la"
	},
	{
		name: "Latvia",
		alpha2: "lv"
	},
	{
		name: "Lebanon",
		alpha2: "lb"
	},
	{
		name: "Lesotho",
		alpha2: "ls"
	},
	{
		name: "Liberia",
		alpha2: "lr"
	},
	{
		name: "Libya",
		alpha2: "ly"
	},
	{
		name: "Liechtenstein",
		alpha2: "li"
	},
	{
		name: "Lithuania",
		alpha2: "lt"
	},
	{
		name: "Luxembourg",
		alpha2: "lu"
	},
	{
		name: "Macao",
		alpha2: "mo"
	},
	{
		name: "Macedonia (the former Yugoslav Republic of)",
		alpha2: "mk"
	},
	{
		name: "Madagascar",
		alpha2: "mg"
	},
	{
		name: "Malawi",
		alpha2: "mw"
	},
	{
		name: "Malaysia",
		alpha2: "my"
	},
	{
		name: "Maldives",
		alpha2: "mv"
	},
	{
		name: "Mali",
		alpha2: "ml"
	},
	{
		name: "Malta",
		alpha2: "mt"
	},
	{
		name: "Marshall Islands",
		alpha2: "mh"
	},
	{
		name: "Martinique",
		alpha2: "mq"
	},
	{
		name: "Mauritania",
		alpha2: "mr"
	},
	{
		name: "Mauritius",
		alpha2: "mu"
	},
	{
		name: "Mayotte",
		alpha2: "yt"
	},
	{
		name: "Mexico",
		alpha2: "mx"
	},
	{
		name: "Micronesia (Federated States of)",
		alpha2: "fm"
	},
	{
		name: "Moldova (Republic of)",
		alpha2: "md"
	},
	{
		name: "Monaco",
		alpha2: "mc"
	},
	{
		name: "Mongolia",
		alpha2: "mn"
	},
	{
		name: "Montenegro",
		alpha2: "me"
	},
	{
		name: "Montserrat",
		alpha2: "ms"
	},
	{
		name: "Morocco",
		alpha2: "ma"
	},
	{
		name: "Mozambique",
		alpha2: "mz"
	},
	{
		name: "Myanmar",
		alpha2: "mm"
	},
	{
		name: "Namibia",
		alpha2: "na"
	},
	{
		name: "Nauru",
		alpha2: "nr"
	},
	{
		name: "Nepal",
		alpha2: "np"
	},
	{
		name: "Netherlands",
		alpha2: "nl"
	},
	{
		name: "New Caledonia",
		alpha2: "nc"
	},
	{
		name: "New Zealand",
		alpha2: "nz"
	},
	{
		name: "Nicaragua",
		alpha2: "ni"
	},
	{
		name: "Niger",
		alpha2: "ne"
	},
	{
		name: "Nigeria",
		alpha2: "ng"
	},
	{
		name: "Niue",
		alpha2: "nu"
	},
	{
		name: "Norfolk Island",
		alpha2: "nf"
	},
	{
		name: "Northern Mariana Islands",
		alpha2: "mp"
	},
	{
		name: "Norway",
		alpha2: "no"
	},
	{
		name: "Oman",
		alpha2: "om"
	},
	{
		name: "Pakistan",
		alpha2: "pk"
	},
	{
		name: "Palau",
		alpha2: "pw"
	},
	{
		name: "Palestine, State of",
		alpha2: "ps"
	},
	{
		name: "Panama",
		alpha2: "pa"
	},
	{
		name: "Papua New Guinea",
		alpha2: "pg"
	},
	{
		name: "Paraguay",
		alpha2: "py"
	},
	{
		name: "Peru",
		alpha2: "pe"
	},
	{
		name: "Philippines",
		alpha2: "ph"
	},
	{
		name: "Pitcairn",
		alpha2: "pn"
	},
	{
		name: "Poland",
		alpha2: "pl"
	},
	{
		name: "Portugal",
		alpha2: "pt"
	},
	{
		name: "Puerto Rico",
		alpha2: "pr"
	},
	{
		name: "Qatar",
		alpha2: "qa"
	},
	{
		name: "Réunion",
		alpha2: "re"
	},
	{
		name: "Romania",
		alpha2: "ro"
	},
	{
		name: "Russian Federation",
		alpha2: "ru"
	},
	{
		name: "Rwanda",
		alpha2: "rw"
	},
	{
		name: "Saint Barthélemy",
		alpha2: "bl"
	},
	{
		name: "Saint Helena, Ascension and Tristan da Cunha",
		alpha2: "sh"
	},
	{
		name: "Saint Kitts and Nevis",
		alpha2: "kn"
	},
	{
		name: "Saint Lucia",
		alpha2: "lc"
	},
	{
		name: "Saint Martin (French part)",
		alpha2: "mf"
	},
	{
		name: "Saint Pierre and Miquelon",
		alpha2: "pm"
	},
	{
		name: "Saint Vincent and the Grenadines",
		alpha2: "vc"
	},
	{
		name: "Samoa",
		alpha2: "ws"
	},
	{
		name: "San Marino",
		alpha2: "sm"
	},
	{
		name: "Sao Tome and Principe",
		alpha2: "st"
	},
	{
		name: "Saudi Arabia",
		alpha2: "sa"
	},
	{
		name: "Senegal",
		alpha2: "sn"
	},
	{
		name: "Serbia",
		alpha2: "rs"
	},
	{
		name: "Seychelles",
		alpha2: "sc"
	},
	{
		name: "Sierra Leone",
		alpha2: "sl"
	},
	{
		name: "Singapore",
		alpha2: "sg"
	},
	{
		name: "Sint Maarten (Dutch part)",
		alpha2: "sx"
	},
	{
		name: "Slovakia",
		alpha2: "sk"
	},
	{
		name: "Slovenia",
		alpha2: "si"
	},
	{
		name: "Solomon Islands",
		alpha2: "sb"
	},
	{
		name: "Somalia",
		alpha2: "so"
	},
	{
		name: "South Africa",
		alpha2: "za"
	},
	{
		name: "South Georgia and the South Sandwich Islands",
		alpha2: "gs"
	},
	{
		name: "South Sudan",
		alpha2: "ss"
	},
	{
		name: "Spain",
		alpha2: "es"
	},
	{
		name: "Sri Lanka",
		alpha2: "lk"
	},
	{
		name: "Sudan",
		alpha2: "sd"
	},
	{
		name: "Suriname",
		alpha2: "sr"
	},
	{
		name: "Svalbard and Jan Mayen",
		alpha2: "sj"
	},
	{
		name: "Sweden",
		alpha2: "se"
	},
	{
		name: "Switzerland",
		alpha2: "ch"
	},
	{
		name: "Syrian Arab Republic",
		alpha2: "sy"
	},
	{
		name: "Taiwan, Province of China",
		alpha2: "tw"
	},
	{
		name: "Tajikistan",
		alpha2: "tj"
	},
	{
		name: "Tanzania, United Republic of",
		alpha2: "tz"
	},
	{
		name: "Thailand",
		alpha2: "th"
	},
	{
		name: "Timor-Leste",
		alpha2: "tl"
	},
	{
		name: "Togo",
		alpha2: "tg"
	},
	{
		name: "Tokelau",
		alpha2: "tk"
	},
	{
		name: "Tonga",
		alpha2: "to"
	},
	{
		name: "Trinidad and Tobago",
		alpha2: "tt"
	},
	{
		name: "Tunisia",
		alpha2: "tn"
	},
	{
		name: "Turkey",
		alpha2: "tr"
	},
	{
		name: "Turkmenistan",
		alpha2: "tm"
	},
	{
		name: "Turks and Caicos Islands",
		alpha2: "tc"
	},
	{
		name: "Tuvalu",
		alpha2: "tv"
	},
	{
		name: "Uganda",
		alpha2: "ug"
	},
	{
		name: "Ukraine",
		alpha2: "ua"
	},
	{
		name: "United Arab Emirates",
		alpha2: "ae"
	},
	{
		name: "United Kingdom of Great Britain and Northern Ireland",
		alpha2: "gb"
	},
	{
		name: "United States of America",
		alpha2: "us"
	},
	{
		name: "United States Minor Outlying Islands",
		alpha2: "um"
	},
	{
		name: "Uruguay",
		alpha2: "uy"
	},
	{
		name: "Uzbekistan",
		alpha2: "uz"
	},
	{
		name: "Vanuatu",
		alpha2: "vu"
	},
	{
		name: "Venezuela (Bolivarian Republic of)",
		alpha2: "ve"
	},
	{
		name: "Viet Nam",
		alpha2: "vn"
	},
	{
		name: "Virgin Islands (British)",
		alpha2: "vg"
	},
	{
		name: "Virgin Islands (U.S.)",
		alpha2: "vi"
	},
	{
		name: "Wallis and Futuna",
		alpha2: "wf"
	},
	{
		name: "Western Sahara",
		alpha2: "eh"
	},
	{
		name: "Yemen",
		alpha2: "ye"
	},
	{
		name: "Zambia",
		alpha2: "zm"
	},
	{
		name: "Zimbabwe",
		alpha2: "zw"
	}
];

var de$2 = [
	{
		name: "Afghanistan",
		alpha2: "af"
	},
	{
		name: "Ägypten",
		alpha2: "eg"
	},
	{
		name: "Åland",
		alpha2: "ax"
	},
	{
		name: "Albanien",
		alpha2: "al"
	},
	{
		name: "Algerien",
		alpha2: "dz"
	},
	{
		name: "Amerikanisch-Samoa",
		alpha2: "as"
	},
	{
		name: "Amerikanische Jungferninseln",
		alpha2: "vi"
	},
	{
		name: "Andorra",
		alpha2: "ad"
	},
	{
		name: "Angola",
		alpha2: "ao"
	},
	{
		name: "Anguilla",
		alpha2: "ai"
	},
	{
		name: "Antarktika (Sonderstatus durch Antarktis-Vertrag)",
		alpha2: "aq"
	},
	{
		name: "Antigua und Barbuda",
		alpha2: "ag"
	},
	{
		name: "Äquatorialguinea",
		alpha2: "gq"
	},
	{
		name: "Argentinien",
		alpha2: "ar"
	},
	{
		name: "Armenien",
		alpha2: "am"
	},
	{
		name: "Aruba",
		alpha2: "aw"
	},
	{
		name: "Aserbaidschan",
		alpha2: "az"
	},
	{
		name: "Äthiopien",
		alpha2: "et"
	},
	{
		name: "Australien",
		alpha2: "au"
	},
	{
		name: "Bahamas",
		alpha2: "bs"
	},
	{
		name: "Bahrain",
		alpha2: "bh"
	},
	{
		name: "Bangladesch",
		alpha2: "bd"
	},
	{
		name: "Barbados",
		alpha2: "bb"
	},
	{
		name: "Belarus (Weißrussland)",
		alpha2: "by"
	},
	{
		name: "Belgien",
		alpha2: "be"
	},
	{
		name: "Belize",
		alpha2: "bz"
	},
	{
		name: "Benin",
		alpha2: "bj"
	},
	{
		name: "Bermuda",
		alpha2: "bm"
	},
	{
		name: "Bhutan",
		alpha2: "bt"
	},
	{
		name: "Bolivien",
		alpha2: "bo"
	},
	{
		name: "Bonaire, Sint Eustatius und Saba (Niederlande)",
		alpha2: "bq"
	},
	{
		name: "Bosnien und Herzegowina",
		alpha2: "ba"
	},
	{
		name: "Botswana",
		alpha2: "bw"
	},
	{
		name: "Bouvetinsel",
		alpha2: "bv"
	},
	{
		name: "Brasilien",
		alpha2: "br"
	},
	{
		name: "Britische Jungferninseln",
		alpha2: "vg"
	},
	{
		name: "Britisches Territorium im Indischen Ozean",
		alpha2: "io"
	},
	{
		name: "Brunei Darussalam",
		alpha2: "bn"
	},
	{
		name: "Bulgarien",
		alpha2: "bg"
	},
	{
		name: "Burkina Faso",
		alpha2: "bf"
	},
	{
		name: "Burundi",
		alpha2: "bi"
	},
	{
		name: "Chile",
		alpha2: "cl"
	},
	{
		name: "China, Volksrepublik",
		alpha2: "cn"
	},
	{
		name: "Cookinseln",
		alpha2: "ck"
	},
	{
		name: "Costa Rica",
		alpha2: "cr"
	},
	{
		name: "Côte d’Ivoire (Elfenbeinküste)",
		alpha2: "ci"
	},
	{
		name: "Curaçao",
		alpha2: "cw"
	},
	{
		name: "Dänemark",
		alpha2: "dk"
	},
	{
		name: "Deutschland",
		alpha2: "de"
	},
	{
		name: "Dominica",
		alpha2: "dm"
	},
	{
		name: "Dominikanische Republik",
		alpha2: "do"
	},
	{
		name: "Dschibuti",
		alpha2: "dj"
	},
	{
		name: "Ecuador",
		alpha2: "ec"
	},
	{
		name: "El Salvador",
		alpha2: "sv"
	},
	{
		name: "Eritrea",
		alpha2: "er"
	},
	{
		name: "Estland",
		alpha2: "ee"
	},
	{
		name: "Falklandinseln",
		alpha2: "fk"
	},
	{
		name: "Färöer",
		alpha2: "fo"
	},
	{
		name: "Fidschi",
		alpha2: "fj"
	},
	{
		name: "Finnland",
		alpha2: "fi"
	},
	{
		name: "Frankreich",
		alpha2: "fr"
	},
	{
		name: "Französisch-Guayana",
		alpha2: "gf"
	},
	{
		name: "Französisch-Polynesien",
		alpha2: "pf"
	},
	{
		name: "Französische Süd- und Antarktisgebiete",
		alpha2: "tf"
	},
	{
		name: "Gabun",
		alpha2: "ga"
	},
	{
		name: "Gambia",
		alpha2: "gm"
	},
	{
		name: "Georgien",
		alpha2: "ge"
	},
	{
		name: "Ghana",
		alpha2: "gh"
	},
	{
		name: "Gibraltar",
		alpha2: "gi"
	},
	{
		name: "Grenada",
		alpha2: "gd"
	},
	{
		name: "Griechenland",
		alpha2: "gr"
	},
	{
		name: "Grönland",
		alpha2: "gl"
	},
	{
		name: "Guadeloupe",
		alpha2: "gp"
	},
	{
		name: "Guam",
		alpha2: "gu"
	},
	{
		name: "Guatemala",
		alpha2: "gt"
	},
	{
		name: "Guernsey (Kanalinsel)",
		alpha2: "gg"
	},
	{
		name: "Guinea",
		alpha2: "gn"
	},
	{
		name: "Guinea-Bissau",
		alpha2: "gw"
	},
	{
		name: "Guyana",
		alpha2: "gy"
	},
	{
		name: "Haiti",
		alpha2: "ht"
	},
	{
		name: "Heard und McDonaldinseln",
		alpha2: "hm"
	},
	{
		name: "Honduras",
		alpha2: "hn"
	},
	{
		name: "Hongkong",
		alpha2: "hk"
	},
	{
		name: "Indien",
		alpha2: "in"
	},
	{
		name: "Indonesien",
		alpha2: "id"
	},
	{
		name: "Insel Man",
		alpha2: "im"
	},
	{
		name: "Irak",
		alpha2: "iq"
	},
	{
		name: "Iran, Islamische Republik",
		alpha2: "ir"
	},
	{
		name: "Irland",
		alpha2: "ie"
	},
	{
		name: "Island",
		alpha2: "is"
	},
	{
		name: "Israel",
		alpha2: "il"
	},
	{
		name: "Italien",
		alpha2: "it"
	},
	{
		name: "Jamaika",
		alpha2: "jm"
	},
	{
		name: "Japan",
		alpha2: "jp"
	},
	{
		name: "Jemen",
		alpha2: "ye"
	},
	{
		name: "Jersey (Kanalinsel)",
		alpha2: "je"
	},
	{
		name: "Jordanien",
		alpha2: "jo"
	},
	{
		name: "Kaimaninseln",
		alpha2: "ky"
	},
	{
		name: "Kambodscha",
		alpha2: "kh"
	},
	{
		name: "Kamerun",
		alpha2: "cm"
	},
	{
		name: "Kanada",
		alpha2: "ca"
	},
	{
		name: "Kap Verde",
		alpha2: "cv"
	},
	{
		name: "Kasachstan",
		alpha2: "kz"
	},
	{
		name: "Katar",
		alpha2: "qa"
	},
	{
		name: "Kenia",
		alpha2: "ke"
	},
	{
		name: "Kirgisistan",
		alpha2: "kg"
	},
	{
		name: "Kiribati",
		alpha2: "ki"
	},
	{
		name: "Kokosinseln",
		alpha2: "cc"
	},
	{
		name: "Kolumbien",
		alpha2: "co"
	},
	{
		name: "Komoren",
		alpha2: "km"
	},
	{
		name: "Kongo, Demokratische Republik (ehem. Zaire)",
		alpha2: "cd"
	},
	{
		name: "Kongo, Republik (ehem. K.-Brazzaville)",
		alpha2: "cg"
	},
	{
		name: "Korea, Demokratische Volksrepublik (Nordkorea)",
		alpha2: "kp"
	},
	{
		name: "Korea, Republik (Südkorea)",
		alpha2: "kr"
	},
	{
		name: "Kroatien",
		alpha2: "hr"
	},
	{
		name: "Kuba",
		alpha2: "cu"
	},
	{
		name: "Kuwait",
		alpha2: "kw"
	},
	{
		name: "Laos, Demokratische Volksrepublik",
		alpha2: "la"
	},
	{
		name: "Lesotho",
		alpha2: "ls"
	},
	{
		name: "Lettland",
		alpha2: "lv"
	},
	{
		name: "Libanon",
		alpha2: "lb"
	},
	{
		name: "Liberia",
		alpha2: "lr"
	},
	{
		name: "Libyen",
		alpha2: "ly"
	},
	{
		name: "Liechtenstein",
		alpha2: "li"
	},
	{
		name: "Litauen",
		alpha2: "lt"
	},
	{
		name: "Luxemburg",
		alpha2: "lu"
	},
	{
		name: "Macau",
		alpha2: "mo"
	},
	{
		name: "Madagaskar",
		alpha2: "mg"
	},
	{
		name: "Malawi",
		alpha2: "mw"
	},
	{
		name: "Malaysia",
		alpha2: "my"
	},
	{
		name: "Malediven",
		alpha2: "mv"
	},
	{
		name: "Mali",
		alpha2: "ml"
	},
	{
		name: "Malta",
		alpha2: "mt"
	},
	{
		name: "Marokko",
		alpha2: "ma"
	},
	{
		name: "Marshallinseln",
		alpha2: "mh"
	},
	{
		name: "Martinique",
		alpha2: "mq"
	},
	{
		name: "Mauretanien",
		alpha2: "mr"
	},
	{
		name: "Mauritius",
		alpha2: "mu"
	},
	{
		name: "Mayotte",
		alpha2: "yt"
	},
	{
		name: "Mazedonien",
		alpha2: "mk"
	},
	{
		name: "Mexiko",
		alpha2: "mx"
	},
	{
		name: "Mikronesien",
		alpha2: "fm"
	},
	{
		name: "Moldawien (Republik Moldau)",
		alpha2: "md"
	},
	{
		name: "Monaco",
		alpha2: "mc"
	},
	{
		name: "Mongolei",
		alpha2: "mn"
	},
	{
		name: "Montenegro",
		alpha2: "me"
	},
	{
		name: "Montserrat",
		alpha2: "ms"
	},
	{
		name: "Mosambik",
		alpha2: "mz"
	},
	{
		name: "Myanmar (Burma)",
		alpha2: "mm"
	},
	{
		name: "Namibia",
		alpha2: "na"
	},
	{
		name: "Nauru",
		alpha2: "nr"
	},
	{
		name: "Nepal",
		alpha2: "np"
	},
	{
		name: "Neukaledonien",
		alpha2: "nc"
	},
	{
		name: "Neuseeland",
		alpha2: "nz"
	},
	{
		name: "Nicaragua",
		alpha2: "ni"
	},
	{
		name: "Niederlande",
		alpha2: "nl"
	},
	{
		name: "Niger",
		alpha2: "ne"
	},
	{
		name: "Nigeria",
		alpha2: "ng"
	},
	{
		name: "Niue",
		alpha2: "nu"
	},
	{
		name: "Nördliche Marianen",
		alpha2: "mp"
	},
	{
		name: "Norfolkinsel",
		alpha2: "nf"
	},
	{
		name: "Norwegen",
		alpha2: "no"
	},
	{
		name: "Oman",
		alpha2: "om"
	},
	{
		name: "Österreich",
		alpha2: "at"
	},
	{
		name: "Osttimor (Timor-Leste)",
		alpha2: "tl"
	},
	{
		name: "Pakistan",
		alpha2: "pk"
	},
	{
		name: "Staat Palästina",
		alpha2: "ps"
	},
	{
		name: "Palau",
		alpha2: "pw"
	},
	{
		name: "Panama",
		alpha2: "pa"
	},
	{
		name: "Papua-Neuguinea",
		alpha2: "pg"
	},
	{
		name: "Paraguay",
		alpha2: "py"
	},
	{
		name: "Peru",
		alpha2: "pe"
	},
	{
		name: "Philippinen",
		alpha2: "ph"
	},
	{
		name: "Pitcairninseln",
		alpha2: "pn"
	},
	{
		name: "Polen",
		alpha2: "pl"
	},
	{
		name: "Portugal",
		alpha2: "pt"
	},
	{
		name: "Puerto Rico",
		alpha2: "pr"
	},
	{
		name: "Réunion",
		alpha2: "re"
	},
	{
		name: "Ruanda",
		alpha2: "rw"
	},
	{
		name: "Rumänien",
		alpha2: "ro"
	},
	{
		name: "Russische Föderation",
		alpha2: "ru"
	},
	{
		name: "Salomonen",
		alpha2: "sb"
	},
	{
		name: "Saint-Barthélemy",
		alpha2: "bl"
	},
	{
		name: "Saint-Martin (franz. Teil)",
		alpha2: "mf"
	},
	{
		name: "Sambia",
		alpha2: "zm"
	},
	{
		name: "Samoa",
		alpha2: "ws"
	},
	{
		name: "San Marino",
		alpha2: "sm"
	},
	{
		name: "São Tomé und Príncipe",
		alpha2: "st"
	},
	{
		name: "Saudi-Arabien",
		alpha2: "sa"
	},
	{
		name: "Schweden",
		alpha2: "se"
	},
	{
		name: "Schweiz (Confoederatio Helvetica)",
		alpha2: "ch"
	},
	{
		name: "Senegal",
		alpha2: "sn"
	},
	{
		name: "Serbien",
		alpha2: "rs"
	},
	{
		name: "Seychellen",
		alpha2: "sc"
	},
	{
		name: "Sierra Leone",
		alpha2: "sl"
	},
	{
		name: "Simbabwe",
		alpha2: "zw"
	},
	{
		name: "Singapur",
		alpha2: "sg"
	},
	{
		name: "Sint Maarten (niederl. Teil)",
		alpha2: "sx"
	},
	{
		name: "Slowakei",
		alpha2: "sk"
	},
	{
		name: "Slowenien",
		alpha2: "si"
	},
	{
		name: "Somalia",
		alpha2: "so"
	},
	{
		name: "Spanien",
		alpha2: "es"
	},
	{
		name: "Sri Lanka",
		alpha2: "lk"
	},
	{
		name: "St. Helena",
		alpha2: "sh"
	},
	{
		name: "St. Kitts und Nevis",
		alpha2: "kn"
	},
	{
		name: "St. Lucia",
		alpha2: "lc"
	},
	{
		name: "Saint-Pierre und Miquelon",
		alpha2: "pm"
	},
	{
		name: "St. Vincent und die Grenadinen",
		alpha2: "vc"
	},
	{
		name: "Südafrika",
		alpha2: "za"
	},
	{
		name: "Sudan",
		alpha2: "sd"
	},
	{
		name: "Südgeorgien und die Südlichen Sandwichinseln",
		alpha2: "gs"
	},
	{
		name: "Südsudan",
		alpha2: "ss"
	},
	{
		name: "Suriname",
		alpha2: "sr"
	},
	{
		name: "Svalbard und Jan Mayen",
		alpha2: "sj"
	},
	{
		name: "Swasiland",
		alpha2: "sz"
	},
	{
		name: "Syrien, Arabische Republik",
		alpha2: "sy"
	},
	{
		name: "Tadschikistan",
		alpha2: "tj"
	},
	{
		name: "Republik China (Taiwan)",
		alpha2: "tw"
	},
	{
		name: "Tansania, Vereinigte Republik",
		alpha2: "tz"
	},
	{
		name: "Thailand",
		alpha2: "th"
	},
	{
		name: "Togo",
		alpha2: "tg"
	},
	{
		name: "Tokelau",
		alpha2: "tk"
	},
	{
		name: "Tonga",
		alpha2: "to"
	},
	{
		name: "Trinidad und Tobago",
		alpha2: "tt"
	},
	{
		name: "Tschad",
		alpha2: "td"
	},
	{
		name: "Tschechien",
		alpha2: "cz"
	},
	{
		name: "Tunesien",
		alpha2: "tn"
	},
	{
		name: "Türkei",
		alpha2: "tr"
	},
	{
		name: "Turkmenistan",
		alpha2: "tm"
	},
	{
		name: "Turks- und Caicosinseln",
		alpha2: "tc"
	},
	{
		name: "Tuvalu",
		alpha2: "tv"
	},
	{
		name: "Uganda",
		alpha2: "ug"
	},
	{
		name: "Ukraine",
		alpha2: "ua"
	},
	{
		name: "Ungarn",
		alpha2: "hu"
	},
	{
		name: "United States Minor Outlying Islands",
		alpha2: "um"
	},
	{
		name: "Uruguay",
		alpha2: "uy"
	},
	{
		name: "Usbekistan",
		alpha2: "uz"
	},
	{
		name: "Vanuatu",
		alpha2: "vu"
	},
	{
		name: "Vatikanstadt",
		alpha2: "va"
	},
	{
		name: "Venezuela",
		alpha2: "ve"
	},
	{
		name: "Vereinigte Arabische Emirate",
		alpha2: "ae"
	},
	{
		name: "Vereinigte Staaten von Amerika",
		alpha2: "us"
	},
	{
		name: "Vereinigtes Königreich Großbritannien und Nordirland",
		alpha2: "gb"
	},
	{
		name: "Vietnam",
		alpha2: "vn"
	},
	{
		name: "Wallis und Futuna",
		alpha2: "wf"
	},
	{
		name: "Weihnachtsinsel",
		alpha2: "cx"
	},
	{
		name: "Westsahara",
		alpha2: "eh"
	},
	{
		name: "Zentralafrikanische Republik",
		alpha2: "cf"
	},
	{
		name: "Zypern",
		alpha2: "cy"
	}
];

var fr$2 = [
	{
		name: "Afghanistan",
		alpha2: "af"
	},
	{
		name: "Afrique du Sud",
		alpha2: "za"
	},
	{
		name: "Îles Åland",
		alpha2: "ax"
	},
	{
		name: "Albanie",
		alpha2: "al"
	},
	{
		name: "Algérie",
		alpha2: "dz"
	},
	{
		name: "Allemagne",
		alpha2: "de"
	},
	{
		name: "Andorre",
		alpha2: "ad"
	},
	{
		name: "Angola",
		alpha2: "ao"
	},
	{
		name: "Anguilla",
		alpha2: "ai"
	},
	{
		name: "Antarctique",
		alpha2: "aq"
	},
	{
		name: "Antigua-et-Barbuda",
		alpha2: "ag"
	},
	{
		name: "Arabie saoudite",
		alpha2: "sa"
	},
	{
		name: "Argentine",
		alpha2: "ar"
	},
	{
		name: "Arménie",
		alpha2: "am"
	},
	{
		name: "Aruba",
		alpha2: "aw"
	},
	{
		name: "Australie",
		alpha2: "au"
	},
	{
		name: "Autriche",
		alpha2: "at"
	},
	{
		name: "Azerbaïdjan",
		alpha2: "az"
	},
	{
		name: "Bahamas",
		alpha2: "bs"
	},
	{
		name: "Bahreïn",
		alpha2: "bh"
	},
	{
		name: "Bangladesh",
		alpha2: "bd"
	},
	{
		name: "Barbade",
		alpha2: "bb"
	},
	{
		name: "Biélorussie",
		alpha2: "by"
	},
	{
		name: "Belgique",
		alpha2: "be"
	},
	{
		name: "Belize",
		alpha2: "bz"
	},
	{
		name: "Bénin",
		alpha2: "bj"
	},
	{
		name: "Bermudes",
		alpha2: "bm"
	},
	{
		name: "Bhoutan",
		alpha2: "bt"
	},
	{
		name: "Bolivie",
		alpha2: "bo"
	},
	{
		name: "Pays-Bas caribéens",
		alpha2: "bq"
	},
	{
		name: "Bosnie-Herzégovine",
		alpha2: "ba"
	},
	{
		name: "Botswana",
		alpha2: "bw"
	},
	{
		name: "Île Bouvet",
		alpha2: "bv"
	},
	{
		name: "Brésil",
		alpha2: "br"
	},
	{
		name: "Brunei",
		alpha2: "bn"
	},
	{
		name: "Bulgarie",
		alpha2: "bg"
	},
	{
		name: "Burkina Faso",
		alpha2: "bf"
	},
	{
		name: "Burundi",
		alpha2: "bi"
	},
	{
		name: "Îles Caïmans",
		alpha2: "ky"
	},
	{
		name: "Cambodge",
		alpha2: "kh"
	},
	{
		name: "Cameroun",
		alpha2: "cm"
	},
	{
		name: "Canada",
		alpha2: "ca"
	},
	{
		name: "Cap-Vert",
		alpha2: "cv"
	},
	{
		name: "République centrafricaine",
		alpha2: "cf"
	},
	{
		name: "Chili",
		alpha2: "cl"
	},
	{
		name: "Chine",
		alpha2: "cn"
	},
	{
		name: "Île Christmas",
		alpha2: "cx"
	},
	{
		name: "Chypre (pays)",
		alpha2: "cy"
	},
	{
		name: "Îles Cocos",
		alpha2: "cc"
	},
	{
		name: "Colombie",
		alpha2: "co"
	},
	{
		name: "Comores (pays)",
		alpha2: "km"
	},
	{
		name: "République du Congo",
		alpha2: "cg"
	},
	{
		name: "République démocratique du Congo",
		alpha2: "cd"
	},
	{
		name: "Îles Cook",
		alpha2: "ck"
	},
	{
		name: "Corée du Sud",
		alpha2: "kr"
	},
	{
		name: "Corée du Nord",
		alpha2: "kp"
	},
	{
		name: "Costa Rica",
		alpha2: "cr"
	},
	{
		name: "Côte d'Ivoire",
		alpha2: "ci"
	},
	{
		name: "Croatie",
		alpha2: "hr"
	},
	{
		name: "Cuba",
		alpha2: "cu"
	},
	{
		name: "Curaçao",
		alpha2: "cw"
	},
	{
		name: "Danemark",
		alpha2: "dk"
	},
	{
		name: "Djibouti",
		alpha2: "dj"
	},
	{
		name: "République dominicaine",
		alpha2: "do"
	},
	{
		name: "Dominique",
		alpha2: "dm"
	},
	{
		name: "Égypte",
		alpha2: "eg"
	},
	{
		name: "Salvador",
		alpha2: "sv"
	},
	{
		name: "Émirats arabes unis",
		alpha2: "ae"
	},
	{
		name: "Équateur (pays)",
		alpha2: "ec"
	},
	{
		name: "Érythrée",
		alpha2: "er"
	},
	{
		name: "Espagne",
		alpha2: "es"
	},
	{
		name: "Estonie",
		alpha2: "ee"
	},
	{
		name: "États-Unis",
		alpha2: "us"
	},
	{
		name: "Éthiopie",
		alpha2: "et"
	},
	{
		name: "Malouines",
		alpha2: "fk"
	},
	{
		name: "Îles Féroé",
		alpha2: "fo"
	},
	{
		name: "Fidji",
		alpha2: "fj"
	},
	{
		name: "Finlande",
		alpha2: "fi"
	},
	{
		name: "France",
		alpha2: "fr"
	},
	{
		name: "Gabon",
		alpha2: "ga"
	},
	{
		name: "Gambie",
		alpha2: "gm"
	},
	{
		name: "Géorgie (pays)",
		alpha2: "ge"
	},
	{
		name: "Géorgie du Sud-et-les îles Sandwich du Sud",
		alpha2: "gs"
	},
	{
		name: "Ghana",
		alpha2: "gh"
	},
	{
		name: "Gibraltar",
		alpha2: "gi"
	},
	{
		name: "Grèce",
		alpha2: "gr"
	},
	{
		name: "Grenade (pays)",
		alpha2: "gd"
	},
	{
		name: "Groenland",
		alpha2: "gl"
	},
	{
		name: "Guadeloupe",
		alpha2: "gp"
	},
	{
		name: "Guam",
		alpha2: "gu"
	},
	{
		name: "Guatemala",
		alpha2: "gt"
	},
	{
		name: "Guernesey",
		alpha2: "gg"
	},
	{
		name: "Guinée",
		alpha2: "gn"
	},
	{
		name: "Guinée-Bissau",
		alpha2: "gw"
	},
	{
		name: "Guinée équatoriale",
		alpha2: "gq"
	},
	{
		name: "Guyana",
		alpha2: "gy"
	},
	{
		name: "Guyane",
		alpha2: "gf"
	},
	{
		name: "Haïti",
		alpha2: "ht"
	},
	{
		name: "Îles Heard-et-MacDonald",
		alpha2: "hm"
	},
	{
		name: "Honduras",
		alpha2: "hn"
	},
	{
		name: "Hong Kong",
		alpha2: "hk"
	},
	{
		name: "Hongrie",
		alpha2: "hu"
	},
	{
		name: "Île de Man",
		alpha2: "im"
	},
	{
		name: "Îles mineures éloignées des États-Unis",
		alpha2: "um"
	},
	{
		name: "Îles Vierges britanniques",
		alpha2: "vg"
	},
	{
		name: "Îles Vierges des États-Unis",
		alpha2: "vi"
	},
	{
		name: "Inde",
		alpha2: "in"
	},
	{
		name: "Indonésie",
		alpha2: "id"
	},
	{
		name: "Iran",
		alpha2: "ir"
	},
	{
		name: "Irak",
		alpha2: "iq"
	},
	{
		name: "Irlande (pays)",
		alpha2: "ie"
	},
	{
		name: "Islande",
		alpha2: "is"
	},
	{
		name: "Israël",
		alpha2: "il"
	},
	{
		name: "Italie",
		alpha2: "it"
	},
	{
		name: "Jamaïque",
		alpha2: "jm"
	},
	{
		name: "Japon",
		alpha2: "jp"
	},
	{
		name: "Jersey",
		alpha2: "je"
	},
	{
		name: "Jordanie",
		alpha2: "jo"
	},
	{
		name: "Kazakhstan",
		alpha2: "kz"
	},
	{
		name: "Kenya",
		alpha2: "ke"
	},
	{
		name: "Kirghizistan",
		alpha2: "kg"
	},
	{
		name: "Kiribati",
		alpha2: "ki"
	},
	{
		name: "Koweït",
		alpha2: "kw"
	},
	{
		name: "Laos",
		alpha2: "la"
	},
	{
		name: "Lesotho",
		alpha2: "ls"
	},
	{
		name: "Lettonie",
		alpha2: "lv"
	},
	{
		name: "Liban",
		alpha2: "lb"
	},
	{
		name: "Liberia",
		alpha2: "lr"
	},
	{
		name: "Libye",
		alpha2: "ly"
	},
	{
		name: "Liechtenstein",
		alpha2: "li"
	},
	{
		name: "Lituanie",
		alpha2: "lt"
	},
	{
		name: "Luxembourg (pays)",
		alpha2: "lu"
	},
	{
		name: "Macao",
		alpha2: "mo"
	},
	{
		name: "République de Macédoine (pays)",
		alpha2: "mk"
	},
	{
		name: "Madagascar",
		alpha2: "mg"
	},
	{
		name: "Malaisie",
		alpha2: "my"
	},
	{
		name: "Malawi",
		alpha2: "mw"
	},
	{
		name: "Maldives",
		alpha2: "mv"
	},
	{
		name: "Mali",
		alpha2: "ml"
	},
	{
		name: "Malte",
		alpha2: "mt"
	},
	{
		name: "Îles Mariannes du Nord",
		alpha2: "mp"
	},
	{
		name: "Maroc",
		alpha2: "ma"
	},
	{
		name: "Îles Marshall (pays)",
		alpha2: "mh"
	},
	{
		name: "Martinique",
		alpha2: "mq"
	},
	{
		name: "Maurice (pays)",
		alpha2: "mu"
	},
	{
		name: "Mauritanie",
		alpha2: "mr"
	},
	{
		name: "Mayotte",
		alpha2: "yt"
	},
	{
		name: "Mexique",
		alpha2: "mx"
	},
	{
		name: "Micronésie (pays)",
		alpha2: "fm"
	},
	{
		name: "Moldavie",
		alpha2: "md"
	},
	{
		name: "Monaco",
		alpha2: "mc"
	},
	{
		name: "Mongolie",
		alpha2: "mn"
	},
	{
		name: "Monténégro",
		alpha2: "me"
	},
	{
		name: "Montserrat",
		alpha2: "ms"
	},
	{
		name: "Mozambique",
		alpha2: "mz"
	},
	{
		name: "Birmanie",
		alpha2: "mm"
	},
	{
		name: "Namibie",
		alpha2: "na"
	},
	{
		name: "Nauru",
		alpha2: "nr"
	},
	{
		name: "Népal",
		alpha2: "np"
	},
	{
		name: "Nicaragua",
		alpha2: "ni"
	},
	{
		name: "Niger",
		alpha2: "ne"
	},
	{
		name: "Nigeria",
		alpha2: "ng"
	},
	{
		name: "Niue",
		alpha2: "nu"
	},
	{
		name: "Île Norfolk",
		alpha2: "nf"
	},
	{
		name: "Norvège",
		alpha2: "no"
	},
	{
		name: "Nouvelle-Calédonie",
		alpha2: "nc"
	},
	{
		name: "Nouvelle-Zélande",
		alpha2: "nz"
	},
	{
		name: "Territoire britannique de l'océan Indien",
		alpha2: "io"
	},
	{
		name: "Oman",
		alpha2: "om"
	},
	{
		name: "Ouganda",
		alpha2: "ug"
	},
	{
		name: "Ouzbékistan",
		alpha2: "uz"
	},
	{
		name: "Pakistan",
		alpha2: "pk"
	},
	{
		name: "Palaos",
		alpha2: "pw"
	},
	{
		name: "Palestine",
		alpha2: "ps"
	},
	{
		name: "Panama",
		alpha2: "pa"
	},
	{
		name: "Papouasie-Nouvelle-Guinée",
		alpha2: "pg"
	},
	{
		name: "Paraguay",
		alpha2: "py"
	},
	{
		name: "Pays-Bas",
		alpha2: "nl"
	},
	{
		name: "Pérou",
		alpha2: "pe"
	},
	{
		name: "Philippines",
		alpha2: "ph"
	},
	{
		name: "Îles Pitcairn",
		alpha2: "pn"
	},
	{
		name: "Pologne",
		alpha2: "pl"
	},
	{
		name: "Polynésie française",
		alpha2: "pf"
	},
	{
		name: "Porto Rico",
		alpha2: "pr"
	},
	{
		name: "Portugal",
		alpha2: "pt"
	},
	{
		name: "Qatar",
		alpha2: "qa"
	},
	{
		name: "La Réunion",
		alpha2: "re"
	},
	{
		name: "Roumanie",
		alpha2: "ro"
	},
	{
		name: "Royaume-Uni",
		alpha2: "gb"
	},
	{
		name: "Russie",
		alpha2: "ru"
	},
	{
		name: "Rwanda",
		alpha2: "rw"
	},
	{
		name: "République arabe sahraouie démocratique",
		alpha2: "eh"
	},
	{
		name: "Saint-Barthélemy",
		alpha2: "bl"
	},
	{
		name: "Saint-Christophe-et-Niévès",
		alpha2: "kn"
	},
	{
		name: "Saint-Marin",
		alpha2: "sm"
	},
	{
		name: "Saint-Martin",
		alpha2: "mf"
	},
	{
		name: "Saint-Martin",
		alpha2: "sx"
	},
	{
		name: "Saint-Pierre-et-Miquelon",
		alpha2: "pm"
	},
	{
		name: "Saint-Siège (État de la Cité du Vatican)",
		alpha2: "va"
	},
	{
		name: "Saint-Vincent-et-les-Grenadines",
		alpha2: "vc"
	},
	{
		name: "Sainte-Hélène, Ascension et Tristan da Cunha",
		alpha2: "sh"
	},
	{
		name: "Sainte-Lucie",
		alpha2: "lc"
	},
	{
		name: "Salomon",
		alpha2: "sb"
	},
	{
		name: "Samoa",
		alpha2: "ws"
	},
	{
		name: "Samoa américaines",
		alpha2: "as"
	},
	{
		name: "Sao Tomé-et-Principe",
		alpha2: "st"
	},
	{
		name: "Sénégal",
		alpha2: "sn"
	},
	{
		name: "Serbie",
		alpha2: "rs"
	},
	{
		name: "Seychelles",
		alpha2: "sc"
	},
	{
		name: "Sierra Leone",
		alpha2: "sl"
	},
	{
		name: "Singapour",
		alpha2: "sg"
	},
	{
		name: "Slovaquie",
		alpha2: "sk"
	},
	{
		name: "Slovénie",
		alpha2: "si"
	},
	{
		name: "Somalie",
		alpha2: "so"
	},
	{
		name: "Soudan",
		alpha2: "sd"
	},
	{
		name: "Soudan du Sud",
		alpha2: "ss"
	},
	{
		name: "Sri Lanka",
		alpha2: "lk"
	},
	{
		name: "Suède",
		alpha2: "se"
	},
	{
		name: "Suisse",
		alpha2: "ch"
	},
	{
		name: "Suriname",
		alpha2: "sr"
	},
	{
		name: "Svalbard et ile Jan Mayen",
		alpha2: "sj"
	},
	{
		name: "Swaziland",
		alpha2: "sz"
	},
	{
		name: "Syrie",
		alpha2: "sy"
	},
	{
		name: "Tadjikistan",
		alpha2: "tj"
	},
	{
		name: "Taïwan / (République de Chine (Taïwan))",
		alpha2: "tw"
	},
	{
		name: "Tanzanie",
		alpha2: "tz"
	},
	{
		name: "Tchad",
		alpha2: "td"
	},
	{
		name: "Tchéquie",
		alpha2: "cz"
	},
	{
		name: "Terres australes et antarctiques françaises",
		alpha2: "tf"
	},
	{
		name: "Thaïlande",
		alpha2: "th"
	},
	{
		name: "Timor oriental",
		alpha2: "tl"
	},
	{
		name: "Togo",
		alpha2: "tg"
	},
	{
		name: "Tokelau",
		alpha2: "tk"
	},
	{
		name: "Tonga",
		alpha2: "to"
	},
	{
		name: "Trinité-et-Tobago",
		alpha2: "tt"
	},
	{
		name: "Tunisie",
		alpha2: "tn"
	},
	{
		name: "Turkménistan",
		alpha2: "tm"
	},
	{
		name: "Îles Turques-et-Caïques",
		alpha2: "tc"
	},
	{
		name: "Turquie",
		alpha2: "tr"
	},
	{
		name: "Tuvalu",
		alpha2: "tv"
	},
	{
		name: "Ukraine",
		alpha2: "ua"
	},
	{
		name: "Uruguay",
		alpha2: "uy"
	},
	{
		name: "Vanuatu",
		alpha2: "vu"
	},
	{
		name: "Venezuela",
		alpha2: "ve"
	},
	{
		name: "Viêt Nam",
		alpha2: "vn"
	},
	{
		name: "Wallis-et-Futuna",
		alpha2: "wf"
	},
	{
		name: "Yémen",
		alpha2: "ye"
	},
	{
		name: "Zambie",
		alpha2: "zm"
	},
	{
		name: "Zimbabwe",
		alpha2: "zw"
	}
];

var es$2 = [
	{
		name: "Afganistán",
		alpha2: "af"
	},
	{
		name: "Åland",
		alpha2: "ax"
	},
	{
		name: "Albania",
		alpha2: "al"
	},
	{
		name: "Alemania",
		alpha2: "de"
	},
	{
		name: "Andorra",
		alpha2: "ad"
	},
	{
		name: "Angola",
		alpha2: "ao"
	},
	{
		name: "Anguila",
		alpha2: "ai"
	},
	{
		name: "Antártida",
		alpha2: "aq"
	},
	{
		name: "Antigua y Barbuda",
		alpha2: "ag"
	},
	{
		name: "Arabia Saudita",
		alpha2: "sa"
	},
	{
		name: "Argelia",
		alpha2: "dz"
	},
	{
		name: "Argentina",
		alpha2: "ar"
	},
	{
		name: "Armenia",
		alpha2: "am"
	},
	{
		name: "Aruba",
		alpha2: "aw"
	},
	{
		name: "Australia",
		alpha2: "au"
	},
	{
		name: "Austria",
		alpha2: "at"
	},
	{
		name: "Azerbaiyán",
		alpha2: "az"
	},
	{
		name: "Bahamas",
		alpha2: "bs"
	},
	{
		name: "Bangladés",
		alpha2: "bd"
	},
	{
		name: "Barbados",
		alpha2: "bb"
	},
	{
		name: "Baréin",
		alpha2: "bh"
	},
	{
		name: "Bélgica",
		alpha2: "be"
	},
	{
		name: "Belice",
		alpha2: "bz"
	},
	{
		name: "Benín",
		alpha2: "bj"
	},
	{
		name: "Bermudas",
		alpha2: "bm"
	},
	{
		name: "Bielorrusia",
		alpha2: "by"
	},
	{
		name: "Bolivia",
		alpha2: "bo"
	},
	{
		name: "Bonaire, San Eustaquio y Saba",
		alpha2: "bq"
	},
	{
		name: "Bosnia y Herzegovina",
		alpha2: "ba"
	},
	{
		name: "Botsuana",
		alpha2: "bw"
	},
	{
		name: "Brasil",
		alpha2: "br"
	},
	{
		name: "Brunéi",
		alpha2: "bn"
	},
	{
		name: "Bulgaria",
		alpha2: "bg"
	},
	{
		name: "Burkina Faso",
		alpha2: "bf"
	},
	{
		name: "Burundi",
		alpha2: "bi"
	},
	{
		name: "Bután",
		alpha2: "bt"
	},
	{
		name: "Cabo Verde",
		alpha2: "cv"
	},
	{
		name: "Camboya",
		alpha2: "kh"
	},
	{
		name: "Camerún",
		alpha2: "cm"
	},
	{
		name: "Canadá",
		alpha2: "ca"
	},
	{
		name: "Catar",
		alpha2: "qa"
	},
	{
		name: "Chad",
		alpha2: "td"
	},
	{
		name: "Chile",
		alpha2: "cl"
	},
	{
		name: "China",
		alpha2: "cn"
	},
	{
		name: "Chipre",
		alpha2: "cy"
	},
	{
		name: "Colombia",
		alpha2: "co"
	},
	{
		name: "Comoras",
		alpha2: "km"
	},
	{
		name: "Corea del Norte",
		alpha2: "kp"
	},
	{
		name: "Corea del Sur",
		alpha2: "kr"
	},
	{
		name: "Costa de Marfil",
		alpha2: "ci"
	},
	{
		name: "Costa Rica",
		alpha2: "cr"
	},
	{
		name: "Croacia",
		alpha2: "hr"
	},
	{
		name: "Cuba",
		alpha2: "cu"
	},
	{
		name: "Curazao",
		alpha2: "cw"
	},
	{
		name: "Dinamarca",
		alpha2: "dk"
	},
	{
		name: "Dominica",
		alpha2: "dm"
	},
	{
		name: "Ecuador",
		alpha2: "ec"
	},
	{
		name: "Egipto",
		alpha2: "eg"
	},
	{
		name: "El Salvador",
		alpha2: "sv"
	},
	{
		name: "Emiratos Árabes Unidos",
		alpha2: "ae"
	},
	{
		name: "Eritrea",
		alpha2: "er"
	},
	{
		name: "Eslovaquia",
		alpha2: "sk"
	},
	{
		name: "Eslovenia",
		alpha2: "si"
	},
	{
		name: "España",
		alpha2: "es"
	},
	{
		name: "Estados Unidos",
		alpha2: "us"
	},
	{
		name: "Estonia",
		alpha2: "ee"
	},
	{
		name: "Etiopía",
		alpha2: "et"
	},
	{
		name: "Filipinas",
		alpha2: "ph"
	},
	{
		name: "Finlandia",
		alpha2: "fi"
	},
	{
		name: "Fiyi",
		alpha2: "fj"
	},
	{
		name: "Francia",
		alpha2: "fr"
	},
	{
		name: "Gabón",
		alpha2: "ga"
	},
	{
		name: "Gambia",
		alpha2: "gm"
	},
	{
		name: "Georgia",
		alpha2: "ge"
	},
	{
		name: "Ghana",
		alpha2: "gh"
	},
	{
		name: "Gibraltar",
		alpha2: "gi"
	},
	{
		name: "Granada",
		alpha2: "gd"
	},
	{
		name: "Grecia",
		alpha2: "gr"
	},
	{
		name: "Groenlandia",
		alpha2: "gl"
	},
	{
		name: "Guadalupe",
		alpha2: "gp"
	},
	{
		name: "Guam",
		alpha2: "gu"
	},
	{
		name: "Guatemala",
		alpha2: "gt"
	},
	{
		name: "Guayana Francesa",
		alpha2: "gf"
	},
	{
		name: "Guernsey",
		alpha2: "gg"
	},
	{
		name: "Guinea",
		alpha2: "gn"
	},
	{
		name: "Guinea-Bisáu",
		alpha2: "gw"
	},
	{
		name: "Guinea Ecuatorial",
		alpha2: "gq"
	},
	{
		name: "Guyana",
		alpha2: "gy"
	},
	{
		name: "Haití",
		alpha2: "ht"
	},
	{
		name: "Honduras",
		alpha2: "hn"
	},
	{
		name: "Hong Kong",
		alpha2: "hk"
	},
	{
		name: "Hungría",
		alpha2: "hu"
	},
	{
		name: "India",
		alpha2: "in"
	},
	{
		name: "Indonesia",
		alpha2: "id"
	},
	{
		name: "Irak",
		alpha2: "iq"
	},
	{
		name: "Irán",
		alpha2: "ir"
	},
	{
		name: "Irlanda",
		alpha2: "ie"
	},
	{
		name: "Isla Bouvet",
		alpha2: "bv"
	},
	{
		name: "Isla de Man",
		alpha2: "im"
	},
	{
		name: "Isla de Navidad",
		alpha2: "cx"
	},
	{
		name: "Islandia",
		alpha2: "is"
	},
	{
		name: "Islas Caimán",
		alpha2: "ky"
	},
	{
		name: "Islas Cocos",
		alpha2: "cc"
	},
	{
		name: "Islas Cook",
		alpha2: "ck"
	},
	{
		name: "Islas Feroe",
		alpha2: "fo"
	},
	{
		name: "Islas Georgias del Sur y Sandwich del Sur",
		alpha2: "gs"
	},
	{
		name: "Islas Heard y McDonald",
		alpha2: "hm"
	},
	{
		name: "Islas Malvinas",
		alpha2: "fk"
	},
	{
		name: "Islas Marianas del Norte",
		alpha2: "mp"
	},
	{
		name: "Islas Marshall",
		alpha2: "mh"
	},
	{
		name: "Islas Pitcairn",
		alpha2: "pn"
	},
	{
		name: "Islas Salomón",
		alpha2: "sb"
	},
	{
		name: "Islas Turcas y Caicos",
		alpha2: "tc"
	},
	{
		name: "Islas ultramarinas de Estados Unidos",
		alpha2: "um"
	},
	{
		name: "Islas Vírgenes Británicas",
		alpha2: "vg"
	},
	{
		name: "Islas Vírgenes de los Estados Unidos",
		alpha2: "vi"
	},
	{
		name: "Israel",
		alpha2: "il"
	},
	{
		name: "Italia",
		alpha2: "it"
	},
	{
		name: "Jamaica",
		alpha2: "jm"
	},
	{
		name: "Japón",
		alpha2: "jp"
	},
	{
		name: "Jersey",
		alpha2: "je"
	},
	{
		name: "Jordania",
		alpha2: "jo"
	},
	{
		name: "Kazajistán",
		alpha2: "kz"
	},
	{
		name: "Kenia",
		alpha2: "ke"
	},
	{
		name: "Kirguistán",
		alpha2: "kg"
	},
	{
		name: "Kiribati",
		alpha2: "ki"
	},
	{
		name: "Kuwait",
		alpha2: "kw"
	},
	{
		name: "Laos",
		alpha2: "la"
	},
	{
		name: "Lesoto",
		alpha2: "ls"
	},
	{
		name: "Letonia",
		alpha2: "lv"
	},
	{
		name: "Líbano",
		alpha2: "lb"
	},
	{
		name: "Liberia",
		alpha2: "lr"
	},
	{
		name: "Libia",
		alpha2: "ly"
	},
	{
		name: "Liechtenstein",
		alpha2: "li"
	},
	{
		name: "Lituania",
		alpha2: "lt"
	},
	{
		name: "Luxemburgo",
		alpha2: "lu"
	},
	{
		name: "Macao",
		alpha2: "mo"
	},
	{
		name: "Macedonia",
		alpha2: "mk"
	},
	{
		name: "Madagascar",
		alpha2: "mg"
	},
	{
		name: "Malasia",
		alpha2: "my"
	},
	{
		name: "Malaui",
		alpha2: "mw"
	},
	{
		name: "Maldivas",
		alpha2: "mv"
	},
	{
		name: "Malí",
		alpha2: "ml"
	},
	{
		name: "Malta",
		alpha2: "mt"
	},
	{
		name: "Marruecos",
		alpha2: "ma"
	},
	{
		name: "Martinica",
		alpha2: "mq"
	},
	{
		name: "Mauricio",
		alpha2: "mu"
	},
	{
		name: "Mauritania",
		alpha2: "mr"
	},
	{
		name: "Mayotte",
		alpha2: "yt"
	},
	{
		name: "México",
		alpha2: "mx"
	},
	{
		name: "Micronesia",
		alpha2: "fm"
	},
	{
		name: "Moldavia",
		alpha2: "md"
	},
	{
		name: "Mónaco",
		alpha2: "mc"
	},
	{
		name: "Mongolia",
		alpha2: "mn"
	},
	{
		name: "Montenegro",
		alpha2: "me"
	},
	{
		name: "Montserrat",
		alpha2: "ms"
	},
	{
		name: "Mozambique",
		alpha2: "mz"
	},
	{
		name: "Myanmar",
		alpha2: "mm"
	},
	{
		name: "Namibia",
		alpha2: "na"
	},
	{
		name: "Nauru",
		alpha2: "nr"
	},
	{
		name: "Nepal",
		alpha2: "np"
	},
	{
		name: "Nicaragua",
		alpha2: "ni"
	},
	{
		name: "Níger",
		alpha2: "ne"
	},
	{
		name: "Nigeria",
		alpha2: "ng"
	},
	{
		name: "Niue",
		alpha2: "nu"
	},
	{
		name: "Norfolk",
		alpha2: "nf"
	},
	{
		name: "Noruega",
		alpha2: "no"
	},
	{
		name: "Nueva Caledonia",
		alpha2: "nc"
	},
	{
		name: "Nueva Zelanda",
		alpha2: "nz"
	},
	{
		name: "Omán",
		alpha2: "om"
	},
	{
		name: "Países Bajos",
		alpha2: "nl"
	},
	{
		name: "Pakistán",
		alpha2: "pk"
	},
	{
		name: "Palaos",
		alpha2: "pw"
	},
	{
		name: "Palestina",
		alpha2: "ps"
	},
	{
		name: "Panamá",
		alpha2: "pa"
	},
	{
		name: "Papúa Nueva Guinea",
		alpha2: "pg"
	},
	{
		name: "Paraguay",
		alpha2: "py"
	},
	{
		name: "Perú",
		alpha2: "pe"
	},
	{
		name: "Polinesia Francesa",
		alpha2: "pf"
	},
	{
		name: "Polonia",
		alpha2: "pl"
	},
	{
		name: "Portugal",
		alpha2: "pt"
	},
	{
		name: "Puerto Rico",
		alpha2: "pr"
	},
	{
		name: "Reino Unido",
		alpha2: "gb"
	},
	{
		name: "República Árabe Saharaui Democrática",
		alpha2: "eh"
	},
	{
		name: "República Centroafricana",
		alpha2: "cf"
	},
	{
		name: "República Checa",
		alpha2: "cz"
	},
	{
		name: "República del Congo",
		alpha2: "cg"
	},
	{
		name: "República Democrática del Congo",
		alpha2: "cd"
	},
	{
		name: "República Dominicana",
		alpha2: "do"
	},
	{
		name: "Reunión",
		alpha2: "re"
	},
	{
		name: "Ruanda",
		alpha2: "rw"
	},
	{
		name: "Rumania",
		alpha2: "ro"
	},
	{
		name: "Rusia",
		alpha2: "ru"
	},
	{
		name: "Samoa",
		alpha2: "ws"
	},
	{
		name: "Samoa Americana",
		alpha2: "as"
	},
	{
		name: "San Bartolomé",
		alpha2: "bl"
	},
	{
		name: "San Cristóbal y Nieves",
		alpha2: "kn"
	},
	{
		name: "San Marino",
		alpha2: "sm"
	},
	{
		name: "San Martín",
		alpha2: "mf"
	},
	{
		name: "San Pedro y Miquelón",
		alpha2: "pm"
	},
	{
		name: "San Vicente y las Granadinas",
		alpha2: "vc"
	},
	{
		name: "Santa Elena, Ascensión y Tristán de Acuña",
		alpha2: "sh"
	},
	{
		name: "Santa Lucía",
		alpha2: "lc"
	},
	{
		name: "Santo Tomé y Príncipe",
		alpha2: "st"
	},
	{
		name: "Senegal",
		alpha2: "sn"
	},
	{
		name: "Serbia",
		alpha2: "rs"
	},
	{
		name: "Seychelles",
		alpha2: "sc"
	},
	{
		name: "Sierra Leona",
		alpha2: "sl"
	},
	{
		name: "Singapur",
		alpha2: "sg"
	},
	{
		name: "Sint Maarten",
		alpha2: "sx"
	},
	{
		name: "Siria",
		alpha2: "sy"
	},
	{
		name: "Somalia",
		alpha2: "so"
	},
	{
		name: "Sri Lanka",
		alpha2: "lk"
	},
	{
		name: "Suazilandia",
		alpha2: "sz"
	},
	{
		name: "Sudáfrica",
		alpha2: "za"
	},
	{
		name: "Sudán",
		alpha2: "sd"
	},
	{
		name: "Sudán del Sur",
		alpha2: "ss"
	},
	{
		name: "Suecia",
		alpha2: "se"
	},
	{
		name: "Suiza",
		alpha2: "ch"
	},
	{
		name: "Surinam",
		alpha2: "sr"
	},
	{
		name: "Svalbard y Jan Mayen",
		alpha2: "sj"
	},
	{
		name: "Tailandia",
		alpha2: "th"
	},
	{
		name: "Taiwán (República de China)",
		alpha2: "tw"
	},
	{
		name: "Tanzania",
		alpha2: "tz"
	},
	{
		name: "Tayikistán",
		alpha2: "tj"
	},
	{
		name: "Territorio Británico del Océano Índico",
		alpha2: "io"
	},
	{
		name: "Tierras Australes y Antárticas Francesas",
		alpha2: "tf"
	},
	{
		name: "Timor Oriental",
		alpha2: "tl"
	},
	{
		name: "Togo",
		alpha2: "tg"
	},
	{
		name: "Tokelau",
		alpha2: "tk"
	},
	{
		name: "Tonga",
		alpha2: "to"
	},
	{
		name: "Trinidad y Tobago",
		alpha2: "tt"
	},
	{
		name: "Túnez",
		alpha2: "tn"
	},
	{
		name: "Turkmenistán",
		alpha2: "tm"
	},
	{
		name: "Turquía",
		alpha2: "tr"
	},
	{
		name: "Tuvalu",
		alpha2: "tv"
	},
	{
		name: "Ucrania",
		alpha2: "ua"
	},
	{
		name: "Uganda",
		alpha2: "ug"
	},
	{
		name: "Uruguay",
		alpha2: "uy"
	},
	{
		name: "Uzbekistán",
		alpha2: "uz"
	},
	{
		name: "Vanuatu",
		alpha2: "vu"
	},
	{
		name: "Vaticano, Ciudad del",
		alpha2: "va"
	},
	{
		name: "Venezuela",
		alpha2: "ve"
	},
	{
		name: "Vietnam",
		alpha2: "vn"
	},
	{
		name: "Wallis y Futuna",
		alpha2: "wf"
	},
	{
		name: "Yemen",
		alpha2: "ye"
	},
	{
		name: "Yibuti",
		alpha2: "dj"
	},
	{
		name: "Zambia",
		alpha2: "zm"
	},
	{
		name: "Zimbabue",
		alpha2: "zw"
	}
];

var it$2 = [
	{
		name: "Afghanistan",
		alpha2: "af"
	},
	{
		name: "Albania",
		alpha2: "al"
	},
	{
		name: "Algeria",
		alpha2: "dz"
	},
	{
		name: "Andorra",
		alpha2: "ad"
	},
	{
		name: "Angola",
		alpha2: "ao"
	},
	{
		name: "Anguilla",
		alpha2: "ai"
	},
	{
		name: "Antartide",
		alpha2: "aq"
	},
	{
		name: "Antigua e Barbuda",
		alpha2: "ag"
	},
	{
		name: "Arabia Saudita",
		alpha2: "sa"
	},
	{
		name: "Argentina",
		alpha2: "ar"
	},
	{
		name: "Armenia",
		alpha2: "am"
	},
	{
		name: "Aruba",
		alpha2: "aw"
	},
	{
		name: "Australia",
		alpha2: "au"
	},
	{
		name: "Austria",
		alpha2: "at"
	},
	{
		name: "Azerbaigian",
		alpha2: "az"
	},
	{
		name: "Bahamas",
		alpha2: "bs"
	},
	{
		name: "Bahrein",
		alpha2: "bh"
	},
	{
		name: "Bangladesh",
		alpha2: "bd"
	},
	{
		name: "Barbados",
		alpha2: "bb"
	},
	{
		name: "Belgio",
		alpha2: "be"
	},
	{
		name: "Belize",
		alpha2: "bz"
	},
	{
		name: "Benin",
		alpha2: "bj"
	},
	{
		name: "Bermuda",
		alpha2: "bm"
	},
	{
		name: "Bhutan",
		alpha2: "bt"
	},
	{
		name: "Bielorussia",
		alpha2: "by"
	},
	{
		name: "Birmania",
		alpha2: "mm"
	},
	{
		name: "Bolivia",
		alpha2: "bo"
	},
	{
		name: "Bosnia ed Erzegovina",
		alpha2: "ba"
	},
	{
		name: "Botswana",
		alpha2: "bw"
	},
	{
		name: "Brasile",
		alpha2: "br"
	},
	{
		name: "Brunei",
		alpha2: "bn"
	},
	{
		name: "Bulgaria",
		alpha2: "bg"
	},
	{
		name: "Burkina Faso",
		alpha2: "bf"
	},
	{
		name: "Burundi",
		alpha2: "bi"
	},
	{
		name: "Cambogia",
		alpha2: "kh"
	},
	{
		name: "Camerun",
		alpha2: "cm"
	},
	{
		name: "Canada",
		alpha2: "ca"
	},
	{
		name: "Capo Verde",
		alpha2: "cv"
	},
	{
		name: "Ciad",
		alpha2: "td"
	},
	{
		name: "Cile",
		alpha2: "cl"
	},
	{
		name: "Cina",
		alpha2: "cn"
	},
	{
		name: "Cipro",
		alpha2: "cy"
	},
	{
		name: "Città del Vaticano",
		alpha2: "va"
	},
	{
		name: "Colombia",
		alpha2: "co"
	},
	{
		name: "Comore",
		alpha2: "km"
	},
	{
		name: "Corea del Nord",
		alpha2: "kp"
	},
	{
		name: "Corea del Sud",
		alpha2: "kr"
	},
	{
		name: "Costa d'Avorio",
		alpha2: "ci"
	},
	{
		name: "Costa Rica",
		alpha2: "cr"
	},
	{
		name: "Croazia",
		alpha2: "hr"
	},
	{
		name: "Cuba",
		alpha2: "cu"
	},
	{
		name: "Curaçao",
		alpha2: "cw"
	},
	{
		name: "Danimarca",
		alpha2: "dk"
	},
	{
		name: "Dominica",
		alpha2: "dm"
	},
	{
		name: "Ecuador",
		alpha2: "ec"
	},
	{
		name: "Egitto",
		alpha2: "eg"
	},
	{
		name: "El Salvador",
		alpha2: "sv"
	},
	{
		name: "Emirati Arabi Uniti",
		alpha2: "ae"
	},
	{
		name: "Eritrea",
		alpha2: "er"
	},
	{
		name: "Estonia",
		alpha2: "ee"
	},
	{
		name: "Etiopia",
		alpha2: "et"
	},
	{
		name: "Figi",
		alpha2: "fj"
	},
	{
		name: "Filippine",
		alpha2: "ph"
	},
	{
		name: "Finlandia",
		alpha2: "fi"
	},
	{
		name: "Francia",
		alpha2: "fr"
	},
	{
		name: "Gabon",
		alpha2: "ga"
	},
	{
		name: "Gambia",
		alpha2: "gm"
	},
	{
		name: "Georgia",
		alpha2: "ge"
	},
	{
		name: "Georgia del Sud e Isole Sandwich Australi",
		alpha2: "gs"
	},
	{
		name: "Germania",
		alpha2: "de"
	},
	{
		name: "Ghana",
		alpha2: "gh"
	},
	{
		name: "Giamaica",
		alpha2: "jm"
	},
	{
		name: "Giappone",
		alpha2: "jp"
	},
	{
		name: "Gibilterra",
		alpha2: "gi"
	},
	{
		name: "Gibuti",
		alpha2: "dj"
	},
	{
		name: "Giordania",
		alpha2: "jo"
	},
	{
		name: "Grecia",
		alpha2: "gr"
	},
	{
		name: "Grenada",
		alpha2: "gd"
	},
	{
		name: "Groenlandia",
		alpha2: "gl"
	},
	{
		name: "Guadalupa",
		alpha2: "gp"
	},
	{
		name: "Guam",
		alpha2: "gu"
	},
	{
		name: "Guatemala",
		alpha2: "gt"
	},
	{
		name: "Guernsey",
		alpha2: "gg"
	},
	{
		name: "Guinea",
		alpha2: "gn"
	},
	{
		name: "Guinea-Bissau",
		alpha2: "gw"
	},
	{
		name: "Guinea Equatoriale",
		alpha2: "gq"
	},
	{
		name: "Guyana",
		alpha2: "gy"
	},
	{
		name: "Guyana francese",
		alpha2: "gf"
	},
	{
		name: "Haiti",
		alpha2: "ht"
	},
	{
		name: "Honduras",
		alpha2: "hn"
	},
	{
		name: "Hong Kong",
		alpha2: "hk"
	},
	{
		name: "India",
		alpha2: "in"
	},
	{
		name: "Indonesia",
		alpha2: "id"
	},
	{
		name: "Iran",
		alpha2: "ir"
	},
	{
		name: "Iraq",
		alpha2: "iq"
	},
	{
		name: "Irlanda",
		alpha2: "ie"
	},
	{
		name: "Islanda",
		alpha2: "is"
	},
	{
		name: "Isola Bouvet",
		alpha2: "bv"
	},
	{
		name: "Isola di Man",
		alpha2: "im"
	},
	{
		name: "Isola di Natale",
		alpha2: "cx"
	},
	{
		name: "Isola Norfolk",
		alpha2: "nf"
	},
	{
		name: "Isole Åland",
		alpha2: "ax"
	},
	{
		name: "Isole BES",
		alpha2: "bq"
	},
	{
		name: "Isole Cayman",
		alpha2: "ky"
	},
	{
		name: "Isole Cocos (Keeling)",
		alpha2: "cc"
	},
	{
		name: "Isole Cook",
		alpha2: "ck"
	},
	{
		name: "Fær Øer",
		alpha2: "fo"
	},
	{
		name: "Isole Falkland",
		alpha2: "fk"
	},
	{
		name: "Isole Heard e McDonald",
		alpha2: "hm"
	},
	{
		name: "Isole Marianne Settentrionali",
		alpha2: "mp"
	},
	{
		name: "Isole Marshall",
		alpha2: "mh"
	},
	{
		name: "Isole minori esterne degli Stati Uniti",
		alpha2: "um"
	},
	{
		name: "Isole Pitcairn",
		alpha2: "pn"
	},
	{
		name: "Isole Salomone",
		alpha2: "sb"
	},
	{
		name: "Isole Vergini britanniche",
		alpha2: "vg"
	},
	{
		name: "Isole Vergini americane",
		alpha2: "vi"
	},
	{
		name: "Israele",
		alpha2: "il"
	},
	{
		name: "Italia",
		alpha2: "it"
	},
	{
		name: "Jersey",
		alpha2: "je"
	},
	{
		name: "Kazakistan",
		alpha2: "kz"
	},
	{
		name: "Kenya",
		alpha2: "ke"
	},
	{
		name: "Kirghizistan",
		alpha2: "kg"
	},
	{
		name: "Kiribati",
		alpha2: "ki"
	},
	{
		name: "Kuwait",
		alpha2: "kw"
	},
	{
		name: "Laos",
		alpha2: "la"
	},
	{
		name: "Lesotho",
		alpha2: "ls"
	},
	{
		name: "Lettonia",
		alpha2: "lv"
	},
	{
		name: "Libano",
		alpha2: "lb"
	},
	{
		name: "Liberia",
		alpha2: "lr"
	},
	{
		name: "Libia",
		alpha2: "ly"
	},
	{
		name: "Liechtenstein",
		alpha2: "li"
	},
	{
		name: "Lituania",
		alpha2: "lt"
	},
	{
		name: "Lussemburgo",
		alpha2: "lu"
	},
	{
		name: "Macao",
		alpha2: "mo"
	},
	{
		name: "Macedonia",
		alpha2: "mk"
	},
	{
		name: "Madagascar",
		alpha2: "mg"
	},
	{
		name: "Malawi",
		alpha2: "mw"
	},
	{
		name: "Malaysia",
		alpha2: "my"
	},
	{
		name: "Maldive",
		alpha2: "mv"
	},
	{
		name: "Mali",
		alpha2: "ml"
	},
	{
		name: "Malta",
		alpha2: "mt"
	},
	{
		name: "Marocco",
		alpha2: "ma"
	},
	{
		name: "Martinica",
		alpha2: "mq"
	},
	{
		name: "Mauritania",
		alpha2: "mr"
	},
	{
		name: "Mauritius",
		alpha2: "mu"
	},
	{
		name: "Mayotte",
		alpha2: "yt"
	},
	{
		name: "Messico",
		alpha2: "mx"
	},
	{
		name: "Micronesia",
		alpha2: "fm"
	},
	{
		name: "Moldavia",
		alpha2: "md"
	},
	{
		name: "Mongolia",
		alpha2: "mn"
	},
	{
		name: "Montenegro",
		alpha2: "me"
	},
	{
		name: "Montserrat",
		alpha2: "ms"
	},
	{
		name: "Mozambico",
		alpha2: "mz"
	},
	{
		name: "Namibia",
		alpha2: "na"
	},
	{
		name: "Nauru",
		alpha2: "nr"
	},
	{
		name: "Nepal",
		alpha2: "np"
	},
	{
		name: "Nicaragua",
		alpha2: "ni"
	},
	{
		name: "Niger",
		alpha2: "ne"
	},
	{
		name: "Nigeria",
		alpha2: "ng"
	},
	{
		name: "Niue",
		alpha2: "nu"
	},
	{
		name: "Norvegia",
		alpha2: "no"
	},
	{
		name: "Nuova Caledonia",
		alpha2: "nc"
	},
	{
		name: "Nuova Zelanda",
		alpha2: "nz"
	},
	{
		name: "Oman",
		alpha2: "om"
	},
	{
		name: "Paesi Bassi",
		alpha2: "nl"
	},
	{
		name: "Pakistan",
		alpha2: "pk"
	},
	{
		name: "Palau",
		alpha2: "pw"
	},
	{
		name: "Palestina",
		alpha2: "ps"
	},
	{
		name: "Panama",
		alpha2: "pa"
	},
	{
		name: "Papua Nuova Guinea",
		alpha2: "pg"
	},
	{
		name: "Paraguay",
		alpha2: "py"
	},
	{
		name: "Perù",
		alpha2: "pe"
	},
	{
		name: "Polinesia Francese",
		alpha2: "pf"
	},
	{
		name: "Polonia",
		alpha2: "pl"
	},
	{
		name: "Porto Rico",
		alpha2: "pr"
	},
	{
		name: "Portogallo",
		alpha2: "pt"
	},
	{
		name: "Monaco",
		alpha2: "mc"
	},
	{
		name: "Qatar",
		alpha2: "qa"
	},
	{
		name: "Regno Unito",
		alpha2: "gb"
	},
	{
		name: "RD del Congo",
		alpha2: "cd"
	},
	{
		name: "Rep. Ceca",
		alpha2: "cz"
	},
	{
		name: "Rep. Centrafricana",
		alpha2: "cf"
	},
	{
		name: "Rep. del Congo",
		alpha2: "cg"
	},
	{
		name: "Rep. Dominicana",
		alpha2: "do"
	},
	{
		name: "Riunione",
		alpha2: "re"
	},
	{
		name: "Romania",
		alpha2: "ro"
	},
	{
		name: "Ruanda",
		alpha2: "rw"
	},
	{
		name: "Russia",
		alpha2: "ru"
	},
	{
		name: "Sahara Occidentale",
		alpha2: "eh"
	},
	{
		name: "Saint Kitts e Nevis",
		alpha2: "kn"
	},
	{
		name: "Saint Lucia",
		alpha2: "lc"
	},
	{
		name: "Sant'Elena, Ascensione e Tristan da Cunha",
		alpha2: "sh"
	},
	{
		name: "Saint Vincent e Grenadine",
		alpha2: "vc"
	},
	{
		name: "Saint-Barthélemy",
		alpha2: "bl"
	},
	{
		name: "Saint-Martin",
		alpha2: "mf"
	},
	{
		name: "Saint-Pierre e Miquelon",
		alpha2: "pm"
	},
	{
		name: "Samoa",
		alpha2: "ws"
	},
	{
		name: "Samoa Americane",
		alpha2: "as"
	},
	{
		name: "San Marino",
		alpha2: "sm"
	},
	{
		name: "São Tomé e Príncipe",
		alpha2: "st"
	},
	{
		name: "Senegal",
		alpha2: "sn"
	},
	{
		name: "Serbia",
		alpha2: "rs"
	},
	{
		name: "Seychelles",
		alpha2: "sc"
	},
	{
		name: "Sierra Leone",
		alpha2: "sl"
	},
	{
		name: "Singapore",
		alpha2: "sg"
	},
	{
		name: "Sint Maarten",
		alpha2: "sx"
	},
	{
		name: "Siria",
		alpha2: "sy"
	},
	{
		name: "Slovacchia",
		alpha2: "sk"
	},
	{
		name: "Slovenia",
		alpha2: "si"
	},
	{
		name: "Somalia",
		alpha2: "so"
	},
	{
		name: "Spagna",
		alpha2: "es"
	},
	{
		name: "Sri Lanka",
		alpha2: "lk"
	},
	{
		name: "Stati Uniti",
		alpha2: "us"
	},
	{
		name: "Sudafrica",
		alpha2: "za"
	},
	{
		name: "Sudan",
		alpha2: "sd"
	},
	{
		name: "Sudan del Sud",
		alpha2: "ss"
	},
	{
		name: "Suriname",
		alpha2: "sr"
	},
	{
		name: "Svalbard e Jan Mayen",
		alpha2: "sj"
	},
	{
		name: "Svezia",
		alpha2: "se"
	},
	{
		name: "Svizzera",
		alpha2: "ch"
	},
	{
		name: "Swaziland",
		alpha2: "sz"
	},
	{
		name: "Taiwan",
		alpha2: "tw"
	},
	{
		name: "Tagikistan",
		alpha2: "tj"
	},
	{
		name: "Tanzania",
		alpha2: "tz"
	},
	{
		name: "Terre australi e antartiche francesi",
		alpha2: "tf"
	},
	{
		name: "Territorio britannico dell'Oceano Indiano",
		alpha2: "io"
	},
	{
		name: "Thailandia",
		alpha2: "th"
	},
	{
		name: "Timor Est",
		alpha2: "tl"
	},
	{
		name: "Togo",
		alpha2: "tg"
	},
	{
		name: "Tokelau",
		alpha2: "tk"
	},
	{
		name: "Tonga",
		alpha2: "to"
	},
	{
		name: "Trinidad e Tobago",
		alpha2: "tt"
	},
	{
		name: "Tunisia",
		alpha2: "tn"
	},
	{
		name: "Turchia",
		alpha2: "tr"
	},
	{
		name: "Turkmenistan",
		alpha2: "tm"
	},
	{
		name: "Turks e Caicos",
		alpha2: "tc"
	},
	{
		name: "Tuvalu",
		alpha2: "tv"
	},
	{
		name: "Ucraina",
		alpha2: "ua"
	},
	{
		name: "Uganda",
		alpha2: "ug"
	},
	{
		name: "Ungheria",
		alpha2: "hu"
	},
	{
		name: "Uruguay",
		alpha2: "uy"
	},
	{
		name: "Uzbekistan",
		alpha2: "uz"
	},
	{
		name: "Vanuatu",
		alpha2: "vu"
	},
	{
		name: "Venezuela",
		alpha2: "ve"
	},
	{
		name: "Vietnam",
		alpha2: "vn"
	},
	{
		name: "Wallis e Futuna",
		alpha2: "wf"
	},
	{
		name: "Yemen",
		alpha2: "ye"
	},
	{
		name: "Zambia",
		alpha2: "zm"
	},
	{
		name: "Zimbabwe",
		alpha2: "zw"
	}
];

var Countries = {
  en: en$2,
  nl: nl$2,
  de: de$2,
  fr: fr$2,
  es: es$2,
  it: it$2
};

function isInt(value) {
  return !isNaN(value) && function (x) {
    return (x | 0) === x;
  }(parseFloat(value));
}
function OptionalBookingFields(_ref) {
  var bookingFields = _ref.bookingFields,
      errors = _ref.errors,
      touched = _ref.touched,
      PortalSite = _ref.PortalSite,
      values = _ref.values;
  var fields = [].concat(bookingFields);
  var requiredFields = ['address', 'house_number', 'zipcode', 'city'];

  if (values.cancel_insurance === '1' || values.cancel_insurance === '2') {
    requiredFields.forEach(function (key) {
      var index = bookingFields.findIndex(function (x) {
        return x.id === key;
      });

      if (index !== -1) {
        fields[index] = DefaultBookingFields.find(function (x) {
          return x.id === key;
        });
      } else {
        fields.push(DefaultBookingFields.find(function (x) {
          return x.id === key;
        }));
      }
    });
  }

  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: "form-section"
  }, /*#__PURE__*/React__default['default'].createElement("h2", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "personal_details"
  })), fields.map(function (input) {
    if (input.id === 'telephone') {
      input.id = 'phonenumber';
    }

    if (input.type === 'booking_field' || isInt(input.id)) {
      var bookingField = PortalSite.booking_fields.find(function (x) {
        return x.id === input.id;
      });
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "form-row",
        key: bookingField.id
      }, /*#__PURE__*/React__default['default'].createElement("label", {
        htmlFor: "extra_fields.booking_field_".concat(bookingField.id)
      }, bookingField.label, ' ', input.required && /*#__PURE__*/React__default['default'].createElement("span", null, "*")), /*#__PURE__*/React__default['default'].createElement(Field, {
        onKeyPress: function onKeyPress(e) {
          e.which === 13 && e.preventDefault();
        },
        id: "extra_fields.booking_field_".concat(bookingField.id),
        type: bookingField.field_type === 'text' ? 'input' : bookingField.field_type,
        component: bookingField.field_type === 'text' ? 'input' : bookingField.field_type,
        name: "extra_fields.booking_field_".concat(bookingField.id)
      }), errors[input.id] && (touched.extra_fields && touched.extra_fields["booking_field_".concat(bookingField.id)] || touched[input.id]) && /*#__PURE__*/React__default['default'].createElement("div", {
        className: "error-message"
      }, errors[input.id]));
    } else if (input.id === 'country') {
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "form-row",
        key: input.id
      }, /*#__PURE__*/React__default['default'].createElement("label", {
        htmlFor: input.id
      }, PortalSite["".concat(input.id, "_label")], ' ', input.required && /*#__PURE__*/React__default['default'].createElement("span", null, "*")), /*#__PURE__*/React__default['default'].createElement(Field, {
        component: "select",
        name: input.id
      }, Countries[window.__localeId__].map(function (country) {
        return /*#__PURE__*/React__default['default'].createElement("option", {
          value: country.alpha2,
          key: country.alpha2
        }, country.name);
      })), errors[input.id] && /*#__PURE__*/React__default['default'].createElement("div", {
        className: "error-message"
      }, errors[input.id]));
    } else if (input.type === 'date') {
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "form-row",
        key: input.id
      }, /*#__PURE__*/React__default['default'].createElement(DateField, {
        name: input.id,
        label: input.id,
        inline: false
      }));
    } else {
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "form-row",
        key: input.id
      }, /*#__PURE__*/React__default['default'].createElement("label", {
        htmlFor: input.id,
        name: "".concat(input.id.replace(/\./g, '_'), "_label")
      }, PortalSite["".concat(input.id.replace(/\./g, '_'), "_label")], ' ', input.required && /*#__PURE__*/React__default['default'].createElement("span", null, "*")), /*#__PURE__*/React__default['default'].createElement(Field, {
        type: input.type,
        name: input.id,
        onKeyPress: function onKeyPress(e) {
          e.which === 13 && e.preventDefault();
        }
      }), errors[input.id] && touched[input.id] && /*#__PURE__*/React__default['default'].createElement("div", {
        className: "error-message"
      }, errors[input.id]));
    }
  }));
}
OptionalBookingFields.propTypes = {
  bookingFields: PropTypes.array.isRequired,
  errors: PropTypes.object.isRequired,
  PortalSite: PropTypes.object.isRequired
};

function OptionalCosts(_ref) {
  var costs = _ref.costs;

  if (costs.length === 0) {
    return null;
  }

  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: "form-section optional_house_costs"
  }, /*#__PURE__*/React__default['default'].createElement("h2", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
    id: "extra_costs_bookable"
  })), /*#__PURE__*/React__default['default'].createElement("div", null, costs.map(function (cost) {
    if (!arrayIncludes(['none', 'total'], cost.method) && cost.max_available > 0) {
      if (cost.max_available === 1) {
        return /*#__PURE__*/React__default['default'].createElement("div", {
          className: "form-row inline",
          key: cost.id
        }, /*#__PURE__*/React__default['default'].createElement("label", {
          htmlFor: cost.id
        }, cost.name), /*#__PURE__*/React__default['default'].createElement(Field, {
          component: "select",
          name: "costs[".concat(cost.id, "]")
        }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
          id: "no"
        }, function (formattedMessage) {
          return /*#__PURE__*/React__default['default'].createElement("option", {
            value: 0
          }, formattedMessage);
        }), /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
          id: "yes"
        }, function (formattedMessage) {
          return /*#__PURE__*/React__default['default'].createElement("option", {
            value: 1
          }, formattedMessage);
        })), /*#__PURE__*/React__default['default'].createElement("div", {
          className: "price_per"
        }, "\u20AC", ' ', /*#__PURE__*/React__default['default'].createElement(FormattedNumber, {
          value: cost.amount,
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        }), ' ', cost.method_name), /*#__PURE__*/React__default['default'].createElement("div", null, cost.description ? /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(Modal, {
          buttonText: /*#__PURE__*/React__default['default'].createElement(Icon, null)
        }, /*#__PURE__*/React__default['default'].createElement("p", null, cost.description))) : null));
      }

      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "form-row inline",
        key: cost.id
      }, /*#__PURE__*/React__default['default'].createElement("label", {
        htmlFor: cost.id
      }, cost.name), /*#__PURE__*/React__default['default'].createElement(Field, {
        component: "select",
        name: "costs[".concat(cost.id, "]")
      }, createPeronsArray(cost.max_available).map(function (opt) {
        return /*#__PURE__*/React__default['default'].createElement("option", {
          key: opt,
          value: opt
        }, opt);
      })), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "price_per"
      }, "\u20AC", ' ', /*#__PURE__*/React__default['default'].createElement(FormattedNumber, {
        value: cost.amount,
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }), ' ', cost.method_name), /*#__PURE__*/React__default['default'].createElement("div", null, cost.description ? /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(Modal, {
        buttonText: /*#__PURE__*/React__default['default'].createElement(Icon, null)
      }, /*#__PURE__*/React__default['default'].createElement("p", null, cost.description))) : null));
    } else {
      return '';
    }
  })));
}

function Guests(_ref) {
  var options = _ref.options,
      house = _ref.house;
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(NumberSelect, {
    name: "adults",
    label: "adults",
    count: house.persons,
    description: /*#__PURE__*/React__default['default'].createElement("div", {
      className: "age-description"
    }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "adults_from",
      defaultMessage: "> {age}",
      values: {
        age: options.bookingForm ? options.bookingForm.adults_from || '18' : '18'
      }
    }))
  }), options.bookingForm && !options.bookingForm.children ? null : /*#__PURE__*/React__default['default'].createElement(NumberSelect, {
    name: "children",
    label: "children",
    count: house.persons - 1,
    description: /*#__PURE__*/React__default['default'].createElement("div", {
      className: "age-description"
    }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "children_from",
      defaultMessage: "{from} - {til}",
      values: {
        from: options.bookingForm ? options.bookingForm.children_from || '3' : '3',
        til: options.bookingForm ? options.bookingForm.children_til || '17' : '17'
      }
    }))
  }), options.bookingForm && !options.bookingForm.babies ? null : /*#__PURE__*/React__default['default'].createElement(NumberSelect, {
    name: "babies",
    label: "babies",
    count: house.persons - 1,
    description: /*#__PURE__*/React__default['default'].createElement("div", {
      className: "age-description"
    }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
      id: "babies_from",
      defaultMessage: "til {babies_til}",
      values: {
        babies: options.bookingForm ? options.bookingForm.babies_til || '2' : '2'
      }
    }))
  }));
}

var FormCreator = /*#__PURE__*/function (_React$Component) {
  _inherits$4(FormCreator, _React$Component);

  var _super = _createSuper$4(FormCreator);

  function FormCreator() {
    var _this;

    _classCallCheck$4(this, FormCreator);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty$e(_assertThisInitialized$4(_this), "state", {
      formSubmit: false,
      bookingFields: _this.props.options.bookingFields || DefaultBookingFields
    });

    _defineProperty$e(_assertThisInitialized$4(_this), "validate", function (values) {
      var _values$extra_fields;

      var _this$props$house = _this.props.house,
          babies_extra = _this$props$house.babies_extra,
          persons = _this$props$house.persons;
      var errors = {};
      var babies = Number(values.babies) - Number(babies_extra);

      if (babies < 0) {
        babies = 0;
      }

      values.persons = Number(values.children) + Number(values.adults) + babies;

      var _iterator = _createForOfIteratorHelper(_this.state.bookingFields),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var field = _step.value;

          if (field.required) {
            if (isInt(field.id)) {
              var validateValue = byString(values, "extra_fields.booking_field_".concat(field.id));

              if (!validateValue || validateValue === '') {
                errors[field.id] = /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
                  id: "required"
                });
              }
            } else {
              var _validateValue = byString(values, field.id);

              if (!_validateValue || _validateValue === '') {
                errors[field.id] = /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
                  id: "required"
                });
              }
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (values.adults < 1) {
        errors.adults = /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
          id: "at_least_1_adult"
        });
      }

      if (Number(values.discount) > 0 && !values.discount_reason) {
        errors.discount_reason = /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
          id: "you_need_to_give_reason"
        });
      }

      if (values.persons > persons) {
        errors.max_persons = /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
          id: "max_persons_reached"
        });
      }

      if (values.cancel_insurance !== 0 && validateAge((_values$extra_fields = values.extra_fields) === null || _values$extra_fields === void 0 ? void 0 : _values$extra_fields.date_of_birth)) {
        errors['extra_fields.date_of_birth'] = /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
          id: "at_least_18y_old"
        });
        errors['insurances'] = /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
          id: "at_least_18y_old"
        });
      }

      if (values.cancel_insurance !== 0 && !arrayIncludes(['nl', 'de', 'be'], values.country)) {
        errors['insurances'] = /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
          id: "can_only_take_insurance_in_de_be_nl"
        });
        errors['country'] = /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
          id: "can_only_take_insurance_in_de_be_nl"
        });
      }

      return errors;
    });

    return _this;
  }

  _createClass$7(FormCreator, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var bookingFields = this.state.bookingFields;
      var _this$props = this.props,
          house = _this$props.house,
          locale = _this$props.locale,
          PortalSite = _this$props.PortalSite,
          options = _this$props.options,
          booking = _this$props.booking;
      var bookingPrice = house.booking_price;
      var costs = {};

      var _iterator2 = _createForOfIteratorHelper(bookingPrice.optional_house_costs),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var val = _step2.value;
          costs[val.id] = '0';
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var optBookingFieldsInitialized = initializeBookingFields(bookingFields);
      return /*#__PURE__*/React__default['default'].createElement(Mutation, {
        mutation: CREATE_BOOKING_MUTATION
      }, function (createBooking, _ref) {
        var loading = _ref.loading,
            error = _ref.error,
            data = _ref.data;
        return /*#__PURE__*/React__default['default'].createElement(Formik, {
          validate: _this2.validate,
          initialValues: _objectSpread2(_objectSpread2(_objectSpread2({}, booking), optBookingFieldsInitialized), {}, {
            costs: costs,
            adults: booking.persons,
            children: 0,
            babies: 0,
            persons: 2,
            discount: 0,
            country: 'nl'
          }),
          onSubmit: function onSubmit(values, _ref2) {
            _ref2.setSubmitting;

            var variables = _objectSpread2(_objectSpread2({}, values), {}, {
              is_option: JSON.parse(values.is_option),
              house_code: values.objectCode,
              portal_code: values.portalCode,
              comment: values.comment || '',
              language: locale,
              locale: locale,
              country: values.country.toUpperCase(),
              adults: Number(values.adults),
              children: Number(values.children) || 0,
              babies: Number(values.babies) || 0,
              discount: Number(values.discount) || 0,
              damage_insurance: Number(values.damage_insurance) || 0,
              cancel_insurance: Number(values.cancel_insurance) || 0,
              travel_insurance: Number(values.travel_insurance) || 0,
              arrival_date: values.arrivalDate.date,
              departure_date: values.departureDate.date,
              costs: JSON.stringify(values.costs),
              extra_fields: JSON.stringify(values.extra_fields)
            });

            createBooking({
              variables: variables
            }).then(function () {
              if (options.bookingForm && options.bookingForm.redirectUrl && options.bookingForm.redirectUrl !== '') {
                window.location = options.bookingForm.redirectUrl;
              } else {
                setTimeout(function () {
                  _this2.props.onReturn();
                }, 15000);
              }
            })["catch"](function (err) {});
          },
          render: function render(_ref3) {
            var errors = _ref3.errors,
                touched = _ref3.touched,
                values = _ref3.values,
                status = _ref3.status,
                isSubmitting = _ref3.isSubmitting;
            return /*#__PURE__*/React__default['default'].createElement(Form, {
              className: "form"
            }, loading && /*#__PURE__*/React__default['default'].createElement("div", {
              className: "return-message"
            }, "Loading..."), error && /*#__PURE__*/React__default['default'].createElement(Modal, {
              show: true
            }, /*#__PURE__*/React__default['default'].createElement(ApiError, {
              errors: error,
              modal: true
            })), data && /*#__PURE__*/React__default['default'].createElement(Modal, {
              show: true
            }, /*#__PURE__*/React__default['default'].createElement(SuccessMessage, null)), /*#__PURE__*/React__default['default'].createElement("div", {
              className: "form-content"
            }, /*#__PURE__*/React__default['default'].createElement("div", {
              className: "form-section"
            }, /*#__PURE__*/React__default['default'].createElement("a", {
              className: "return-link",
              role: "link",
              tabIndex: 0,
              onKeyPress: function onKeyPress() {
                _this2.props.onReturn();
              },
              onClick: function onClick() {
                _this2.props.onReturn();
              }
            }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
              id: "return_to_calendar"
            })), /*#__PURE__*/React__default['default'].createElement("h2", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
              id: "stay_details"
            })), /*#__PURE__*/React__default['default'].createElement(Guests, {
              options: options,
              house: house
            }), errors.max_persons && /*#__PURE__*/React__default['default'].createElement("div", {
              className: "error-message persons"
            }, errors.max_persons)), /*#__PURE__*/React__default['default'].createElement(Discount, {
              errors: errors,
              house: house,
              options: options,
              values: values
            }), /*#__PURE__*/React__default['default'].createElement(Insurances, {
              house: house,
              values: values
            }), /*#__PURE__*/React__default['default'].createElement(OptionalCosts, {
              costs: bookingPrice.optional_house_costs
            }), /*#__PURE__*/React__default['default'].createElement(OptionalBookingFields, {
              bookingFields: bookingFields,
              errors: errors,
              touched: touched,
              PortalSite: PortalSite,
              values: values
            })), /*#__PURE__*/React__default['default'].createElement("div", {
              className: "form-sum"
            }, /*#__PURE__*/React__default['default'].createElement(Summary, {
              house: house,
              values: values
            }), status && status.msg && /*#__PURE__*/React__default['default'].createElement("div", null, status.msg), /*#__PURE__*/React__default['default'].createElement("div", {
              className: "terms"
            }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
              id: "agree_with"
            }), ' ', /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
              id: "terms"
            }, function (fm) {
              return /*#__PURE__*/React__default['default'].createElement(Modal, {
                buttonText: fm
              }, /*#__PURE__*/React__default['default'].createElement("div", {
                style: {
                  width: '90vh',
                  height: '90vh'
                }
              }, /*#__PURE__*/React__default['default'].createElement("iframe", {
                src: house.rental_terms,
                width: "100%",
                height: "100%",
                title: "Terms",
                frameBorder: "0"
              })));
            })), arrayIncludes([1, 2], Number(values.cancel_insurance)) ? /*#__PURE__*/React__default['default'].createElement("div", {
              className: "terms"
            }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
              id: "comply_insurance_card"
            })) : null, /*#__PURE__*/React__default['default'].createElement("button", {
              className: "button",
              type: "submit",
              disabled: isSubmitting
            }, /*#__PURE__*/React__default['default'].createElement(FormattedMessage$1, {
              id: "book"
            }))));
          }
        });
      });
    }
  }]);

  return FormCreator;
}(React__default['default'].Component);

FormCreator.propTypes = {
  house: PropTypes.object.isRequired,
  options: PropTypes.object.isRequired,
  locale: PropTypes.string.isRequired,
  booking: PropTypes.object.isRequired,
  PortalSite: PropTypes.object.isRequired,
  onReturn: PropTypes.func.isRequired
};

function BookingForm(_ref) {
  var booking = _ref.booking,
      locale = _ref.locale,
      _onReturn = _ref.onReturn;
  return /*#__PURE__*/React__default['default'].createElement(Query, {
    query: BOOKING_PRICE_QUERY,
    variables: {
      id: booking.portalCode,
      house_id: booking.objectCode,
      starts_at: booking.arrivalDate.date,
      ends_at: booking.departureDate.date,
      locale: locale
    }
  }, function (_ref2) {
    var loading = _ref2.loading,
        error = _ref2.error,
        data = _ref2.data;
    if (loading) return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(Loading, null));

    if (error) {
      return /*#__PURE__*/React__default['default'].createElement("div", null, "Error");
    }

    var result = data.PortalSite.houses[0];
    var options = data.PortalSite.options;
    return /*#__PURE__*/React__default['default'].createElement(FormCreator, {
      house: result,
      options: options,
      booking: booking,
      PortalSite: data.PortalSite,
      locale: locale,
      onReturn: function onReturn() {
        _onReturn(booking);
      }
    });
  });
}

BookingForm.propTypes = {
  booking: PropTypes.object.isRequired,
  locale: PropTypes.string.isRequired,
  onReturn: PropTypes.func.isRequired
};

var _templateObject;
var HOUSE_QUERY = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  query PortalSiteHousesQuery($id: ID!, $house_id: String!) {\n    PortalSite(id: $id) {\n      id\n      houses(house_code: $house_id) {\n        id\n        name\n        max_nights\n        last_minute_days\n        discounts\n        discounts_info\n        house_type\n        persons\n      }\n    }\n  }\n"])));

var CalendarPage = /*#__PURE__*/function (_Component) {
  _inherits$4(CalendarPage, _Component);

  var _super = _createSuper$4(CalendarPage);

  function CalendarPage(props) {
    var _this;

    _classCallCheck$4(this, CalendarPage);

    _this = _super.call(this, props);
    _this.onBooking = _this.onBooking.bind(_assertThisInitialized$4(_this));
    _this.onReturn = _this.onReturn.bind(_assertThisInitialized$4(_this));
    _this.state = {
      bookingStarted: false,
      booking: {
        objectCode: '',
        portalCode: '',
        arrivalDate: {},
        departureDate: {},
        in_option: false
      }
    };
    return _this;
  }

  _createClass$7(CalendarPage, [{
    key: "onBooking",
    value: function onBooking(booking) {
      this.setState({
        bookingStarted: true,
        booking: booking
      });
    }
  }, {
    key: "onReturn",
    value: function onReturn(booking) {
      this.setState({
        bookingStarted: false,
        booking: booking
      });
    }
  }, {
    key: "calendar",
    value: function calendar() {
      var _this2 = this;

      var _this$props = this.props,
          objectCode = _this$props.objectCode,
          PortalSite = _this$props.PortalSite,
          locale = _this$props.locale;
      var variables = {
        id: PortalSite.portal_code,
        house_id: objectCode,
        locale: locale
      };
      return /*#__PURE__*/React__default['default'].createElement(Query, {
        query: HOUSE_QUERY,
        variables: variables
      }, function (_ref) {
        var loading = _ref.loading,
            error = _ref.error,
            data = _ref.data;
        if (loading) return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(Loading, null));

        if (error) {
          return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(ApiError, {
            errors: error
          }));
        }

        var Results = data.PortalSite.houses;
        var numberOfMonths = PortalSite.options.bookingForm ? PortalSite.options.bookingForm.numberOfMonths : 4;
        var numberOfMonthsInARow = PortalSite.options.bookingForm ? PortalSite.options.bookingForm.numberOfMonthsInARow : 4;
        return /*#__PURE__*/React__default['default'].createElement("div", {
          id: "calendar-container"
        }, Results.length === 0 && /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(FormattedMessage, {
          id: "no_house_found"
        })), Results.map(function (result) {
          return /*#__PURE__*/React__default['default'].createElement("div", {
            key: result.id
          }, /*#__PURE__*/React__default['default'].createElement("div", {
            className: "house-name"
          }, result.name), /*#__PURE__*/React__default['default'].createElement(Calendar, {
            portalCode: variables.id,
            objectCode: variables.house_id,
            numberOfMonths: numberOfMonths,
            numberOfMonthsInARow: numberOfMonthsInARow,
            house: result,
            locale: locale,
            onBooking: _this2.onBooking
          }));
        }));
      });
    }
  }, {
    key: "bookingForm",
    value: function bookingForm() {
      return /*#__PURE__*/React__default['default'].createElement(BookingForm, {
        booking: this.state.booking,
        locale: this.props.locale,
        onReturn: this.onReturn
      });
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.bookingStarted) {
        return this.bookingForm();
      } else {
        return this.calendar();
      }
    }
  }]);

  return CalendarPage;
}(React.Component);

CalendarPage.DefaultProps = {
  PortalSite: {
    options: {
      bookingForm: {
        numberOfMonths: 4,
        numberOfMonthsInARow: 2
      }
    }
  }
};
CalendarPage.propTypes = {
  objectCode: PropTypes.string.isRequired,
  // portalCode: PropTypes.string.isRequired,
  PortalSite: PropTypes.object.isRequired,
  locale: PropTypes.string.isRequired
};

var ReviewsPage = /*#__PURE__*/function (_Component) {
  _inherits$4(ReviewsPage, _Component);

  var _super = _createSuper$4(ReviewsPage);

  function ReviewsPage(props) {
    var _this;

    _classCallCheck$4(this, ReviewsPage);

    _this = _super.call(this, props);
    _this.state = {};
    return _this;
  }

  _createClass$7(ReviewsPage, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React__default['default'].createElement("div", null, "Display Reviews");
    }
  }]);

  return ReviewsPage;
}(React.Component);

var pjson = {
	name: "bukazu-portal-react",
	version: "2.1.0",
	description: "A package for loading the calendar and search module from bukazu loading into a react app.",
	main: "build/index.js",
	repository: "https://github.com/BUKAZU/React-portal",
	scripts: {
		start: "webpack serve --open --config webpack.config.dev",
		test: "cypress open",
		build: "rollup -c",
		watch: "rollup -c -w"
	},
	author: "Bob van Oorschot",
	license: "MIT",
	peerDependencies: {
		react: "^16.14.0 || ^17.0.2",
		"react-dom": "^16.14.0 || ^17.0.2"
	},
	devDependencies: {
		"@babel/core": "^7.15.0",
		"@babel/plugin-proposal-class-properties": "^7.13.0",
		"@babel/preset-env": "^7.15.0",
		"@babel/preset-react": "^7.14.5",
		"@cypress/react": "^5.3.3",
		"@cypress/webpack-dev-server": "^1.1.3",
		"@rollup/plugin-commonjs": "^20.0.0",
		"@rollup/plugin-json": "^4.1.0",
		autoprefixer: "^10.2.5",
		"babel-core": "^6.26.3",
		"babel-loader": "^8.2.2",
		"babel-runtime": "^6.26.0",
		chalk: "1.1.3",
		"css-loader": "0.28.7",
		cypress: "^7.1.0",
		dotenv: "4.0.0",
		"dotenv-expand": "4.2.0",
		eslint: "^7.28.0",
		"eslint-plugin-jsx-a11y": "^6.4.1",
		"eslint-plugin-prettier": "^3.4.0",
		"eslint-plugin-react": "^7.24.0",
		"fs-extra": "3.0.1",
		jest: "24.5.0",
		"mini-css-extract-plugin": "^1.5.0",
		"npm-run-all": "^4.1.5",
		postcss: "^8.2.12",
		"postcss-import": "^14.0.1",
		"postcss-loader": "^5.2.0",
		"postcss-modules": "^4.2.2",
		"postcss-nested": "^5.0.5",
		"postcss-preset-env": "^6.7.0",
		prettier: "^2.3.1",
		react: "^16.4.1",
		"react-dev-utils": "^5.0.1",
		"react-dom": "^16.14.0",
		resolve: "1.6.0",
		rollup: "^2.56.2",
		"rollup-plugin-babel": "^4.4.0",
		"rollup-plugin-node-resolve": "^5.2.0",
		"rollup-plugin-postcss": "^4.0.1",
		"rollup-plugin-replace": "^2.2.0",
		webpack: "^5",
		"webpack-cli": "^4.6.0",
		"webpack-dev-server": "^3.0.0",
		"whatwg-fetch": "2.0.3"
	},
	dependencies: {
		"@apollo/client": "^3.4.15",
		"array-includes": "^3.0.3",
		"array-sort": "^1.0.0",
		"date-fns": "^1.29.0",
		formik: "^2.2.9",
		graphql: "^15.6.0",
		"react-date-picker": "^8.1.1",
		"react-intl": "^2.7.2",
		"react-js-pagination": "^3.0.2"
	},
	eslintConfig: {
		"extends": [
			"eslint:recommended",
			"plugin:react/recommended",
			"plugin:jsx-a11y/recommended"
		],
		parser: "babel-eslint",
		env: {
			browser: true,
			node: true
		},
		rules: {
			strict: 0,
			"no-console": "warn",
			quotes: [
				"warn",
				"single"
			],
			"prettier/prettier": "warn"
		},
		plugins: [
			"prettier",
			"jsx-a11y"
		]
	}
};

var style = {
  width: "100%",
  padding: "16px",
  display: "flex",
  justifyContent: "center",
  position: "relative"
};
var styleLink = {
  color: "#808080",
  fontSize: 14,
  textDecoration: "none"
};
var trans = {
  nl: {
    url: "http://bukazu.com/veiligheid",
    label: "Beveiligd en mogelijk gemaakt door BUKAZU"
  },
  en: {
    url: "http://bukazu.com/en/security",
    label: "Secured and made possible by BUKAZU"
  },
  de: {
    url: "http://bukazu.com/de/sicherheit",
    label: "Gesichert und ermöglicht durch BUKAZU"
  },
  fr: {
    url: "http://bukazu.com/fr/securite",
    label: "Sécurisé et rendu possible par BUKAZU"
  },
  es: {
    url: "http://bukazu.com/es/seguridad",
    label: "Asegurado y hecho posible por BUKAZU"
  },
  it: {
    url: "http://bukazu.com/it/sicurezza",
    label: "Protetto e reso possibile da BUKAZU"
  }
};

function SafeBooking(_ref) {
  var locale = _ref.locale;
  return /*#__PURE__*/React__default['default'].createElement("div", {
    style: style
  }, /*#__PURE__*/React__default['default'].createElement("a", {
    href: trans[locale].url,
    style: styleLink
  }, /*#__PURE__*/React__default['default'].createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    version: "1.1",
    x: "0px",
    y: "0px",
    viewBox: "0 0 100 100",
    enableBackground: "new 0 0 100 100",
    xmlSpace: "preserve",
    width: "16px",
    height: "16px",
    style: {
      marginRight: "4px",
      fill: "#808080"
    }
  }, /*#__PURE__*/React__default['default'].createElement("path", {
    d: "M75.98,41.62h-2.47L73.5,29.31C73.49,15.9,62.58,4.99,49.17,5C35.76,5.01,24.85,15.92,24.86,29.33l0.02,12.31H24  c-4.61,0.01-8.35,3.75-8.34,8.36v36.65c0,4.61,3.75,8.35,8.36,8.35L76,94.97c4.61,0,8.35-3.74,8.34-8.35V49.96  C84.34,45.35,80.59,41.62,75.98,41.62z M33.84,41.64l-0.02-12.31c0-8.47,6.88-15.36,15.35-15.37c8.47,0,15.36,6.89,15.36,15.35  l0.02,12.31L33.84,41.64z"
  })), trans[locale].label, " ", /*#__PURE__*/React__default['default'].createElement("span", {
    style: {
      opacity: .5,
      fontSize: 9,
      position: 'absolute',
      right: 10,
      bottom: 0
    }
  }, "v", pjson.version)));
}

var ErrorBoundary = /*#__PURE__*/function (_React$Component) {
  _inherits$4(ErrorBoundary, _React$Component);

  var _super = _createSuper$4(ErrorBoundary);

  function ErrorBoundary(props) {
    var _this;

    _classCallCheck$4(this, ErrorBoundary);

    _this = _super.call(this, props);
    _this.state = {
      hasError: false
    };
    return _this;
  }

  _createClass$7(ErrorBoundary, [{
    key: "componentDidCatch",
    value: function componentDidCatch(error, errorInfo) {
      // You can also log the error to an error reporting service
      console.log(error, errorInfo);
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.hasError) {
        // You can render any custom fallback UI
        return /*#__PURE__*/React__default['default'].createElement("h1", null, "Something went wrong.");
      }

      return this.props.children;
    }
  }], [{
    key: "getDerivedStateFromError",
    value: function getDerivedStateFromError(error) {
      // Update state so the next render will show the fallback UI.
      return {
        hasError: true
      };
    }
  }]);

  return ErrorBoundary;
}(React__default['default'].Component);

var App = /*#__PURE__*/function (_Component) {
  _inherits$4(App, _Component);

  var _super = _createSuper$4(App);

  function App(props) {
    var _this;

    _classCallCheck$4(this, App);

    _this = _super.call(this, props);
    _this.pageWidth = /*#__PURE__*/React__default['default'].createRef();
    return _this;
  }
  /**
   * Calculate & Update state of new dimensions
   */


  _createClass$7(App, [{
    key: "updateDimensions",
    value: function updateDimensions() {
      if (this.pageWidth.current.offsetWidth < 1200) {
        this.pageWidth.current.classList.add('bu-smaller');
      }
    }
    /**
     * Add event listener
     */

  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateDimensions(); // window.addEventListener("resize", this.updateDimensions.bind(this));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          portalCode = _this$props.portalCode,
          objectCode = _this$props.objectCode,
          pageType = _this$props.pageType,
          locale = _this$props.locale,
          filters = _this$props.filters,
          id = _this$props.id,
          className = _this$props.className;
      return /*#__PURE__*/React__default['default'].createElement("div", {
        ref: this.pageWidth,
        id: id,
        className: className
      }, /*#__PURE__*/React__default['default'].createElement(Query, {
        query: PORTAL_QUERY,
        variables: {
          id: portalCode,
          locale: locale
        }
      }, function (_ref) {
        var loading = _ref.loading,
            error = _ref.error,
            data = _ref.data;
        if (loading) return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(Loading, null));

        if (error) {
          return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(ApiError, {
            errors: _objectSpread2({}, error)
          }));
        }

        var PortalSite = data.PortalSite;
        var options = data.PortalSite.options;
        var root = document.documentElement;
        root.style.setProperty('--bukazu-discount', "".concat(options.colors ? options.colors.discount : 'orange'));
        root.style.setProperty('--bukazu-cell', "".concat(options.colors ? options.colors.cell : '#fff'));
        root.style.setProperty('--bukazu-arrival', "".concat(options.colors ? options.colors.arrival : '#6eeb83'));
        root.style.setProperty('--bukazu-booked', "".concat(options.colors ? options.colors.booked : '#ea2b1f'));
        root.style.setProperty('--bukazu-departure', "".concat(options.colors ? options.colors.departure : 'yellow'));
        root.style.setProperty('--bukazu-button', "".concat(options.colors ? options.colors.button : 'rgba(23, 190, 187, 0.75)'));
        root.style.setProperty('--bukazu-button_cta', "".concat(options.colors ? options.colors.buttonCta : '#e28413'));
        root.style.setProperty('--bukazu-background_month', "".concat(options.colors ? options.colors.month_background : '#e28413'));

        if (objectCode && objectCode !== null && pageType !== 'reviews') {
          return /*#__PURE__*/React__default['default'].createElement("section", null, /*#__PURE__*/React__default['default'].createElement(ErrorBoundary, null, /*#__PURE__*/React__default['default'].createElement(CalendarPage, {
            PortalSite: PortalSite,
            objectCode: objectCode,
            locale: locale
          }), /*#__PURE__*/React__default['default'].createElement(SafeBooking, {
            locale: locale
          })));
        } else if (objectCode && objectCode !== null && pageType === 'reviews') {
          return /*#__PURE__*/React__default['default'].createElement(ReviewsPage, {
            PortalSite: PortalSite,
            locale: locale,
            options: options,
            filters: filters
          });
        } else {
          return /*#__PURE__*/React__default['default'].createElement(SearchPage, {
            PortalSite: PortalSite,
            locale: locale,
            options: options,
            filters: filters
          });
        }
      }));
    }
  }]);

  return App;
}(React.Component);

App.defaultProps = {
  filters: {}
};
App.propTypes = {
  portalCode: PropTypes.string.isRequired,
  objectCode: PropTypes.string,
  locale: PropTypes.string.isRequired,
  filters: PropTypes.object.isRequired
};

var en$1 = {exports: {}};

(function (module, exports) {
!function(e,a){module.exports=a();}(commonjsGlobal,function(){return [{locale:"en",pluralRuleFunction:function(e,a){var t=String(e).split("."),o=!t[1],n=Number(t[0])==e,r=n&&t[0].slice(-1),i=n&&t[0].slice(-2);return a?1==r&&11!=i?"one":2==r&&12!=i?"two":3==r&&13!=i?"few":"other":1==e&&o?"one":"other"},fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr.",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr.",other:"in {0} yr."},past:{one:"{0} yr. ago",other:"{0} yr. ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo.",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo.",other:"in {0} mo."},past:{one:"{0} mo. ago",other:"{0} mo. ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr.",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr.",other:"in {0} hr."},past:{one:"{0} hr. ago",other:"{0} hr. ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min.",other:"in {0} min."},past:{one:"{0} min. ago",other:"{0} min. ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec.",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec.",other:"in {0} sec."},past:{one:"{0} sec. ago",other:"{0} sec. ago"}}}}},{locale:"en-001",parentLocale:"en",fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr",other:"in {0} yr"},past:{one:"{0} yr ago",other:"{0} yr ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo",other:"in {0} mo"},past:{one:"{0} mo ago",other:"{0} mo ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr",other:"in {0} hr"},past:{one:"{0} hr ago",other:"{0} hr ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min",other:"in {0} min"},past:{one:"{0} min ago",other:"{0} min ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec",other:"in {0} sec"},past:{one:"{0} sec ago",other:"{0} sec ago"}}}}},{locale:"en-150",parentLocale:"en-001"},{locale:"en-AG",parentLocale:"en-001"},{locale:"en-AI",parentLocale:"en-001"},{locale:"en-AS",parentLocale:"en"},{locale:"en-AT",parentLocale:"en-150"},{locale:"en-AU",parentLocale:"en-001",fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr",other:"in {0} yrs"},past:{one:"{0} yr ago",other:"{0} yrs ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo.",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo.",other:"in {0} mo."},past:{one:"{0} mo. ago",other:"{0} mo. ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"h",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr",other:"in {0} hrs"},past:{one:"{0} hr ago",other:"{0} hrs ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min.",other:"in {0} mins"},past:{one:"{0} min. ago",other:"{0} mins ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec.",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec.",other:"in {0} secs"},past:{one:"{0} sec. ago",other:"{0} secs ago"}}}}},{locale:"en-BB",parentLocale:"en-001"},{locale:"en-BE",parentLocale:"en-001"},{locale:"en-BI",parentLocale:"en"},{locale:"en-BM",parentLocale:"en-001"},{locale:"en-BS",parentLocale:"en-001"},{locale:"en-BW",parentLocale:"en-001"},{locale:"en-BZ",parentLocale:"en-001"},{locale:"en-CA",parentLocale:"en-001",fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr.",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr.",other:"in {0} yrs."},past:{one:"{0} yr. ago",other:"{0} yrs. ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo.",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo.",other:"in {0} mos."},past:{one:"{0} mo. ago",other:"{0} mos. ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr.",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr.",other:"in {0} hrs."},past:{one:"{0} hr. ago",other:"{0} hrs. ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min.",other:"in {0} mins."},past:{one:"{0} min. ago",other:"{0} mins. ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec.",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec.",other:"in {0} secs."},past:{one:"{0} sec. ago",other:"{0} secs. ago"}}}}},{locale:"en-CC",parentLocale:"en-001"},{locale:"en-CH",parentLocale:"en-150"},{locale:"en-CK",parentLocale:"en-001"},{locale:"en-CM",parentLocale:"en-001"},{locale:"en-CX",parentLocale:"en-001"},{locale:"en-CY",parentLocale:"en-001"},{locale:"en-DE",parentLocale:"en-150"},{locale:"en-DG",parentLocale:"en-001"},{locale:"en-DK",parentLocale:"en-150"},{locale:"en-DM",parentLocale:"en-001"},{locale:"en-Dsrt",pluralRuleFunction:function(e,a){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"en-ER",parentLocale:"en-001"},{locale:"en-FI",parentLocale:"en-150"},{locale:"en-FJ",parentLocale:"en-001"},{locale:"en-FK",parentLocale:"en-001"},{locale:"en-FM",parentLocale:"en-001"},{locale:"en-GB",parentLocale:"en-001"},{locale:"en-GD",parentLocale:"en-001"},{locale:"en-GG",parentLocale:"en-001"},{locale:"en-GH",parentLocale:"en-001"},{locale:"en-GI",parentLocale:"en-001"},{locale:"en-GM",parentLocale:"en-001"},{locale:"en-GU",parentLocale:"en"},{locale:"en-GY",parentLocale:"en-001"},{locale:"en-HK",parentLocale:"en-001"},{locale:"en-IE",parentLocale:"en-001"},{locale:"en-IL",parentLocale:"en-001"},{locale:"en-IM",parentLocale:"en-001"},{locale:"en-IN",parentLocale:"en-001"},{locale:"en-IO",parentLocale:"en-001"},{locale:"en-JE",parentLocale:"en-001"},{locale:"en-JM",parentLocale:"en-001"},{locale:"en-KE",parentLocale:"en-001"},{locale:"en-KI",parentLocale:"en-001"},{locale:"en-KN",parentLocale:"en-001"},{locale:"en-KY",parentLocale:"en-001"},{locale:"en-LC",parentLocale:"en-001"},{locale:"en-LR",parentLocale:"en-001"},{locale:"en-LS",parentLocale:"en-001"},{locale:"en-MG",parentLocale:"en-001"},{locale:"en-MH",parentLocale:"en"},{locale:"en-MO",parentLocale:"en-001"},{locale:"en-MP",parentLocale:"en"},{locale:"en-MS",parentLocale:"en-001"},{locale:"en-MT",parentLocale:"en-001"},{locale:"en-MU",parentLocale:"en-001"},{locale:"en-MW",parentLocale:"en-001"},{locale:"en-MY",parentLocale:"en-001"},{locale:"en-NA",parentLocale:"en-001"},{locale:"en-NF",parentLocale:"en-001"},{locale:"en-NG",parentLocale:"en-001"},{locale:"en-NL",parentLocale:"en-150"},{locale:"en-NR",parentLocale:"en-001"},{locale:"en-NU",parentLocale:"en-001"},{locale:"en-NZ",parentLocale:"en-001"},{locale:"en-PG",parentLocale:"en-001"},{locale:"en-PH",parentLocale:"en-001"},{locale:"en-PK",parentLocale:"en-001"},{locale:"en-PN",parentLocale:"en-001"},{locale:"en-PR",parentLocale:"en"},{locale:"en-PW",parentLocale:"en-001"},{locale:"en-RW",parentLocale:"en-001"},{locale:"en-SB",parentLocale:"en-001"},{locale:"en-SC",parentLocale:"en-001"},{locale:"en-SD",parentLocale:"en-001"},{locale:"en-SE",parentLocale:"en-150"},{locale:"en-SG",parentLocale:"en-001",fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr",relative:{0:"this yr",1:"next yr","-1":"last yr"},relativeTime:{future:{one:"in {0} yr",other:"in {0} yr"},past:{one:"{0} yr ago",other:"{0} yr ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mth",relative:{0:"this mth",1:"next mth","-1":"last mth"},relativeTime:{future:{one:"in {0} mth",other:"in {0} mth"},past:{one:"{0} mth ago",other:"{0} mth ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr",other:"in {0} hr"},past:{one:"{0} hr ago",other:"{0} hr ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min",other:"in {0} min"},past:{one:"{0} min ago",other:"{0} min ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec",other:"in {0} sec"},past:{one:"{0} sec ago",other:"{0} sec ago"}}}}},{locale:"en-SH",parentLocale:"en-001"},{locale:"en-SI",parentLocale:"en-150"},{locale:"en-SL",parentLocale:"en-001"},{locale:"en-SS",parentLocale:"en-001"},{locale:"en-SX",parentLocale:"en-001"},{locale:"en-SZ",parentLocale:"en-001"},{locale:"en-Shaw",pluralRuleFunction:function(e,a){return "other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"en-TC",parentLocale:"en-001"},{locale:"en-TK",parentLocale:"en-001"},{locale:"en-TO",parentLocale:"en-001"},{locale:"en-TT",parentLocale:"en-001"},{locale:"en-TV",parentLocale:"en-001"},{locale:"en-TZ",parentLocale:"en-001"},{locale:"en-UG",parentLocale:"en-001"},{locale:"en-UM",parentLocale:"en"},{locale:"en-US",parentLocale:"en"},{locale:"en-VC",parentLocale:"en-001"},{locale:"en-VG",parentLocale:"en-001"},{locale:"en-VI",parentLocale:"en"},{locale:"en-VU",parentLocale:"en-001"},{locale:"en-WS",parentLocale:"en-001"},{locale:"en-ZA",parentLocale:"en-001"},{locale:"en-ZM",parentLocale:"en-001"},{locale:"en-ZW",parentLocale:"en-001"}]});
}(en$1));

var enData = en$1.exports;

var fr$1 = {exports: {}};

(function (module, exports) {
!function(e,a){module.exports=a();}(commonjsGlobal,function(){return [{locale:"fr",pluralRuleFunction:function(e,a){return a?1==e?"one":"other":e>=0&&e<2?"one":"other"},fields:{year:{displayName:"année",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"dans {0} an",other:"dans {0} ans"},past:{one:"il y a {0} an",other:"il y a {0} ans"}}},"year-short":{displayName:"an",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"dans {0} a",other:"dans {0} a"},past:{one:"il y a {0} a",other:"il y a {0} a"}}},month:{displayName:"mois",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} mois",other:"dans {0} mois"},past:{one:"il y a {0} mois",other:"il y a {0} mois"}}},"month-short":{displayName:"m.",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} m.",other:"dans {0} m."},past:{one:"il y a {0} m.",other:"il y a {0} m."}}},day:{displayName:"jour",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} jour",other:"dans {0} jours"},past:{one:"il y a {0} jour",other:"il y a {0} jours"}}},"day-short":{displayName:"j",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} j",other:"dans {0} j"},past:{one:"il y a {0} j",other:"il y a {0} j"}}},hour:{displayName:"heure",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} heure",other:"dans {0} heures"},past:{one:"il y a {0} heure",other:"il y a {0} heures"}}},"hour-short":{displayName:"h",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} h",other:"dans {0} h"},past:{one:"il y a {0} h",other:"il y a {0} h"}}},minute:{displayName:"minute",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} minute",other:"dans {0} minutes"},past:{one:"il y a {0} minute",other:"il y a {0} minutes"}}},"minute-short":{displayName:"min",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} min",other:"dans {0} min"},past:{one:"il y a {0} min",other:"il y a {0} min"}}},second:{displayName:"seconde",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} seconde",other:"dans {0} secondes"},past:{one:"il y a {0} seconde",other:"il y a {0} secondes"}}},"second-short":{displayName:"s",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} s",other:"dans {0} s"},past:{one:"il y a {0} s",other:"il y a {0} s"}}}}},{locale:"fr-BE",parentLocale:"fr"},{locale:"fr-BF",parentLocale:"fr"},{locale:"fr-BI",parentLocale:"fr"},{locale:"fr-BJ",parentLocale:"fr"},{locale:"fr-BL",parentLocale:"fr"},{locale:"fr-CA",parentLocale:"fr",fields:{year:{displayName:"année",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"Dans {0} an",other:"Dans {0} ans"},past:{one:"Il y a {0} an",other:"Il y a {0} ans"}}},"year-short":{displayName:"a",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"dans {0} a",other:"dans {0} a"},past:{one:"il y a {0} a",other:"il y a {0} a"}}},month:{displayName:"mois",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} mois",other:"dans {0} mois"},past:{one:"il y a {0} mois",other:"il y a {0} mois"}}},"month-short":{displayName:"m.",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} m.",other:"dans {0} m."},past:{one:"il y a {0} m.",other:"il y a {0} m."}}},day:{displayName:"jour",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} jour",other:"dans {0} jours"},past:{one:"il y a {0} jour",other:"il y a {0} jours"}}},"day-short":{displayName:"j",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} j",other:"dans {0} j"},past:{one:"il y a {0} j",other:"il y a {0} j"}}},hour:{displayName:"heure",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} heure",other:"dans {0} heures"},past:{one:"il y a {0} heure",other:"il y a {0} heures"}}},"hour-short":{displayName:"h",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} h",other:"dans {0} h"},past:{one:"il y a {0} h",other:"il y a {0} h"}}},minute:{displayName:"minute",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} minute",other:"dans {0} minutes"},past:{one:"il y a {0} minute",other:"il y a {0} minutes"}}},"minute-short":{displayName:"min",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} min",other:"dans {0} min"},past:{one:"il y a {0} min",other:"il y a {0} min"}}},second:{displayName:"seconde",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} seconde",other:"dans {0} secondes"},past:{one:"il y a {0} seconde",other:"il y a {0} secondes"}}},"second-short":{displayName:"s",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} s",other:"dans {0} s"},past:{one:"il y a {0} s",other:"il y a {0} s"}}}}},{locale:"fr-CD",parentLocale:"fr"},{locale:"fr-CF",parentLocale:"fr"},{locale:"fr-CG",parentLocale:"fr"},{locale:"fr-CH",parentLocale:"fr"},{locale:"fr-CI",parentLocale:"fr"},{locale:"fr-CM",parentLocale:"fr"},{locale:"fr-DJ",parentLocale:"fr"},{locale:"fr-DZ",parentLocale:"fr"},{locale:"fr-GA",parentLocale:"fr"},{locale:"fr-GF",parentLocale:"fr"},{locale:"fr-GN",parentLocale:"fr"},{locale:"fr-GP",parentLocale:"fr"},{locale:"fr-GQ",parentLocale:"fr"},{locale:"fr-HT",parentLocale:"fr",fields:{year:{displayName:"année",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"dans {0} an",other:"dans {0} ans"},past:{one:"il y a {0} an",other:"il y a {0} ans"}}},"year-short":{displayName:"an",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"dans {0} a",other:"dans {0} a"},past:{one:"il y a {0} a",other:"il y a {0} a"}}},month:{displayName:"mois",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} mois",other:"dans {0} mois"},past:{one:"il y a {0} mois",other:"il y a {0} mois"}}},"month-short":{displayName:"m.",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} m.",other:"dans {0} m."},past:{one:"il y a {0} m.",other:"il y a {0} m."}}},day:{displayName:"jour",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} jour",other:"dans {0} jours"},past:{one:"il y a {0} jour",other:"il y a {0} jours"}}},"day-short":{displayName:"jr.",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} j",other:"dans {0} j"},past:{one:"il y a {0} j",other:"il y a {0} j"}}},hour:{displayName:"heure",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} heure",other:"dans {0} heures"},past:{one:"il y a {0} heure",other:"il y a {0} heures"}}},"hour-short":{displayName:"hr",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} h",other:"dans {0} h"},past:{one:"il y a {0} h",other:"il y a {0} h"}}},minute:{displayName:"minute",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} minute",other:"dans {0} minutes"},past:{one:"il y a {0} minute",other:"il y a {0} minutes"}}},"minute-short":{displayName:"min.",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} min",other:"dans {0} min"},past:{one:"il y a {0} min",other:"il y a {0} min"}}},second:{displayName:"seconde",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} seconde",other:"dans {0} secondes"},past:{one:"il y a {0} seconde",other:"il y a {0} secondes"}}},"second-short":{displayName:"s",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} s",other:"dans {0} s"},past:{one:"il y a {0} s",other:"il y a {0} s"}}}}},{locale:"fr-KM",parentLocale:"fr"},{locale:"fr-LU",parentLocale:"fr"},{locale:"fr-MA",parentLocale:"fr"},{locale:"fr-MC",parentLocale:"fr"},{locale:"fr-MF",parentLocale:"fr"},{locale:"fr-MG",parentLocale:"fr"},{locale:"fr-ML",parentLocale:"fr"},{locale:"fr-MQ",parentLocale:"fr"},{locale:"fr-MR",parentLocale:"fr"},{locale:"fr-MU",parentLocale:"fr"},{locale:"fr-NC",parentLocale:"fr"},{locale:"fr-NE",parentLocale:"fr"},{locale:"fr-PF",parentLocale:"fr"},{locale:"fr-PM",parentLocale:"fr"},{locale:"fr-RE",parentLocale:"fr"},{locale:"fr-RW",parentLocale:"fr"},{locale:"fr-SC",parentLocale:"fr"},{locale:"fr-SN",parentLocale:"fr"},{locale:"fr-SY",parentLocale:"fr"},{locale:"fr-TD",parentLocale:"fr"},{locale:"fr-TG",parentLocale:"fr"},{locale:"fr-TN",parentLocale:"fr"},{locale:"fr-VU",parentLocale:"fr"},{locale:"fr-WF",parentLocale:"fr"},{locale:"fr-YT",parentLocale:"fr"}]});
}(fr$1));

var frData = fr$1.exports;

var es$1 = {exports: {}};

(function (module, exports) {
!function(e,a){module.exports=a();}(commonjsGlobal,function(){return [{locale:"es",pluralRuleFunction:function(e,a){return a?"other":1==e?"one":"other"},fields:{year:{displayName:"año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-419",parentLocale:"es"},{locale:"es-AR",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} días",other:"dentro de {0} días"},past:{one:"hace {0} días",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"seg.",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} seg.",other:"dentro de {0} seg."},past:{one:"hace {0} seg.",other:"hace {0} seg."}}}}},{locale:"es-BO",parentLocale:"es-419"},{locale:"es-BR",parentLocale:"es-419"},{locale:"es-BZ",parentLocale:"es-419"},{locale:"es-CL",parentLocale:"es-419"},{locale:"es-CO",parentLocale:"es-419"},{locale:"es-CR",parentLocale:"es-419"},{locale:"es-CU",parentLocale:"es-419"},{locale:"es-DO",parentLocale:"es-419",fields:{year:{displayName:"Año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"Mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"Día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"Minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"Segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-EA",parentLocale:"es"},{locale:"es-EC",parentLocale:"es-419"},{locale:"es-GQ",parentLocale:"es"},{locale:"es-GT",parentLocale:"es-419"},{locale:"es-HN",parentLocale:"es-419"},{locale:"es-IC",parentLocale:"es"},{locale:"es-MX",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el año próximo","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"en {0} a",other:"en {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el mes próximo","-1":"el mes pasado"},relativeTime:{future:{one:"en {0} mes",other:"en {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"en {0} m",other:"en {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"en {0} día",other:"en {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"en {0} h",other:"en {0} n"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"en {0} min",other:"en {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"en {0} s",other:"en {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-NI",parentLocale:"es-419"},{locale:"es-PA",parentLocale:"es-419"},{locale:"es-PE",parentLocale:"es-419"},{locale:"es-PH",parentLocale:"es"},{locale:"es-PR",parentLocale:"es-419"},{locale:"es-PY",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"seg.",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} seg.",other:"dentro de {0} seg."},past:{one:"hace {0} seg.",other:"hace {0} seg."}}}}},{locale:"es-SV",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"antier","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-US",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el año próximo","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el mes próximo","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-UY",parentLocale:"es-419"},{locale:"es-VE",parentLocale:"es-419"}]});
}(es$1));

var esData = es$1.exports;

var nl$1 = {exports: {}};

(function (module, exports) {
!function(e,n){module.exports=n();}(commonjsGlobal,function(){return [{locale:"nl",pluralRuleFunction:function(e,n){var a=!String(e).split(".")[1];return n?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"jaar",relative:{0:"dit jaar",1:"volgend jaar","-1":"vorig jaar"},relativeTime:{future:{one:"over {0} jaar",other:"over {0} jaar"},past:{one:"{0} jaar geleden",other:"{0} jaar geleden"}}},"year-short":{displayName:"jr",relative:{0:"dit jaar",1:"volgend jaar","-1":"vorig jaar"},relativeTime:{future:{one:"over {0} jaar",other:"over {0} jaar"},past:{one:"{0} jaar geleden",other:"{0} jaar geleden"}}},month:{displayName:"maand",relative:{0:"deze maand",1:"volgende maand","-1":"vorige maand"},relativeTime:{future:{one:"over {0} maand",other:"over {0} maanden"},past:{one:"{0} maand geleden",other:"{0} maanden geleden"}}},"month-short":{displayName:"mnd",relative:{0:"deze maand",1:"volgende maand","-1":"vorige maand"},relativeTime:{future:{one:"over {0} maand",other:"over {0} maanden"},past:{one:"{0} maand geleden",other:"{0} maanden geleden"}}},day:{displayName:"dag",relative:{0:"vandaag",1:"morgen",2:"overmorgen","-2":"eergisteren","-1":"gisteren"},relativeTime:{future:{one:"over {0} dag",other:"over {0} dagen"},past:{one:"{0} dag geleden",other:"{0} dagen geleden"}}},"day-short":{displayName:"dag",relative:{0:"vandaag",1:"morgen",2:"overmorgen","-2":"eergisteren","-1":"gisteren"},relativeTime:{future:{one:"over {0} dag",other:"over {0} dgn"},past:{one:"{0} dag geleden",other:"{0} dgn geleden"}}},hour:{displayName:"uur",relative:{0:"binnen een uur"},relativeTime:{future:{one:"over {0} uur",other:"over {0} uur"},past:{one:"{0} uur geleden",other:"{0} uur geleden"}}},"hour-short":{displayName:"uur",relative:{0:"binnen een uur"},relativeTime:{future:{one:"over {0} uur",other:"over {0} uur"},past:{one:"{0} uur geleden",other:"{0} uur geleden"}}},minute:{displayName:"minuut",relative:{0:"binnen een minuut"},relativeTime:{future:{one:"over {0} minuut",other:"over {0} minuten"},past:{one:"{0} minuut geleden",other:"{0} minuten geleden"}}},"minute-short":{displayName:"min",relative:{0:"binnen een minuut"},relativeTime:{future:{one:"over {0} min.",other:"over {0} min."},past:{one:"{0} min. geleden",other:"{0} min. geleden"}}},second:{displayName:"seconde",relative:{0:"nu"},relativeTime:{future:{one:"over {0} seconde",other:"over {0} seconden"},past:{one:"{0} seconde geleden",other:"{0} seconden geleden"}}},"second-short":{displayName:"sec",relative:{0:"nu"},relativeTime:{future:{one:"over {0} sec.",other:"over {0} sec."},past:{one:"{0} sec. geleden",other:"{0} sec. geleden"}}}}},{locale:"nl-AW",parentLocale:"nl"},{locale:"nl-BE",parentLocale:"nl"},{locale:"nl-BQ",parentLocale:"nl"},{locale:"nl-CW",parentLocale:"nl"},{locale:"nl-SR",parentLocale:"nl"},{locale:"nl-SX",parentLocale:"nl"}]});
}(nl$1));

var nlData = nl$1.exports;

var de$1 = {exports: {}};

(function (module, exports) {
!function(e,t){module.exports=t();}(commonjsGlobal,function(){return [{locale:"de",pluralRuleFunction:function(e,t){var n=!String(e).split(".")[1];return t?"other":1==e&&n?"one":"other"},fields:{year:{displayName:"Jahr",relative:{0:"dieses Jahr",1:"nächstes Jahr","-1":"letztes Jahr"},relativeTime:{future:{one:"in {0} Jahr",other:"in {0} Jahren"},past:{one:"vor {0} Jahr",other:"vor {0} Jahren"}}},"year-short":{displayName:"Jahr",relative:{0:"dieses Jahr",1:"nächstes Jahr","-1":"letztes Jahr"},relativeTime:{future:{one:"in {0} Jahr",other:"in {0} Jahren"},past:{one:"vor {0} Jahr",other:"vor {0} Jahren"}}},month:{displayName:"Monat",relative:{0:"diesen Monat",1:"nächsten Monat","-1":"letzten Monat"},relativeTime:{future:{one:"in {0} Monat",other:"in {0} Monaten"},past:{one:"vor {0} Monat",other:"vor {0} Monaten"}}},"month-short":{displayName:"Monat",relative:{0:"diesen Monat",1:"nächsten Monat","-1":"letzten Monat"},relativeTime:{future:{one:"in {0} Monat",other:"in {0} Monaten"},past:{one:"vor {0} Monat",other:"vor {0} Monaten"}}},day:{displayName:"Tag",relative:{0:"heute",1:"morgen",2:"übermorgen","-2":"vorgestern","-1":"gestern"},relativeTime:{future:{one:"in {0} Tag",other:"in {0} Tagen"},past:{one:"vor {0} Tag",other:"vor {0} Tagen"}}},"day-short":{displayName:"Tag",relative:{0:"heute",1:"morgen",2:"übermorgen","-2":"vorgestern","-1":"gestern"},relativeTime:{future:{one:"in {0} Tag",other:"in {0} Tagen"},past:{one:"vor {0} Tag",other:"vor {0} Tagen"}}},hour:{displayName:"Stunde",relative:{0:"in dieser Stunde"},relativeTime:{future:{one:"in {0} Stunde",other:"in {0} Stunden"},past:{one:"vor {0} Stunde",other:"vor {0} Stunden"}}},"hour-short":{displayName:"Std.",relative:{0:"in dieser Stunde"},relativeTime:{future:{one:"in {0} Std.",other:"in {0} Std."},past:{one:"vor {0} Std.",other:"vor {0} Std."}}},minute:{displayName:"Minute",relative:{0:"in dieser Minute"},relativeTime:{future:{one:"in {0} Minute",other:"in {0} Minuten"},past:{one:"vor {0} Minute",other:"vor {0} Minuten"}}},"minute-short":{displayName:"Min.",relative:{0:"in dieser Minute"},relativeTime:{future:{one:"in {0} Min.",other:"in {0} Min."},past:{one:"vor {0} Min.",other:"vor {0} Min."}}},second:{displayName:"Sekunde",relative:{0:"jetzt"},relativeTime:{future:{one:"in {0} Sekunde",other:"in {0} Sekunden"},past:{one:"vor {0} Sekunde",other:"vor {0} Sekunden"}}},"second-short":{displayName:"Sek.",relative:{0:"jetzt"},relativeTime:{future:{one:"in {0} Sek.",other:"in {0} Sek."},past:{one:"vor {0} Sek.",other:"vor {0} Sek."}}}}},{locale:"de-AT",parentLocale:"de"},{locale:"de-BE",parentLocale:"de"},{locale:"de-CH",parentLocale:"de"},{locale:"de-IT",parentLocale:"de"},{locale:"de-LI",parentLocale:"de"},{locale:"de-LU",parentLocale:"de"}]});
}(de$1));

var deData = de$1.exports;

var it$1 = {exports: {}};

(function (module, exports) {
!function(e,a){module.exports=a();}(commonjsGlobal,function(){return [{locale:"it",pluralRuleFunction:function(e,a){var t=!String(e).split(".")[1];return a?11==e||8==e||80==e||800==e?"many":"other":1==e&&t?"one":"other"},fields:{year:{displayName:"anno",relative:{0:"quest’anno",1:"anno prossimo","-1":"anno scorso"},relativeTime:{future:{one:"tra {0} anno",other:"tra {0} anni"},past:{one:"{0} anno fa",other:"{0} anni fa"}}},"year-short":{displayName:"anno",relative:{0:"quest’anno",1:"anno prossimo","-1":"anno scorso"},relativeTime:{future:{one:"tra {0} anno",other:"tra {0} anni"},past:{one:"{0} anno fa",other:"{0} anni fa"}}},month:{displayName:"mese",relative:{0:"questo mese",1:"mese prossimo","-1":"mese scorso"},relativeTime:{future:{one:"tra {0} mese",other:"tra {0} mesi"},past:{one:"{0} mese fa",other:"{0} mesi fa"}}},"month-short":{displayName:"mese",relative:{0:"questo mese",1:"mese prossimo","-1":"mese scorso"},relativeTime:{future:{one:"tra {0} mese",other:"tra {0} mesi"},past:{one:"{0} mese fa",other:"{0} mesi fa"}}},day:{displayName:"giorno",relative:{0:"oggi",1:"domani",2:"dopodomani","-2":"l’altro ieri","-1":"ieri"},relativeTime:{future:{one:"tra {0} giorno",other:"tra {0} giorni"},past:{one:"{0} giorno fa",other:"{0} giorni fa"}}},"day-short":{displayName:"g",relative:{0:"oggi",1:"domani",2:"dopodomani","-2":"l’altro ieri","-1":"ieri"},relativeTime:{future:{one:"tra {0} g",other:"tra {0} gg"},past:{one:"{0} g fa",other:"{0} gg fa"}}},hour:{displayName:"ora",relative:{0:"quest’ora"},relativeTime:{future:{one:"tra {0} ora",other:"tra {0} ore"},past:{one:"{0} ora fa",other:"{0} ore fa"}}},"hour-short":{displayName:"h.",relative:{0:"quest’ora"},relativeTime:{future:{one:"tra {0} h",other:"tra {0} h"},past:{one:"{0} h fa",other:"{0} h fa"}}},minute:{displayName:"minuto",relative:{0:"questo minuto"},relativeTime:{future:{one:"tra {0} minuto",other:"tra {0} minuti"},past:{one:"{0} minuto fa",other:"{0} minuti fa"}}},"minute-short":{displayName:"min",relative:{0:"questo minuto"},relativeTime:{future:{one:"tra {0} min",other:"tra {0} min"},past:{one:"{0} min fa",other:"{0} min fa"}}},second:{displayName:"secondo",relative:{0:"ora"},relativeTime:{future:{one:"tra {0} secondo",other:"tra {0} secondi"},past:{one:"{0} secondo fa",other:"{0} secondi fa"}}},"second-short":{displayName:"s",relative:{0:"ora"},relativeTime:{future:{one:"tra {0} s",other:"tra {0} sec."},past:{one:"{0} s fa",other:"{0} sec. fa"}}}}},{locale:"it-CH",parentLocale:"it"},{locale:"it-SM",parentLocale:"it"},{locale:"it-VA",parentLocale:"it"}]});
}(it$1));

var itData = it$1.exports;

var en = {
	next: "pijltje",
	previous: "pijltje",
	price: "Price",
	calculate: "Next",
	book: "Book",
	booked: "Booked",
	booking: "Booking",
	last_minute_discount: "Last minute discount",
	discount: "Discount",
	option: "Option",
	choose_for_option: "Make a short reservation for this period ",
	included_in_price: "including",
	rent_price: "Rental price",
	extra_costs_included: "Extra costs included",
	optional_costs: "Extra options",
	price_after_discount: "Rental price incl. discount",
	booking_from_til: "Booking dates",
	total: "Total",
	stay_details: "Travel group",
	babies: "Babies",
	babies_from: "(up to the age of {babies})",
	adults: "Adults",
	adults_from: "(from the age of {age})",
	children: "Children",
	children_from: "(from {from} to {til} years inclusive)",
	"house.arrival_date": "Arrival date",
	"house.departure_date": "Departure date",
	"house.arrival": "Arrival",
	"house.departure": "Departure",
	extra_costs_bookable: "Extra options",
	costs_on_site: "Additional costs on the spot:",
	insurances: "Insurances",
	at_least_1_adult: "Choose at least 1 adult.",
	max_persons_reached: "Too many people have been selected.",
	personal_details: "Your information",
	required: "This field is required.",
	cancel_insurance_all_risk: "All Risk",
	cancel_insurance_normal: "Standard",
	none: "None",
	cancel_insurance: "Cancellation insurance",
	insurance_costs: "Insurance Costs",
	choose: "Choose",
	yes: "Yes",
	booking_details: "Booking details",
	based_on_one_person: "Based on {persons} persons",
	return_to_calendar: "Back to calendar",
	close: "Close",
	cancel_insurance_normal_long: "Standard Cancellation Insurance",
	cancel_insurance_normal_desc: "Our standard cancellation insurance means that you are properly insured if you have to cancel your trip. In addition to the cancellation charges, the costs of any unused travel days are also covered. If you miss any part of your trip, because you have to go home earlier for example, you will receive an allowance for each day missed.",
	cancel_insurance_all_risk_long: "All Risk Cancellation Insurance",
	cancel_insurance_desc: "Unfortunately, circumstances may arise which can force you to cancel your holiday. It might also be necessary to leave or return earlier. Cancellation insurance means you do not have to bear the costs involved. Only residents from the Netherlands, Belgium and Germany can take out the insurance. We offer a choice of two types of cancellation insurance:",
	cancel_insurance_all_risk_desc: "With All-Risk Cancellation, you will be reimbursed 100% of the cancellation costs if you cancel for a standard reason, such as an illness that prevents you from traveling. Or the death of a grandparent. Do you want to cancel for another reason that is important to you personally? Then you will be reimbursed 75% of the cancellation costs. But beware: this insurance does set a few conditions for canceling. For example, the reason for cancellation must be 'unforeseen' and 'through no fault of your own'. The insurance therefore does not provide cover for cancellation reasons of which you were already aware before taking out the insurance (not unforeseen) or which you could have done yourself (not through your own fault). Consult the conditions for the exceptions.",
	terms_and_costs: "Premiums and Conditions",
	costs_normal_cancel_insurance: "Standard Cancellation Insurance Premium:",
	costs_allrisk_cancel_insurance: "All Risk Cancellation Insurance Premium:",
	"666_costs": "6.66% of the travel costs",
	"847_costs": "8.47% of the travel costs",
	more_information: "More information:",
	show_terms: "Show conditions",
	terms: "Terms",
	remark: "Remark",
	"9persons_9addresses": "The Insurance will pay for up to 9 persons, who live at 9 different addresses,",
	or: "or",
	"9persons_4addresses": "The insurance pays out for an unlimited number of people who live at a maximum of 4 different addresses.",
	poliscosts: "Policy fee",
	poliscosts_are: "The cost for an insurance policy is a one-time charge of € 6,95. No matter if you have one or two insuran",
	youwillrecieve: "You will receive the insurance terms separate from you booking confirmation per email. The insurance starts as soon as the (first) payment has been made.",
	thank_you_for_your_request: "Thank you very much for your request.",
	we_sent_confirmation_check_email: "A copy of your request has been sent to your e-mail address. If you have not received any mail from us, it may be that it is in your spam box.",
	something_went_wrong_please_try_again: "Oops, something went wrong, please try again later.",
	persons: "persons",
	bedrooms: "bedrooms",
	minimum_week_price: "min. weekly price",
	no_results: "No results",
	agree_with: "By clicking on 'Book', you agree to the",
	discount_reason: "Reason discount.",
	results: "results",
	bathrooms: "bathrooms",
	you_need_to_give_reason: "You must indicate a valid discount reason",
	"camper.arrival_date": "Start date",
	"camper.departure_date": "End date",
	"camper.arrival": "Start date",
	"camper.departure": "End date",
	"boat.arrival_date": "Start date",
	"boat.departure_date": "End date",
	"boat.arrival": "Start date",
	"boat.departure": "End date",
	"caravan.arrival_date": "Arrival date",
	"caravan.departure_date": "Departure date",
	"caravan.arrival": "Arrival",
	"caravan.departure": "Departure",
	filters: "Filters",
	comply_insurance_card: "I agree that the cancellation insurance insurance card will be digitally issued to me. I receive this card with my booking confirmation.",
	"house.you_picked_arrival_date": "Your arrival date is",
	"camper.you_picked_arrival_date": "Your pickup date is",
	"house.pick_your_departure_in_the_calendar": "Select a departure date",
	"camper.pick_your_departure_in_the_calendar": "Select a return date",
	"house.you_picked_departure_date": "Your departure date is",
	"camper.you_picked_departure_date": "Your return date is",
	"house.pick_your_arrivaldate_in_the_calendar": "Choose an arrival date",
	"camper.pick_your_arrivaldate_in_the_calendar": "Choose a pickup date",
	no: "No",
	no_house_found: "No object found for this combination of PortalCode and ObjectCode",
	insurance_company_needs_date_of_birth: "A date of birth is required for taking out insurance",
	"extra_fields.date_of_birth": "Date of birth",
	no_discount_code_found: "No discount found with entered code",
	discount_code: "Discount code",
	minimum_nights: "At least {minimum} nights",
	can_only_take_insurance_in_de_be_nl: "You can only take out insurance if you live in the Netherlands, Germany or Belgium.",
	price_from: "Price from"
};

var nl = {
	next: "pijltje",
	previous: "pijltje",
	price: "Prijs",
	calculate: "Volgende",
	book: "Boeken",
	booked: "Geboekt",
	booking: "Boeking",
	last_minute_discount: "Last minute korting",
	discount: "Korting",
	option: "Optie",
	choose_for_option: "Neem een optie op deze periode",
	included_in_price: "inclusief",
	rent_price: "Huurprijs",
	extra_costs_included: "Extra kosten inbegrepen",
	optional_costs: "Extra opties",
	price_after_discount: "Huurprijs incl. korting",
	booking_from_til: "Boekingsdata:",
	total: "Totaal",
	stay_details: "Reisgezelschap",
	babies: "Baby's",
	babies_from: "(t/m {babies} jaar)",
	adults: "Volwassenen",
	adults_from: "(vanaf {age} jaar)",
	children: "Kinderen",
	children_from: "({from} t/m {til} jaar)",
	"house.arrival_date": "Aankomstdatum",
	"house.departure_date": "Vertrekdatum",
	"house.arrival": "Aankomst",
	"house.departure": "Vertrek ",
	extra_costs_bookable: "Extra opties",
	costs_on_site: "Bijkomende kosten ter plaatse:",
	insurances: "Verzekeringen",
	at_least_1_adult: "Kies minstens 1 volwassene.",
	max_persons_reached: "Er zijn te veel personen geselecteerd.",
	personal_details: "Uw gegevens",
	required: "Dit veld is verplicht.",
	cancel_insurance_all_risk: "All Risk",
	cancel_insurance_normal: "Normaal",
	none: "Geen",
	cancel_insurance: "Annuleringsverzekering",
	insurance_costs: "Poliskosten",
	choose: "Kies",
	yes: "Ja",
	booking_details: "Boekingsgegevens",
	based_on_one_person: "Gebaseerd op {persons} personen",
	return_to_calendar: "Terug naar de kalender",
	close: "Sluiten",
	cancel_insurance_normal_long: "Standaard Annuleringsverzekering",
	cancel_insurance_normal_desc: "Met de Standaard Annuleringsverzekering bent u goed verzekerd, als u uw reis moet annuleren. Naast de kosten van de annulering zijn ook de kosten van de ongebruikte reisdagen verzekerd. Dus mist u een deel van uw reis, bijvoorbeeld omdat u eerder naar huis moet? Dan ontvangt u een vergoeding voor iedere dag dat u niet van uw reis heeft kunnen genieten.",
	cancel_insurance_all_risk_long: "Allrisk Annuleringsverzekering",
	cancel_insurance_desc: "Er kunnen zich helaas altijd situaties voordoen, waardoor u uw vakantie moet afzeggen. Of het kan noodzakelijk zijn dat u later vertrekt of eerder terugkeert. Met een annuleringsverzekering hoeft u zelf niet voor deze kosten op te draaien. Alleen inwoners uit Nederland, België en Duitsland kunnen de verzekeringen afsluiten. U heeft de keuze uit twee annuleringsverzekeringen:",
	cancel_insurance_all_risk_desc: "Met Allrisk Annulering krijg je 100% van de annuleringskosten vergoed als je om een standaard reden annuleert, zoals een ziekte waardoor je niet meer op reis kunt. Of het overlijden van een grootouder. Wil je annuleren om een andere reden die voor jou persoonlijk belangrijk is? Dan krijg je 75% van de annuleringskosten vergoed.\n Maar let op: deze verzekering stelt wel een paar voorwaarden aan het annuleren. Zo moet de reden van annulering ‘onvoorzien’ zijn en ‘buiten je schuld’. De verzekering biedt dus geen dekking voor annuleringsredenen waarvan je vóór het afsluiten van de verzekering al op de hoogte was (niet onvoorzien) of waaraan je zelf iets had kunnen doen (niet buiten eigen schuld). Raadpleeg de voorwaarden voor de uitzonderingen.",
	terms_and_costs: "Premie en voorwaarden",
	costs_normal_cancel_insurance: "Premie Standaard annuleringsverzekering:",
	costs_allrisk_cancel_insurance: "Premie Allrisk annuleringsverzekering:",
	"666_costs": "6.66% van de reissom",
	"847_costs": "8.47% van de reissom",
	more_information: "Meer informatie",
	show_terms: "Bekijk de voorwaarden",
	terms: "Voorwaarden",
	remark: "Opmerking",
	"9persons_9addresses": "De verzekering keert uit voor maximaal 9 personen die op 9 verschillende adressen wonen,",
	or: "of",
	"9persons_4addresses": "De verzekering keert uit voor een onbeperkt aantal personen die op maximaal 4 verschillende adressen wonen.",
	poliscosts: "Poliskosten",
	poliscosts_are: "De kosten voor het opmaken van een verzekeringspolis zijn eenmalig € 6,95. Ongeacht of u 1 of meerdere verzekeringen heeft afgesloten.",
	youwillrecieve: "U ontvangt aansluitend op uw boekingsbevestiging de verzekeringspapieren per email toegestuurd. De verzekering treedt in werking zodra u de (aan)betaling gedaan heeft.",
	thank_you_for_your_request: "Hartelijk dank voor uw boekings/optie-aanvraag.",
	we_sent_confirmation_check_email: "Een kopie van uw aanvraag is naar uw e-mailadres verstuurd. Als u geen mail van ons ontvangen hebt, kan het zijn dat deze in uw spambox zit. ",
	something_went_wrong_please_try_again: "Oeps, er is iets mis gegaan, probeert u het later nogmaals.",
	persons: "personen",
	bedrooms: "slaapkamers",
	minimum_week_price: "min. weekprijs",
	no_results: "Geen resultaten",
	agree_with: "Door op 'Boeken' te klikken gaat u akkoord met de",
	discount_reason: "Reden korting.",
	results: "resultaten",
	bathrooms: "badkamers",
	you_need_to_give_reason: "U dient een geldige kortingsreden aan te geven",
	"camper.arrival_date": "Ophaaldatum",
	"camper.departure_date": "Inleverdatum",
	"camper.arrival": "Ophalen",
	"camper.departure": "Inleveren",
	"boat.arrival_date": "Ophaaldatum",
	"boat.departure_date": "Inleverdatum",
	"boat.arrival": "Ophalen",
	"boat.departure": "Inleveren",
	"caravan.arrival_date": "Aankomstdatum",
	"caravan.departure_date": "Vertrekdatum",
	"caravan.arrival": "Aankomst",
	"caravan.departure": "Vertrek ",
	filters: "Filters",
	comply_insurance_card: "Ik ga ermee akkoord dat de verzekeringskaart van de annuleringsverzekering digitaal aan mij verstrekt wordt. Ik ontvang deze bij mijn boekingsbevestiging.",
	"house.you_picked_arrival_date": "Uw aankomstdatum is",
	"camper.you_picked_arrival_date": "Uw ophaaldatum is",
	"house.pick_your_departure_in_the_calendar": "Kies een vertrekdatum",
	"camper.pick_your_departure_in_the_calendar": "Kies een inleverdatum",
	"house.you_picked_departure_date": "Uw vertrekdatum is",
	"camper.you_picked_departure_date": "Uw inleverdatum is",
	"house.pick_your_arrivaldate_in_the_calendar": "Kies een aankomstdatum",
	"camper.pick_your_arrivaldate_in_the_calendar": "Kies een ophaaldatum",
	no: "Nee",
	no_house_found: "Geen object gevonden voor deze combinatie van Portal-code en Object-code",
	insurance_company_needs_date_of_birth: "Voor het afsluiten van een verzekering is een geboortedatum verplicht",
	"extra_fields.date_of_birth": "Geboortedatum",
	no_discount_code_found: "Geen korting gevonden met ingegeven code",
	discount_code: "Kortingscode",
	minimum_nights: "Minstens {minimum} nachten",
	can_only_take_insurance_in_de_be_nl: "U kunt alleen een verzekering afsluiten, wanneer u woont in Nederland, Duitsland of België.",
	price_from: "Prijs vanaf"
};

var de = {
	next: "pijltje",
	previous: "pijltje",
	price: "Preis",
	calculate: "Nächst",
	book: "Buchen",
	booked: "Gebucht",
	booking: "Buchung",
	last_minute_discount: "Last Minute Rabatt",
	option: "Option",
	choose_for_option: "Machen Sie eine kostenlose Option",
	included_in_price: "inklusive",
	rent_price: "Reisepreis",
	discount: "Rabatt",
	extra_costs_included: "Nebenkosten enthalten",
	optional_costs: "Zusätzliche Optionen",
	price_after_discount: "Mietpreis inkl. Rabatt",
	booking_from_til: "Buchungsdaten",
	total: "Gesamt",
	stay_details: "Reisegruppe",
	babies: "Babys",
	babies_from: "(bis einschl. {babies} Jahre)",
	adults: "Erwachsene",
	adults_from: "(ab {age} Jahre)",
	children: "Kinder",
	children_from: "(von {from} bis einschl. {til} Jahre)",
	"house.arrival_date": "Anreisedatum",
	"house.departure_date": "Abreisedatum",
	"house.arrival": "Ankunft",
	"house.departure": "Abreise",
	extra_costs_bookable: "Zusätzliche Optionen",
	costs_on_site: "Zusätzliche Kosten vor Ort:",
	insurances: "Versicherungen",
	at_least_1_adult: "Wählen Sie mindestens einen Erwachsenen aus.",
	max_persons_reached: "Es wurden zu viele Personen ausgewählt.",
	personal_details: "Ihre Daten",
	required: "Dieses Feld wird benötigt.",
	cancel_insurance_all_risk: "Allrisk",
	cancel_insurance_normal: "Standard",
	none: "Keine",
	cancel_insurance: "Reiserücktrittsversicherung",
	insurance_costs: "Policekosten",
	choose: "Wählen",
	yes: "Ja",
	booking_details: "Buchungsdetails",
	based_on_one_person: "Basierend auf {persons} Personen",
	return_to_calendar: "Zurück zum Kalender",
	close: "Schließen",
	cancel_insurance_normal_long: "Standard-Reiserücktrittsversicherung",
	cancel_insurance_normal_desc: "Mit der Standard-Reiserücktrittsversicherung sind Sie gut versichert, wenn Sie Ihre Reise stornieren müssen. Neben den Stornokosten sind auch die Kosten der ungenutzten Reisetage versichert. Sie können einen Teil Ihrer Reise nicht antreten, da Sie früher nach Hause müssen? Dann erhalten Sie eine Erstattung für jeden Urlaubstag, den Sie nicht genießen konnten.",
	cancel_insurance_all_risk_long: "Allrisk-Reiserücktrittsversicherung",
	cancel_insurance_desc: "Es können sich leider Umstände ergeben, die einen dazu zwingen, den Urlaub abzusagen. Oder Sie müssen später anreisen oder früher wieder abreisen. Mit einer Reiserücktrittsversicherung müssen Sie nicht selbst für diese Kosten aufkommen. Nur Einwohner aus den Niederlanden, Belgien und Deutschland können die Versicherung abschließen. Sie haben die Wahl zwischen zwei Typen von Reiserücktrittsversicherungen:",
	cancel_insurance_all_risk_desc: "Bei der All-Risk-Reiserücktrittsversicherung werden Ihnen 100% der Stornierungskosten erstattet, wenn Sie aus einem normalen Grund stornieren, z. B. wegen einer Krankheit, die Sie am Reisen hindert. Oder der Tod eines Großelternteils. Möchten Sie aus einem anderen Grund stornieren, der Ihnen persönlich wichtig ist? Dann werden Ihnen 75% der Stornierungskosten erstattet.\n Aber Vorsicht: Diese Versicherung legt einige Bedingungen für die Stornierung fest. Zum Beispiel muss der Grund für die Stornierung 'unvorhergesehen' und 'unverschuldet' sein. Die Versicherung bietet daher keinen Versicherungsschutz für Stornierungsgründe, die Sie bereits vor Abschluss der Versicherung kannten (nicht unvorhergesehen) oder die Sie möglicherweise gegen sich selbst hätten tun können (nicht durch Ihr eigenes Verschulden). Konsultieren Sie die Bedingungen für die Ausnahmen.",
	terms_and_costs: "Prämie und Bedingungen",
	costs_normal_cancel_insurance: "Prämie Standard-Reiserücktrittsversicherung:",
	costs_allrisk_cancel_insurance: "Prämie Allrisk-Reiserücktrittsversicherung:",
	"666_costs": "6.66% der Reisekosten",
	"847_costs": "8.47% der Reisekosten",
	more_information: "Weitere Informationen:",
	show_terms: "Siehe Bedingungen",
	terms: "Terms",
	remark: "Anmerkung",
	"9persons_9addresses": "Die Versicherung ist gültig für maximal 9 Personen, die am 9 verschiedene Adressen wohnen,",
	or: "oder",
	"9persons_4addresses": "Die Versicherung ist gültig für eine unbegrenzte Anzahl von Personen, die an maximal 4 verschiedenen Adressen wohnen.",
	poliscosts: "Police Kosten",
	poliscosts_are: "Es gibt einmalig € 6,95 Police-Kosten für die Bearbeitung der Versicherungen. Egal ob Sie 1 oder mehrere Versicherungen abschließen.",
	youwillrecieve: "Sie erhalten nach der Buchungsbestätigung im Anschluss an Ihre Buchung die Versicherungsbedingungen per E-Mail. Die Versicherung tritt mit der Ihrer Anzahlung in Kraft.",
	thank_you_for_your_request: "Vielen Dank für Ihre Buchungs/Options-Anfrage.",
	we_sent_confirmation_check_email: "Eine Kopie Ihrer Anfrage wurde an Ihre E-Mail-Adresse gesendet. Wenn Sie keine E-Mail von uns erhalten haben, befindet sich diese möglicherweise in Ihrer Spam-Box.",
	something_went_wrong_please_try_again: "Ups, es ist ein Fehler aufgetreten. Bitte versuchen Sie es später erneut.",
	persons: "Personen",
	bedrooms: "Schlafzimmer",
	minimum_week_price: "min. Wochenpreis",
	no_results: "Keine Ergebnisse",
	agree_with: "Indem Sie auf 'Buchen' klicken, akzeptieren Sie die",
	discount_reason: "Grund für Rabatt",
	results: "Ergebnisse",
	bathrooms: "Badezimmer",
	you_need_to_give_reason: "Sie müssen einen gültigen Rabattgrund angeben",
	"camper.arrival_date": "Abholdatum",
	"camper.departure_date": "Rückgabedatum",
	"camper.arrival": "Abholen",
	"camper.departure": "Rückgabe",
	"boat.arrival_date": "Abholdatum",
	"boat.departure_date": "Rückgabedatum",
	"boat.arrival": "Abholen",
	"boat.departure": "Rückgabe",
	"caravan.arrival_date": "Anreisedatum",
	"caravan.departure_date": "Abreisedatum",
	"caravan.arrival": "Ankunft",
	"caravan.departure": "Abreise",
	filters: "Filter",
	comply_insurance_card: "Ich bin damit einverstanden, dass die Versicherungskarte der Reiserücktrittsversicherung digital ausgestellt wird. Ich erhalte diese mit meiner Buchungsbestätigung.",
	"house.you_picked_arrival_date": "Ihre Ankunft ist",
	"camper.you_picked_arrival_date": "Ihr Abholdatum ist",
	"house.pick_your_departure_in_the_calendar": "Wählen Sie ein Abreisedatum",
	"camper.pick_your_departure_in_the_calendar": "Wählen Sie ein Rückgabedatum",
	"house.you_picked_departure_date": "Ihr Abreisedatum ist",
	"camper.you_picked_departure_date": "Ihr Rückgabedatum ist",
	"house.pick_your_arrivaldate_in_the_calendar": "Wählen Sie das Ankunftsdatum",
	"camper.pick_your_arrivaldate_in_the_calendar": "Wählen Sie einen Abholtermin",
	no: "Nein",
	insurance_company_needs_date_of_birth: "Für den Abschluss einer Versicherung wird ein Geburtsdatum benötigt",
	"extra_fields.date_of_birth": "Geburtsdatum",
	no_discount_code_found: "Kein Rabatt mit eingegebenem Code gefunden",
	discount_code: "Rabatt-Code",
	minimum_nights: "Mindestens {minimum} Nächte",
	can_only_take_insurance_in_de_be_nl: "Sie können sich nur versichern, wenn Sie in den Niederlanden, Deutschland oder Belgien wohnen.",
	price_from: "Preis von"
};

var fr = {
	next: "pijltje",
	previous: "pijltje",
	price: "Prix",
	calculate: "Suivante",
	book: "Réserver",
	booked: "Réservé",
	booking: "Réservation",
	last_minute_discount: "Réduction de dernière minute",
	option: "Option",
	choose_for_option: "Prendre une option pour cette période",
	included_in_price: "frais",
	rent_price: "Prix de location",
	discount: "Réduction",
	extra_costs_included: "Frais supplémentaires inclus",
	optional_costs: "Options supplémentaires",
	price_after_discount: "Prix de location incl.",
	booking_from_til: "Dates de réservation",
	total: "Total",
	stay_details: "Composition du groupe",
	babies: "Nombre de bébés",
	babies_from: "(jusqu'a {babies} ans)",
	adults: "Nombre d'adults",
	adults_from: "(à partir de {age} ans)",
	children: "Nombre d'enfants",
	children_from: "(de {from} à {til} ans)",
	"house.arrival_date": "Date d'arrivée",
	"house.departure_date": "Date de départ",
	"house.arrival": "Arrivée",
	"house.departure": "Départ",
	extra_costs_bookable: "Options supplémentaires",
	costs_on_site: "Frais supplémentaires sur place:",
	insurances: "Insurances",
	at_least_1_adult: "Choisissez au moins 1 adulte.",
	max_persons_reached: "Trop de personnes ont été sélectionnées.",
	personal_details: "Vos données",
	required: "Ce champ est requis.",
	cancel_insurance_all_risk: "All Risk",
	cancel_insurance_normal: "Standard",
	none: "None",
	cancel_insurance: "Cancellation insurance",
	insurance_costs: "Insurance Costs",
	choose: "Choose",
	yes: "Yes",
	booking_details: "Détails de la réservation",
	based_on_one_person: "Base {persons} personnes",
	return_to_calendar: "Retour au calendrier",
	close: "Fermer",
	cancel_insurance_normal_long: "Standard Cancellation Insurance",
	cancel_insurance_normal_desc: "Our standard cancellation insurance means that you are properly insured if you have to cancel your trip. In addition to the cancellation charges, the costs of any unused travel days are also covered. If you miss any part of your trip, because you have to go home earlier for example, you will receive an allowance for each day missed.",
	cancel_insurance_all_risk_long: "All Risk Cancellation Insurance",
	cancel_insurance_desc: "Unfortunately, circumstances may arise which can force you to cancel your holiday. It might also be necessary to leave or return earlier. Cancellation insurance means you do not have to bear the costs involved. Only residents from the Netherlands, Belgium and Germany can take out the insurance. We offer a choice of two types of cancellation insurance:",
	cancel_insurance_all_risk_desc: "With All-Risk Cancellation, you will be reimbursed 100% of the cancellation costs if you cancel for a standard reason, such as an illness that prevents you from traveling. Or the death of a grandparent. Do you want to cancel for another reason that is important to you personally? Then you will be reimbursed 75% of the cancellation costs. But beware: this insurance does set a few conditions for canceling. For example, the reason for cancellation must be 'unforeseen' and 'through no fault of your own'. The insurance therefore does not provide cover for cancellation reasons of which you were already aware before taking out the insurance (not unforeseen) or which you could have done yourself (not through your own fault). Consult the conditions for the exceptions.",
	terms_and_costs: "Premiums and Conditions",
	costs_normal_cancel_insurance: "Standard Cancellation Insurance Premium:",
	costs_allrisk_cancel_insurance: "All Risk Cancellation Insurance Premium:",
	"666_costs": "6.66% of the travel costs",
	"847_costs": "8.47% of the travel costs",
	more_information: "More information:",
	show_terms: "Show conditions",
	terms: "Terms",
	remark: "Remarque",
	"9persons_9addresses": "The Insurance will pay for up to 9 persons, who live at 9 different addresses,",
	or: "or",
	"9persons_4addresses": "The insurance pays out for an unlimited number of people who live at a maximum of 4 different addresses.",
	poliscosts: "Policy fee",
	poliscosts_are: "The cost for an insurance policy is a one-time charge of € 6,95. No matter if you have one or two insuran",
	youwillrecieve: "You will receive the insurance terms separate from you booking confirmation per email. The insurance starts as soon as the (first) payment has been made.",
	thank_you_for_your_request: "Merci beaucoup pour votre demande.",
	we_sent_confirmation_check_email: "Une copie de votre demande a été envoyée à votre adresse e-mail. Si vous n'avez pas reçu de courrier de notre part, il se peut qu'il soit dans votre boîte de courrier indésirable.",
	something_went_wrong_please_try_again: "Oups, quelque chose s'est mal passé, veuillez réessayer plus tard.",
	persons: "les gens",
	bedrooms: "chambres a coucher",
	minimum_week_price: "min. prix hebdomadaire",
	no_results: "Aucun résultat",
	agree_with: "En cliquant maintenant sur 'Réserver', vous adhérez aux",
	discount_reason: "Raison réduction.",
	results: "résultats",
	bathrooms: "salle de bain",
	you_need_to_give_reason: "Debe indicar un motivo de descuento válido.",
	"camper.arrival_date": "Date de collecte",
	"camper.departure_date": "Date de retour",
	"camper.arrival": "Ramasser",
	"camper.departure": "Remettre",
	"boat.arrival_date": "Date de collecte",
	"boat.departure_date": "Date de retour",
	"boat.arrival": "Ramasser",
	"boat.departure": "Remettre",
	"caravan.arrival_date": "Date d'arrivée",
	"caravan.departure_date": "Date de départ",
	"caravan.arrival": "Arrivée",
	"caravan.departure": "Départ",
	filters: "Les filtres",
	comply_insurance_card: "Je conviens que la carte d’assurance annulation me sera délivrée numériquement. Je reçois ceci avec ma confirmation de réservation.",
	"house.you_picked_arrival_date": "Votre date d'arrivée est",
	"camper.you_picked_arrival_date": "Votre date pick-up est",
	"house.pick_your_departure_in_the_calendar": "Sélectionnez une date de départ",
	"camper.pick_your_departure_in_the_calendar": "Sélectionnez une date de retour",
	"house.you_picked_departure_date": "Votre date de départ est",
	"camper.you_picked_departure_date": "Votre date de retour est",
	"house.pick_your_arrivaldate_in_the_calendar": "Choisissez une date d'arrivée",
	"camper.pick_your_arrivaldate_in_the_calendar": "Choisissez une date de pick-up",
	no: "Non",
	minimum_nights: "Au moins {minimum} nuits",
	can_only_take_insurance_in_de_be_nl: "Vous ne pouvez souscrire une assurance que si vous résidez aux Pays-Bas, en Allemagne ou en Belgique.",
	price_from: "Le prix de"
};

var es = {
	next: "pijltje",
	previous: "pijltje",
	price: "Precio",
	calculate: "Próximo",
	book: "Reservar",
	booked: "Reservado",
	booking: "Reserva",
	last_minute_discount: "Descuento de ultimo minuto",
	option: "Opción",
	choose_for_option: "Tome una opción para este período",
	included_in_price: "Incluido",
	rent_price: "Precio de alquiler",
	discount: "Reducción",
	extra_costs_included: "Costes extras incluidos",
	optional_costs: "Opciones extra",
	price_after_discount: "Precio de alquiler con descuento.",
	booking_from_til: "Fechas de reserva",
	total: "Total",
	stay_details: "Grupo de viaje",
	babies: "Numero de bebes",
	babies_from: "(hasta {babies} años)",
	adults: "Numero de adultos",
	adults_from: "(a partir de {age} años)",
	children: "Numero de niños",
	children_from: "(de {from} a {til} años)",
	"house.arrival_date": "Fecha de llegada",
	"house.departure_date": "Fecha de salida",
	"house.arrival": "llegada",
	"house.departure": "Salida",
	extra_costs_bookable: "Opciones extra",
	costs_on_site: "Costos adicionales en el lugar:",
	insurances: "Insurances",
	at_least_1_adult: "Elige al menos 1 adulto.",
	max_persons_reached: "Demasiadas personas han sido seleccionadas.",
	personal_details: "Tus datos",
	required: "Este campo es requerido.",
	cancel_insurance_all_risk: "All Risk",
	cancel_insurance_normal: "Standard",
	none: "None",
	cancel_insurance: "Cancellation insurance",
	insurance_costs: "Insurance Costs",
	choose: "Choose",
	yes: "Yes",
	booking_details: "Detalles de la reserva",
	based_on_one_person: "Basado en {persons} personas",
	return_to_calendar: "Volver al calendario",
	close: "Cerrar",
	cancel_insurance_normal_long: "Standard Cancellation Insurance",
	cancel_insurance_normal_desc: "Our standard cancellation insurance means that you are properly insured if you have to cancel your trip. In addition to the cancellation charges, the costs of any unused travel days are also covered. If you miss any part of your trip, because you have to go home earlier for example, you will receive an allowance for each day missed.",
	cancel_insurance_all_risk_long: "All Risk Cancellation Insurance",
	cancel_insurance_desc: "Unfortunately, circumstances may arise which can force you to cancel your holiday. It might also be necessary to leave or return earlier. Cancellation insurance means you do not have to bear the costs involved. Only residents from the Netherlands, Belgium and Germany can take out the insurance. We offer a choice of two types of cancellation insurance:",
	cancel_insurance_all_risk_desc: "With All-Risk Cancellation, you will be reimbursed 100% of the cancellation costs if you cancel for a standard reason, such as an illness that prevents you from traveling. Or the death of a grandparent. Do you want to cancel for another reason that is important to you personally? Then you will be reimbursed 75% of the cancellation costs. But beware: this insurance does set a few conditions for canceling. For example, the reason for cancellation must be 'unforeseen' and 'through no fault of your own'. The insurance therefore does not provide cover for cancellation reasons of which you were already aware before taking out the insurance (not unforeseen) or which you could have done yourself (not through your own fault). Consult the conditions for the exceptions.",
	terms_and_costs: "Premiums and Conditions",
	costs_normal_cancel_insurance: "Standard Cancellation Insurance Premium:",
	costs_allrisk_cancel_insurance: "All Risk Cancellation Insurance Premium:",
	"666_costs": "6.66% of the travel costs",
	"847_costs": "8.47% of the travel costs",
	more_information: "More information:",
	show_terms: "Show conditions",
	terms: "Terms",
	remark: "Observación",
	"9persons_9addresses": "The Insurance will pay for up to 9 persons, who live at 9 different addresses,",
	or: "or",
	"9persons_4addresses": "The insurance pays out for an unlimited number of people who live at a maximum of 4 different addresses.",
	poliscosts: "Policy fee",
	poliscosts_are: "The cost for an insurance policy is a one-time charge of € 6,95. No matter if you have one or two insuran",
	youwillrecieve: "You will receive the insurance terms separate from you booking confirmation per email. The insurance starts as soon as the (first) payment has been made.",
	thank_you_for_your_request: "Muchas gracias por su solicitud.",
	we_sent_confirmation_check_email: "Se ha enviado una copia de su solicitud a su dirección de correo electrónico. Si no ha recibido ningún correo de nuestra parte, es posible que esté en su buzón de correo no deseado.",
	something_went_wrong_please_try_again: "Vaya, algo salió mal, inténtalo de nuevo más tarde.",
	persons: "personas",
	bedrooms: "dormitorios",
	minimum_week_price: "min. precio semanal",
	no_results: "Sin resultados",
	agree_with: "Al hacer clic en ‘Reservar’, acepta los Términos y condiciones",
	discount_reason: "Razón de descuento.",
	results: "resultados",
	bathrooms: "baños",
	you_need_to_give_reason: "Vous devez indiquer un motif de réduction valide",
	"camper.arrival_date": "Fecha de recogida",
	"camper.departure_date": "Fecha de regreso",
	"camper.arrival": "Recoger",
	"camper.departure": "Entregar",
	"boat.arrival_date": "Fecha de recogida",
	"boat.departure_date": "Fecha de regreso",
	"boat.arrival": "Recoger",
	"boat.departure": "Entregar",
	"caravan.arrival_date": "Fecha de llegada",
	"caravan.departure_date": "Fecha de salida",
	"caravan.arrival": "llegada",
	"caravan.departure": "Salida",
	filters: "Filtros",
	comply_insurance_card: "Estoy de acuerdo en que la tarjeta de seguro de cancelación será emitida digitalmente para mí. Recibo esto con mi confirmación de reserva.",
	"house.you_picked_arrival_date": "Su fecha de llegada es",
	"camper.you_picked_arrival_date": "Su fecha de recogida es",
	"house.pick_your_departure_in_the_calendar": "Seleccione una fecha de salida",
	"camper.pick_your_departure_in_the_calendar": "Seleccione una fecha de regreso",
	"house.you_picked_departure_date": "Su fecha de salida es",
	"camper.you_picked_departure_date": "Su fecha de retorno es",
	"house.pick_your_arrivaldate_in_the_calendar": "Elija una fecha de llegada",
	"camper.pick_your_arrivaldate_in_the_calendar": "Elija una fecha de recogida",
	no: "No",
	minimum_nights: "Al menos {minimum} noches",
	can_only_take_insurance_in_de_be_nl: "Solo puede contratar un seguro si vive en los Países Bajos, Alemania o Bélgica.",
	price_from: "Precio de"
};

var it = {
	next: "pijltje",
	previous: "pijltje",
	price: "Prezzo",
	calculate: "Prossimo",
	book: "Prenotare",
	booked: "Prenotato",
	booking: "Prenotazione",
	last_minute_discount: "Sconto last minute",
	option: "Opzione",
	choose_for_option: "Prendi un'opzione per questo periodo",
	included_in_price: "compreso",
	rent_price: "Prezzo di affitto",
	discount: "Riduzione",
	extra_costs_included: "Costi aggiuntivi inclusi",
	optional_costs: "Opzioni extra",
	price_after_discount: "Prezzo di affitto incluso sconto",
	booking_from_til: "Date di prenotazione",
	total: "Total",
	stay_details: "Gruppo di viaggio",
	babies: "Numero di bambini",
	babies_from: "(fino a {babies} anni)",
	adults: "Numero di adulti",
	adults_from: "(dai {age} anni)",
	children: "Numero di bambini",
	children_from: "(da {from} a {til} anni)",
	"house.arrival_date": "Data di arrivo",
	"house.departure_date": "Data di partenza",
	"house.arrival": "Arrivo",
	"house.departure": "Partenza",
	extra_costs_bookable: "Opzioni extra",
	costs_on_site: "Possibili costi aggiuntivi sul posto:",
	insurances: "Insurances",
	at_least_1_adult: "Scegli almeno 1 adulto.",
	max_persons_reached: "Sono state selezionate troppe persone.",
	personal_details: "I tuoi dati",
	required: "Questo campo è obbligatorio.",
	cancel_insurance_all_risk: "All Risk",
	cancel_insurance_normal: "Standard",
	none: "None",
	cancel_insurance: "Cancellation insurance",
	insurance_costs: "Insurance Costs",
	choose: "Choose",
	yes: "Yes",
	booking_details: "Dettagli della prenotazione",
	based_on_one_person: "Basato su {persons} persone",
	return_to_calendar: "Ritorna al calendario",
	close: "Vicino",
	cancel_insurance_normal_long: "Standard Cancellation Insurance",
	cancel_insurance_normal_desc: "Our standard cancellation insurance means that you are properly insured if you have to cancel your trip. In addition to the cancellation charges, the costs of any unused travel days are also covered. If you miss any part of your trip, because you have to go home earlier for example, you will receive an allowance for each day missed.",
	cancel_insurance_all_risk_long: "All Risk Cancellation Insurance",
	cancel_insurance_desc: "Unfortunately, circumstances may arise which can force you to cancel your holiday. It might also be necessary to leave or return earlier. Cancellation insurance means you do not have to bear the costs involved. Only residents from the Netherlands, Belgium and Germany can take out the insurance. We offer a choice of two types of cancellation insurance:",
	cancel_insurance_all_risk_desc: "With All-Risk Cancellation, you will be reimbursed 100% of the cancellation costs if you cancel for a standard reason, such as an illness that prevents you from traveling. Or the death of a grandparent. Do you want to cancel for another reason that is important to you personally? Then you will be reimbursed 75% of the cancellation costs.\n But beware: this insurance does set a few conditions for canceling. For example, the reason for cancellation must be 'unforeseen' and 'through no fault of your own'. The insurance therefore does not provide cover for cancellation reasons of which you were already aware before taking out the insurance (not unforeseen) or which you could have done yourself (not through your own fault). Consult the conditions for the exceptions.",
	terms_and_costs: "Premiums and Conditions",
	costs_normal_cancel_insurance: "Standard Cancellation Insurance Premium:",
	costs_allrisk_cancel_insurance: "All Risk Cancellation Insurance Premium:",
	"666_costs": "6.66% of the travel costs",
	"847_costs": "8.47% of the travel costs",
	more_information: "More information:",
	show_terms: "Show conditions",
	terms: "Terms",
	remark: "Osservazione",
	"9persons_9addresses": "The Insurance will pay for up to 9 persons, who live at 9 different addresses,",
	or: "or",
	"9persons_4addresses": "The insurance pays out for an unlimited number of people who live at a maximum of 4 different addresses.",
	poliscosts: "Policy fee",
	poliscosts_are: "The cost for an insurance policy is a one-time charge of € 6,95. No matter if you have one or two insuran",
	youwillrecieve: "You will receive the insurance terms separate from you booking confirmation per email. The insurance starts as soon as the (first) payment has been made.",
	thank_you_for_your_request: "Grazie mille per la tua richiesta.",
	we_sent_confirmation_check_email: "Una copia della tua richiesta è stata inviata al tuo indirizzo e-mail. Se non hai ricevuto alcuna posta da noi, potrebbe essere che sia nella tua casella di spam.",
	something_went_wrong_please_try_again: "Oops, qualcosa è andato storto, ti preghiamo di riprovare più tardi.",
	persons: "persone",
	bedrooms: "camere da letto",
	minimum_week_price: "prezzo settimanale minimo",
	no_results: "Nessun risultato",
	agree_with: "Cliccando ora su 'prenotazione definitiva', ti iscrivi",
	discount_reason: "Sconto di ragione.",
	results: "risultati",
	bathrooms: "bagni",
	you_need_to_give_reason: "Devi indicare un motivo di sconto valido",
	"camper.arrival_date": "Data di ritiro",
	"camper.departure_date": "Data di ritorno",
	"camper.arrival": "Pick up",
	"camper.departure": "Mano dentro",
	"boat.arrival_date": "Data di ritiro",
	"boat.departure_date": "Data di ritorno",
	"boat.arrival": "Pick up",
	"boat.departure": "Mano dentro",
	"caravan.arrival_date": "Data di arrivo",
	"caravan.departure_date": "Data di partenza",
	"caravan.arrival": "Arrivo",
	"caravan.departure": "Partenza",
	filters: "Filtri",
	comply_insurance_card: "Sono d'accordo che la carta di assicurazione di annullamento verrà emessa in digitale. Lo ricevo con la mia conferma di prenotazione.",
	"house.you_picked_arrival_date": "La vostra data di arrivo è",
	"camper.you_picked_arrival_date": "La vostra data di ritiro è",
	"house.pick_your_departure_in_the_calendar": "Selezionare una data di partenza",
	"camper.pick_your_departure_in_the_calendar": "Seleziona una data di ritorno",
	"house.you_picked_departure_date": "La data di partenza è",
	"camper.you_picked_departure_date": "La data di ritorno è",
	"house.pick_your_arrivaldate_in_the_calendar": "Scegliere una data di arrivo",
	"camper.pick_your_arrivaldate_in_the_calendar": "Scegli una data di ritiro",
	no: "No",
	minimum_nights: "Almeno {minimum} notti",
	can_only_take_insurance_in_de_be_nl: "Puoi stipulare un'assicurazione solo se vivi nei Paesi Bassi, in Germania o in Belgio.",
	price_from: "Prezzo da"
};

function Portal(_ref) {
  var portalCode = _ref.portalCode,
      objectCode = _ref.objectCode,
      pageType = _ref.pageType,
      locale = _ref.locale,
      filters = _ref.filters,
      api_url = _ref.api_url;
  var errors = IntegrationError({
    portalCode: portalCode,
    pageType: pageType,
    locale: locale,
    filters: filters
  });

  if (errors) {
    return errors;
  }

  if (!locale) {
    locale = 'en';
  }

  var client = new ApolloClient({
    uri: api_url,
    cache: new InMemoryCache(),
    headers: {
      locale: locale
    },
    defaultOptions: {
      watchQuery: {
        fetchPolicy: "cache-and-network"
      }
    }
  });
  var messages = {
    en: en,
    nl: nl,
    de: de,
    fr: fr,
    es: es,
    it: it
  };
  addLocaleData([].concat(_toConsumableArray$5(enData), _toConsumableArray$5(frData), _toConsumableArray$5(esData), _toConsumableArray$5(nlData), _toConsumableArray$5(itData), _toConsumableArray$5(deData)));
  window.__localeId__ = locale;
  return /*#__PURE__*/React__default['default'].createElement(ApolloProvider, {
    client: client
  }, /*#__PURE__*/React__default['default'].createElement(IntlProvider, {
    locale: locale,
    messages: messages[locale]
  }, /*#__PURE__*/React__default['default'].createElement(App, {
    portalCode: portalCode,
    objectCode: objectCode,
    pageType: pageType,
    locale: locale,
    filters: filters
  })));
}

Portal.defaultProps = {
  pageType: null,
  api_url: "https://api.bukazu.com/graphql"
};

module.exports = Portal;
